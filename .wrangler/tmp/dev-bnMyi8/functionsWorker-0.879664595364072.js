var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });

// .wrangler/tmp/pages-rTzZFR/functionsWorker-0.879664595364072.mjs
var __create = Object.create;
var __defProp2 = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name2 = /* @__PURE__ */ __name((target, value) => __defProp2(target, "name", { value, configurable: true }), "__name");
var __esm = /* @__PURE__ */ __name((fn, res) => /* @__PURE__ */ __name(function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
}, "__init"), "__esm");
var __commonJS = /* @__PURE__ */ __name((cb2, mod) => /* @__PURE__ */ __name(function __require() {
  return mod || (0, cb2[__getOwnPropNames(cb2)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
}, "__require"), "__commonJS");
var __export = /* @__PURE__ */ __name((target, all) => {
  for (var name in all)
    __defProp2(target, name, { get: all[name], enumerable: true });
}, "__export");
var __copyProps = /* @__PURE__ */ __name((to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp2(to, key, { get: /* @__PURE__ */ __name(() => from[key], "get"), enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
}, "__copyProps");
var __toESM = /* @__PURE__ */ __name((mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
  mod
)), "__toESM");
// @__NO_SIDE_EFFECTS__
function $constructor(name, initializer3, params) {
  function init(inst, def) {
    var _a2;
    Object.defineProperty(inst, "_zod", {
      value: inst._zod ?? {},
      enumerable: false
    });
    (_a2 = inst._zod).traits ?? (_a2.traits = /* @__PURE__ */ new Set());
    inst._zod.traits.add(name);
    initializer3(inst, def);
    for (const k2 in _.prototype) {
      if (!(k2 in inst))
        Object.defineProperty(inst, k2, { value: _.prototype[k2].bind(inst) });
    }
    inst._zod.constr = _;
    inst._zod.def = def;
  }
  __name(init, "init");
  __name2(init, "init");
  const Parent = params?.Parent ?? Object;
  class Definition extends Parent {
    static {
      __name(this, "Definition");
    }
    static {
      __name2(this, "Definition");
    }
  }
  Object.defineProperty(Definition, "name", { value: name });
  function _(def) {
    var _a2;
    const inst = params?.Parent ? new Definition() : this;
    init(inst, def);
    (_a2 = inst._zod).deferred ?? (_a2.deferred = []);
    for (const fn of inst._zod.deferred) {
      fn();
    }
    return inst;
  }
  __name(_, "_");
  __name2(_, "_");
  Object.defineProperty(_, "init", { value: init });
  Object.defineProperty(_, Symbol.hasInstance, {
    value: /* @__PURE__ */ __name2((inst) => {
      if (params?.Parent && inst instanceof params.Parent)
        return true;
      return inst?._zod?.traits?.has(name);
    }, "value")
  });
  Object.defineProperty(_, "name", { value: name });
  return _;
}
__name($constructor, "$constructor");
function config(newConfig) {
  if (newConfig)
    Object.assign(globalConfig, newConfig);
  return globalConfig;
}
__name(config, "config");
var NEVER;
var $brand;
var $ZodAsyncError;
var $ZodEncodeError;
var globalConfig;
var init_core = __esm({
  "../node_modules/zod/v4/core/core.js"() {
    init_functionsRoutes_0_09879299104094341();
    NEVER = Object.freeze({
      status: "aborted"
    });
    __name2($constructor, "$constructor");
    $brand = Symbol("zod_brand");
    $ZodAsyncError = class extends Error {
      static {
        __name(this, "$ZodAsyncError");
      }
      static {
        __name2(this, "$ZodAsyncError");
      }
      constructor() {
        super(`Encountered Promise during synchronous parse. Use .parseAsync() instead.`);
      }
    };
    $ZodEncodeError = class extends Error {
      static {
        __name(this, "$ZodEncodeError");
      }
      static {
        __name2(this, "$ZodEncodeError");
      }
      constructor(name) {
        super(`Encountered unidirectional transform during encode: ${name}`);
        this.name = "ZodEncodeError";
      }
    };
    globalConfig = {};
    __name2(config, "config");
  }
});
var util_exports = {};
__export(util_exports, {
  BIGINT_FORMAT_RANGES: /* @__PURE__ */ __name(() => BIGINT_FORMAT_RANGES, "BIGINT_FORMAT_RANGES"),
  Class: /* @__PURE__ */ __name(() => Class, "Class"),
  NUMBER_FORMAT_RANGES: /* @__PURE__ */ __name(() => NUMBER_FORMAT_RANGES, "NUMBER_FORMAT_RANGES"),
  aborted: /* @__PURE__ */ __name(() => aborted, "aborted"),
  allowsEval: /* @__PURE__ */ __name(() => allowsEval, "allowsEval"),
  assert: /* @__PURE__ */ __name(() => assert, "assert"),
  assertEqual: /* @__PURE__ */ __name(() => assertEqual, "assertEqual"),
  assertIs: /* @__PURE__ */ __name(() => assertIs, "assertIs"),
  assertNever: /* @__PURE__ */ __name(() => assertNever, "assertNever"),
  assertNotEqual: /* @__PURE__ */ __name(() => assertNotEqual, "assertNotEqual"),
  assignProp: /* @__PURE__ */ __name(() => assignProp, "assignProp"),
  base64ToUint8Array: /* @__PURE__ */ __name(() => base64ToUint8Array, "base64ToUint8Array"),
  base64urlToUint8Array: /* @__PURE__ */ __name(() => base64urlToUint8Array, "base64urlToUint8Array"),
  cached: /* @__PURE__ */ __name(() => cached, "cached"),
  captureStackTrace: /* @__PURE__ */ __name(() => captureStackTrace, "captureStackTrace"),
  cleanEnum: /* @__PURE__ */ __name(() => cleanEnum, "cleanEnum"),
  cleanRegex: /* @__PURE__ */ __name(() => cleanRegex, "cleanRegex"),
  clone: /* @__PURE__ */ __name(() => clone, "clone"),
  cloneDef: /* @__PURE__ */ __name(() => cloneDef, "cloneDef"),
  createTransparentProxy: /* @__PURE__ */ __name(() => createTransparentProxy, "createTransparentProxy"),
  defineLazy: /* @__PURE__ */ __name(() => defineLazy, "defineLazy"),
  esc: /* @__PURE__ */ __name(() => esc, "esc"),
  escapeRegex: /* @__PURE__ */ __name(() => escapeRegex, "escapeRegex"),
  extend: /* @__PURE__ */ __name(() => extend, "extend"),
  finalizeIssue: /* @__PURE__ */ __name(() => finalizeIssue, "finalizeIssue"),
  floatSafeRemainder: /* @__PURE__ */ __name(() => floatSafeRemainder, "floatSafeRemainder"),
  getElementAtPath: /* @__PURE__ */ __name(() => getElementAtPath, "getElementAtPath"),
  getEnumValues: /* @__PURE__ */ __name(() => getEnumValues, "getEnumValues"),
  getLengthableOrigin: /* @__PURE__ */ __name(() => getLengthableOrigin, "getLengthableOrigin"),
  getParsedType: /* @__PURE__ */ __name(() => getParsedType, "getParsedType"),
  getSizableOrigin: /* @__PURE__ */ __name(() => getSizableOrigin, "getSizableOrigin"),
  hexToUint8Array: /* @__PURE__ */ __name(() => hexToUint8Array, "hexToUint8Array"),
  isObject: /* @__PURE__ */ __name(() => isObject, "isObject"),
  isPlainObject: /* @__PURE__ */ __name(() => isPlainObject, "isPlainObject"),
  issue: /* @__PURE__ */ __name(() => issue, "issue"),
  joinValues: /* @__PURE__ */ __name(() => joinValues, "joinValues"),
  jsonStringifyReplacer: /* @__PURE__ */ __name(() => jsonStringifyReplacer, "jsonStringifyReplacer"),
  merge: /* @__PURE__ */ __name(() => merge, "merge"),
  mergeDefs: /* @__PURE__ */ __name(() => mergeDefs, "mergeDefs"),
  normalizeParams: /* @__PURE__ */ __name(() => normalizeParams, "normalizeParams"),
  nullish: /* @__PURE__ */ __name(() => nullish, "nullish"),
  numKeys: /* @__PURE__ */ __name(() => numKeys, "numKeys"),
  objectClone: /* @__PURE__ */ __name(() => objectClone, "objectClone"),
  omit: /* @__PURE__ */ __name(() => omit, "omit"),
  optionalKeys: /* @__PURE__ */ __name(() => optionalKeys, "optionalKeys"),
  partial: /* @__PURE__ */ __name(() => partial, "partial"),
  pick: /* @__PURE__ */ __name(() => pick, "pick"),
  prefixIssues: /* @__PURE__ */ __name(() => prefixIssues, "prefixIssues"),
  primitiveTypes: /* @__PURE__ */ __name(() => primitiveTypes, "primitiveTypes"),
  promiseAllObject: /* @__PURE__ */ __name(() => promiseAllObject, "promiseAllObject"),
  propertyKeyTypes: /* @__PURE__ */ __name(() => propertyKeyTypes, "propertyKeyTypes"),
  randomString: /* @__PURE__ */ __name(() => randomString, "randomString"),
  required: /* @__PURE__ */ __name(() => required, "required"),
  safeExtend: /* @__PURE__ */ __name(() => safeExtend, "safeExtend"),
  shallowClone: /* @__PURE__ */ __name(() => shallowClone, "shallowClone"),
  stringifyPrimitive: /* @__PURE__ */ __name(() => stringifyPrimitive, "stringifyPrimitive"),
  uint8ArrayToBase64: /* @__PURE__ */ __name(() => uint8ArrayToBase64, "uint8ArrayToBase64"),
  uint8ArrayToBase64url: /* @__PURE__ */ __name(() => uint8ArrayToBase64url, "uint8ArrayToBase64url"),
  uint8ArrayToHex: /* @__PURE__ */ __name(() => uint8ArrayToHex, "uint8ArrayToHex"),
  unwrapMessage: /* @__PURE__ */ __name(() => unwrapMessage, "unwrapMessage")
});
function assertEqual(val) {
  return val;
}
__name(assertEqual, "assertEqual");
function assertNotEqual(val) {
  return val;
}
__name(assertNotEqual, "assertNotEqual");
function assertIs(_arg) {
}
__name(assertIs, "assertIs");
function assertNever(_x2) {
  throw new Error();
}
__name(assertNever, "assertNever");
function assert(_) {
}
__name(assert, "assert");
function getEnumValues(entries) {
  const numericValues = Object.values(entries).filter((v2) => typeof v2 === "number");
  const values = Object.entries(entries).filter(([k2, _]) => numericValues.indexOf(+k2) === -1).map(([_, v2]) => v2);
  return values;
}
__name(getEnumValues, "getEnumValues");
function joinValues(array2, separator = "|") {
  return array2.map((val) => stringifyPrimitive(val)).join(separator);
}
__name(joinValues, "joinValues");
function jsonStringifyReplacer(_, value) {
  if (typeof value === "bigint")
    return value.toString();
  return value;
}
__name(jsonStringifyReplacer, "jsonStringifyReplacer");
function cached(getter) {
  const set2 = false;
  return {
    get value() {
      if (!set2) {
        const value = getter();
        Object.defineProperty(this, "value", { value });
        return value;
      }
      throw new Error("cached value already set");
    }
  };
}
__name(cached, "cached");
function nullish(input) {
  return input === null || input === void 0;
}
__name(nullish, "nullish");
function cleanRegex(source) {
  const start = source.startsWith("^") ? 1 : 0;
  const end = source.endsWith("$") ? source.length - 1 : source.length;
  return source.slice(start, end);
}
__name(cleanRegex, "cleanRegex");
function floatSafeRemainder(val, step) {
  const valDecCount = (val.toString().split(".")[1] || "").length;
  const stepString = step.toString();
  let stepDecCount = (stepString.split(".")[1] || "").length;
  if (stepDecCount === 0 && /\d?e-\d?/.test(stepString)) {
    const match2 = stepString.match(/\d?e-(\d?)/);
    if (match2?.[1]) {
      stepDecCount = Number.parseInt(match2[1]);
    }
  }
  const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
  const valInt = Number.parseInt(val.toFixed(decCount).replace(".", ""));
  const stepInt = Number.parseInt(step.toFixed(decCount).replace(".", ""));
  return valInt % stepInt / 10 ** decCount;
}
__name(floatSafeRemainder, "floatSafeRemainder");
function defineLazy(object2, key, getter) {
  let value = void 0;
  Object.defineProperty(object2, key, {
    get() {
      if (value === EVALUATING) {
        return void 0;
      }
      if (value === void 0) {
        value = EVALUATING;
        value = getter();
      }
      return value;
    },
    set(v2) {
      Object.defineProperty(object2, key, {
        value: v2
        // configurable: true,
      });
    },
    configurable: true
  });
}
__name(defineLazy, "defineLazy");
function objectClone(obj) {
  return Object.create(Object.getPrototypeOf(obj), Object.getOwnPropertyDescriptors(obj));
}
__name(objectClone, "objectClone");
function assignProp(target, prop, value) {
  Object.defineProperty(target, prop, {
    value,
    writable: true,
    enumerable: true,
    configurable: true
  });
}
__name(assignProp, "assignProp");
function mergeDefs(...defs) {
  const mergedDescriptors = {};
  for (const def of defs) {
    const descriptors = Object.getOwnPropertyDescriptors(def);
    Object.assign(mergedDescriptors, descriptors);
  }
  return Object.defineProperties({}, mergedDescriptors);
}
__name(mergeDefs, "mergeDefs");
function cloneDef(schema) {
  return mergeDefs(schema._zod.def);
}
__name(cloneDef, "cloneDef");
function getElementAtPath(obj, path) {
  if (!path)
    return obj;
  return path.reduce((acc, key) => acc?.[key], obj);
}
__name(getElementAtPath, "getElementAtPath");
function promiseAllObject(promisesObj) {
  const keys = Object.keys(promisesObj);
  const promises = keys.map((key) => promisesObj[key]);
  return Promise.all(promises).then((results) => {
    const resolvedObj = {};
    for (let i2 = 0; i2 < keys.length; i2++) {
      resolvedObj[keys[i2]] = results[i2];
    }
    return resolvedObj;
  });
}
__name(promiseAllObject, "promiseAllObject");
function randomString(length = 10) {
  const chars = "abcdefghijklmnopqrstuvwxyz";
  let str = "";
  for (let i2 = 0; i2 < length; i2++) {
    str += chars[Math.floor(Math.random() * chars.length)];
  }
  return str;
}
__name(randomString, "randomString");
function esc(str) {
  return JSON.stringify(str);
}
__name(esc, "esc");
function isObject(data) {
  return typeof data === "object" && data !== null && !Array.isArray(data);
}
__name(isObject, "isObject");
function isPlainObject(o2) {
  if (isObject(o2) === false)
    return false;
  const ctor = o2.constructor;
  if (ctor === void 0)
    return true;
  const prot = ctor.prototype;
  if (isObject(prot) === false)
    return false;
  if (Object.prototype.hasOwnProperty.call(prot, "isPrototypeOf") === false) {
    return false;
  }
  return true;
}
__name(isPlainObject, "isPlainObject");
function shallowClone(o2) {
  if (isPlainObject(o2))
    return { ...o2 };
  if (Array.isArray(o2))
    return [...o2];
  return o2;
}
__name(shallowClone, "shallowClone");
function numKeys(data) {
  let keyCount = 0;
  for (const key in data) {
    if (Object.prototype.hasOwnProperty.call(data, key)) {
      keyCount++;
    }
  }
  return keyCount;
}
__name(numKeys, "numKeys");
function escapeRegex(str) {
  return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
__name(escapeRegex, "escapeRegex");
function clone(inst, def, params) {
  const cl2 = new inst._zod.constr(def ?? inst._zod.def);
  if (!def || params?.parent)
    cl2._zod.parent = inst;
  return cl2;
}
__name(clone, "clone");
function normalizeParams(_params) {
  const params = _params;
  if (!params)
    return {};
  if (typeof params === "string")
    return { error: /* @__PURE__ */ __name2(() => params, "error") };
  if (params?.message !== void 0) {
    if (params?.error !== void 0)
      throw new Error("Cannot specify both `message` and `error` params");
    params.error = params.message;
  }
  delete params.message;
  if (typeof params.error === "string")
    return { ...params, error: /* @__PURE__ */ __name2(() => params.error, "error") };
  return params;
}
__name(normalizeParams, "normalizeParams");
function createTransparentProxy(getter) {
  let target;
  return new Proxy({}, {
    get(_, prop, receiver) {
      target ?? (target = getter());
      return Reflect.get(target, prop, receiver);
    },
    set(_, prop, value, receiver) {
      target ?? (target = getter());
      return Reflect.set(target, prop, value, receiver);
    },
    has(_, prop) {
      target ?? (target = getter());
      return Reflect.has(target, prop);
    },
    deleteProperty(_, prop) {
      target ?? (target = getter());
      return Reflect.deleteProperty(target, prop);
    },
    ownKeys(_) {
      target ?? (target = getter());
      return Reflect.ownKeys(target);
    },
    getOwnPropertyDescriptor(_, prop) {
      target ?? (target = getter());
      return Reflect.getOwnPropertyDescriptor(target, prop);
    },
    defineProperty(_, prop, descriptor) {
      target ?? (target = getter());
      return Reflect.defineProperty(target, prop, descriptor);
    }
  });
}
__name(createTransparentProxy, "createTransparentProxy");
function stringifyPrimitive(value) {
  if (typeof value === "bigint")
    return value.toString() + "n";
  if (typeof value === "string")
    return `"${value}"`;
  return `${value}`;
}
__name(stringifyPrimitive, "stringifyPrimitive");
function optionalKeys(shape) {
  return Object.keys(shape).filter((k2) => {
    return shape[k2]._zod.optin === "optional" && shape[k2]._zod.optout === "optional";
  });
}
__name(optionalKeys, "optionalKeys");
function pick(schema, mask) {
  const currDef = schema._zod.def;
  const def = mergeDefs(schema._zod.def, {
    get shape() {
      const newShape = {};
      for (const key in mask) {
        if (!(key in currDef.shape)) {
          throw new Error(`Unrecognized key: "${key}"`);
        }
        if (!mask[key])
          continue;
        newShape[key] = currDef.shape[key];
      }
      assignProp(this, "shape", newShape);
      return newShape;
    },
    checks: []
  });
  return clone(schema, def);
}
__name(pick, "pick");
function omit(schema, mask) {
  const currDef = schema._zod.def;
  const def = mergeDefs(schema._zod.def, {
    get shape() {
      const newShape = { ...schema._zod.def.shape };
      for (const key in mask) {
        if (!(key in currDef.shape)) {
          throw new Error(`Unrecognized key: "${key}"`);
        }
        if (!mask[key])
          continue;
        delete newShape[key];
      }
      assignProp(this, "shape", newShape);
      return newShape;
    },
    checks: []
  });
  return clone(schema, def);
}
__name(omit, "omit");
function extend(schema, shape) {
  if (!isPlainObject(shape)) {
    throw new Error("Invalid input to extend: expected a plain object");
  }
  const checks = schema._zod.def.checks;
  const hasChecks = checks && checks.length > 0;
  if (hasChecks) {
    throw new Error("Object schemas containing refinements cannot be extended. Use `.safeExtend()` instead.");
  }
  const def = mergeDefs(schema._zod.def, {
    get shape() {
      const _shape = { ...schema._zod.def.shape, ...shape };
      assignProp(this, "shape", _shape);
      return _shape;
    },
    checks: []
  });
  return clone(schema, def);
}
__name(extend, "extend");
function safeExtend(schema, shape) {
  if (!isPlainObject(shape)) {
    throw new Error("Invalid input to safeExtend: expected a plain object");
  }
  const def = {
    ...schema._zod.def,
    get shape() {
      const _shape = { ...schema._zod.def.shape, ...shape };
      assignProp(this, "shape", _shape);
      return _shape;
    },
    checks: schema._zod.def.checks
  };
  return clone(schema, def);
}
__name(safeExtend, "safeExtend");
function merge(a2, b2) {
  const def = mergeDefs(a2._zod.def, {
    get shape() {
      const _shape = { ...a2._zod.def.shape, ...b2._zod.def.shape };
      assignProp(this, "shape", _shape);
      return _shape;
    },
    get catchall() {
      return b2._zod.def.catchall;
    },
    checks: []
    // delete existing checks
  });
  return clone(a2, def);
}
__name(merge, "merge");
function partial(Class2, schema, mask) {
  const def = mergeDefs(schema._zod.def, {
    get shape() {
      const oldShape = schema._zod.def.shape;
      const shape = { ...oldShape };
      if (mask) {
        for (const key in mask) {
          if (!(key in oldShape)) {
            throw new Error(`Unrecognized key: "${key}"`);
          }
          if (!mask[key])
            continue;
          shape[key] = Class2 ? new Class2({
            type: "optional",
            innerType: oldShape[key]
          }) : oldShape[key];
        }
      } else {
        for (const key in oldShape) {
          shape[key] = Class2 ? new Class2({
            type: "optional",
            innerType: oldShape[key]
          }) : oldShape[key];
        }
      }
      assignProp(this, "shape", shape);
      return shape;
    },
    checks: []
  });
  return clone(schema, def);
}
__name(partial, "partial");
function required(Class2, schema, mask) {
  const def = mergeDefs(schema._zod.def, {
    get shape() {
      const oldShape = schema._zod.def.shape;
      const shape = { ...oldShape };
      if (mask) {
        for (const key in mask) {
          if (!(key in shape)) {
            throw new Error(`Unrecognized key: "${key}"`);
          }
          if (!mask[key])
            continue;
          shape[key] = new Class2({
            type: "nonoptional",
            innerType: oldShape[key]
          });
        }
      } else {
        for (const key in oldShape) {
          shape[key] = new Class2({
            type: "nonoptional",
            innerType: oldShape[key]
          });
        }
      }
      assignProp(this, "shape", shape);
      return shape;
    },
    checks: []
  });
  return clone(schema, def);
}
__name(required, "required");
function aborted(x2, startIndex = 0) {
  if (x2.aborted === true)
    return true;
  for (let i2 = startIndex; i2 < x2.issues.length; i2++) {
    if (x2.issues[i2]?.continue !== true) {
      return true;
    }
  }
  return false;
}
__name(aborted, "aborted");
function prefixIssues(path, issues) {
  return issues.map((iss) => {
    var _a2;
    (_a2 = iss).path ?? (_a2.path = []);
    iss.path.unshift(path);
    return iss;
  });
}
__name(prefixIssues, "prefixIssues");
function unwrapMessage(message) {
  return typeof message === "string" ? message : message?.message;
}
__name(unwrapMessage, "unwrapMessage");
function finalizeIssue(iss, ctx, config2) {
  const full = { ...iss, path: iss.path ?? [] };
  if (!iss.message) {
    const message = unwrapMessage(iss.inst?._zod.def?.error?.(iss)) ?? unwrapMessage(ctx?.error?.(iss)) ?? unwrapMessage(config2.customError?.(iss)) ?? unwrapMessage(config2.localeError?.(iss)) ?? "Invalid input";
    full.message = message;
  }
  delete full.inst;
  delete full.continue;
  if (!ctx?.reportInput) {
    delete full.input;
  }
  return full;
}
__name(finalizeIssue, "finalizeIssue");
function getSizableOrigin(input) {
  if (input instanceof Set)
    return "set";
  if (input instanceof Map)
    return "map";
  if (input instanceof File)
    return "file";
  return "unknown";
}
__name(getSizableOrigin, "getSizableOrigin");
function getLengthableOrigin(input) {
  if (Array.isArray(input))
    return "array";
  if (typeof input === "string")
    return "string";
  return "unknown";
}
__name(getLengthableOrigin, "getLengthableOrigin");
function issue(...args) {
  const [iss, input, inst] = args;
  if (typeof iss === "string") {
    return {
      message: iss,
      code: "custom",
      input,
      inst
    };
  }
  return { ...iss };
}
__name(issue, "issue");
function cleanEnum(obj) {
  return Object.entries(obj).filter(([k2, _]) => {
    return Number.isNaN(Number.parseInt(k2, 10));
  }).map((el) => el[1]);
}
__name(cleanEnum, "cleanEnum");
function base64ToUint8Array(base643) {
  const binaryString = atob(base643);
  const bytes = new Uint8Array(binaryString.length);
  for (let i2 = 0; i2 < binaryString.length; i2++) {
    bytes[i2] = binaryString.charCodeAt(i2);
  }
  return bytes;
}
__name(base64ToUint8Array, "base64ToUint8Array");
function uint8ArrayToBase64(bytes) {
  let binaryString = "";
  for (let i2 = 0; i2 < bytes.length; i2++) {
    binaryString += String.fromCharCode(bytes[i2]);
  }
  return btoa(binaryString);
}
__name(uint8ArrayToBase64, "uint8ArrayToBase64");
function base64urlToUint8Array(base64url3) {
  const base643 = base64url3.replace(/-/g, "+").replace(/_/g, "/");
  const padding = "=".repeat((4 - base643.length % 4) % 4);
  return base64ToUint8Array(base643 + padding);
}
__name(base64urlToUint8Array, "base64urlToUint8Array");
function uint8ArrayToBase64url(bytes) {
  return uint8ArrayToBase64(bytes).replace(/\+/g, "-").replace(/\//g, "_").replace(/=/g, "");
}
__name(uint8ArrayToBase64url, "uint8ArrayToBase64url");
function hexToUint8Array(hex3) {
  const cleanHex = hex3.replace(/^0x/, "");
  if (cleanHex.length % 2 !== 0) {
    throw new Error("Invalid hex string length");
  }
  const bytes = new Uint8Array(cleanHex.length / 2);
  for (let i2 = 0; i2 < cleanHex.length; i2 += 2) {
    bytes[i2 / 2] = Number.parseInt(cleanHex.slice(i2, i2 + 2), 16);
  }
  return bytes;
}
__name(hexToUint8Array, "hexToUint8Array");
function uint8ArrayToHex(bytes) {
  return Array.from(bytes).map((b2) => b2.toString(16).padStart(2, "0")).join("");
}
__name(uint8ArrayToHex, "uint8ArrayToHex");
var EVALUATING;
var captureStackTrace;
var allowsEval;
var getParsedType;
var propertyKeyTypes;
var primitiveTypes;
var NUMBER_FORMAT_RANGES;
var BIGINT_FORMAT_RANGES;
var Class;
var init_util = __esm({
  "../node_modules/zod/v4/core/util.js"() {
    init_functionsRoutes_0_09879299104094341();
    __name2(assertEqual, "assertEqual");
    __name2(assertNotEqual, "assertNotEqual");
    __name2(assertIs, "assertIs");
    __name2(assertNever, "assertNever");
    __name2(assert, "assert");
    __name2(getEnumValues, "getEnumValues");
    __name2(joinValues, "joinValues");
    __name2(jsonStringifyReplacer, "jsonStringifyReplacer");
    __name2(cached, "cached");
    __name2(nullish, "nullish");
    __name2(cleanRegex, "cleanRegex");
    __name2(floatSafeRemainder, "floatSafeRemainder");
    EVALUATING = Symbol("evaluating");
    __name2(defineLazy, "defineLazy");
    __name2(objectClone, "objectClone");
    __name2(assignProp, "assignProp");
    __name2(mergeDefs, "mergeDefs");
    __name2(cloneDef, "cloneDef");
    __name2(getElementAtPath, "getElementAtPath");
    __name2(promiseAllObject, "promiseAllObject");
    __name2(randomString, "randomString");
    __name2(esc, "esc");
    captureStackTrace = "captureStackTrace" in Error ? Error.captureStackTrace : (..._args) => {
    };
    __name2(isObject, "isObject");
    allowsEval = cached(() => {
      if (typeof navigator !== "undefined" && "Cloudflare-Workers"?.includes("Cloudflare")) {
        return false;
      }
      try {
        const F2 = Function;
        new F2("");
        return true;
      } catch (_) {
        return false;
      }
    });
    __name2(isPlainObject, "isPlainObject");
    __name2(shallowClone, "shallowClone");
    __name2(numKeys, "numKeys");
    getParsedType = /* @__PURE__ */ __name2((data) => {
      const t2 = typeof data;
      switch (t2) {
        case "undefined":
          return "undefined";
        case "string":
          return "string";
        case "number":
          return Number.isNaN(data) ? "nan" : "number";
        case "boolean":
          return "boolean";
        case "function":
          return "function";
        case "bigint":
          return "bigint";
        case "symbol":
          return "symbol";
        case "object":
          if (Array.isArray(data)) {
            return "array";
          }
          if (data === null) {
            return "null";
          }
          if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
            return "promise";
          }
          if (typeof Map !== "undefined" && data instanceof Map) {
            return "map";
          }
          if (typeof Set !== "undefined" && data instanceof Set) {
            return "set";
          }
          if (typeof Date !== "undefined" && data instanceof Date) {
            return "date";
          }
          if (typeof File !== "undefined" && data instanceof File) {
            return "file";
          }
          return "object";
        default:
          throw new Error(`Unknown data type: ${t2}`);
      }
    }, "getParsedType");
    propertyKeyTypes = /* @__PURE__ */ new Set(["string", "number", "symbol"]);
    primitiveTypes = /* @__PURE__ */ new Set(["string", "number", "bigint", "boolean", "symbol", "undefined"]);
    __name2(escapeRegex, "escapeRegex");
    __name2(clone, "clone");
    __name2(normalizeParams, "normalizeParams");
    __name2(createTransparentProxy, "createTransparentProxy");
    __name2(stringifyPrimitive, "stringifyPrimitive");
    __name2(optionalKeys, "optionalKeys");
    NUMBER_FORMAT_RANGES = {
      safeint: [Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER],
      int32: [-2147483648, 2147483647],
      uint32: [0, 4294967295],
      float32: [-34028234663852886e22, 34028234663852886e22],
      float64: [-Number.MAX_VALUE, Number.MAX_VALUE]
    };
    BIGINT_FORMAT_RANGES = {
      int64: [/* @__PURE__ */ BigInt("-9223372036854775808"), /* @__PURE__ */ BigInt("9223372036854775807")],
      uint64: [/* @__PURE__ */ BigInt(0), /* @__PURE__ */ BigInt("18446744073709551615")]
    };
    __name2(pick, "pick");
    __name2(omit, "omit");
    __name2(extend, "extend");
    __name2(safeExtend, "safeExtend");
    __name2(merge, "merge");
    __name2(partial, "partial");
    __name2(required, "required");
    __name2(aborted, "aborted");
    __name2(prefixIssues, "prefixIssues");
    __name2(unwrapMessage, "unwrapMessage");
    __name2(finalizeIssue, "finalizeIssue");
    __name2(getSizableOrigin, "getSizableOrigin");
    __name2(getLengthableOrigin, "getLengthableOrigin");
    __name2(issue, "issue");
    __name2(cleanEnum, "cleanEnum");
    __name2(base64ToUint8Array, "base64ToUint8Array");
    __name2(uint8ArrayToBase64, "uint8ArrayToBase64");
    __name2(base64urlToUint8Array, "base64urlToUint8Array");
    __name2(uint8ArrayToBase64url, "uint8ArrayToBase64url");
    __name2(hexToUint8Array, "hexToUint8Array");
    __name2(uint8ArrayToHex, "uint8ArrayToHex");
    Class = class {
      static {
        __name(this, "Class");
      }
      static {
        __name2(this, "Class");
      }
      constructor(..._args) {
      }
    };
  }
});
function flattenError(error45, mapper = (issue2) => issue2.message) {
  const fieldErrors = {};
  const formErrors = [];
  for (const sub of error45.issues) {
    if (sub.path.length > 0) {
      fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
      fieldErrors[sub.path[0]].push(mapper(sub));
    } else {
      formErrors.push(mapper(sub));
    }
  }
  return { formErrors, fieldErrors };
}
__name(flattenError, "flattenError");
function formatError(error45, _mapper) {
  const mapper = _mapper || function(issue2) {
    return issue2.message;
  };
  const fieldErrors = { _errors: [] };
  const processError = /* @__PURE__ */ __name2((error46) => {
    for (const issue2 of error46.issues) {
      if (issue2.code === "invalid_union" && issue2.errors.length) {
        issue2.errors.map((issues) => processError({ issues }));
      } else if (issue2.code === "invalid_key") {
        processError({ issues: issue2.issues });
      } else if (issue2.code === "invalid_element") {
        processError({ issues: issue2.issues });
      } else if (issue2.path.length === 0) {
        fieldErrors._errors.push(mapper(issue2));
      } else {
        let curr = fieldErrors;
        let i2 = 0;
        while (i2 < issue2.path.length) {
          const el = issue2.path[i2];
          const terminal = i2 === issue2.path.length - 1;
          if (!terminal) {
            curr[el] = curr[el] || { _errors: [] };
          } else {
            curr[el] = curr[el] || { _errors: [] };
            curr[el]._errors.push(mapper(issue2));
          }
          curr = curr[el];
          i2++;
        }
      }
    }
  }, "processError");
  processError(error45);
  return fieldErrors;
}
__name(formatError, "formatError");
function treeifyError(error45, _mapper) {
  const mapper = _mapper || function(issue2) {
    return issue2.message;
  };
  const result = { errors: [] };
  const processError = /* @__PURE__ */ __name2((error46, path = []) => {
    var _a2, _b;
    for (const issue2 of error46.issues) {
      if (issue2.code === "invalid_union" && issue2.errors.length) {
        issue2.errors.map((issues) => processError({ issues }, issue2.path));
      } else if (issue2.code === "invalid_key") {
        processError({ issues: issue2.issues }, issue2.path);
      } else if (issue2.code === "invalid_element") {
        processError({ issues: issue2.issues }, issue2.path);
      } else {
        const fullpath = [...path, ...issue2.path];
        if (fullpath.length === 0) {
          result.errors.push(mapper(issue2));
          continue;
        }
        let curr = result;
        let i2 = 0;
        while (i2 < fullpath.length) {
          const el = fullpath[i2];
          const terminal = i2 === fullpath.length - 1;
          if (typeof el === "string") {
            curr.properties ?? (curr.properties = {});
            (_a2 = curr.properties)[el] ?? (_a2[el] = { errors: [] });
            curr = curr.properties[el];
          } else {
            curr.items ?? (curr.items = []);
            (_b = curr.items)[el] ?? (_b[el] = { errors: [] });
            curr = curr.items[el];
          }
          if (terminal) {
            curr.errors.push(mapper(issue2));
          }
          i2++;
        }
      }
    }
  }, "processError");
  processError(error45);
  return result;
}
__name(treeifyError, "treeifyError");
function toDotPath(_path) {
  const segs = [];
  const path = _path.map((seg) => typeof seg === "object" ? seg.key : seg);
  for (const seg of path) {
    if (typeof seg === "number")
      segs.push(`[${seg}]`);
    else if (typeof seg === "symbol")
      segs.push(`[${JSON.stringify(String(seg))}]`);
    else if (/[^\w$]/.test(seg))
      segs.push(`[${JSON.stringify(seg)}]`);
    else {
      if (segs.length)
        segs.push(".");
      segs.push(seg);
    }
  }
  return segs.join("");
}
__name(toDotPath, "toDotPath");
function prettifyError(error45) {
  const lines = [];
  const issues = [...error45.issues].sort((a2, b2) => (a2.path ?? []).length - (b2.path ?? []).length);
  for (const issue2 of issues) {
    lines.push(`\u2716 ${issue2.message}`);
    if (issue2.path?.length)
      lines.push(`  \u2192 at ${toDotPath(issue2.path)}`);
  }
  return lines.join("\n");
}
__name(prettifyError, "prettifyError");
var initializer;
var $ZodError;
var $ZodRealError;
var init_errors = __esm({
  "../node_modules/zod/v4/core/errors.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_core();
    init_util();
    initializer = /* @__PURE__ */ __name2((inst, def) => {
      inst.name = "$ZodError";
      Object.defineProperty(inst, "_zod", {
        value: inst._zod,
        enumerable: false
      });
      Object.defineProperty(inst, "issues", {
        value: def,
        enumerable: false
      });
      inst.message = JSON.stringify(def, jsonStringifyReplacer, 2);
      Object.defineProperty(inst, "toString", {
        value: /* @__PURE__ */ __name2(() => inst.message, "value"),
        enumerable: false
      });
    }, "initializer");
    $ZodError = /* @__PURE__ */ $constructor("$ZodError", initializer);
    $ZodRealError = /* @__PURE__ */ $constructor("$ZodError", initializer, { Parent: Error });
    __name2(flattenError, "flattenError");
    __name2(formatError, "formatError");
    __name2(treeifyError, "treeifyError");
    __name2(toDotPath, "toDotPath");
    __name2(prettifyError, "prettifyError");
  }
});
var _parse;
var parse;
var _parseAsync;
var parseAsync;
var _safeParse;
var safeParse;
var _safeParseAsync;
var safeParseAsync;
var _encode;
var encode;
var _decode;
var decode;
var _encodeAsync;
var encodeAsync;
var _decodeAsync;
var decodeAsync;
var _safeEncode;
var safeEncode;
var _safeDecode;
var safeDecode;
var _safeEncodeAsync;
var safeEncodeAsync;
var _safeDecodeAsync;
var safeDecodeAsync;
var init_parse = __esm({
  "../node_modules/zod/v4/core/parse.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_core();
    init_errors();
    init_util();
    _parse = /* @__PURE__ */ __name2((_Err2) => (schema, value, _ctx, _params) => {
      const ctx = _ctx ? Object.assign(_ctx, { async: false }) : { async: false };
      const result = schema._zod.run({ value, issues: [] }, ctx);
      if (result instanceof Promise) {
        throw new $ZodAsyncError();
      }
      if (result.issues.length) {
        const e2 = new (_params?.Err ?? _Err2)(result.issues.map((iss) => finalizeIssue(iss, ctx, config())));
        captureStackTrace(e2, _params?.callee);
        throw e2;
      }
      return result.value;
    }, "_parse");
    parse = /* @__PURE__ */ _parse($ZodRealError);
    _parseAsync = /* @__PURE__ */ __name2((_Err2) => async (schema, value, _ctx, params) => {
      const ctx = _ctx ? Object.assign(_ctx, { async: true }) : { async: true };
      let result = schema._zod.run({ value, issues: [] }, ctx);
      if (result instanceof Promise)
        result = await result;
      if (result.issues.length) {
        const e2 = new (params?.Err ?? _Err2)(result.issues.map((iss) => finalizeIssue(iss, ctx, config())));
        captureStackTrace(e2, params?.callee);
        throw e2;
      }
      return result.value;
    }, "_parseAsync");
    parseAsync = /* @__PURE__ */ _parseAsync($ZodRealError);
    _safeParse = /* @__PURE__ */ __name2((_Err2) => (schema, value, _ctx) => {
      const ctx = _ctx ? { ..._ctx, async: false } : { async: false };
      const result = schema._zod.run({ value, issues: [] }, ctx);
      if (result instanceof Promise) {
        throw new $ZodAsyncError();
      }
      return result.issues.length ? {
        success: false,
        error: new (_Err2 ?? $ZodError)(result.issues.map((iss) => finalizeIssue(iss, ctx, config())))
      } : { success: true, data: result.value };
    }, "_safeParse");
    safeParse = /* @__PURE__ */ _safeParse($ZodRealError);
    _safeParseAsync = /* @__PURE__ */ __name2((_Err2) => async (schema, value, _ctx) => {
      const ctx = _ctx ? Object.assign(_ctx, { async: true }) : { async: true };
      let result = schema._zod.run({ value, issues: [] }, ctx);
      if (result instanceof Promise)
        result = await result;
      return result.issues.length ? {
        success: false,
        error: new _Err2(result.issues.map((iss) => finalizeIssue(iss, ctx, config())))
      } : { success: true, data: result.value };
    }, "_safeParseAsync");
    safeParseAsync = /* @__PURE__ */ _safeParseAsync($ZodRealError);
    _encode = /* @__PURE__ */ __name2((_Err2) => (schema, value, _ctx) => {
      const ctx = _ctx ? Object.assign(_ctx, { direction: "backward" }) : { direction: "backward" };
      return _parse(_Err2)(schema, value, ctx);
    }, "_encode");
    encode = /* @__PURE__ */ _encode($ZodRealError);
    _decode = /* @__PURE__ */ __name2((_Err2) => (schema, value, _ctx) => {
      return _parse(_Err2)(schema, value, _ctx);
    }, "_decode");
    decode = /* @__PURE__ */ _decode($ZodRealError);
    _encodeAsync = /* @__PURE__ */ __name2((_Err2) => async (schema, value, _ctx) => {
      const ctx = _ctx ? Object.assign(_ctx, { direction: "backward" }) : { direction: "backward" };
      return _parseAsync(_Err2)(schema, value, ctx);
    }, "_encodeAsync");
    encodeAsync = /* @__PURE__ */ _encodeAsync($ZodRealError);
    _decodeAsync = /* @__PURE__ */ __name2((_Err2) => async (schema, value, _ctx) => {
      return _parseAsync(_Err2)(schema, value, _ctx);
    }, "_decodeAsync");
    decodeAsync = /* @__PURE__ */ _decodeAsync($ZodRealError);
    _safeEncode = /* @__PURE__ */ __name2((_Err2) => (schema, value, _ctx) => {
      const ctx = _ctx ? Object.assign(_ctx, { direction: "backward" }) : { direction: "backward" };
      return _safeParse(_Err2)(schema, value, ctx);
    }, "_safeEncode");
    safeEncode = /* @__PURE__ */ _safeEncode($ZodRealError);
    _safeDecode = /* @__PURE__ */ __name2((_Err2) => (schema, value, _ctx) => {
      return _safeParse(_Err2)(schema, value, _ctx);
    }, "_safeDecode");
    safeDecode = /* @__PURE__ */ _safeDecode($ZodRealError);
    _safeEncodeAsync = /* @__PURE__ */ __name2((_Err2) => async (schema, value, _ctx) => {
      const ctx = _ctx ? Object.assign(_ctx, { direction: "backward" }) : { direction: "backward" };
      return _safeParseAsync(_Err2)(schema, value, ctx);
    }, "_safeEncodeAsync");
    safeEncodeAsync = /* @__PURE__ */ _safeEncodeAsync($ZodRealError);
    _safeDecodeAsync = /* @__PURE__ */ __name2((_Err2) => async (schema, value, _ctx) => {
      return _safeParseAsync(_Err2)(schema, value, _ctx);
    }, "_safeDecodeAsync");
    safeDecodeAsync = /* @__PURE__ */ _safeDecodeAsync($ZodRealError);
  }
});
var regexes_exports = {};
__export(regexes_exports, {
  base64: /* @__PURE__ */ __name(() => base64, "base64"),
  base64url: /* @__PURE__ */ __name(() => base64url, "base64url"),
  bigint: /* @__PURE__ */ __name(() => bigint, "bigint"),
  boolean: /* @__PURE__ */ __name(() => boolean, "boolean"),
  browserEmail: /* @__PURE__ */ __name(() => browserEmail, "browserEmail"),
  cidrv4: /* @__PURE__ */ __name(() => cidrv4, "cidrv4"),
  cidrv6: /* @__PURE__ */ __name(() => cidrv6, "cidrv6"),
  cuid: /* @__PURE__ */ __name(() => cuid, "cuid"),
  cuid2: /* @__PURE__ */ __name(() => cuid2, "cuid2"),
  date: /* @__PURE__ */ __name(() => date, "date"),
  datetime: /* @__PURE__ */ __name(() => datetime, "datetime"),
  domain: /* @__PURE__ */ __name(() => domain, "domain"),
  duration: /* @__PURE__ */ __name(() => duration, "duration"),
  e164: /* @__PURE__ */ __name(() => e164, "e164"),
  email: /* @__PURE__ */ __name(() => email, "email"),
  emoji: /* @__PURE__ */ __name(() => emoji, "emoji"),
  extendedDuration: /* @__PURE__ */ __name(() => extendedDuration, "extendedDuration"),
  guid: /* @__PURE__ */ __name(() => guid, "guid"),
  hex: /* @__PURE__ */ __name(() => hex, "hex"),
  hostname: /* @__PURE__ */ __name(() => hostname, "hostname"),
  html5Email: /* @__PURE__ */ __name(() => html5Email, "html5Email"),
  idnEmail: /* @__PURE__ */ __name(() => idnEmail, "idnEmail"),
  integer: /* @__PURE__ */ __name(() => integer, "integer"),
  ipv4: /* @__PURE__ */ __name(() => ipv4, "ipv4"),
  ipv6: /* @__PURE__ */ __name(() => ipv6, "ipv6"),
  ksuid: /* @__PURE__ */ __name(() => ksuid, "ksuid"),
  lowercase: /* @__PURE__ */ __name(() => lowercase, "lowercase"),
  md5_base64: /* @__PURE__ */ __name(() => md5_base64, "md5_base64"),
  md5_base64url: /* @__PURE__ */ __name(() => md5_base64url, "md5_base64url"),
  md5_hex: /* @__PURE__ */ __name(() => md5_hex, "md5_hex"),
  nanoid: /* @__PURE__ */ __name(() => nanoid, "nanoid"),
  null: /* @__PURE__ */ __name(() => _null, "null"),
  number: /* @__PURE__ */ __name(() => number, "number"),
  rfc5322Email: /* @__PURE__ */ __name(() => rfc5322Email, "rfc5322Email"),
  sha1_base64: /* @__PURE__ */ __name(() => sha1_base64, "sha1_base64"),
  sha1_base64url: /* @__PURE__ */ __name(() => sha1_base64url, "sha1_base64url"),
  sha1_hex: /* @__PURE__ */ __name(() => sha1_hex, "sha1_hex"),
  sha256_base64: /* @__PURE__ */ __name(() => sha256_base64, "sha256_base64"),
  sha256_base64url: /* @__PURE__ */ __name(() => sha256_base64url, "sha256_base64url"),
  sha256_hex: /* @__PURE__ */ __name(() => sha256_hex, "sha256_hex"),
  sha384_base64: /* @__PURE__ */ __name(() => sha384_base64, "sha384_base64"),
  sha384_base64url: /* @__PURE__ */ __name(() => sha384_base64url, "sha384_base64url"),
  sha384_hex: /* @__PURE__ */ __name(() => sha384_hex, "sha384_hex"),
  sha512_base64: /* @__PURE__ */ __name(() => sha512_base64, "sha512_base64"),
  sha512_base64url: /* @__PURE__ */ __name(() => sha512_base64url, "sha512_base64url"),
  sha512_hex: /* @__PURE__ */ __name(() => sha512_hex, "sha512_hex"),
  string: /* @__PURE__ */ __name(() => string, "string"),
  time: /* @__PURE__ */ __name(() => time, "time"),
  ulid: /* @__PURE__ */ __name(() => ulid, "ulid"),
  undefined: /* @__PURE__ */ __name(() => _undefined, "undefined"),
  unicodeEmail: /* @__PURE__ */ __name(() => unicodeEmail, "unicodeEmail"),
  uppercase: /* @__PURE__ */ __name(() => uppercase, "uppercase"),
  uuid: /* @__PURE__ */ __name(() => uuid, "uuid"),
  uuid4: /* @__PURE__ */ __name(() => uuid4, "uuid4"),
  uuid6: /* @__PURE__ */ __name(() => uuid6, "uuid6"),
  uuid7: /* @__PURE__ */ __name(() => uuid7, "uuid7"),
  xid: /* @__PURE__ */ __name(() => xid, "xid")
});
function emoji() {
  return new RegExp(_emoji, "u");
}
__name(emoji, "emoji");
function timeSource(args) {
  const hhmm = `(?:[01]\\d|2[0-3]):[0-5]\\d`;
  const regex = typeof args.precision === "number" ? args.precision === -1 ? `${hhmm}` : args.precision === 0 ? `${hhmm}:[0-5]\\d` : `${hhmm}:[0-5]\\d\\.\\d{${args.precision}}` : `${hhmm}(?::[0-5]\\d(?:\\.\\d+)?)?`;
  return regex;
}
__name(timeSource, "timeSource");
function time(args) {
  return new RegExp(`^${timeSource(args)}$`);
}
__name(time, "time");
function datetime(args) {
  const time3 = timeSource({ precision: args.precision });
  const opts = ["Z"];
  if (args.local)
    opts.push("");
  if (args.offset)
    opts.push(`([+-](?:[01]\\d|2[0-3]):[0-5]\\d)`);
  const timeRegex = `${time3}(?:${opts.join("|")})`;
  return new RegExp(`^${dateSource}T(?:${timeRegex})$`);
}
__name(datetime, "datetime");
function fixedBase64(bodyLength, padding) {
  return new RegExp(`^[A-Za-z0-9+/]{${bodyLength}}${padding}$`);
}
__name(fixedBase64, "fixedBase64");
function fixedBase64url(length) {
  return new RegExp(`^[A-Za-z0-9_-]{${length}}$`);
}
__name(fixedBase64url, "fixedBase64url");
var cuid;
var cuid2;
var ulid;
var xid;
var ksuid;
var nanoid;
var duration;
var extendedDuration;
var guid;
var uuid;
var uuid4;
var uuid6;
var uuid7;
var email;
var html5Email;
var rfc5322Email;
var unicodeEmail;
var idnEmail;
var browserEmail;
var _emoji;
var ipv4;
var ipv6;
var cidrv4;
var cidrv6;
var base64;
var base64url;
var hostname;
var domain;
var e164;
var dateSource;
var date;
var string;
var bigint;
var integer;
var number;
var boolean;
var _null;
var _undefined;
var lowercase;
var uppercase;
var hex;
var md5_hex;
var md5_base64;
var md5_base64url;
var sha1_hex;
var sha1_base64;
var sha1_base64url;
var sha256_hex;
var sha256_base64;
var sha256_base64url;
var sha384_hex;
var sha384_base64;
var sha384_base64url;
var sha512_hex;
var sha512_base64;
var sha512_base64url;
var init_regexes = __esm({
  "../node_modules/zod/v4/core/regexes.js"() {
    init_functionsRoutes_0_09879299104094341();
    cuid = /^[cC][^\s-]{8,}$/;
    cuid2 = /^[0-9a-z]+$/;
    ulid = /^[0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{26}$/;
    xid = /^[0-9a-vA-V]{20}$/;
    ksuid = /^[A-Za-z0-9]{27}$/;
    nanoid = /^[a-zA-Z0-9_-]{21}$/;
    duration = /^P(?:(\d+W)|(?!.*W)(?=\d|T\d)(\d+Y)?(\d+M)?(\d+D)?(T(?=\d)(\d+H)?(\d+M)?(\d+([.,]\d+)?S)?)?)$/;
    extendedDuration = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
    guid = /^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})$/;
    uuid = /* @__PURE__ */ __name2((version3) => {
      if (!version3)
        return /^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/;
      return new RegExp(`^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-${version3}[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12})$`);
    }, "uuid");
    uuid4 = /* @__PURE__ */ uuid(4);
    uuid6 = /* @__PURE__ */ uuid(6);
    uuid7 = /* @__PURE__ */ uuid(7);
    email = /^(?!\.)(?!.*\.\.)([A-Za-z0-9_'+\-\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\-]*\.)+[A-Za-z]{2,}$/;
    html5Email = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
    rfc5322Email = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    unicodeEmail = /^[^\s@"]{1,64}@[^\s@]{1,255}$/u;
    idnEmail = unicodeEmail;
    browserEmail = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
    _emoji = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
    __name2(emoji, "emoji");
    ipv4 = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
    ipv6 = /^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$/;
    cidrv4 = /^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/([0-9]|[1-2][0-9]|3[0-2])$/;
    cidrv6 = /^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|::|([0-9a-fA-F]{1,4})?::([0-9a-fA-F]{1,4}:?){0,6})\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;
    base64 = /^$|^(?:[0-9a-zA-Z+/]{4})*(?:(?:[0-9a-zA-Z+/]{2}==)|(?:[0-9a-zA-Z+/]{3}=))?$/;
    base64url = /^[A-Za-z0-9_-]*$/;
    hostname = /^(?=.{1,253}\.?$)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[-0-9a-zA-Z]{0,61}[0-9a-zA-Z])?)*\.?$/;
    domain = /^([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,}$/;
    e164 = /^\+(?:[0-9]){6,14}[0-9]$/;
    dateSource = `(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))`;
    date = /* @__PURE__ */ new RegExp(`^${dateSource}$`);
    __name2(timeSource, "timeSource");
    __name2(time, "time");
    __name2(datetime, "datetime");
    string = /* @__PURE__ */ __name2((params) => {
      const regex = params ? `[\\s\\S]{${params?.minimum ?? 0},${params?.maximum ?? ""}}` : `[\\s\\S]*`;
      return new RegExp(`^${regex}$`);
    }, "string");
    bigint = /^-?\d+n?$/;
    integer = /^-?\d+$/;
    number = /^-?\d+(?:\.\d+)?/;
    boolean = /^(?:true|false)$/i;
    _null = /^null$/i;
    _undefined = /^undefined$/i;
    lowercase = /^[^A-Z]*$/;
    uppercase = /^[^a-z]*$/;
    hex = /^[0-9a-fA-F]*$/;
    __name2(fixedBase64, "fixedBase64");
    __name2(fixedBase64url, "fixedBase64url");
    md5_hex = /^[0-9a-fA-F]{32}$/;
    md5_base64 = /* @__PURE__ */ fixedBase64(22, "==");
    md5_base64url = /* @__PURE__ */ fixedBase64url(22);
    sha1_hex = /^[0-9a-fA-F]{40}$/;
    sha1_base64 = /* @__PURE__ */ fixedBase64(27, "=");
    sha1_base64url = /* @__PURE__ */ fixedBase64url(27);
    sha256_hex = /^[0-9a-fA-F]{64}$/;
    sha256_base64 = /* @__PURE__ */ fixedBase64(43, "=");
    sha256_base64url = /* @__PURE__ */ fixedBase64url(43);
    sha384_hex = /^[0-9a-fA-F]{96}$/;
    sha384_base64 = /* @__PURE__ */ fixedBase64(64, "");
    sha384_base64url = /* @__PURE__ */ fixedBase64url(64);
    sha512_hex = /^[0-9a-fA-F]{128}$/;
    sha512_base64 = /* @__PURE__ */ fixedBase64(86, "==");
    sha512_base64url = /* @__PURE__ */ fixedBase64url(86);
  }
});
function handleCheckPropertyResult(result, payload, property) {
  if (result.issues.length) {
    payload.issues.push(...prefixIssues(property, result.issues));
  }
}
__name(handleCheckPropertyResult, "handleCheckPropertyResult");
var $ZodCheck;
var numericOriginMap;
var $ZodCheckLessThan;
var $ZodCheckGreaterThan;
var $ZodCheckMultipleOf;
var $ZodCheckNumberFormat;
var $ZodCheckBigIntFormat;
var $ZodCheckMaxSize;
var $ZodCheckMinSize;
var $ZodCheckSizeEquals;
var $ZodCheckMaxLength;
var $ZodCheckMinLength;
var $ZodCheckLengthEquals;
var $ZodCheckStringFormat;
var $ZodCheckRegex;
var $ZodCheckLowerCase;
var $ZodCheckUpperCase;
var $ZodCheckIncludes;
var $ZodCheckStartsWith;
var $ZodCheckEndsWith;
var $ZodCheckProperty;
var $ZodCheckMimeType;
var $ZodCheckOverwrite;
var init_checks = __esm({
  "../node_modules/zod/v4/core/checks.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_core();
    init_regexes();
    init_util();
    $ZodCheck = /* @__PURE__ */ $constructor("$ZodCheck", (inst, def) => {
      var _a2;
      inst._zod ?? (inst._zod = {});
      inst._zod.def = def;
      (_a2 = inst._zod).onattach ?? (_a2.onattach = []);
    });
    numericOriginMap = {
      number: "number",
      bigint: "bigint",
      object: "date"
    };
    $ZodCheckLessThan = /* @__PURE__ */ $constructor("$ZodCheckLessThan", (inst, def) => {
      $ZodCheck.init(inst, def);
      const origin = numericOriginMap[typeof def.value];
      inst._zod.onattach.push((inst2) => {
        const bag = inst2._zod.bag;
        const curr = (def.inclusive ? bag.maximum : bag.exclusiveMaximum) ?? Number.POSITIVE_INFINITY;
        if (def.value < curr) {
          if (def.inclusive)
            bag.maximum = def.value;
          else
            bag.exclusiveMaximum = def.value;
        }
      });
      inst._zod.check = (payload) => {
        if (def.inclusive ? payload.value <= def.value : payload.value < def.value) {
          return;
        }
        payload.issues.push({
          origin,
          code: "too_big",
          maximum: def.value,
          input: payload.value,
          inclusive: def.inclusive,
          inst,
          continue: !def.abort
        });
      };
    });
    $ZodCheckGreaterThan = /* @__PURE__ */ $constructor("$ZodCheckGreaterThan", (inst, def) => {
      $ZodCheck.init(inst, def);
      const origin = numericOriginMap[typeof def.value];
      inst._zod.onattach.push((inst2) => {
        const bag = inst2._zod.bag;
        const curr = (def.inclusive ? bag.minimum : bag.exclusiveMinimum) ?? Number.NEGATIVE_INFINITY;
        if (def.value > curr) {
          if (def.inclusive)
            bag.minimum = def.value;
          else
            bag.exclusiveMinimum = def.value;
        }
      });
      inst._zod.check = (payload) => {
        if (def.inclusive ? payload.value >= def.value : payload.value > def.value) {
          return;
        }
        payload.issues.push({
          origin,
          code: "too_small",
          minimum: def.value,
          input: payload.value,
          inclusive: def.inclusive,
          inst,
          continue: !def.abort
        });
      };
    });
    $ZodCheckMultipleOf = /* @__PURE__ */ $constructor("$ZodCheckMultipleOf", (inst, def) => {
      $ZodCheck.init(inst, def);
      inst._zod.onattach.push((inst2) => {
        var _a2;
        (_a2 = inst2._zod.bag).multipleOf ?? (_a2.multipleOf = def.value);
      });
      inst._zod.check = (payload) => {
        if (typeof payload.value !== typeof def.value)
          throw new Error("Cannot mix number and bigint in multiple_of check.");
        const isMultiple = typeof payload.value === "bigint" ? payload.value % def.value === BigInt(0) : floatSafeRemainder(payload.value, def.value) === 0;
        if (isMultiple)
          return;
        payload.issues.push({
          origin: typeof payload.value,
          code: "not_multiple_of",
          divisor: def.value,
          input: payload.value,
          inst,
          continue: !def.abort
        });
      };
    });
    $ZodCheckNumberFormat = /* @__PURE__ */ $constructor("$ZodCheckNumberFormat", (inst, def) => {
      $ZodCheck.init(inst, def);
      def.format = def.format || "float64";
      const isInt = def.format?.includes("int");
      const origin = isInt ? "int" : "number";
      const [minimum, maximum] = NUMBER_FORMAT_RANGES[def.format];
      inst._zod.onattach.push((inst2) => {
        const bag = inst2._zod.bag;
        bag.format = def.format;
        bag.minimum = minimum;
        bag.maximum = maximum;
        if (isInt)
          bag.pattern = integer;
      });
      inst._zod.check = (payload) => {
        const input = payload.value;
        if (isInt) {
          if (!Number.isInteger(input)) {
            payload.issues.push({
              expected: origin,
              format: def.format,
              code: "invalid_type",
              continue: false,
              input,
              inst
            });
            return;
          }
          if (!Number.isSafeInteger(input)) {
            if (input > 0) {
              payload.issues.push({
                input,
                code: "too_big",
                maximum: Number.MAX_SAFE_INTEGER,
                note: "Integers must be within the safe integer range.",
                inst,
                origin,
                continue: !def.abort
              });
            } else {
              payload.issues.push({
                input,
                code: "too_small",
                minimum: Number.MIN_SAFE_INTEGER,
                note: "Integers must be within the safe integer range.",
                inst,
                origin,
                continue: !def.abort
              });
            }
            return;
          }
        }
        if (input < minimum) {
          payload.issues.push({
            origin: "number",
            input,
            code: "too_small",
            minimum,
            inclusive: true,
            inst,
            continue: !def.abort
          });
        }
        if (input > maximum) {
          payload.issues.push({
            origin: "number",
            input,
            code: "too_big",
            maximum,
            inst
          });
        }
      };
    });
    $ZodCheckBigIntFormat = /* @__PURE__ */ $constructor("$ZodCheckBigIntFormat", (inst, def) => {
      $ZodCheck.init(inst, def);
      const [minimum, maximum] = BIGINT_FORMAT_RANGES[def.format];
      inst._zod.onattach.push((inst2) => {
        const bag = inst2._zod.bag;
        bag.format = def.format;
        bag.minimum = minimum;
        bag.maximum = maximum;
      });
      inst._zod.check = (payload) => {
        const input = payload.value;
        if (input < minimum) {
          payload.issues.push({
            origin: "bigint",
            input,
            code: "too_small",
            minimum,
            inclusive: true,
            inst,
            continue: !def.abort
          });
        }
        if (input > maximum) {
          payload.issues.push({
            origin: "bigint",
            input,
            code: "too_big",
            maximum,
            inst
          });
        }
      };
    });
    $ZodCheckMaxSize = /* @__PURE__ */ $constructor("$ZodCheckMaxSize", (inst, def) => {
      var _a2;
      $ZodCheck.init(inst, def);
      (_a2 = inst._zod.def).when ?? (_a2.when = (payload) => {
        const val = payload.value;
        return !nullish(val) && val.size !== void 0;
      });
      inst._zod.onattach.push((inst2) => {
        const curr = inst2._zod.bag.maximum ?? Number.POSITIVE_INFINITY;
        if (def.maximum < curr)
          inst2._zod.bag.maximum = def.maximum;
      });
      inst._zod.check = (payload) => {
        const input = payload.value;
        const size = input.size;
        if (size <= def.maximum)
          return;
        payload.issues.push({
          origin: getSizableOrigin(input),
          code: "too_big",
          maximum: def.maximum,
          inclusive: true,
          input,
          inst,
          continue: !def.abort
        });
      };
    });
    $ZodCheckMinSize = /* @__PURE__ */ $constructor("$ZodCheckMinSize", (inst, def) => {
      var _a2;
      $ZodCheck.init(inst, def);
      (_a2 = inst._zod.def).when ?? (_a2.when = (payload) => {
        const val = payload.value;
        return !nullish(val) && val.size !== void 0;
      });
      inst._zod.onattach.push((inst2) => {
        const curr = inst2._zod.bag.minimum ?? Number.NEGATIVE_INFINITY;
        if (def.minimum > curr)
          inst2._zod.bag.minimum = def.minimum;
      });
      inst._zod.check = (payload) => {
        const input = payload.value;
        const size = input.size;
        if (size >= def.minimum)
          return;
        payload.issues.push({
          origin: getSizableOrigin(input),
          code: "too_small",
          minimum: def.minimum,
          inclusive: true,
          input,
          inst,
          continue: !def.abort
        });
      };
    });
    $ZodCheckSizeEquals = /* @__PURE__ */ $constructor("$ZodCheckSizeEquals", (inst, def) => {
      var _a2;
      $ZodCheck.init(inst, def);
      (_a2 = inst._zod.def).when ?? (_a2.when = (payload) => {
        const val = payload.value;
        return !nullish(val) && val.size !== void 0;
      });
      inst._zod.onattach.push((inst2) => {
        const bag = inst2._zod.bag;
        bag.minimum = def.size;
        bag.maximum = def.size;
        bag.size = def.size;
      });
      inst._zod.check = (payload) => {
        const input = payload.value;
        const size = input.size;
        if (size === def.size)
          return;
        const tooBig = size > def.size;
        payload.issues.push({
          origin: getSizableOrigin(input),
          ...tooBig ? { code: "too_big", maximum: def.size } : { code: "too_small", minimum: def.size },
          inclusive: true,
          exact: true,
          input: payload.value,
          inst,
          continue: !def.abort
        });
      };
    });
    $ZodCheckMaxLength = /* @__PURE__ */ $constructor("$ZodCheckMaxLength", (inst, def) => {
      var _a2;
      $ZodCheck.init(inst, def);
      (_a2 = inst._zod.def).when ?? (_a2.when = (payload) => {
        const val = payload.value;
        return !nullish(val) && val.length !== void 0;
      });
      inst._zod.onattach.push((inst2) => {
        const curr = inst2._zod.bag.maximum ?? Number.POSITIVE_INFINITY;
        if (def.maximum < curr)
          inst2._zod.bag.maximum = def.maximum;
      });
      inst._zod.check = (payload) => {
        const input = payload.value;
        const length = input.length;
        if (length <= def.maximum)
          return;
        const origin = getLengthableOrigin(input);
        payload.issues.push({
          origin,
          code: "too_big",
          maximum: def.maximum,
          inclusive: true,
          input,
          inst,
          continue: !def.abort
        });
      };
    });
    $ZodCheckMinLength = /* @__PURE__ */ $constructor("$ZodCheckMinLength", (inst, def) => {
      var _a2;
      $ZodCheck.init(inst, def);
      (_a2 = inst._zod.def).when ?? (_a2.when = (payload) => {
        const val = payload.value;
        return !nullish(val) && val.length !== void 0;
      });
      inst._zod.onattach.push((inst2) => {
        const curr = inst2._zod.bag.minimum ?? Number.NEGATIVE_INFINITY;
        if (def.minimum > curr)
          inst2._zod.bag.minimum = def.minimum;
      });
      inst._zod.check = (payload) => {
        const input = payload.value;
        const length = input.length;
        if (length >= def.minimum)
          return;
        const origin = getLengthableOrigin(input);
        payload.issues.push({
          origin,
          code: "too_small",
          minimum: def.minimum,
          inclusive: true,
          input,
          inst,
          continue: !def.abort
        });
      };
    });
    $ZodCheckLengthEquals = /* @__PURE__ */ $constructor("$ZodCheckLengthEquals", (inst, def) => {
      var _a2;
      $ZodCheck.init(inst, def);
      (_a2 = inst._zod.def).when ?? (_a2.when = (payload) => {
        const val = payload.value;
        return !nullish(val) && val.length !== void 0;
      });
      inst._zod.onattach.push((inst2) => {
        const bag = inst2._zod.bag;
        bag.minimum = def.length;
        bag.maximum = def.length;
        bag.length = def.length;
      });
      inst._zod.check = (payload) => {
        const input = payload.value;
        const length = input.length;
        if (length === def.length)
          return;
        const origin = getLengthableOrigin(input);
        const tooBig = length > def.length;
        payload.issues.push({
          origin,
          ...tooBig ? { code: "too_big", maximum: def.length } : { code: "too_small", minimum: def.length },
          inclusive: true,
          exact: true,
          input: payload.value,
          inst,
          continue: !def.abort
        });
      };
    });
    $ZodCheckStringFormat = /* @__PURE__ */ $constructor("$ZodCheckStringFormat", (inst, def) => {
      var _a2, _b;
      $ZodCheck.init(inst, def);
      inst._zod.onattach.push((inst2) => {
        const bag = inst2._zod.bag;
        bag.format = def.format;
        if (def.pattern) {
          bag.patterns ?? (bag.patterns = /* @__PURE__ */ new Set());
          bag.patterns.add(def.pattern);
        }
      });
      if (def.pattern)
        (_a2 = inst._zod).check ?? (_a2.check = (payload) => {
          def.pattern.lastIndex = 0;
          if (def.pattern.test(payload.value))
            return;
          payload.issues.push({
            origin: "string",
            code: "invalid_format",
            format: def.format,
            input: payload.value,
            ...def.pattern ? { pattern: def.pattern.toString() } : {},
            inst,
            continue: !def.abort
          });
        });
      else
        (_b = inst._zod).check ?? (_b.check = () => {
        });
    });
    $ZodCheckRegex = /* @__PURE__ */ $constructor("$ZodCheckRegex", (inst, def) => {
      $ZodCheckStringFormat.init(inst, def);
      inst._zod.check = (payload) => {
        def.pattern.lastIndex = 0;
        if (def.pattern.test(payload.value))
          return;
        payload.issues.push({
          origin: "string",
          code: "invalid_format",
          format: "regex",
          input: payload.value,
          pattern: def.pattern.toString(),
          inst,
          continue: !def.abort
        });
      };
    });
    $ZodCheckLowerCase = /* @__PURE__ */ $constructor("$ZodCheckLowerCase", (inst, def) => {
      def.pattern ?? (def.pattern = lowercase);
      $ZodCheckStringFormat.init(inst, def);
    });
    $ZodCheckUpperCase = /* @__PURE__ */ $constructor("$ZodCheckUpperCase", (inst, def) => {
      def.pattern ?? (def.pattern = uppercase);
      $ZodCheckStringFormat.init(inst, def);
    });
    $ZodCheckIncludes = /* @__PURE__ */ $constructor("$ZodCheckIncludes", (inst, def) => {
      $ZodCheck.init(inst, def);
      const escapedRegex = escapeRegex(def.includes);
      const pattern = new RegExp(typeof def.position === "number" ? `^.{${def.position}}${escapedRegex}` : escapedRegex);
      def.pattern = pattern;
      inst._zod.onattach.push((inst2) => {
        const bag = inst2._zod.bag;
        bag.patterns ?? (bag.patterns = /* @__PURE__ */ new Set());
        bag.patterns.add(pattern);
      });
      inst._zod.check = (payload) => {
        if (payload.value.includes(def.includes, def.position))
          return;
        payload.issues.push({
          origin: "string",
          code: "invalid_format",
          format: "includes",
          includes: def.includes,
          input: payload.value,
          inst,
          continue: !def.abort
        });
      };
    });
    $ZodCheckStartsWith = /* @__PURE__ */ $constructor("$ZodCheckStartsWith", (inst, def) => {
      $ZodCheck.init(inst, def);
      const pattern = new RegExp(`^${escapeRegex(def.prefix)}.*`);
      def.pattern ?? (def.pattern = pattern);
      inst._zod.onattach.push((inst2) => {
        const bag = inst2._zod.bag;
        bag.patterns ?? (bag.patterns = /* @__PURE__ */ new Set());
        bag.patterns.add(pattern);
      });
      inst._zod.check = (payload) => {
        if (payload.value.startsWith(def.prefix))
          return;
        payload.issues.push({
          origin: "string",
          code: "invalid_format",
          format: "starts_with",
          prefix: def.prefix,
          input: payload.value,
          inst,
          continue: !def.abort
        });
      };
    });
    $ZodCheckEndsWith = /* @__PURE__ */ $constructor("$ZodCheckEndsWith", (inst, def) => {
      $ZodCheck.init(inst, def);
      const pattern = new RegExp(`.*${escapeRegex(def.suffix)}$`);
      def.pattern ?? (def.pattern = pattern);
      inst._zod.onattach.push((inst2) => {
        const bag = inst2._zod.bag;
        bag.patterns ?? (bag.patterns = /* @__PURE__ */ new Set());
        bag.patterns.add(pattern);
      });
      inst._zod.check = (payload) => {
        if (payload.value.endsWith(def.suffix))
          return;
        payload.issues.push({
          origin: "string",
          code: "invalid_format",
          format: "ends_with",
          suffix: def.suffix,
          input: payload.value,
          inst,
          continue: !def.abort
        });
      };
    });
    __name2(handleCheckPropertyResult, "handleCheckPropertyResult");
    $ZodCheckProperty = /* @__PURE__ */ $constructor("$ZodCheckProperty", (inst, def) => {
      $ZodCheck.init(inst, def);
      inst._zod.check = (payload) => {
        const result = def.schema._zod.run({
          value: payload.value[def.property],
          issues: []
        }, {});
        if (result instanceof Promise) {
          return result.then((result2) => handleCheckPropertyResult(result2, payload, def.property));
        }
        handleCheckPropertyResult(result, payload, def.property);
        return;
      };
    });
    $ZodCheckMimeType = /* @__PURE__ */ $constructor("$ZodCheckMimeType", (inst, def) => {
      $ZodCheck.init(inst, def);
      const mimeSet = new Set(def.mime);
      inst._zod.onattach.push((inst2) => {
        inst2._zod.bag.mime = def.mime;
      });
      inst._zod.check = (payload) => {
        if (mimeSet.has(payload.value.type))
          return;
        payload.issues.push({
          code: "invalid_value",
          values: def.mime,
          input: payload.value.type,
          inst,
          continue: !def.abort
        });
      };
    });
    $ZodCheckOverwrite = /* @__PURE__ */ $constructor("$ZodCheckOverwrite", (inst, def) => {
      $ZodCheck.init(inst, def);
      inst._zod.check = (payload) => {
        payload.value = def.tx(payload.value);
      };
    });
  }
});
var Doc;
var init_doc = __esm({
  "../node_modules/zod/v4/core/doc.js"() {
    init_functionsRoutes_0_09879299104094341();
    Doc = class {
      static {
        __name(this, "Doc");
      }
      static {
        __name2(this, "Doc");
      }
      constructor(args = []) {
        this.content = [];
        this.indent = 0;
        if (this)
          this.args = args;
      }
      indented(fn) {
        this.indent += 1;
        fn(this);
        this.indent -= 1;
      }
      write(arg) {
        if (typeof arg === "function") {
          arg(this, { execution: "sync" });
          arg(this, { execution: "async" });
          return;
        }
        const content = arg;
        const lines = content.split("\n").filter((x2) => x2);
        const minIndent = Math.min(...lines.map((x2) => x2.length - x2.trimStart().length));
        const dedented = lines.map((x2) => x2.slice(minIndent)).map((x2) => " ".repeat(this.indent * 2) + x2);
        for (const line of dedented) {
          this.content.push(line);
        }
      }
      compile() {
        const F2 = Function;
        const args = this?.args;
        const content = this?.content ?? [``];
        const lines = [...content.map((x2) => `  ${x2}`)];
        return new F2(...args, lines.join("\n"));
      }
    };
  }
});
var version;
var init_versions = __esm({
  "../node_modules/zod/v4/core/versions.js"() {
    init_functionsRoutes_0_09879299104094341();
    version = {
      major: 4,
      minor: 1,
      patch: 9
    };
  }
});
function isValidBase64(data) {
  if (data === "")
    return true;
  if (data.length % 4 !== 0)
    return false;
  try {
    atob(data);
    return true;
  } catch {
    return false;
  }
}
__name(isValidBase64, "isValidBase64");
function isValidBase64URL(data) {
  if (!base64url.test(data))
    return false;
  const base643 = data.replace(/[-_]/g, (c2) => c2 === "-" ? "+" : "/");
  const padded = base643.padEnd(Math.ceil(base643.length / 4) * 4, "=");
  return isValidBase64(padded);
}
__name(isValidBase64URL, "isValidBase64URL");
function isValidJWT(token, algorithm = null) {
  try {
    const tokensParts = token.split(".");
    if (tokensParts.length !== 3)
      return false;
    const [header] = tokensParts;
    if (!header)
      return false;
    const parsedHeader = JSON.parse(atob(header));
    if ("typ" in parsedHeader && parsedHeader?.typ !== "JWT")
      return false;
    if (!parsedHeader.alg)
      return false;
    if (algorithm && (!("alg" in parsedHeader) || parsedHeader.alg !== algorithm))
      return false;
    return true;
  } catch {
    return false;
  }
}
__name(isValidJWT, "isValidJWT");
function handleArrayResult(result, final, index) {
  if (result.issues.length) {
    final.issues.push(...prefixIssues(index, result.issues));
  }
  final.value[index] = result.value;
}
__name(handleArrayResult, "handleArrayResult");
function handlePropertyResult(result, final, key, input) {
  if (result.issues.length) {
    final.issues.push(...prefixIssues(key, result.issues));
  }
  if (result.value === void 0) {
    if (key in input) {
      final.value[key] = void 0;
    }
  } else {
    final.value[key] = result.value;
  }
}
__name(handlePropertyResult, "handlePropertyResult");
function normalizeDef(def) {
  const keys = Object.keys(def.shape);
  for (const k2 of keys) {
    if (!def.shape?.[k2]?._zod?.traits?.has("$ZodType")) {
      throw new Error(`Invalid element at key "${k2}": expected a Zod schema`);
    }
  }
  const okeys = optionalKeys(def.shape);
  return {
    ...def,
    keys,
    keySet: new Set(keys),
    numKeys: keys.length,
    optionalKeys: new Set(okeys)
  };
}
__name(normalizeDef, "normalizeDef");
function handleCatchall(proms, input, payload, ctx, def, inst) {
  const unrecognized = [];
  const keySet = def.keySet;
  const _catchall = def.catchall._zod;
  const t2 = _catchall.def.type;
  for (const key of Object.keys(input)) {
    if (keySet.has(key))
      continue;
    if (t2 === "never") {
      unrecognized.push(key);
      continue;
    }
    const r2 = _catchall.run({ value: input[key], issues: [] }, ctx);
    if (r2 instanceof Promise) {
      proms.push(r2.then((r3) => handlePropertyResult(r3, payload, key, input)));
    } else {
      handlePropertyResult(r2, payload, key, input);
    }
  }
  if (unrecognized.length) {
    payload.issues.push({
      code: "unrecognized_keys",
      keys: unrecognized,
      input,
      inst
    });
  }
  if (!proms.length)
    return payload;
  return Promise.all(proms).then(() => {
    return payload;
  });
}
__name(handleCatchall, "handleCatchall");
function handleUnionResults(results, final, inst, ctx) {
  for (const result of results) {
    if (result.issues.length === 0) {
      final.value = result.value;
      return final;
    }
  }
  const nonaborted = results.filter((r2) => !aborted(r2));
  if (nonaborted.length === 1) {
    final.value = nonaborted[0].value;
    return nonaborted[0];
  }
  final.issues.push({
    code: "invalid_union",
    input: final.value,
    inst,
    errors: results.map((result) => result.issues.map((iss) => finalizeIssue(iss, ctx, config())))
  });
  return final;
}
__name(handleUnionResults, "handleUnionResults");
function mergeValues(a2, b2) {
  if (a2 === b2) {
    return { valid: true, data: a2 };
  }
  if (a2 instanceof Date && b2 instanceof Date && +a2 === +b2) {
    return { valid: true, data: a2 };
  }
  if (isPlainObject(a2) && isPlainObject(b2)) {
    const bKeys = Object.keys(b2);
    const sharedKeys = Object.keys(a2).filter((key) => bKeys.indexOf(key) !== -1);
    const newObj = { ...a2, ...b2 };
    for (const key of sharedKeys) {
      const sharedValue = mergeValues(a2[key], b2[key]);
      if (!sharedValue.valid) {
        return {
          valid: false,
          mergeErrorPath: [key, ...sharedValue.mergeErrorPath]
        };
      }
      newObj[key] = sharedValue.data;
    }
    return { valid: true, data: newObj };
  }
  if (Array.isArray(a2) && Array.isArray(b2)) {
    if (a2.length !== b2.length) {
      return { valid: false, mergeErrorPath: [] };
    }
    const newArray = [];
    for (let index = 0; index < a2.length; index++) {
      const itemA = a2[index];
      const itemB = b2[index];
      const sharedValue = mergeValues(itemA, itemB);
      if (!sharedValue.valid) {
        return {
          valid: false,
          mergeErrorPath: [index, ...sharedValue.mergeErrorPath]
        };
      }
      newArray.push(sharedValue.data);
    }
    return { valid: true, data: newArray };
  }
  return { valid: false, mergeErrorPath: [] };
}
__name(mergeValues, "mergeValues");
function handleIntersectionResults(result, left, right) {
  if (left.issues.length) {
    result.issues.push(...left.issues);
  }
  if (right.issues.length) {
    result.issues.push(...right.issues);
  }
  if (aborted(result))
    return result;
  const merged = mergeValues(left.value, right.value);
  if (!merged.valid) {
    throw new Error(`Unmergable intersection. Error path: ${JSON.stringify(merged.mergeErrorPath)}`);
  }
  result.value = merged.data;
  return result;
}
__name(handleIntersectionResults, "handleIntersectionResults");
function handleTupleResult(result, final, index) {
  if (result.issues.length) {
    final.issues.push(...prefixIssues(index, result.issues));
  }
  final.value[index] = result.value;
}
__name(handleTupleResult, "handleTupleResult");
function handleMapResult(keyResult, valueResult, final, key, input, inst, ctx) {
  if (keyResult.issues.length) {
    if (propertyKeyTypes.has(typeof key)) {
      final.issues.push(...prefixIssues(key, keyResult.issues));
    } else {
      final.issues.push({
        code: "invalid_key",
        origin: "map",
        input,
        inst,
        issues: keyResult.issues.map((iss) => finalizeIssue(iss, ctx, config()))
      });
    }
  }
  if (valueResult.issues.length) {
    if (propertyKeyTypes.has(typeof key)) {
      final.issues.push(...prefixIssues(key, valueResult.issues));
    } else {
      final.issues.push({
        origin: "map",
        code: "invalid_element",
        input,
        inst,
        key,
        issues: valueResult.issues.map((iss) => finalizeIssue(iss, ctx, config()))
      });
    }
  }
  final.value.set(keyResult.value, valueResult.value);
}
__name(handleMapResult, "handleMapResult");
function handleSetResult(result, final) {
  if (result.issues.length) {
    final.issues.push(...result.issues);
  }
  final.value.add(result.value);
}
__name(handleSetResult, "handleSetResult");
function handleOptionalResult(result, input) {
  if (result.issues.length && input === void 0) {
    return { issues: [], value: void 0 };
  }
  return result;
}
__name(handleOptionalResult, "handleOptionalResult");
function handleDefaultResult(payload, def) {
  if (payload.value === void 0) {
    payload.value = def.defaultValue;
  }
  return payload;
}
__name(handleDefaultResult, "handleDefaultResult");
function handleNonOptionalResult(payload, inst) {
  if (!payload.issues.length && payload.value === void 0) {
    payload.issues.push({
      code: "invalid_type",
      expected: "nonoptional",
      input: payload.value,
      inst
    });
  }
  return payload;
}
__name(handleNonOptionalResult, "handleNonOptionalResult");
function handlePipeResult(left, next, ctx) {
  if (left.issues.length) {
    left.aborted = true;
    return left;
  }
  return next._zod.run({ value: left.value, issues: left.issues }, ctx);
}
__name(handlePipeResult, "handlePipeResult");
function handleCodecAResult(result, def, ctx) {
  if (result.issues.length) {
    result.aborted = true;
    return result;
  }
  const direction = ctx.direction || "forward";
  if (direction === "forward") {
    const transformed = def.transform(result.value, result);
    if (transformed instanceof Promise) {
      return transformed.then((value) => handleCodecTxResult(result, value, def.out, ctx));
    }
    return handleCodecTxResult(result, transformed, def.out, ctx);
  } else {
    const transformed = def.reverseTransform(result.value, result);
    if (transformed instanceof Promise) {
      return transformed.then((value) => handleCodecTxResult(result, value, def.in, ctx));
    }
    return handleCodecTxResult(result, transformed, def.in, ctx);
  }
}
__name(handleCodecAResult, "handleCodecAResult");
function handleCodecTxResult(left, value, nextSchema, ctx) {
  if (left.issues.length) {
    left.aborted = true;
    return left;
  }
  return nextSchema._zod.run({ value, issues: left.issues }, ctx);
}
__name(handleCodecTxResult, "handleCodecTxResult");
function handleReadonlyResult(payload) {
  payload.value = Object.freeze(payload.value);
  return payload;
}
__name(handleReadonlyResult, "handleReadonlyResult");
function handleRefineResult(result, payload, input, inst) {
  if (!result) {
    const _iss = {
      code: "custom",
      input,
      inst,
      // incorporates params.error into issue reporting
      path: [...inst._zod.def.path ?? []],
      // incorporates params.error into issue reporting
      continue: !inst._zod.def.abort
      // params: inst._zod.def.params,
    };
    if (inst._zod.def.params)
      _iss.params = inst._zod.def.params;
    payload.issues.push(issue(_iss));
  }
}
__name(handleRefineResult, "handleRefineResult");
var $ZodType;
var $ZodString;
var $ZodStringFormat;
var $ZodGUID;
var $ZodUUID;
var $ZodEmail;
var $ZodURL;
var $ZodEmoji;
var $ZodNanoID;
var $ZodCUID;
var $ZodCUID2;
var $ZodULID;
var $ZodXID;
var $ZodKSUID;
var $ZodISODateTime;
var $ZodISODate;
var $ZodISOTime;
var $ZodISODuration;
var $ZodIPv4;
var $ZodIPv6;
var $ZodCIDRv4;
var $ZodCIDRv6;
var $ZodBase64;
var $ZodBase64URL;
var $ZodE164;
var $ZodJWT;
var $ZodCustomStringFormat;
var $ZodNumber;
var $ZodNumberFormat;
var $ZodBoolean;
var $ZodBigInt;
var $ZodBigIntFormat;
var $ZodSymbol;
var $ZodUndefined;
var $ZodNull;
var $ZodAny;
var $ZodUnknown;
var $ZodNever;
var $ZodVoid;
var $ZodDate;
var $ZodArray;
var $ZodObject;
var $ZodObjectJIT;
var $ZodUnion;
var $ZodDiscriminatedUnion;
var $ZodIntersection;
var $ZodTuple;
var $ZodRecord;
var $ZodMap;
var $ZodSet;
var $ZodEnum;
var $ZodLiteral;
var $ZodFile;
var $ZodTransform;
var $ZodOptional;
var $ZodNullable;
var $ZodDefault;
var $ZodPrefault;
var $ZodNonOptional;
var $ZodSuccess;
var $ZodCatch;
var $ZodNaN;
var $ZodPipe;
var $ZodCodec;
var $ZodReadonly;
var $ZodTemplateLiteral;
var $ZodFunction;
var $ZodPromise;
var $ZodLazy;
var $ZodCustom;
var init_schemas = __esm({
  "../node_modules/zod/v4/core/schemas.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_checks();
    init_core();
    init_doc();
    init_parse();
    init_regexes();
    init_util();
    init_versions();
    init_util();
    $ZodType = /* @__PURE__ */ $constructor("$ZodType", (inst, def) => {
      var _a2;
      inst ?? (inst = {});
      inst._zod.def = def;
      inst._zod.bag = inst._zod.bag || {};
      inst._zod.version = version;
      const checks = [...inst._zod.def.checks ?? []];
      if (inst._zod.traits.has("$ZodCheck")) {
        checks.unshift(inst);
      }
      for (const ch2 of checks) {
        for (const fn of ch2._zod.onattach) {
          fn(inst);
        }
      }
      if (checks.length === 0) {
        (_a2 = inst._zod).deferred ?? (_a2.deferred = []);
        inst._zod.deferred?.push(() => {
          inst._zod.run = inst._zod.parse;
        });
      } else {
        const runChecks = /* @__PURE__ */ __name2((payload, checks2, ctx) => {
          let isAborted = aborted(payload);
          let asyncResult;
          for (const ch2 of checks2) {
            if (ch2._zod.def.when) {
              const shouldRun = ch2._zod.def.when(payload);
              if (!shouldRun)
                continue;
            } else if (isAborted) {
              continue;
            }
            const currLen = payload.issues.length;
            const _ = ch2._zod.check(payload);
            if (_ instanceof Promise && ctx?.async === false) {
              throw new $ZodAsyncError();
            }
            if (asyncResult || _ instanceof Promise) {
              asyncResult = (asyncResult ?? Promise.resolve()).then(async () => {
                await _;
                const nextLen = payload.issues.length;
                if (nextLen === currLen)
                  return;
                if (!isAborted)
                  isAborted = aborted(payload, currLen);
              });
            } else {
              const nextLen = payload.issues.length;
              if (nextLen === currLen)
                continue;
              if (!isAborted)
                isAborted = aborted(payload, currLen);
            }
          }
          if (asyncResult) {
            return asyncResult.then(() => {
              return payload;
            });
          }
          return payload;
        }, "runChecks");
        const handleCanaryResult = /* @__PURE__ */ __name2((canary, payload, ctx) => {
          if (aborted(canary)) {
            canary.aborted = true;
            return canary;
          }
          const checkResult = runChecks(payload, checks, ctx);
          if (checkResult instanceof Promise) {
            if (ctx.async === false)
              throw new $ZodAsyncError();
            return checkResult.then((checkResult2) => inst._zod.parse(checkResult2, ctx));
          }
          return inst._zod.parse(checkResult, ctx);
        }, "handleCanaryResult");
        inst._zod.run = (payload, ctx) => {
          if (ctx.skipChecks) {
            return inst._zod.parse(payload, ctx);
          }
          if (ctx.direction === "backward") {
            const canary = inst._zod.parse({ value: payload.value, issues: [] }, { ...ctx, skipChecks: true });
            if (canary instanceof Promise) {
              return canary.then((canary2) => {
                return handleCanaryResult(canary2, payload, ctx);
              });
            }
            return handleCanaryResult(canary, payload, ctx);
          }
          const result = inst._zod.parse(payload, ctx);
          if (result instanceof Promise) {
            if (ctx.async === false)
              throw new $ZodAsyncError();
            return result.then((result2) => runChecks(result2, checks, ctx));
          }
          return runChecks(result, checks, ctx);
        };
      }
      inst["~standard"] = {
        validate: /* @__PURE__ */ __name2((value) => {
          try {
            const r2 = safeParse(inst, value);
            return r2.success ? { value: r2.data } : { issues: r2.error?.issues };
          } catch (_) {
            return safeParseAsync(inst, value).then((r2) => r2.success ? { value: r2.data } : { issues: r2.error?.issues });
          }
        }, "validate"),
        vendor: "zod",
        version: 1
      };
    });
    $ZodString = /* @__PURE__ */ $constructor("$ZodString", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.pattern = [...inst?._zod.bag?.patterns ?? []].pop() ?? string(inst._zod.bag);
      inst._zod.parse = (payload, _) => {
        if (def.coerce)
          try {
            payload.value = String(payload.value);
          } catch (_2) {
          }
        if (typeof payload.value === "string")
          return payload;
        payload.issues.push({
          expected: "string",
          code: "invalid_type",
          input: payload.value,
          inst
        });
        return payload;
      };
    });
    $ZodStringFormat = /* @__PURE__ */ $constructor("$ZodStringFormat", (inst, def) => {
      $ZodCheckStringFormat.init(inst, def);
      $ZodString.init(inst, def);
    });
    $ZodGUID = /* @__PURE__ */ $constructor("$ZodGUID", (inst, def) => {
      def.pattern ?? (def.pattern = guid);
      $ZodStringFormat.init(inst, def);
    });
    $ZodUUID = /* @__PURE__ */ $constructor("$ZodUUID", (inst, def) => {
      if (def.version) {
        const versionMap = {
          v1: 1,
          v2: 2,
          v3: 3,
          v4: 4,
          v5: 5,
          v6: 6,
          v7: 7,
          v8: 8
        };
        const v2 = versionMap[def.version];
        if (v2 === void 0)
          throw new Error(`Invalid UUID version: "${def.version}"`);
        def.pattern ?? (def.pattern = uuid(v2));
      } else
        def.pattern ?? (def.pattern = uuid());
      $ZodStringFormat.init(inst, def);
    });
    $ZodEmail = /* @__PURE__ */ $constructor("$ZodEmail", (inst, def) => {
      def.pattern ?? (def.pattern = email);
      $ZodStringFormat.init(inst, def);
    });
    $ZodURL = /* @__PURE__ */ $constructor("$ZodURL", (inst, def) => {
      $ZodStringFormat.init(inst, def);
      inst._zod.check = (payload) => {
        try {
          const trimmed = payload.value.trim();
          const url2 = new URL(trimmed);
          if (def.hostname) {
            def.hostname.lastIndex = 0;
            if (!def.hostname.test(url2.hostname)) {
              payload.issues.push({
                code: "invalid_format",
                format: "url",
                note: "Invalid hostname",
                pattern: hostname.source,
                input: payload.value,
                inst,
                continue: !def.abort
              });
            }
          }
          if (def.protocol) {
            def.protocol.lastIndex = 0;
            if (!def.protocol.test(url2.protocol.endsWith(":") ? url2.protocol.slice(0, -1) : url2.protocol)) {
              payload.issues.push({
                code: "invalid_format",
                format: "url",
                note: "Invalid protocol",
                pattern: def.protocol.source,
                input: payload.value,
                inst,
                continue: !def.abort
              });
            }
          }
          if (def.normalize) {
            payload.value = url2.href;
          } else {
            payload.value = trimmed;
          }
          return;
        } catch (_) {
          payload.issues.push({
            code: "invalid_format",
            format: "url",
            input: payload.value,
            inst,
            continue: !def.abort
          });
        }
      };
    });
    $ZodEmoji = /* @__PURE__ */ $constructor("$ZodEmoji", (inst, def) => {
      def.pattern ?? (def.pattern = emoji());
      $ZodStringFormat.init(inst, def);
    });
    $ZodNanoID = /* @__PURE__ */ $constructor("$ZodNanoID", (inst, def) => {
      def.pattern ?? (def.pattern = nanoid);
      $ZodStringFormat.init(inst, def);
    });
    $ZodCUID = /* @__PURE__ */ $constructor("$ZodCUID", (inst, def) => {
      def.pattern ?? (def.pattern = cuid);
      $ZodStringFormat.init(inst, def);
    });
    $ZodCUID2 = /* @__PURE__ */ $constructor("$ZodCUID2", (inst, def) => {
      def.pattern ?? (def.pattern = cuid2);
      $ZodStringFormat.init(inst, def);
    });
    $ZodULID = /* @__PURE__ */ $constructor("$ZodULID", (inst, def) => {
      def.pattern ?? (def.pattern = ulid);
      $ZodStringFormat.init(inst, def);
    });
    $ZodXID = /* @__PURE__ */ $constructor("$ZodXID", (inst, def) => {
      def.pattern ?? (def.pattern = xid);
      $ZodStringFormat.init(inst, def);
    });
    $ZodKSUID = /* @__PURE__ */ $constructor("$ZodKSUID", (inst, def) => {
      def.pattern ?? (def.pattern = ksuid);
      $ZodStringFormat.init(inst, def);
    });
    $ZodISODateTime = /* @__PURE__ */ $constructor("$ZodISODateTime", (inst, def) => {
      def.pattern ?? (def.pattern = datetime(def));
      $ZodStringFormat.init(inst, def);
    });
    $ZodISODate = /* @__PURE__ */ $constructor("$ZodISODate", (inst, def) => {
      def.pattern ?? (def.pattern = date);
      $ZodStringFormat.init(inst, def);
    });
    $ZodISOTime = /* @__PURE__ */ $constructor("$ZodISOTime", (inst, def) => {
      def.pattern ?? (def.pattern = time(def));
      $ZodStringFormat.init(inst, def);
    });
    $ZodISODuration = /* @__PURE__ */ $constructor("$ZodISODuration", (inst, def) => {
      def.pattern ?? (def.pattern = duration);
      $ZodStringFormat.init(inst, def);
    });
    $ZodIPv4 = /* @__PURE__ */ $constructor("$ZodIPv4", (inst, def) => {
      def.pattern ?? (def.pattern = ipv4);
      $ZodStringFormat.init(inst, def);
      inst._zod.onattach.push((inst2) => {
        const bag = inst2._zod.bag;
        bag.format = `ipv4`;
      });
    });
    $ZodIPv6 = /* @__PURE__ */ $constructor("$ZodIPv6", (inst, def) => {
      def.pattern ?? (def.pattern = ipv6);
      $ZodStringFormat.init(inst, def);
      inst._zod.onattach.push((inst2) => {
        const bag = inst2._zod.bag;
        bag.format = `ipv6`;
      });
      inst._zod.check = (payload) => {
        try {
          new URL(`http://[${payload.value}]`);
        } catch {
          payload.issues.push({
            code: "invalid_format",
            format: "ipv6",
            input: payload.value,
            inst,
            continue: !def.abort
          });
        }
      };
    });
    $ZodCIDRv4 = /* @__PURE__ */ $constructor("$ZodCIDRv4", (inst, def) => {
      def.pattern ?? (def.pattern = cidrv4);
      $ZodStringFormat.init(inst, def);
    });
    $ZodCIDRv6 = /* @__PURE__ */ $constructor("$ZodCIDRv6", (inst, def) => {
      def.pattern ?? (def.pattern = cidrv6);
      $ZodStringFormat.init(inst, def);
      inst._zod.check = (payload) => {
        const parts = payload.value.split("/");
        try {
          if (parts.length !== 2)
            throw new Error();
          const [address, prefix] = parts;
          if (!prefix)
            throw new Error();
          const prefixNum = Number(prefix);
          if (`${prefixNum}` !== prefix)
            throw new Error();
          if (prefixNum < 0 || prefixNum > 128)
            throw new Error();
          new URL(`http://[${address}]`);
        } catch {
          payload.issues.push({
            code: "invalid_format",
            format: "cidrv6",
            input: payload.value,
            inst,
            continue: !def.abort
          });
        }
      };
    });
    __name2(isValidBase64, "isValidBase64");
    $ZodBase64 = /* @__PURE__ */ $constructor("$ZodBase64", (inst, def) => {
      def.pattern ?? (def.pattern = base64);
      $ZodStringFormat.init(inst, def);
      inst._zod.onattach.push((inst2) => {
        inst2._zod.bag.contentEncoding = "base64";
      });
      inst._zod.check = (payload) => {
        if (isValidBase64(payload.value))
          return;
        payload.issues.push({
          code: "invalid_format",
          format: "base64",
          input: payload.value,
          inst,
          continue: !def.abort
        });
      };
    });
    __name2(isValidBase64URL, "isValidBase64URL");
    $ZodBase64URL = /* @__PURE__ */ $constructor("$ZodBase64URL", (inst, def) => {
      def.pattern ?? (def.pattern = base64url);
      $ZodStringFormat.init(inst, def);
      inst._zod.onattach.push((inst2) => {
        inst2._zod.bag.contentEncoding = "base64url";
      });
      inst._zod.check = (payload) => {
        if (isValidBase64URL(payload.value))
          return;
        payload.issues.push({
          code: "invalid_format",
          format: "base64url",
          input: payload.value,
          inst,
          continue: !def.abort
        });
      };
    });
    $ZodE164 = /* @__PURE__ */ $constructor("$ZodE164", (inst, def) => {
      def.pattern ?? (def.pattern = e164);
      $ZodStringFormat.init(inst, def);
    });
    __name2(isValidJWT, "isValidJWT");
    $ZodJWT = /* @__PURE__ */ $constructor("$ZodJWT", (inst, def) => {
      $ZodStringFormat.init(inst, def);
      inst._zod.check = (payload) => {
        if (isValidJWT(payload.value, def.alg))
          return;
        payload.issues.push({
          code: "invalid_format",
          format: "jwt",
          input: payload.value,
          inst,
          continue: !def.abort
        });
      };
    });
    $ZodCustomStringFormat = /* @__PURE__ */ $constructor("$ZodCustomStringFormat", (inst, def) => {
      $ZodStringFormat.init(inst, def);
      inst._zod.check = (payload) => {
        if (def.fn(payload.value))
          return;
        payload.issues.push({
          code: "invalid_format",
          format: def.format,
          input: payload.value,
          inst,
          continue: !def.abort
        });
      };
    });
    $ZodNumber = /* @__PURE__ */ $constructor("$ZodNumber", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.pattern = inst._zod.bag.pattern ?? number;
      inst._zod.parse = (payload, _ctx) => {
        if (def.coerce)
          try {
            payload.value = Number(payload.value);
          } catch (_) {
          }
        const input = payload.value;
        if (typeof input === "number" && !Number.isNaN(input) && Number.isFinite(input)) {
          return payload;
        }
        const received = typeof input === "number" ? Number.isNaN(input) ? "NaN" : !Number.isFinite(input) ? "Infinity" : void 0 : void 0;
        payload.issues.push({
          expected: "number",
          code: "invalid_type",
          input,
          inst,
          ...received ? { received } : {}
        });
        return payload;
      };
    });
    $ZodNumberFormat = /* @__PURE__ */ $constructor("$ZodNumber", (inst, def) => {
      $ZodCheckNumberFormat.init(inst, def);
      $ZodNumber.init(inst, def);
    });
    $ZodBoolean = /* @__PURE__ */ $constructor("$ZodBoolean", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.pattern = boolean;
      inst._zod.parse = (payload, _ctx) => {
        if (def.coerce)
          try {
            payload.value = Boolean(payload.value);
          } catch (_) {
          }
        const input = payload.value;
        if (typeof input === "boolean")
          return payload;
        payload.issues.push({
          expected: "boolean",
          code: "invalid_type",
          input,
          inst
        });
        return payload;
      };
    });
    $ZodBigInt = /* @__PURE__ */ $constructor("$ZodBigInt", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.pattern = bigint;
      inst._zod.parse = (payload, _ctx) => {
        if (def.coerce)
          try {
            payload.value = BigInt(payload.value);
          } catch (_) {
          }
        if (typeof payload.value === "bigint")
          return payload;
        payload.issues.push({
          expected: "bigint",
          code: "invalid_type",
          input: payload.value,
          inst
        });
        return payload;
      };
    });
    $ZodBigIntFormat = /* @__PURE__ */ $constructor("$ZodBigInt", (inst, def) => {
      $ZodCheckBigIntFormat.init(inst, def);
      $ZodBigInt.init(inst, def);
    });
    $ZodSymbol = /* @__PURE__ */ $constructor("$ZodSymbol", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.parse = (payload, _ctx) => {
        const input = payload.value;
        if (typeof input === "symbol")
          return payload;
        payload.issues.push({
          expected: "symbol",
          code: "invalid_type",
          input,
          inst
        });
        return payload;
      };
    });
    $ZodUndefined = /* @__PURE__ */ $constructor("$ZodUndefined", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.pattern = _undefined;
      inst._zod.values = /* @__PURE__ */ new Set([void 0]);
      inst._zod.optin = "optional";
      inst._zod.optout = "optional";
      inst._zod.parse = (payload, _ctx) => {
        const input = payload.value;
        if (typeof input === "undefined")
          return payload;
        payload.issues.push({
          expected: "undefined",
          code: "invalid_type",
          input,
          inst
        });
        return payload;
      };
    });
    $ZodNull = /* @__PURE__ */ $constructor("$ZodNull", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.pattern = _null;
      inst._zod.values = /* @__PURE__ */ new Set([null]);
      inst._zod.parse = (payload, _ctx) => {
        const input = payload.value;
        if (input === null)
          return payload;
        payload.issues.push({
          expected: "null",
          code: "invalid_type",
          input,
          inst
        });
        return payload;
      };
    });
    $ZodAny = /* @__PURE__ */ $constructor("$ZodAny", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.parse = (payload) => payload;
    });
    $ZodUnknown = /* @__PURE__ */ $constructor("$ZodUnknown", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.parse = (payload) => payload;
    });
    $ZodNever = /* @__PURE__ */ $constructor("$ZodNever", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.parse = (payload, _ctx) => {
        payload.issues.push({
          expected: "never",
          code: "invalid_type",
          input: payload.value,
          inst
        });
        return payload;
      };
    });
    $ZodVoid = /* @__PURE__ */ $constructor("$ZodVoid", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.parse = (payload, _ctx) => {
        const input = payload.value;
        if (typeof input === "undefined")
          return payload;
        payload.issues.push({
          expected: "void",
          code: "invalid_type",
          input,
          inst
        });
        return payload;
      };
    });
    $ZodDate = /* @__PURE__ */ $constructor("$ZodDate", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.parse = (payload, _ctx) => {
        if (def.coerce) {
          try {
            payload.value = new Date(payload.value);
          } catch (_err) {
          }
        }
        const input = payload.value;
        const isDate = input instanceof Date;
        const isValidDate = isDate && !Number.isNaN(input.getTime());
        if (isValidDate)
          return payload;
        payload.issues.push({
          expected: "date",
          code: "invalid_type",
          input,
          ...isDate ? { received: "Invalid Date" } : {},
          inst
        });
        return payload;
      };
    });
    __name2(handleArrayResult, "handleArrayResult");
    $ZodArray = /* @__PURE__ */ $constructor("$ZodArray", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.parse = (payload, ctx) => {
        const input = payload.value;
        if (!Array.isArray(input)) {
          payload.issues.push({
            expected: "array",
            code: "invalid_type",
            input,
            inst
          });
          return payload;
        }
        payload.value = Array(input.length);
        const proms = [];
        for (let i2 = 0; i2 < input.length; i2++) {
          const item = input[i2];
          const result = def.element._zod.run({
            value: item,
            issues: []
          }, ctx);
          if (result instanceof Promise) {
            proms.push(result.then((result2) => handleArrayResult(result2, payload, i2)));
          } else {
            handleArrayResult(result, payload, i2);
          }
        }
        if (proms.length) {
          return Promise.all(proms).then(() => payload);
        }
        return payload;
      };
    });
    __name2(handlePropertyResult, "handlePropertyResult");
    __name2(normalizeDef, "normalizeDef");
    __name2(handleCatchall, "handleCatchall");
    $ZodObject = /* @__PURE__ */ $constructor("$ZodObject", (inst, def) => {
      $ZodType.init(inst, def);
      const _normalized = cached(() => normalizeDef(def));
      defineLazy(inst._zod, "propValues", () => {
        const shape = def.shape;
        const propValues = {};
        for (const key in shape) {
          const field = shape[key]._zod;
          if (field.values) {
            propValues[key] ?? (propValues[key] = /* @__PURE__ */ new Set());
            for (const v2 of field.values)
              propValues[key].add(v2);
          }
        }
        return propValues;
      });
      const isObject2 = isObject;
      const catchall = def.catchall;
      let value;
      inst._zod.parse = (payload, ctx) => {
        value ?? (value = _normalized.value);
        const input = payload.value;
        if (!isObject2(input)) {
          payload.issues.push({
            expected: "object",
            code: "invalid_type",
            input,
            inst
          });
          return payload;
        }
        payload.value = {};
        const proms = [];
        const shape = value.shape;
        for (const key of value.keys) {
          const el = shape[key];
          const r2 = el._zod.run({ value: input[key], issues: [] }, ctx);
          if (r2 instanceof Promise) {
            proms.push(r2.then((r3) => handlePropertyResult(r3, payload, key, input)));
          } else {
            handlePropertyResult(r2, payload, key, input);
          }
        }
        if (!catchall) {
          return proms.length ? Promise.all(proms).then(() => payload) : payload;
        }
        return handleCatchall(proms, input, payload, ctx, _normalized.value, inst);
      };
    });
    $ZodObjectJIT = /* @__PURE__ */ $constructor("$ZodObjectJIT", (inst, def) => {
      $ZodObject.init(inst, def);
      const superParse = inst._zod.parse;
      const _normalized = cached(() => normalizeDef(def));
      const generateFastpass = /* @__PURE__ */ __name2((shape) => {
        const doc = new Doc(["shape", "payload", "ctx"]);
        const normalized = _normalized.value;
        const parseStr = /* @__PURE__ */ __name2((key) => {
          const k2 = esc(key);
          return `shape[${k2}]._zod.run({ value: input[${k2}], issues: [] }, ctx)`;
        }, "parseStr");
        doc.write(`const input = payload.value;`);
        const ids = /* @__PURE__ */ Object.create(null);
        let counter = 0;
        for (const key of normalized.keys) {
          ids[key] = `key_${counter++}`;
        }
        doc.write(`const newResult = {};`);
        for (const key of normalized.keys) {
          const id = ids[key];
          const k2 = esc(key);
          doc.write(`const ${id} = ${parseStr(key)};`);
          doc.write(`
        if (${id}.issues.length) {
          payload.issues = payload.issues.concat(${id}.issues.map(iss => ({
            ...iss,
            path: iss.path ? [${k2}, ...iss.path] : [${k2}]
          })));
        }
        
        
        if (${id}.value === undefined) {
          if (${k2} in input) {
            newResult[${k2}] = undefined;
          }
        } else {
          newResult[${k2}] = ${id}.value;
        }
        
      `);
        }
        doc.write(`payload.value = newResult;`);
        doc.write(`return payload;`);
        const fn = doc.compile();
        return (payload, ctx) => fn(shape, payload, ctx);
      }, "generateFastpass");
      let fastpass;
      const isObject2 = isObject;
      const jit = !globalConfig.jitless;
      const allowsEval2 = allowsEval;
      const fastEnabled = jit && allowsEval2.value;
      const catchall = def.catchall;
      let value;
      inst._zod.parse = (payload, ctx) => {
        value ?? (value = _normalized.value);
        const input = payload.value;
        if (!isObject2(input)) {
          payload.issues.push({
            expected: "object",
            code: "invalid_type",
            input,
            inst
          });
          return payload;
        }
        if (jit && fastEnabled && ctx?.async === false && ctx.jitless !== true) {
          if (!fastpass)
            fastpass = generateFastpass(def.shape);
          payload = fastpass(payload, ctx);
          if (!catchall)
            return payload;
          return handleCatchall([], input, payload, ctx, value, inst);
        }
        return superParse(payload, ctx);
      };
    });
    __name2(handleUnionResults, "handleUnionResults");
    $ZodUnion = /* @__PURE__ */ $constructor("$ZodUnion", (inst, def) => {
      $ZodType.init(inst, def);
      defineLazy(inst._zod, "optin", () => def.options.some((o2) => o2._zod.optin === "optional") ? "optional" : void 0);
      defineLazy(inst._zod, "optout", () => def.options.some((o2) => o2._zod.optout === "optional") ? "optional" : void 0);
      defineLazy(inst._zod, "values", () => {
        if (def.options.every((o2) => o2._zod.values)) {
          return new Set(def.options.flatMap((option) => Array.from(option._zod.values)));
        }
        return void 0;
      });
      defineLazy(inst._zod, "pattern", () => {
        if (def.options.every((o2) => o2._zod.pattern)) {
          const patterns = def.options.map((o2) => o2._zod.pattern);
          return new RegExp(`^(${patterns.map((p2) => cleanRegex(p2.source)).join("|")})$`);
        }
        return void 0;
      });
      const single = def.options.length === 1;
      const first = def.options[0]._zod.run;
      inst._zod.parse = (payload, ctx) => {
        if (single) {
          return first(payload, ctx);
        }
        let async = false;
        const results = [];
        for (const option of def.options) {
          const result = option._zod.run({
            value: payload.value,
            issues: []
          }, ctx);
          if (result instanceof Promise) {
            results.push(result);
            async = true;
          } else {
            if (result.issues.length === 0)
              return result;
            results.push(result);
          }
        }
        if (!async)
          return handleUnionResults(results, payload, inst, ctx);
        return Promise.all(results).then((results2) => {
          return handleUnionResults(results2, payload, inst, ctx);
        });
      };
    });
    $ZodDiscriminatedUnion = /* @__PURE__ */ $constructor("$ZodDiscriminatedUnion", (inst, def) => {
      $ZodUnion.init(inst, def);
      const _super = inst._zod.parse;
      defineLazy(inst._zod, "propValues", () => {
        const propValues = {};
        for (const option of def.options) {
          const pv = option._zod.propValues;
          if (!pv || Object.keys(pv).length === 0)
            throw new Error(`Invalid discriminated union option at index "${def.options.indexOf(option)}"`);
          for (const [k2, v2] of Object.entries(pv)) {
            if (!propValues[k2])
              propValues[k2] = /* @__PURE__ */ new Set();
            for (const val of v2) {
              propValues[k2].add(val);
            }
          }
        }
        return propValues;
      });
      const disc = cached(() => {
        const opts = def.options;
        const map3 = /* @__PURE__ */ new Map();
        for (const o2 of opts) {
          const values = o2._zod.propValues?.[def.discriminator];
          if (!values || values.size === 0)
            throw new Error(`Invalid discriminated union option at index "${def.options.indexOf(o2)}"`);
          for (const v2 of values) {
            if (map3.has(v2)) {
              throw new Error(`Duplicate discriminator value "${String(v2)}"`);
            }
            map3.set(v2, o2);
          }
        }
        return map3;
      });
      inst._zod.parse = (payload, ctx) => {
        const input = payload.value;
        if (!isObject(input)) {
          payload.issues.push({
            code: "invalid_type",
            expected: "object",
            input,
            inst
          });
          return payload;
        }
        const opt = disc.value.get(input?.[def.discriminator]);
        if (opt) {
          return opt._zod.run(payload, ctx);
        }
        if (def.unionFallback) {
          return _super(payload, ctx);
        }
        payload.issues.push({
          code: "invalid_union",
          errors: [],
          note: "No matching discriminator",
          discriminator: def.discriminator,
          input,
          path: [def.discriminator],
          inst
        });
        return payload;
      };
    });
    $ZodIntersection = /* @__PURE__ */ $constructor("$ZodIntersection", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.parse = (payload, ctx) => {
        const input = payload.value;
        const left = def.left._zod.run({ value: input, issues: [] }, ctx);
        const right = def.right._zod.run({ value: input, issues: [] }, ctx);
        const async = left instanceof Promise || right instanceof Promise;
        if (async) {
          return Promise.all([left, right]).then(([left2, right2]) => {
            return handleIntersectionResults(payload, left2, right2);
          });
        }
        return handleIntersectionResults(payload, left, right);
      };
    });
    __name2(mergeValues, "mergeValues");
    __name2(handleIntersectionResults, "handleIntersectionResults");
    $ZodTuple = /* @__PURE__ */ $constructor("$ZodTuple", (inst, def) => {
      $ZodType.init(inst, def);
      const items = def.items;
      const optStart = items.length - [...items].reverse().findIndex((item) => item._zod.optin !== "optional");
      inst._zod.parse = (payload, ctx) => {
        const input = payload.value;
        if (!Array.isArray(input)) {
          payload.issues.push({
            input,
            inst,
            expected: "tuple",
            code: "invalid_type"
          });
          return payload;
        }
        payload.value = [];
        const proms = [];
        if (!def.rest) {
          const tooBig = input.length > items.length;
          const tooSmall = input.length < optStart - 1;
          if (tooBig || tooSmall) {
            payload.issues.push({
              ...tooBig ? { code: "too_big", maximum: items.length } : { code: "too_small", minimum: items.length },
              input,
              inst,
              origin: "array"
            });
            return payload;
          }
        }
        let i2 = -1;
        for (const item of items) {
          i2++;
          if (i2 >= input.length) {
            if (i2 >= optStart)
              continue;
          }
          const result = item._zod.run({
            value: input[i2],
            issues: []
          }, ctx);
          if (result instanceof Promise) {
            proms.push(result.then((result2) => handleTupleResult(result2, payload, i2)));
          } else {
            handleTupleResult(result, payload, i2);
          }
        }
        if (def.rest) {
          const rest = input.slice(items.length);
          for (const el of rest) {
            i2++;
            const result = def.rest._zod.run({
              value: el,
              issues: []
            }, ctx);
            if (result instanceof Promise) {
              proms.push(result.then((result2) => handleTupleResult(result2, payload, i2)));
            } else {
              handleTupleResult(result, payload, i2);
            }
          }
        }
        if (proms.length)
          return Promise.all(proms).then(() => payload);
        return payload;
      };
    });
    __name2(handleTupleResult, "handleTupleResult");
    $ZodRecord = /* @__PURE__ */ $constructor("$ZodRecord", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.parse = (payload, ctx) => {
        const input = payload.value;
        if (!isPlainObject(input)) {
          payload.issues.push({
            expected: "record",
            code: "invalid_type",
            input,
            inst
          });
          return payload;
        }
        const proms = [];
        if (def.keyType._zod.values) {
          const values = def.keyType._zod.values;
          payload.value = {};
          for (const key of values) {
            if (typeof key === "string" || typeof key === "number" || typeof key === "symbol") {
              const result = def.valueType._zod.run({ value: input[key], issues: [] }, ctx);
              if (result instanceof Promise) {
                proms.push(result.then((result2) => {
                  if (result2.issues.length) {
                    payload.issues.push(...prefixIssues(key, result2.issues));
                  }
                  payload.value[key] = result2.value;
                }));
              } else {
                if (result.issues.length) {
                  payload.issues.push(...prefixIssues(key, result.issues));
                }
                payload.value[key] = result.value;
              }
            }
          }
          let unrecognized;
          for (const key in input) {
            if (!values.has(key)) {
              unrecognized = unrecognized ?? [];
              unrecognized.push(key);
            }
          }
          if (unrecognized && unrecognized.length > 0) {
            payload.issues.push({
              code: "unrecognized_keys",
              input,
              inst,
              keys: unrecognized
            });
          }
        } else {
          payload.value = {};
          for (const key of Reflect.ownKeys(input)) {
            if (key === "__proto__")
              continue;
            const keyResult = def.keyType._zod.run({ value: key, issues: [] }, ctx);
            if (keyResult instanceof Promise) {
              throw new Error("Async schemas not supported in object keys currently");
            }
            if (keyResult.issues.length) {
              payload.issues.push({
                code: "invalid_key",
                origin: "record",
                issues: keyResult.issues.map((iss) => finalizeIssue(iss, ctx, config())),
                input: key,
                path: [key],
                inst
              });
              payload.value[keyResult.value] = keyResult.value;
              continue;
            }
            const result = def.valueType._zod.run({ value: input[key], issues: [] }, ctx);
            if (result instanceof Promise) {
              proms.push(result.then((result2) => {
                if (result2.issues.length) {
                  payload.issues.push(...prefixIssues(key, result2.issues));
                }
                payload.value[keyResult.value] = result2.value;
              }));
            } else {
              if (result.issues.length) {
                payload.issues.push(...prefixIssues(key, result.issues));
              }
              payload.value[keyResult.value] = result.value;
            }
          }
        }
        if (proms.length) {
          return Promise.all(proms).then(() => payload);
        }
        return payload;
      };
    });
    $ZodMap = /* @__PURE__ */ $constructor("$ZodMap", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.parse = (payload, ctx) => {
        const input = payload.value;
        if (!(input instanceof Map)) {
          payload.issues.push({
            expected: "map",
            code: "invalid_type",
            input,
            inst
          });
          return payload;
        }
        const proms = [];
        payload.value = /* @__PURE__ */ new Map();
        for (const [key, value] of input) {
          const keyResult = def.keyType._zod.run({ value: key, issues: [] }, ctx);
          const valueResult = def.valueType._zod.run({ value, issues: [] }, ctx);
          if (keyResult instanceof Promise || valueResult instanceof Promise) {
            proms.push(Promise.all([keyResult, valueResult]).then(([keyResult2, valueResult2]) => {
              handleMapResult(keyResult2, valueResult2, payload, key, input, inst, ctx);
            }));
          } else {
            handleMapResult(keyResult, valueResult, payload, key, input, inst, ctx);
          }
        }
        if (proms.length)
          return Promise.all(proms).then(() => payload);
        return payload;
      };
    });
    __name2(handleMapResult, "handleMapResult");
    $ZodSet = /* @__PURE__ */ $constructor("$ZodSet", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.parse = (payload, ctx) => {
        const input = payload.value;
        if (!(input instanceof Set)) {
          payload.issues.push({
            input,
            inst,
            expected: "set",
            code: "invalid_type"
          });
          return payload;
        }
        const proms = [];
        payload.value = /* @__PURE__ */ new Set();
        for (const item of input) {
          const result = def.valueType._zod.run({ value: item, issues: [] }, ctx);
          if (result instanceof Promise) {
            proms.push(result.then((result2) => handleSetResult(result2, payload)));
          } else
            handleSetResult(result, payload);
        }
        if (proms.length)
          return Promise.all(proms).then(() => payload);
        return payload;
      };
    });
    __name2(handleSetResult, "handleSetResult");
    $ZodEnum = /* @__PURE__ */ $constructor("$ZodEnum", (inst, def) => {
      $ZodType.init(inst, def);
      const values = getEnumValues(def.entries);
      const valuesSet = new Set(values);
      inst._zod.values = valuesSet;
      inst._zod.pattern = new RegExp(`^(${values.filter((k2) => propertyKeyTypes.has(typeof k2)).map((o2) => typeof o2 === "string" ? escapeRegex(o2) : o2.toString()).join("|")})$`);
      inst._zod.parse = (payload, _ctx) => {
        const input = payload.value;
        if (valuesSet.has(input)) {
          return payload;
        }
        payload.issues.push({
          code: "invalid_value",
          values,
          input,
          inst
        });
        return payload;
      };
    });
    $ZodLiteral = /* @__PURE__ */ $constructor("$ZodLiteral", (inst, def) => {
      $ZodType.init(inst, def);
      if (def.values.length === 0) {
        throw new Error("Cannot create literal schema with no valid values");
      }
      inst._zod.values = new Set(def.values);
      inst._zod.pattern = new RegExp(`^(${def.values.map((o2) => typeof o2 === "string" ? escapeRegex(o2) : o2 ? escapeRegex(o2.toString()) : String(o2)).join("|")})$`);
      inst._zod.parse = (payload, _ctx) => {
        const input = payload.value;
        if (inst._zod.values.has(input)) {
          return payload;
        }
        payload.issues.push({
          code: "invalid_value",
          values: def.values,
          input,
          inst
        });
        return payload;
      };
    });
    $ZodFile = /* @__PURE__ */ $constructor("$ZodFile", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.parse = (payload, _ctx) => {
        const input = payload.value;
        if (input instanceof File)
          return payload;
        payload.issues.push({
          expected: "file",
          code: "invalid_type",
          input,
          inst
        });
        return payload;
      };
    });
    $ZodTransform = /* @__PURE__ */ $constructor("$ZodTransform", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.parse = (payload, ctx) => {
        if (ctx.direction === "backward") {
          throw new $ZodEncodeError(inst.constructor.name);
        }
        const _out = def.transform(payload.value, payload);
        if (ctx.async) {
          const output = _out instanceof Promise ? _out : Promise.resolve(_out);
          return output.then((output2) => {
            payload.value = output2;
            return payload;
          });
        }
        if (_out instanceof Promise) {
          throw new $ZodAsyncError();
        }
        payload.value = _out;
        return payload;
      };
    });
    __name2(handleOptionalResult, "handleOptionalResult");
    $ZodOptional = /* @__PURE__ */ $constructor("$ZodOptional", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.optin = "optional";
      inst._zod.optout = "optional";
      defineLazy(inst._zod, "values", () => {
        return def.innerType._zod.values ? /* @__PURE__ */ new Set([...def.innerType._zod.values, void 0]) : void 0;
      });
      defineLazy(inst._zod, "pattern", () => {
        const pattern = def.innerType._zod.pattern;
        return pattern ? new RegExp(`^(${cleanRegex(pattern.source)})?$`) : void 0;
      });
      inst._zod.parse = (payload, ctx) => {
        if (def.innerType._zod.optin === "optional") {
          const result = def.innerType._zod.run(payload, ctx);
          if (result instanceof Promise)
            return result.then((r2) => handleOptionalResult(r2, payload.value));
          return handleOptionalResult(result, payload.value);
        }
        if (payload.value === void 0) {
          return payload;
        }
        return def.innerType._zod.run(payload, ctx);
      };
    });
    $ZodNullable = /* @__PURE__ */ $constructor("$ZodNullable", (inst, def) => {
      $ZodType.init(inst, def);
      defineLazy(inst._zod, "optin", () => def.innerType._zod.optin);
      defineLazy(inst._zod, "optout", () => def.innerType._zod.optout);
      defineLazy(inst._zod, "pattern", () => {
        const pattern = def.innerType._zod.pattern;
        return pattern ? new RegExp(`^(${cleanRegex(pattern.source)}|null)$`) : void 0;
      });
      defineLazy(inst._zod, "values", () => {
        return def.innerType._zod.values ? /* @__PURE__ */ new Set([...def.innerType._zod.values, null]) : void 0;
      });
      inst._zod.parse = (payload, ctx) => {
        if (payload.value === null)
          return payload;
        return def.innerType._zod.run(payload, ctx);
      };
    });
    $ZodDefault = /* @__PURE__ */ $constructor("$ZodDefault", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.optin = "optional";
      defineLazy(inst._zod, "values", () => def.innerType._zod.values);
      inst._zod.parse = (payload, ctx) => {
        if (ctx.direction === "backward") {
          return def.innerType._zod.run(payload, ctx);
        }
        if (payload.value === void 0) {
          payload.value = def.defaultValue;
          return payload;
        }
        const result = def.innerType._zod.run(payload, ctx);
        if (result instanceof Promise) {
          return result.then((result2) => handleDefaultResult(result2, def));
        }
        return handleDefaultResult(result, def);
      };
    });
    __name2(handleDefaultResult, "handleDefaultResult");
    $ZodPrefault = /* @__PURE__ */ $constructor("$ZodPrefault", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.optin = "optional";
      defineLazy(inst._zod, "values", () => def.innerType._zod.values);
      inst._zod.parse = (payload, ctx) => {
        if (ctx.direction === "backward") {
          return def.innerType._zod.run(payload, ctx);
        }
        if (payload.value === void 0) {
          payload.value = def.defaultValue;
        }
        return def.innerType._zod.run(payload, ctx);
      };
    });
    $ZodNonOptional = /* @__PURE__ */ $constructor("$ZodNonOptional", (inst, def) => {
      $ZodType.init(inst, def);
      defineLazy(inst._zod, "values", () => {
        const v2 = def.innerType._zod.values;
        return v2 ? new Set([...v2].filter((x2) => x2 !== void 0)) : void 0;
      });
      inst._zod.parse = (payload, ctx) => {
        const result = def.innerType._zod.run(payload, ctx);
        if (result instanceof Promise) {
          return result.then((result2) => handleNonOptionalResult(result2, inst));
        }
        return handleNonOptionalResult(result, inst);
      };
    });
    __name2(handleNonOptionalResult, "handleNonOptionalResult");
    $ZodSuccess = /* @__PURE__ */ $constructor("$ZodSuccess", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.parse = (payload, ctx) => {
        if (ctx.direction === "backward") {
          throw new $ZodEncodeError("ZodSuccess");
        }
        const result = def.innerType._zod.run(payload, ctx);
        if (result instanceof Promise) {
          return result.then((result2) => {
            payload.value = result2.issues.length === 0;
            return payload;
          });
        }
        payload.value = result.issues.length === 0;
        return payload;
      };
    });
    $ZodCatch = /* @__PURE__ */ $constructor("$ZodCatch", (inst, def) => {
      $ZodType.init(inst, def);
      defineLazy(inst._zod, "optin", () => def.innerType._zod.optin);
      defineLazy(inst._zod, "optout", () => def.innerType._zod.optout);
      defineLazy(inst._zod, "values", () => def.innerType._zod.values);
      inst._zod.parse = (payload, ctx) => {
        if (ctx.direction === "backward") {
          return def.innerType._zod.run(payload, ctx);
        }
        const result = def.innerType._zod.run(payload, ctx);
        if (result instanceof Promise) {
          return result.then((result2) => {
            payload.value = result2.value;
            if (result2.issues.length) {
              payload.value = def.catchValue({
                ...payload,
                error: {
                  issues: result2.issues.map((iss) => finalizeIssue(iss, ctx, config()))
                },
                input: payload.value
              });
              payload.issues = [];
            }
            return payload;
          });
        }
        payload.value = result.value;
        if (result.issues.length) {
          payload.value = def.catchValue({
            ...payload,
            error: {
              issues: result.issues.map((iss) => finalizeIssue(iss, ctx, config()))
            },
            input: payload.value
          });
          payload.issues = [];
        }
        return payload;
      };
    });
    $ZodNaN = /* @__PURE__ */ $constructor("$ZodNaN", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.parse = (payload, _ctx) => {
        if (typeof payload.value !== "number" || !Number.isNaN(payload.value)) {
          payload.issues.push({
            input: payload.value,
            inst,
            expected: "nan",
            code: "invalid_type"
          });
          return payload;
        }
        return payload;
      };
    });
    $ZodPipe = /* @__PURE__ */ $constructor("$ZodPipe", (inst, def) => {
      $ZodType.init(inst, def);
      defineLazy(inst._zod, "values", () => def.in._zod.values);
      defineLazy(inst._zod, "optin", () => def.in._zod.optin);
      defineLazy(inst._zod, "optout", () => def.out._zod.optout);
      defineLazy(inst._zod, "propValues", () => def.in._zod.propValues);
      inst._zod.parse = (payload, ctx) => {
        if (ctx.direction === "backward") {
          const right = def.out._zod.run(payload, ctx);
          if (right instanceof Promise) {
            return right.then((right2) => handlePipeResult(right2, def.in, ctx));
          }
          return handlePipeResult(right, def.in, ctx);
        }
        const left = def.in._zod.run(payload, ctx);
        if (left instanceof Promise) {
          return left.then((left2) => handlePipeResult(left2, def.out, ctx));
        }
        return handlePipeResult(left, def.out, ctx);
      };
    });
    __name2(handlePipeResult, "handlePipeResult");
    $ZodCodec = /* @__PURE__ */ $constructor("$ZodCodec", (inst, def) => {
      $ZodType.init(inst, def);
      defineLazy(inst._zod, "values", () => def.in._zod.values);
      defineLazy(inst._zod, "optin", () => def.in._zod.optin);
      defineLazy(inst._zod, "optout", () => def.out._zod.optout);
      defineLazy(inst._zod, "propValues", () => def.in._zod.propValues);
      inst._zod.parse = (payload, ctx) => {
        const direction = ctx.direction || "forward";
        if (direction === "forward") {
          const left = def.in._zod.run(payload, ctx);
          if (left instanceof Promise) {
            return left.then((left2) => handleCodecAResult(left2, def, ctx));
          }
          return handleCodecAResult(left, def, ctx);
        } else {
          const right = def.out._zod.run(payload, ctx);
          if (right instanceof Promise) {
            return right.then((right2) => handleCodecAResult(right2, def, ctx));
          }
          return handleCodecAResult(right, def, ctx);
        }
      };
    });
    __name2(handleCodecAResult, "handleCodecAResult");
    __name2(handleCodecTxResult, "handleCodecTxResult");
    $ZodReadonly = /* @__PURE__ */ $constructor("$ZodReadonly", (inst, def) => {
      $ZodType.init(inst, def);
      defineLazy(inst._zod, "propValues", () => def.innerType._zod.propValues);
      defineLazy(inst._zod, "values", () => def.innerType._zod.values);
      defineLazy(inst._zod, "optin", () => def.innerType._zod.optin);
      defineLazy(inst._zod, "optout", () => def.innerType._zod.optout);
      inst._zod.parse = (payload, ctx) => {
        if (ctx.direction === "backward") {
          return def.innerType._zod.run(payload, ctx);
        }
        const result = def.innerType._zod.run(payload, ctx);
        if (result instanceof Promise) {
          return result.then(handleReadonlyResult);
        }
        return handleReadonlyResult(result);
      };
    });
    __name2(handleReadonlyResult, "handleReadonlyResult");
    $ZodTemplateLiteral = /* @__PURE__ */ $constructor("$ZodTemplateLiteral", (inst, def) => {
      $ZodType.init(inst, def);
      const regexParts = [];
      for (const part of def.parts) {
        if (typeof part === "object" && part !== null) {
          if (!part._zod.pattern) {
            throw new Error(`Invalid template literal part, no pattern found: ${[...part._zod.traits].shift()}`);
          }
          const source = part._zod.pattern instanceof RegExp ? part._zod.pattern.source : part._zod.pattern;
          if (!source)
            throw new Error(`Invalid template literal part: ${part._zod.traits}`);
          const start = source.startsWith("^") ? 1 : 0;
          const end = source.endsWith("$") ? source.length - 1 : source.length;
          regexParts.push(source.slice(start, end));
        } else if (part === null || primitiveTypes.has(typeof part)) {
          regexParts.push(escapeRegex(`${part}`));
        } else {
          throw new Error(`Invalid template literal part: ${part}`);
        }
      }
      inst._zod.pattern = new RegExp(`^${regexParts.join("")}$`);
      inst._zod.parse = (payload, _ctx) => {
        if (typeof payload.value !== "string") {
          payload.issues.push({
            input: payload.value,
            inst,
            expected: "template_literal",
            code: "invalid_type"
          });
          return payload;
        }
        inst._zod.pattern.lastIndex = 0;
        if (!inst._zod.pattern.test(payload.value)) {
          payload.issues.push({
            input: payload.value,
            inst,
            code: "invalid_format",
            format: def.format ?? "template_literal",
            pattern: inst._zod.pattern.source
          });
          return payload;
        }
        return payload;
      };
    });
    $ZodFunction = /* @__PURE__ */ $constructor("$ZodFunction", (inst, def) => {
      $ZodType.init(inst, def);
      inst._def = def;
      inst._zod.def = def;
      inst.implement = (func) => {
        if (typeof func !== "function") {
          throw new Error("implement() must be called with a function");
        }
        return function(...args) {
          const parsedArgs = inst._def.input ? parse(inst._def.input, args) : args;
          const result = Reflect.apply(func, this, parsedArgs);
          if (inst._def.output) {
            return parse(inst._def.output, result);
          }
          return result;
        };
      };
      inst.implementAsync = (func) => {
        if (typeof func !== "function") {
          throw new Error("implementAsync() must be called with a function");
        }
        return async function(...args) {
          const parsedArgs = inst._def.input ? await parseAsync(inst._def.input, args) : args;
          const result = await Reflect.apply(func, this, parsedArgs);
          if (inst._def.output) {
            return await parseAsync(inst._def.output, result);
          }
          return result;
        };
      };
      inst._zod.parse = (payload, _ctx) => {
        if (typeof payload.value !== "function") {
          payload.issues.push({
            code: "invalid_type",
            expected: "function",
            input: payload.value,
            inst
          });
          return payload;
        }
        const hasPromiseOutput = inst._def.output && inst._def.output._zod.def.type === "promise";
        if (hasPromiseOutput) {
          payload.value = inst.implementAsync(payload.value);
        } else {
          payload.value = inst.implement(payload.value);
        }
        return payload;
      };
      inst.input = (...args) => {
        const F2 = inst.constructor;
        if (Array.isArray(args[0])) {
          return new F2({
            type: "function",
            input: new $ZodTuple({
              type: "tuple",
              items: args[0],
              rest: args[1]
            }),
            output: inst._def.output
          });
        }
        return new F2({
          type: "function",
          input: args[0],
          output: inst._def.output
        });
      };
      inst.output = (output) => {
        const F2 = inst.constructor;
        return new F2({
          type: "function",
          input: inst._def.input,
          output
        });
      };
      return inst;
    });
    $ZodPromise = /* @__PURE__ */ $constructor("$ZodPromise", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.parse = (payload, ctx) => {
        return Promise.resolve(payload.value).then((inner) => def.innerType._zod.run({ value: inner, issues: [] }, ctx));
      };
    });
    $ZodLazy = /* @__PURE__ */ $constructor("$ZodLazy", (inst, def) => {
      $ZodType.init(inst, def);
      defineLazy(inst._zod, "innerType", () => def.getter());
      defineLazy(inst._zod, "pattern", () => inst._zod.innerType._zod.pattern);
      defineLazy(inst._zod, "propValues", () => inst._zod.innerType._zod.propValues);
      defineLazy(inst._zod, "optin", () => inst._zod.innerType._zod.optin ?? void 0);
      defineLazy(inst._zod, "optout", () => inst._zod.innerType._zod.optout ?? void 0);
      inst._zod.parse = (payload, ctx) => {
        const inner = inst._zod.innerType;
        return inner._zod.run(payload, ctx);
      };
    });
    $ZodCustom = /* @__PURE__ */ $constructor("$ZodCustom", (inst, def) => {
      $ZodCheck.init(inst, def);
      $ZodType.init(inst, def);
      inst._zod.parse = (payload, _) => {
        return payload;
      };
      inst._zod.check = (payload) => {
        const input = payload.value;
        const r2 = def.fn(input);
        if (r2 instanceof Promise) {
          return r2.then((r3) => handleRefineResult(r3, payload, input, inst));
        }
        handleRefineResult(r2, payload, input, inst);
        return;
      };
    });
    __name2(handleRefineResult, "handleRefineResult");
  }
});
function ar_default() {
  return {
    localeError: error()
  };
}
__name(ar_default, "ar_default");
var error;
var init_ar = __esm({
  "../node_modules/zod/v4/locales/ar.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    error = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "\u062D\u0631\u0641", verb: "\u0623\u0646 \u064A\u062D\u0648\u064A" },
        file: { unit: "\u0628\u0627\u064A\u062A", verb: "\u0623\u0646 \u064A\u062D\u0648\u064A" },
        array: { unit: "\u0639\u0646\u0635\u0631", verb: "\u0623\u0646 \u064A\u062D\u0648\u064A" },
        set: { unit: "\u0639\u0646\u0635\u0631", verb: "\u0623\u0646 \u064A\u062D\u0648\u064A" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const parsedType7 = /* @__PURE__ */ __name2((data) => {
        const t2 = typeof data;
        switch (t2) {
          case "number": {
            return Number.isNaN(data) ? "NaN" : "number";
          }
          case "object": {
            if (Array.isArray(data)) {
              return "array";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
        }
        return t2;
      }, "parsedType");
      const Nouns = {
        regex: "\u0645\u062F\u062E\u0644",
        email: "\u0628\u0631\u064A\u062F \u0625\u0644\u0643\u062A\u0631\u0648\u0646\u064A",
        url: "\u0631\u0627\u0628\u0637",
        emoji: "\u0625\u064A\u0645\u0648\u062C\u064A",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "\u062A\u0627\u0631\u064A\u062E \u0648\u0648\u0642\u062A \u0628\u0645\u0639\u064A\u0627\u0631 ISO",
        date: "\u062A\u0627\u0631\u064A\u062E \u0628\u0645\u0639\u064A\u0627\u0631 ISO",
        time: "\u0648\u0642\u062A \u0628\u0645\u0639\u064A\u0627\u0631 ISO",
        duration: "\u0645\u062F\u0629 \u0628\u0645\u0639\u064A\u0627\u0631 ISO",
        ipv4: "\u0639\u0646\u0648\u0627\u0646 IPv4",
        ipv6: "\u0639\u0646\u0648\u0627\u0646 IPv6",
        cidrv4: "\u0645\u062F\u0649 \u0639\u0646\u0627\u0648\u064A\u0646 \u0628\u0635\u064A\u063A\u0629 IPv4",
        cidrv6: "\u0645\u062F\u0649 \u0639\u0646\u0627\u0648\u064A\u0646 \u0628\u0635\u064A\u063A\u0629 IPv6",
        base64: "\u0646\u064E\u0635 \u0628\u062A\u0631\u0645\u064A\u0632 base64-encoded",
        base64url: "\u0646\u064E\u0635 \u0628\u062A\u0631\u0645\u064A\u0632 base64url-encoded",
        json_string: "\u0646\u064E\u0635 \u0639\u0644\u0649 \u0647\u064A\u0626\u0629 JSON",
        e164: "\u0631\u0642\u0645 \u0647\u0627\u062A\u0641 \u0628\u0645\u0639\u064A\u0627\u0631 E.164",
        jwt: "JWT",
        template_literal: "\u0645\u062F\u062E\u0644"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\u0645\u062F\u062E\u0644\u0627\u062A \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644\u0629: \u064A\u0641\u062A\u0631\u0636 \u0625\u062F\u062E\u0627\u0644 ${issue2.expected}\u060C \u0648\u0644\u0643\u0646 \u062A\u0645 \u0625\u062F\u062E\u0627\u0644 ${parsedType7(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `\u0645\u062F\u062E\u0644\u0627\u062A \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644\u0629: \u064A\u0641\u062A\u0631\u0636 \u0625\u062F\u062E\u0627\u0644 ${stringifyPrimitive(issue2.values[0])}`;
            return `\u0627\u062E\u062A\u064A\u0627\u0631 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644: \u064A\u062A\u0648\u0642\u0639 \u0627\u0646\u062A\u0642\u0627\u0621 \u0623\u062D\u062F \u0647\u0630\u0647 \u0627\u0644\u062E\u064A\u0627\u0631\u0627\u062A: ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return ` \u0623\u0643\u0628\u0631 \u0645\u0646 \u0627\u0644\u0644\u0627\u0632\u0645: \u064A\u0641\u062A\u0631\u0636 \u0623\u0646 \u062A\u0643\u0648\u0646 ${issue2.origin ?? "\u0627\u0644\u0642\u064A\u0645\u0629"} ${adj} ${issue2.maximum.toString()} ${sizing.unit ?? "\u0639\u0646\u0635\u0631"}`;
            return `\u0623\u0643\u0628\u0631 \u0645\u0646 \u0627\u0644\u0644\u0627\u0632\u0645: \u064A\u0641\u062A\u0631\u0636 \u0623\u0646 \u062A\u0643\u0648\u0646 ${issue2.origin ?? "\u0627\u0644\u0642\u064A\u0645\u0629"} ${adj} ${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `\u0623\u0635\u063A\u0631 \u0645\u0646 \u0627\u0644\u0644\u0627\u0632\u0645: \u064A\u0641\u062A\u0631\u0636 \u0644\u0640 ${issue2.origin} \u0623\u0646 \u064A\u0643\u0648\u0646 ${adj} ${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `\u0623\u0635\u063A\u0631 \u0645\u0646 \u0627\u0644\u0644\u0627\u0632\u0645: \u064A\u0641\u062A\u0631\u0636 \u0644\u0640 ${issue2.origin} \u0623\u0646 \u064A\u0643\u0648\u0646 ${adj} ${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `\u0646\u064E\u0635 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644: \u064A\u062C\u0628 \u0623\u0646 \u064A\u0628\u062F\u0623 \u0628\u0640 "${issue2.prefix}"`;
            if (_issue.format === "ends_with")
              return `\u0646\u064E\u0635 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644: \u064A\u062C\u0628 \u0623\u0646 \u064A\u0646\u062A\u0647\u064A \u0628\u0640 "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `\u0646\u064E\u0635 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644: \u064A\u062C\u0628 \u0623\u0646 \u064A\u062A\u0636\u0645\u0651\u064E\u0646 "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `\u0646\u064E\u0635 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644: \u064A\u062C\u0628 \u0623\u0646 \u064A\u0637\u0627\u0628\u0642 \u0627\u0644\u0646\u0645\u0637 ${_issue.pattern}`;
            return `${Nouns[_issue.format] ?? issue2.format} \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644`;
          }
          case "not_multiple_of":
            return `\u0631\u0642\u0645 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644: \u064A\u062C\u0628 \u0623\u0646 \u064A\u0643\u0648\u0646 \u0645\u0646 \u0645\u0636\u0627\u0639\u0641\u0627\u062A ${issue2.divisor}`;
          case "unrecognized_keys":
            return `\u0645\u0639\u0631\u0641${issue2.keys.length > 1 ? "\u0627\u062A" : ""} \u063A\u0631\u064A\u0628${issue2.keys.length > 1 ? "\u0629" : ""}: ${joinValues(issue2.keys, "\u060C ")}`;
          case "invalid_key":
            return `\u0645\u0639\u0631\u0641 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644 \u0641\u064A ${issue2.origin}`;
          case "invalid_union":
            return "\u0645\u062F\u062E\u0644 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644";
          case "invalid_element":
            return `\u0645\u062F\u062E\u0644 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644 \u0641\u064A ${issue2.origin}`;
          default:
            return "\u0645\u062F\u062E\u0644 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644";
        }
      };
    }, "error");
    __name2(ar_default, "default");
  }
});
function az_default() {
  return {
    localeError: error2()
  };
}
__name(az_default, "az_default");
var error2;
var init_az = __esm({
  "../node_modules/zod/v4/locales/az.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    error2 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "simvol", verb: "olmal\u0131d\u0131r" },
        file: { unit: "bayt", verb: "olmal\u0131d\u0131r" },
        array: { unit: "element", verb: "olmal\u0131d\u0131r" },
        set: { unit: "element", verb: "olmal\u0131d\u0131r" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const parsedType7 = /* @__PURE__ */ __name2((data) => {
        const t2 = typeof data;
        switch (t2) {
          case "number": {
            return Number.isNaN(data) ? "NaN" : "number";
          }
          case "object": {
            if (Array.isArray(data)) {
              return "array";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
        }
        return t2;
      }, "parsedType");
      const Nouns = {
        regex: "input",
        email: "email address",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO datetime",
        date: "ISO date",
        time: "ISO time",
        duration: "ISO duration",
        ipv4: "IPv4 address",
        ipv6: "IPv6 address",
        cidrv4: "IPv4 range",
        cidrv6: "IPv6 range",
        base64: "base64-encoded string",
        base64url: "base64url-encoded string",
        json_string: "JSON string",
        e164: "E.164 number",
        jwt: "JWT",
        template_literal: "input"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Yanl\u0131\u015F d\u0259y\u0259r: g\xF6zl\u0259nil\u0259n ${issue2.expected}, daxil olan ${parsedType7(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Yanl\u0131\u015F d\u0259y\u0259r: g\xF6zl\u0259nil\u0259n ${stringifyPrimitive(issue2.values[0])}`;
            return `Yanl\u0131\u015F se\xE7im: a\u015Fa\u011F\u0131dak\u0131lardan biri olmal\u0131d\u0131r: ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `\xC7ox b\xF6y\xFCk: g\xF6zl\u0259nil\u0259n ${issue2.origin ?? "d\u0259y\u0259r"} ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "element"}`;
            return `\xC7ox b\xF6y\xFCk: g\xF6zl\u0259nil\u0259n ${issue2.origin ?? "d\u0259y\u0259r"} ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `\xC7ox ki\xE7ik: g\xF6zl\u0259nil\u0259n ${issue2.origin} ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            return `\xC7ox ki\xE7ik: g\xF6zl\u0259nil\u0259n ${issue2.origin} ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `Yanl\u0131\u015F m\u0259tn: "${_issue.prefix}" il\u0259 ba\u015Flamal\u0131d\u0131r`;
            if (_issue.format === "ends_with")
              return `Yanl\u0131\u015F m\u0259tn: "${_issue.suffix}" il\u0259 bitm\u0259lidir`;
            if (_issue.format === "includes")
              return `Yanl\u0131\u015F m\u0259tn: "${_issue.includes}" daxil olmal\u0131d\u0131r`;
            if (_issue.format === "regex")
              return `Yanl\u0131\u015F m\u0259tn: ${_issue.pattern} \u015Fablonuna uy\u011Fun olmal\u0131d\u0131r`;
            return `Yanl\u0131\u015F ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `Yanl\u0131\u015F \u0259d\u0259d: ${issue2.divisor} il\u0259 b\xF6l\xFCn\u0259 bil\u0259n olmal\u0131d\u0131r`;
          case "unrecognized_keys":
            return `Tan\u0131nmayan a\xE7ar${issue2.keys.length > 1 ? "lar" : ""}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `${issue2.origin} daxilind\u0259 yanl\u0131\u015F a\xE7ar`;
          case "invalid_union":
            return "Yanl\u0131\u015F d\u0259y\u0259r";
          case "invalid_element":
            return `${issue2.origin} daxilind\u0259 yanl\u0131\u015F d\u0259y\u0259r`;
          default:
            return `Yanl\u0131\u015F d\u0259y\u0259r`;
        }
      };
    }, "error");
    __name2(az_default, "default");
  }
});
function getBelarusianPlural(count, one, few, many) {
  const absCount = Math.abs(count);
  const lastDigit = absCount % 10;
  const lastTwoDigits = absCount % 100;
  if (lastTwoDigits >= 11 && lastTwoDigits <= 19) {
    return many;
  }
  if (lastDigit === 1) {
    return one;
  }
  if (lastDigit >= 2 && lastDigit <= 4) {
    return few;
  }
  return many;
}
__name(getBelarusianPlural, "getBelarusianPlural");
function be_default() {
  return {
    localeError: error3()
  };
}
__name(be_default, "be_default");
var error3;
var init_be = __esm({
  "../node_modules/zod/v4/locales/be.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    __name2(getBelarusianPlural, "getBelarusianPlural");
    error3 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: {
          unit: {
            one: "\u0441\u0456\u043C\u0432\u0430\u043B",
            few: "\u0441\u0456\u043C\u0432\u0430\u043B\u044B",
            many: "\u0441\u0456\u043C\u0432\u0430\u043B\u0430\u045E"
          },
          verb: "\u043C\u0435\u0446\u044C"
        },
        array: {
          unit: {
            one: "\u044D\u043B\u0435\u043C\u0435\u043D\u0442",
            few: "\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u044B",
            many: "\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\u045E"
          },
          verb: "\u043C\u0435\u0446\u044C"
        },
        set: {
          unit: {
            one: "\u044D\u043B\u0435\u043C\u0435\u043D\u0442",
            few: "\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u044B",
            many: "\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\u045E"
          },
          verb: "\u043C\u0435\u0446\u044C"
        },
        file: {
          unit: {
            one: "\u0431\u0430\u0439\u0442",
            few: "\u0431\u0430\u0439\u0442\u044B",
            many: "\u0431\u0430\u0439\u0442\u0430\u045E"
          },
          verb: "\u043C\u0435\u0446\u044C"
        }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const parsedType7 = /* @__PURE__ */ __name2((data) => {
        const t2 = typeof data;
        switch (t2) {
          case "number": {
            return Number.isNaN(data) ? "NaN" : "\u043B\u0456\u043A";
          }
          case "object": {
            if (Array.isArray(data)) {
              return "\u043C\u0430\u0441\u0456\u045E";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
        }
        return t2;
      }, "parsedType");
      const Nouns = {
        regex: "\u0443\u0432\u043E\u0434",
        email: "email \u0430\u0434\u0440\u0430\u0441",
        url: "URL",
        emoji: "\u044D\u043C\u043E\u0434\u0437\u0456",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO \u0434\u0430\u0442\u0430 \u0456 \u0447\u0430\u0441",
        date: "ISO \u0434\u0430\u0442\u0430",
        time: "ISO \u0447\u0430\u0441",
        duration: "ISO \u043F\u0440\u0430\u0446\u044F\u0433\u043B\u0430\u0441\u0446\u044C",
        ipv4: "IPv4 \u0430\u0434\u0440\u0430\u0441",
        ipv6: "IPv6 \u0430\u0434\u0440\u0430\u0441",
        cidrv4: "IPv4 \u0434\u044B\u044F\u043F\u0430\u0437\u043E\u043D",
        cidrv6: "IPv6 \u0434\u044B\u044F\u043F\u0430\u0437\u043E\u043D",
        base64: "\u0440\u0430\u0434\u043E\u043A \u0443 \u0444\u0430\u0440\u043C\u0430\u0446\u0435 base64",
        base64url: "\u0440\u0430\u0434\u043E\u043A \u0443 \u0444\u0430\u0440\u043C\u0430\u0446\u0435 base64url",
        json_string: "JSON \u0440\u0430\u0434\u043E\u043A",
        e164: "\u043D\u0443\u043C\u0430\u0440 E.164",
        jwt: "JWT",
        template_literal: "\u0443\u0432\u043E\u0434"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u045E\u0432\u043E\u0434: \u0447\u0430\u043A\u0430\u045E\u0441\u044F ${issue2.expected}, \u0430\u0442\u0440\u044B\u043C\u0430\u043D\u0430 ${parsedType7(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u045E\u0432\u043E\u0434: \u0447\u0430\u043A\u0430\u043B\u0430\u0441\u044F ${stringifyPrimitive(issue2.values[0])}`;
            return `\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u0432\u0430\u0440\u044B\u044F\u043D\u0442: \u0447\u0430\u043A\u0430\u045E\u0441\u044F \u0430\u0434\u0437\u0456\u043D \u0437 ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              const maxValue = Number(issue2.maximum);
              const unit = getBelarusianPlural(maxValue, sizing.unit.one, sizing.unit.few, sizing.unit.many);
              return `\u0417\u0430\u043D\u0430\u0434\u0442\u0430 \u0432\u044F\u043B\u0456\u043A\u0456: \u0447\u0430\u043A\u0430\u043B\u0430\u0441\u044F, \u0448\u0442\u043E ${issue2.origin ?? "\u0437\u043D\u0430\u0447\u044D\u043D\u043D\u0435"} \u043F\u0430\u0432\u0456\u043D\u043D\u0430 ${sizing.verb} ${adj}${issue2.maximum.toString()} ${unit}`;
            }
            return `\u0417\u0430\u043D\u0430\u0434\u0442\u0430 \u0432\u044F\u043B\u0456\u043A\u0456: \u0447\u0430\u043A\u0430\u043B\u0430\u0441\u044F, \u0448\u0442\u043E ${issue2.origin ?? "\u0437\u043D\u0430\u0447\u044D\u043D\u043D\u0435"} \u043F\u0430\u0432\u0456\u043D\u043D\u0430 \u0431\u044B\u0446\u044C ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              const minValue = Number(issue2.minimum);
              const unit = getBelarusianPlural(minValue, sizing.unit.one, sizing.unit.few, sizing.unit.many);
              return `\u0417\u0430\u043D\u0430\u0434\u0442\u0430 \u043C\u0430\u043B\u044B: \u0447\u0430\u043A\u0430\u043B\u0430\u0441\u044F, \u0448\u0442\u043E ${issue2.origin} \u043F\u0430\u0432\u0456\u043D\u043D\u0430 ${sizing.verb} ${adj}${issue2.minimum.toString()} ${unit}`;
            }
            return `\u0417\u0430\u043D\u0430\u0434\u0442\u0430 \u043C\u0430\u043B\u044B: \u0447\u0430\u043A\u0430\u043B\u0430\u0441\u044F, \u0448\u0442\u043E ${issue2.origin} \u043F\u0430\u0432\u0456\u043D\u043D\u0430 \u0431\u044B\u0446\u044C ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u0440\u0430\u0434\u043E\u043A: \u043F\u0430\u0432\u0456\u043D\u0435\u043D \u043F\u0430\u0447\u044B\u043D\u0430\u0446\u0446\u0430 \u0437 "${_issue.prefix}"`;
            if (_issue.format === "ends_with")
              return `\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u0440\u0430\u0434\u043E\u043A: \u043F\u0430\u0432\u0456\u043D\u0435\u043D \u0437\u0430\u043A\u0430\u043D\u0447\u0432\u0430\u0446\u0446\u0430 \u043D\u0430 "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u0440\u0430\u0434\u043E\u043A: \u043F\u0430\u0432\u0456\u043D\u0435\u043D \u0437\u043C\u044F\u0448\u0447\u0430\u0446\u044C "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u0440\u0430\u0434\u043E\u043A: \u043F\u0430\u0432\u0456\u043D\u0435\u043D \u0430\u0434\u043F\u0430\u0432\u044F\u0434\u0430\u0446\u044C \u0448\u0430\u0431\u043B\u043E\u043D\u0443 ${_issue.pattern}`;
            return `\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u043B\u0456\u043A: \u043F\u0430\u0432\u0456\u043D\u0435\u043D \u0431\u044B\u0446\u044C \u043A\u0440\u0430\u0442\u043D\u044B\u043C ${issue2.divisor}`;
          case "unrecognized_keys":
            return `\u041D\u0435\u0440\u0430\u0441\u043F\u0430\u0437\u043D\u0430\u043D\u044B ${issue2.keys.length > 1 ? "\u043A\u043B\u044E\u0447\u044B" : "\u043A\u043B\u044E\u0447"}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u043A\u043B\u044E\u0447 \u0443 ${issue2.origin}`;
          case "invalid_union":
            return "\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u045E\u0432\u043E\u0434";
          case "invalid_element":
            return `\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u0430\u0435 \u0437\u043D\u0430\u0447\u044D\u043D\u043D\u0435 \u045E ${issue2.origin}`;
          default:
            return `\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u045E\u0432\u043E\u0434`;
        }
      };
    }, "error");
    __name2(be_default, "default");
  }
});
function ca_default() {
  return {
    localeError: error4()
  };
}
__name(ca_default, "ca_default");
var error4;
var init_ca = __esm({
  "../node_modules/zod/v4/locales/ca.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    error4 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "car\xE0cters", verb: "contenir" },
        file: { unit: "bytes", verb: "contenir" },
        array: { unit: "elements", verb: "contenir" },
        set: { unit: "elements", verb: "contenir" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const parsedType7 = /* @__PURE__ */ __name2((data) => {
        const t2 = typeof data;
        switch (t2) {
          case "number": {
            return Number.isNaN(data) ? "NaN" : "number";
          }
          case "object": {
            if (Array.isArray(data)) {
              return "array";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
        }
        return t2;
      }, "parsedType");
      const Nouns = {
        regex: "entrada",
        email: "adre\xE7a electr\xF2nica",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "data i hora ISO",
        date: "data ISO",
        time: "hora ISO",
        duration: "durada ISO",
        ipv4: "adre\xE7a IPv4",
        ipv6: "adre\xE7a IPv6",
        cidrv4: "rang IPv4",
        cidrv6: "rang IPv6",
        base64: "cadena codificada en base64",
        base64url: "cadena codificada en base64url",
        json_string: "cadena JSON",
        e164: "n\xFAmero E.164",
        jwt: "JWT",
        template_literal: "entrada"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Tipus inv\xE0lid: s'esperava ${issue2.expected}, s'ha rebut ${parsedType7(issue2.input)}`;
          // return `Tipus invàlid: s'esperava ${issue.expected}, s'ha rebut ${util.getParsedType(issue.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Valor inv\xE0lid: s'esperava ${stringifyPrimitive(issue2.values[0])}`;
            return `Opci\xF3 inv\xE0lida: s'esperava una de ${joinValues(issue2.values, " o ")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "com a m\xE0xim" : "menys de";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `Massa gran: s'esperava que ${issue2.origin ?? "el valor"} contingu\xE9s ${adj} ${issue2.maximum.toString()} ${sizing.unit ?? "elements"}`;
            return `Massa gran: s'esperava que ${issue2.origin ?? "el valor"} fos ${adj} ${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? "com a m\xEDnim" : "m\xE9s de";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Massa petit: s'esperava que ${issue2.origin} contingu\xE9s ${adj} ${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `Massa petit: s'esperava que ${issue2.origin} fos ${adj} ${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with") {
              return `Format inv\xE0lid: ha de comen\xE7ar amb "${_issue.prefix}"`;
            }
            if (_issue.format === "ends_with")
              return `Format inv\xE0lid: ha d'acabar amb "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `Format inv\xE0lid: ha d'incloure "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `Format inv\xE0lid: ha de coincidir amb el patr\xF3 ${_issue.pattern}`;
            return `Format inv\xE0lid per a ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `N\xFAmero inv\xE0lid: ha de ser m\xFAltiple de ${issue2.divisor}`;
          case "unrecognized_keys":
            return `Clau${issue2.keys.length > 1 ? "s" : ""} no reconeguda${issue2.keys.length > 1 ? "s" : ""}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Clau inv\xE0lida a ${issue2.origin}`;
          case "invalid_union":
            return "Entrada inv\xE0lida";
          // Could also be "Tipus d'unió invàlid" but "Entrada invàlida" is more general
          case "invalid_element":
            return `Element inv\xE0lid a ${issue2.origin}`;
          default:
            return `Entrada inv\xE0lida`;
        }
      };
    }, "error");
    __name2(ca_default, "default");
  }
});
function cs_default() {
  return {
    localeError: error5()
  };
}
__name(cs_default, "cs_default");
var error5;
var init_cs = __esm({
  "../node_modules/zod/v4/locales/cs.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    error5 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "znak\u016F", verb: "m\xEDt" },
        file: { unit: "bajt\u016F", verb: "m\xEDt" },
        array: { unit: "prvk\u016F", verb: "m\xEDt" },
        set: { unit: "prvk\u016F", verb: "m\xEDt" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const parsedType7 = /* @__PURE__ */ __name2((data) => {
        const t2 = typeof data;
        switch (t2) {
          case "number": {
            return Number.isNaN(data) ? "NaN" : "\u010D\xEDslo";
          }
          case "string": {
            return "\u0159et\u011Bzec";
          }
          case "boolean": {
            return "boolean";
          }
          case "bigint": {
            return "bigint";
          }
          case "function": {
            return "funkce";
          }
          case "symbol": {
            return "symbol";
          }
          case "undefined": {
            return "undefined";
          }
          case "object": {
            if (Array.isArray(data)) {
              return "pole";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
        }
        return t2;
      }, "parsedType");
      const Nouns = {
        regex: "regul\xE1rn\xED v\xFDraz",
        email: "e-mailov\xE1 adresa",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "datum a \u010Das ve form\xE1tu ISO",
        date: "datum ve form\xE1tu ISO",
        time: "\u010Das ve form\xE1tu ISO",
        duration: "doba trv\xE1n\xED ISO",
        ipv4: "IPv4 adresa",
        ipv6: "IPv6 adresa",
        cidrv4: "rozsah IPv4",
        cidrv6: "rozsah IPv6",
        base64: "\u0159et\u011Bzec zak\xF3dovan\xFD ve form\xE1tu base64",
        base64url: "\u0159et\u011Bzec zak\xF3dovan\xFD ve form\xE1tu base64url",
        json_string: "\u0159et\u011Bzec ve form\xE1tu JSON",
        e164: "\u010D\xEDslo E.164",
        jwt: "JWT",
        template_literal: "vstup"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Neplatn\xFD vstup: o\u010Dek\xE1v\xE1no ${issue2.expected}, obdr\u017Eeno ${parsedType7(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Neplatn\xFD vstup: o\u010Dek\xE1v\xE1no ${stringifyPrimitive(issue2.values[0])}`;
            return `Neplatn\xE1 mo\u017Enost: o\u010Dek\xE1v\xE1na jedna z hodnot ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Hodnota je p\u0159\xEDli\u0161 velk\xE1: ${issue2.origin ?? "hodnota"} mus\xED m\xEDt ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "prvk\u016F"}`;
            }
            return `Hodnota je p\u0159\xEDli\u0161 velk\xE1: ${issue2.origin ?? "hodnota"} mus\xED b\xFDt ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Hodnota je p\u0159\xEDli\u0161 mal\xE1: ${issue2.origin ?? "hodnota"} mus\xED m\xEDt ${adj}${issue2.minimum.toString()} ${sizing.unit ?? "prvk\u016F"}`;
            }
            return `Hodnota je p\u0159\xEDli\u0161 mal\xE1: ${issue2.origin ?? "hodnota"} mus\xED b\xFDt ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `Neplatn\xFD \u0159et\u011Bzec: mus\xED za\u010D\xEDnat na "${_issue.prefix}"`;
            if (_issue.format === "ends_with")
              return `Neplatn\xFD \u0159et\u011Bzec: mus\xED kon\u010Dit na "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `Neplatn\xFD \u0159et\u011Bzec: mus\xED obsahovat "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `Neplatn\xFD \u0159et\u011Bzec: mus\xED odpov\xEDdat vzoru ${_issue.pattern}`;
            return `Neplatn\xFD form\xE1t ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `Neplatn\xE9 \u010D\xEDslo: mus\xED b\xFDt n\xE1sobkem ${issue2.divisor}`;
          case "unrecognized_keys":
            return `Nezn\xE1m\xE9 kl\xED\u010De: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Neplatn\xFD kl\xED\u010D v ${issue2.origin}`;
          case "invalid_union":
            return "Neplatn\xFD vstup";
          case "invalid_element":
            return `Neplatn\xE1 hodnota v ${issue2.origin}`;
          default:
            return `Neplatn\xFD vstup`;
        }
      };
    }, "error");
    __name2(cs_default, "default");
  }
});
function da_default() {
  return {
    localeError: error6()
  };
}
__name(da_default, "da_default");
var error6;
var init_da = __esm({
  "../node_modules/zod/v4/locales/da.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    error6 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "tegn", verb: "havde" },
        file: { unit: "bytes", verb: "havde" },
        array: { unit: "elementer", verb: "indeholdt" },
        set: { unit: "elementer", verb: "indeholdt" }
      };
      const TypeNames = {
        string: "streng",
        number: "tal",
        boolean: "boolean",
        array: "liste",
        object: "objekt",
        set: "s\xE6t",
        file: "fil"
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      function getTypeName(type) {
        return TypeNames[type] ?? type;
      }
      __name(getTypeName, "getTypeName");
      __name2(getTypeName, "getTypeName");
      const parsedType7 = /* @__PURE__ */ __name2((data) => {
        const t2 = typeof data;
        switch (t2) {
          case "number": {
            return Number.isNaN(data) ? "NaN" : "tal";
          }
          case "object": {
            if (Array.isArray(data)) {
              return "liste";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
            return "objekt";
          }
        }
        return t2;
      }, "parsedType");
      const Nouns = {
        regex: "input",
        email: "e-mailadresse",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO dato- og klokkesl\xE6t",
        date: "ISO-dato",
        time: "ISO-klokkesl\xE6t",
        duration: "ISO-varighed",
        ipv4: "IPv4-omr\xE5de",
        ipv6: "IPv6-omr\xE5de",
        cidrv4: "IPv4-spektrum",
        cidrv6: "IPv6-spektrum",
        base64: "base64-kodet streng",
        base64url: "base64url-kodet streng",
        json_string: "JSON-streng",
        e164: "E.164-nummer",
        jwt: "JWT",
        template_literal: "input"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Ugyldigt input: forventede ${getTypeName(issue2.expected)}, fik ${getTypeName(parsedType7(issue2.input))}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Ugyldig v\xE6rdi: forventede ${stringifyPrimitive(issue2.values[0])}`;
            return `Ugyldigt valg: forventede en af f\xF8lgende ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            const origin = getTypeName(issue2.origin);
            if (sizing)
              return `For stor: forventede ${origin ?? "value"} ${sizing.verb} ${adj} ${issue2.maximum.toString()} ${sizing.unit ?? "elementer"}`;
            return `For stor: forventede ${origin ?? "value"} havde ${adj} ${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            const origin = getTypeName(issue2.origin);
            if (sizing) {
              return `For lille: forventede ${origin} ${sizing.verb} ${adj} ${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `For lille: forventede ${origin} havde ${adj} ${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `Ugyldig streng: skal starte med "${_issue.prefix}"`;
            if (_issue.format === "ends_with")
              return `Ugyldig streng: skal ende med "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `Ugyldig streng: skal indeholde "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `Ugyldig streng: skal matche m\xF8nsteret ${_issue.pattern}`;
            return `Ugyldig ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `Ugyldigt tal: skal v\xE6re deleligt med ${issue2.divisor}`;
          case "unrecognized_keys":
            return `${issue2.keys.length > 1 ? "Ukendte n\xF8gler" : "Ukendt n\xF8gle"}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Ugyldig n\xF8gle i ${issue2.origin}`;
          case "invalid_union":
            return "Ugyldigt input: matcher ingen af de tilladte typer";
          case "invalid_element":
            return `Ugyldig v\xE6rdi i ${issue2.origin}`;
          default:
            return `Ugyldigt input`;
        }
      };
    }, "error");
    __name2(da_default, "default");
  }
});
function de_default() {
  return {
    localeError: error7()
  };
}
__name(de_default, "de_default");
var error7;
var init_de = __esm({
  "../node_modules/zod/v4/locales/de.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    error7 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "Zeichen", verb: "zu haben" },
        file: { unit: "Bytes", verb: "zu haben" },
        array: { unit: "Elemente", verb: "zu haben" },
        set: { unit: "Elemente", verb: "zu haben" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const parsedType7 = /* @__PURE__ */ __name2((data) => {
        const t2 = typeof data;
        switch (t2) {
          case "number": {
            return Number.isNaN(data) ? "NaN" : "Zahl";
          }
          case "object": {
            if (Array.isArray(data)) {
              return "Array";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
        }
        return t2;
      }, "parsedType");
      const Nouns = {
        regex: "Eingabe",
        email: "E-Mail-Adresse",
        url: "URL",
        emoji: "Emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO-Datum und -Uhrzeit",
        date: "ISO-Datum",
        time: "ISO-Uhrzeit",
        duration: "ISO-Dauer",
        ipv4: "IPv4-Adresse",
        ipv6: "IPv6-Adresse",
        cidrv4: "IPv4-Bereich",
        cidrv6: "IPv6-Bereich",
        base64: "Base64-codierter String",
        base64url: "Base64-URL-codierter String",
        json_string: "JSON-String",
        e164: "E.164-Nummer",
        jwt: "JWT",
        template_literal: "Eingabe"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Ung\xFCltige Eingabe: erwartet ${issue2.expected}, erhalten ${parsedType7(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Ung\xFCltige Eingabe: erwartet ${stringifyPrimitive(issue2.values[0])}`;
            return `Ung\xFCltige Option: erwartet eine von ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `Zu gro\xDF: erwartet, dass ${issue2.origin ?? "Wert"} ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "Elemente"} hat`;
            return `Zu gro\xDF: erwartet, dass ${issue2.origin ?? "Wert"} ${adj}${issue2.maximum.toString()} ist`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Zu klein: erwartet, dass ${issue2.origin} ${adj}${issue2.minimum.toString()} ${sizing.unit} hat`;
            }
            return `Zu klein: erwartet, dass ${issue2.origin} ${adj}${issue2.minimum.toString()} ist`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `Ung\xFCltiger String: muss mit "${_issue.prefix}" beginnen`;
            if (_issue.format === "ends_with")
              return `Ung\xFCltiger String: muss mit "${_issue.suffix}" enden`;
            if (_issue.format === "includes")
              return `Ung\xFCltiger String: muss "${_issue.includes}" enthalten`;
            if (_issue.format === "regex")
              return `Ung\xFCltiger String: muss dem Muster ${_issue.pattern} entsprechen`;
            return `Ung\xFCltig: ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `Ung\xFCltige Zahl: muss ein Vielfaches von ${issue2.divisor} sein`;
          case "unrecognized_keys":
            return `${issue2.keys.length > 1 ? "Unbekannte Schl\xFCssel" : "Unbekannter Schl\xFCssel"}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Ung\xFCltiger Schl\xFCssel in ${issue2.origin}`;
          case "invalid_union":
            return "Ung\xFCltige Eingabe";
          case "invalid_element":
            return `Ung\xFCltiger Wert in ${issue2.origin}`;
          default:
            return `Ung\xFCltige Eingabe`;
        }
      };
    }, "error");
    __name2(de_default, "default");
  }
});
function en_default() {
  return {
    localeError: error8()
  };
}
__name(en_default, "en_default");
var parsedType;
var error8;
var init_en = __esm({
  "../node_modules/zod/v4/locales/en.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    parsedType = /* @__PURE__ */ __name2((data) => {
      const t2 = typeof data;
      switch (t2) {
        case "number": {
          return Number.isNaN(data) ? "NaN" : "number";
        }
        case "object": {
          if (Array.isArray(data)) {
            return "array";
          }
          if (data === null) {
            return "null";
          }
          if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
            return data.constructor.name;
          }
        }
      }
      return t2;
    }, "parsedType");
    error8 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "characters", verb: "to have" },
        file: { unit: "bytes", verb: "to have" },
        array: { unit: "items", verb: "to have" },
        set: { unit: "items", verb: "to have" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const Nouns = {
        regex: "input",
        email: "email address",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO datetime",
        date: "ISO date",
        time: "ISO time",
        duration: "ISO duration",
        ipv4: "IPv4 address",
        ipv6: "IPv6 address",
        cidrv4: "IPv4 range",
        cidrv6: "IPv6 range",
        base64: "base64-encoded string",
        base64url: "base64url-encoded string",
        json_string: "JSON string",
        e164: "E.164 number",
        jwt: "JWT",
        template_literal: "input"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Invalid input: expected ${issue2.expected}, received ${parsedType(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Invalid input: expected ${stringifyPrimitive(issue2.values[0])}`;
            return `Invalid option: expected one of ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `Too big: expected ${issue2.origin ?? "value"} to have ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elements"}`;
            return `Too big: expected ${issue2.origin ?? "value"} to be ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Too small: expected ${issue2.origin} to have ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `Too small: expected ${issue2.origin} to be ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with") {
              return `Invalid string: must start with "${_issue.prefix}"`;
            }
            if (_issue.format === "ends_with")
              return `Invalid string: must end with "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `Invalid string: must include "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `Invalid string: must match pattern ${_issue.pattern}`;
            return `Invalid ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `Invalid number: must be a multiple of ${issue2.divisor}`;
          case "unrecognized_keys":
            return `Unrecognized key${issue2.keys.length > 1 ? "s" : ""}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Invalid key in ${issue2.origin}`;
          case "invalid_union":
            return "Invalid input";
          case "invalid_element":
            return `Invalid value in ${issue2.origin}`;
          default:
            return `Invalid input`;
        }
      };
    }, "error");
    __name2(en_default, "default");
  }
});
function eo_default() {
  return {
    localeError: error9()
  };
}
__name(eo_default, "eo_default");
var parsedType2;
var error9;
var init_eo = __esm({
  "../node_modules/zod/v4/locales/eo.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    parsedType2 = /* @__PURE__ */ __name2((data) => {
      const t2 = typeof data;
      switch (t2) {
        case "number": {
          return Number.isNaN(data) ? "NaN" : "nombro";
        }
        case "object": {
          if (Array.isArray(data)) {
            return "tabelo";
          }
          if (data === null) {
            return "senvalora";
          }
          if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
            return data.constructor.name;
          }
        }
      }
      return t2;
    }, "parsedType");
    error9 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "karaktrojn", verb: "havi" },
        file: { unit: "bajtojn", verb: "havi" },
        array: { unit: "elementojn", verb: "havi" },
        set: { unit: "elementojn", verb: "havi" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const Nouns = {
        regex: "enigo",
        email: "retadreso",
        url: "URL",
        emoji: "emo\u011Dio",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO-datotempo",
        date: "ISO-dato",
        time: "ISO-tempo",
        duration: "ISO-da\u016Dro",
        ipv4: "IPv4-adreso",
        ipv6: "IPv6-adreso",
        cidrv4: "IPv4-rango",
        cidrv6: "IPv6-rango",
        base64: "64-ume kodita karaktraro",
        base64url: "URL-64-ume kodita karaktraro",
        json_string: "JSON-karaktraro",
        e164: "E.164-nombro",
        jwt: "JWT",
        template_literal: "enigo"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Nevalida enigo: atendi\u011Dis ${issue2.expected}, ricevi\u011Dis ${parsedType2(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Nevalida enigo: atendi\u011Dis ${stringifyPrimitive(issue2.values[0])}`;
            return `Nevalida opcio: atendi\u011Dis unu el ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `Tro granda: atendi\u011Dis ke ${issue2.origin ?? "valoro"} havu ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elementojn"}`;
            return `Tro granda: atendi\u011Dis ke ${issue2.origin ?? "valoro"} havu ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Tro malgranda: atendi\u011Dis ke ${issue2.origin} havu ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `Tro malgranda: atendi\u011Dis ke ${issue2.origin} estu ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `Nevalida karaktraro: devas komenci\u011Di per "${_issue.prefix}"`;
            if (_issue.format === "ends_with")
              return `Nevalida karaktraro: devas fini\u011Di per "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `Nevalida karaktraro: devas inkluzivi "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `Nevalida karaktraro: devas kongrui kun la modelo ${_issue.pattern}`;
            return `Nevalida ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `Nevalida nombro: devas esti oblo de ${issue2.divisor}`;
          case "unrecognized_keys":
            return `Nekonata${issue2.keys.length > 1 ? "j" : ""} \u015Dlosilo${issue2.keys.length > 1 ? "j" : ""}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Nevalida \u015Dlosilo en ${issue2.origin}`;
          case "invalid_union":
            return "Nevalida enigo";
          case "invalid_element":
            return `Nevalida valoro en ${issue2.origin}`;
          default:
            return `Nevalida enigo`;
        }
      };
    }, "error");
    __name2(eo_default, "default");
  }
});
function es_default() {
  return {
    localeError: error10()
  };
}
__name(es_default, "es_default");
var error10;
var init_es = __esm({
  "../node_modules/zod/v4/locales/es.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    error10 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "caracteres", verb: "tener" },
        file: { unit: "bytes", verb: "tener" },
        array: { unit: "elementos", verb: "tener" },
        set: { unit: "elementos", verb: "tener" }
      };
      const TypeNames = {
        string: "texto",
        number: "n\xFAmero",
        boolean: "booleano",
        array: "arreglo",
        object: "objeto",
        set: "conjunto",
        file: "archivo",
        date: "fecha",
        bigint: "n\xFAmero grande",
        symbol: "s\xEDmbolo",
        undefined: "indefinido",
        null: "nulo",
        function: "funci\xF3n",
        map: "mapa",
        record: "registro",
        tuple: "tupla",
        enum: "enumeraci\xF3n",
        union: "uni\xF3n",
        literal: "literal",
        promise: "promesa",
        void: "vac\xEDo",
        never: "nunca",
        unknown: "desconocido",
        any: "cualquiera"
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      function getTypeName(type) {
        return TypeNames[type] ?? type;
      }
      __name(getTypeName, "getTypeName");
      __name2(getTypeName, "getTypeName");
      const parsedType7 = /* @__PURE__ */ __name2((data) => {
        const t2 = typeof data;
        switch (t2) {
          case "number": {
            return Number.isNaN(data) ? "NaN" : "number";
          }
          case "object": {
            if (Array.isArray(data)) {
              return "array";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype) {
              return data.constructor.name;
            }
            return "object";
          }
        }
        return t2;
      }, "parsedType");
      const Nouns = {
        regex: "entrada",
        email: "direcci\xF3n de correo electr\xF3nico",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "fecha y hora ISO",
        date: "fecha ISO",
        time: "hora ISO",
        duration: "duraci\xF3n ISO",
        ipv4: "direcci\xF3n IPv4",
        ipv6: "direcci\xF3n IPv6",
        cidrv4: "rango IPv4",
        cidrv6: "rango IPv6",
        base64: "cadena codificada en base64",
        base64url: "URL codificada en base64",
        json_string: "cadena JSON",
        e164: "n\xFAmero E.164",
        jwt: "JWT",
        template_literal: "entrada"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Entrada inv\xE1lida: se esperaba ${getTypeName(issue2.expected)}, recibido ${getTypeName(parsedType7(issue2.input))}`;
          // return `Entrada inválida: se esperaba ${issue.expected}, recibido ${util.getParsedType(issue.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Entrada inv\xE1lida: se esperaba ${stringifyPrimitive(issue2.values[0])}`;
            return `Opci\xF3n inv\xE1lida: se esperaba una de ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            const origin = getTypeName(issue2.origin);
            if (sizing)
              return `Demasiado grande: se esperaba que ${origin ?? "valor"} tuviera ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elementos"}`;
            return `Demasiado grande: se esperaba que ${origin ?? "valor"} fuera ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            const origin = getTypeName(issue2.origin);
            if (sizing) {
              return `Demasiado peque\xF1o: se esperaba que ${origin} tuviera ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `Demasiado peque\xF1o: se esperaba que ${origin} fuera ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `Cadena inv\xE1lida: debe comenzar con "${_issue.prefix}"`;
            if (_issue.format === "ends_with")
              return `Cadena inv\xE1lida: debe terminar en "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `Cadena inv\xE1lida: debe incluir "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `Cadena inv\xE1lida: debe coincidir con el patr\xF3n ${_issue.pattern}`;
            return `Inv\xE1lido ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `N\xFAmero inv\xE1lido: debe ser m\xFAltiplo de ${issue2.divisor}`;
          case "unrecognized_keys":
            return `Llave${issue2.keys.length > 1 ? "s" : ""} desconocida${issue2.keys.length > 1 ? "s" : ""}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Llave inv\xE1lida en ${getTypeName(issue2.origin)}`;
          case "invalid_union":
            return "Entrada inv\xE1lida";
          case "invalid_element":
            return `Valor inv\xE1lido en ${getTypeName(issue2.origin)}`;
          default:
            return `Entrada inv\xE1lida`;
        }
      };
    }, "error");
    __name2(es_default, "default");
  }
});
function fa_default() {
  return {
    localeError: error11()
  };
}
__name(fa_default, "fa_default");
var error11;
var init_fa = __esm({
  "../node_modules/zod/v4/locales/fa.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    error11 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "\u06A9\u0627\u0631\u0627\u06A9\u062A\u0631", verb: "\u062F\u0627\u0634\u062A\u0647 \u0628\u0627\u0634\u062F" },
        file: { unit: "\u0628\u0627\u06CC\u062A", verb: "\u062F\u0627\u0634\u062A\u0647 \u0628\u0627\u0634\u062F" },
        array: { unit: "\u0622\u06CC\u062A\u0645", verb: "\u062F\u0627\u0634\u062A\u0647 \u0628\u0627\u0634\u062F" },
        set: { unit: "\u0622\u06CC\u062A\u0645", verb: "\u062F\u0627\u0634\u062A\u0647 \u0628\u0627\u0634\u062F" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const parsedType7 = /* @__PURE__ */ __name2((data) => {
        const t2 = typeof data;
        switch (t2) {
          case "number": {
            return Number.isNaN(data) ? "NaN" : "\u0639\u062F\u062F";
          }
          case "object": {
            if (Array.isArray(data)) {
              return "\u0622\u0631\u0627\u06CC\u0647";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
        }
        return t2;
      }, "parsedType");
      const Nouns = {
        regex: "\u0648\u0631\u0648\u062F\u06CC",
        email: "\u0622\u062F\u0631\u0633 \u0627\u06CC\u0645\u06CC\u0644",
        url: "URL",
        emoji: "\u0627\u06CC\u0645\u0648\u062C\u06CC",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "\u062A\u0627\u0631\u06CC\u062E \u0648 \u0632\u0645\u0627\u0646 \u0627\u06CC\u0632\u0648",
        date: "\u062A\u0627\u0631\u06CC\u062E \u0627\u06CC\u0632\u0648",
        time: "\u0632\u0645\u0627\u0646 \u0627\u06CC\u0632\u0648",
        duration: "\u0645\u062F\u062A \u0632\u0645\u0627\u0646 \u0627\u06CC\u0632\u0648",
        ipv4: "IPv4 \u0622\u062F\u0631\u0633",
        ipv6: "IPv6 \u0622\u062F\u0631\u0633",
        cidrv4: "IPv4 \u062F\u0627\u0645\u0646\u0647",
        cidrv6: "IPv6 \u062F\u0627\u0645\u0646\u0647",
        base64: "base64-encoded \u0631\u0634\u062A\u0647",
        base64url: "base64url-encoded \u0631\u0634\u062A\u0647",
        json_string: "JSON \u0631\u0634\u062A\u0647",
        e164: "E.164 \u0639\u062F\u062F",
        jwt: "JWT",
        template_literal: "\u0648\u0631\u0648\u062F\u06CC"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\u0648\u0631\u0648\u062F\u06CC \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0645\u06CC\u200C\u0628\u0627\u06CC\u0633\u062A ${issue2.expected} \u0645\u06CC\u200C\u0628\u0648\u062F\u060C ${parsedType7(issue2.input)} \u062F\u0631\u06CC\u0627\u0641\u062A \u0634\u062F`;
          case "invalid_value":
            if (issue2.values.length === 1) {
              return `\u0648\u0631\u0648\u062F\u06CC \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0645\u06CC\u200C\u0628\u0627\u06CC\u0633\u062A ${stringifyPrimitive(issue2.values[0])} \u0645\u06CC\u200C\u0628\u0648\u062F`;
            }
            return `\u06AF\u0632\u06CC\u0646\u0647 \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0645\u06CC\u200C\u0628\u0627\u06CC\u0633\u062A \u06CC\u06A9\u06CC \u0627\u0632 ${joinValues(issue2.values, "|")} \u0645\u06CC\u200C\u0628\u0648\u062F`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `\u062E\u06CC\u0644\u06CC \u0628\u0632\u0631\u06AF: ${issue2.origin ?? "\u0645\u0642\u062F\u0627\u0631"} \u0628\u0627\u06CC\u062F ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "\u0639\u0646\u0635\u0631"} \u0628\u0627\u0634\u062F`;
            }
            return `\u062E\u06CC\u0644\u06CC \u0628\u0632\u0631\u06AF: ${issue2.origin ?? "\u0645\u0642\u062F\u0627\u0631"} \u0628\u0627\u06CC\u062F ${adj}${issue2.maximum.toString()} \u0628\u0627\u0634\u062F`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `\u062E\u06CC\u0644\u06CC \u06A9\u0648\u0686\u06A9: ${issue2.origin} \u0628\u0627\u06CC\u062F ${adj}${issue2.minimum.toString()} ${sizing.unit} \u0628\u0627\u0634\u062F`;
            }
            return `\u062E\u06CC\u0644\u06CC \u06A9\u0648\u0686\u06A9: ${issue2.origin} \u0628\u0627\u06CC\u062F ${adj}${issue2.minimum.toString()} \u0628\u0627\u0634\u062F`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with") {
              return `\u0631\u0634\u062A\u0647 \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0628\u0627\u06CC\u062F \u0628\u0627 "${_issue.prefix}" \u0634\u0631\u0648\u0639 \u0634\u0648\u062F`;
            }
            if (_issue.format === "ends_with") {
              return `\u0631\u0634\u062A\u0647 \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0628\u0627\u06CC\u062F \u0628\u0627 "${_issue.suffix}" \u062A\u0645\u0627\u0645 \u0634\u0648\u062F`;
            }
            if (_issue.format === "includes") {
              return `\u0631\u0634\u062A\u0647 \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0628\u0627\u06CC\u062F \u0634\u0627\u0645\u0644 "${_issue.includes}" \u0628\u0627\u0634\u062F`;
            }
            if (_issue.format === "regex") {
              return `\u0631\u0634\u062A\u0647 \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0628\u0627\u06CC\u062F \u0628\u0627 \u0627\u0644\u06AF\u0648\u06CC ${_issue.pattern} \u0645\u0637\u0627\u0628\u0642\u062A \u062F\u0627\u0634\u062A\u0647 \u0628\u0627\u0634\u062F`;
            }
            return `${Nouns[_issue.format] ?? issue2.format} \u0646\u0627\u0645\u0639\u062A\u0628\u0631`;
          }
          case "not_multiple_of":
            return `\u0639\u062F\u062F \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0628\u0627\u06CC\u062F \u0645\u0636\u0631\u0628 ${issue2.divisor} \u0628\u0627\u0634\u062F`;
          case "unrecognized_keys":
            return `\u06A9\u0644\u06CC\u062F${issue2.keys.length > 1 ? "\u0647\u0627\u06CC" : ""} \u0646\u0627\u0634\u0646\u0627\u0633: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `\u06A9\u0644\u06CC\u062F \u0646\u0627\u0634\u0646\u0627\u0633 \u062F\u0631 ${issue2.origin}`;
          case "invalid_union":
            return `\u0648\u0631\u0648\u062F\u06CC \u0646\u0627\u0645\u0639\u062A\u0628\u0631`;
          case "invalid_element":
            return `\u0645\u0642\u062F\u0627\u0631 \u0646\u0627\u0645\u0639\u062A\u0628\u0631 \u062F\u0631 ${issue2.origin}`;
          default:
            return `\u0648\u0631\u0648\u062F\u06CC \u0646\u0627\u0645\u0639\u062A\u0628\u0631`;
        }
      };
    }, "error");
    __name2(fa_default, "default");
  }
});
function fi_default() {
  return {
    localeError: error12()
  };
}
__name(fi_default, "fi_default");
var error12;
var init_fi = __esm({
  "../node_modules/zod/v4/locales/fi.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    error12 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "merkki\xE4", subject: "merkkijonon" },
        file: { unit: "tavua", subject: "tiedoston" },
        array: { unit: "alkiota", subject: "listan" },
        set: { unit: "alkiota", subject: "joukon" },
        number: { unit: "", subject: "luvun" },
        bigint: { unit: "", subject: "suuren kokonaisluvun" },
        int: { unit: "", subject: "kokonaisluvun" },
        date: { unit: "", subject: "p\xE4iv\xE4m\xE4\xE4r\xE4n" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const parsedType7 = /* @__PURE__ */ __name2((data) => {
        const t2 = typeof data;
        switch (t2) {
          case "number": {
            return Number.isNaN(data) ? "NaN" : "number";
          }
          case "object": {
            if (Array.isArray(data)) {
              return "array";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
        }
        return t2;
      }, "parsedType");
      const Nouns = {
        regex: "s\xE4\xE4nn\xF6llinen lauseke",
        email: "s\xE4hk\xF6postiosoite",
        url: "URL-osoite",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO-aikaleima",
        date: "ISO-p\xE4iv\xE4m\xE4\xE4r\xE4",
        time: "ISO-aika",
        duration: "ISO-kesto",
        ipv4: "IPv4-osoite",
        ipv6: "IPv6-osoite",
        cidrv4: "IPv4-alue",
        cidrv6: "IPv6-alue",
        base64: "base64-koodattu merkkijono",
        base64url: "base64url-koodattu merkkijono",
        json_string: "JSON-merkkijono",
        e164: "E.164-luku",
        jwt: "JWT",
        template_literal: "templaattimerkkijono"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Virheellinen tyyppi: odotettiin ${issue2.expected}, oli ${parsedType7(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Virheellinen sy\xF6te: t\xE4ytyy olla ${stringifyPrimitive(issue2.values[0])}`;
            return `Virheellinen valinta: t\xE4ytyy olla yksi seuraavista: ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Liian suuri: ${sizing.subject} t\xE4ytyy olla ${adj}${issue2.maximum.toString()} ${sizing.unit}`.trim();
            }
            return `Liian suuri: arvon t\xE4ytyy olla ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Liian pieni: ${sizing.subject} t\xE4ytyy olla ${adj}${issue2.minimum.toString()} ${sizing.unit}`.trim();
            }
            return `Liian pieni: arvon t\xE4ytyy olla ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `Virheellinen sy\xF6te: t\xE4ytyy alkaa "${_issue.prefix}"`;
            if (_issue.format === "ends_with")
              return `Virheellinen sy\xF6te: t\xE4ytyy loppua "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `Virheellinen sy\xF6te: t\xE4ytyy sis\xE4lt\xE4\xE4 "${_issue.includes}"`;
            if (_issue.format === "regex") {
              return `Virheellinen sy\xF6te: t\xE4ytyy vastata s\xE4\xE4nn\xF6llist\xE4 lauseketta ${_issue.pattern}`;
            }
            return `Virheellinen ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `Virheellinen luku: t\xE4ytyy olla luvun ${issue2.divisor} monikerta`;
          case "unrecognized_keys":
            return `${issue2.keys.length > 1 ? "Tuntemattomat avaimet" : "Tuntematon avain"}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return "Virheellinen avain tietueessa";
          case "invalid_union":
            return "Virheellinen unioni";
          case "invalid_element":
            return "Virheellinen arvo joukossa";
          default:
            return `Virheellinen sy\xF6te`;
        }
      };
    }, "error");
    __name2(fi_default, "default");
  }
});
function fr_default() {
  return {
    localeError: error13()
  };
}
__name(fr_default, "fr_default");
var error13;
var init_fr = __esm({
  "../node_modules/zod/v4/locales/fr.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    error13 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "caract\xE8res", verb: "avoir" },
        file: { unit: "octets", verb: "avoir" },
        array: { unit: "\xE9l\xE9ments", verb: "avoir" },
        set: { unit: "\xE9l\xE9ments", verb: "avoir" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const parsedType7 = /* @__PURE__ */ __name2((data) => {
        const t2 = typeof data;
        switch (t2) {
          case "number": {
            return Number.isNaN(data) ? "NaN" : "nombre";
          }
          case "object": {
            if (Array.isArray(data)) {
              return "tableau";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
        }
        return t2;
      }, "parsedType");
      const Nouns = {
        regex: "entr\xE9e",
        email: "adresse e-mail",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "date et heure ISO",
        date: "date ISO",
        time: "heure ISO",
        duration: "dur\xE9e ISO",
        ipv4: "adresse IPv4",
        ipv6: "adresse IPv6",
        cidrv4: "plage IPv4",
        cidrv6: "plage IPv6",
        base64: "cha\xEEne encod\xE9e en base64",
        base64url: "cha\xEEne encod\xE9e en base64url",
        json_string: "cha\xEEne JSON",
        e164: "num\xE9ro E.164",
        jwt: "JWT",
        template_literal: "entr\xE9e"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Entr\xE9e invalide : ${issue2.expected} attendu, ${parsedType7(issue2.input)} re\xE7u`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Entr\xE9e invalide : ${stringifyPrimitive(issue2.values[0])} attendu`;
            return `Option invalide : une valeur parmi ${joinValues(issue2.values, "|")} attendue`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `Trop grand : ${issue2.origin ?? "valeur"} doit ${sizing.verb} ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "\xE9l\xE9ment(s)"}`;
            return `Trop grand : ${issue2.origin ?? "valeur"} doit \xEAtre ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Trop petit : ${issue2.origin} doit ${sizing.verb} ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `Trop petit : ${issue2.origin} doit \xEAtre ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `Cha\xEEne invalide : doit commencer par "${_issue.prefix}"`;
            if (_issue.format === "ends_with")
              return `Cha\xEEne invalide : doit se terminer par "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `Cha\xEEne invalide : doit inclure "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `Cha\xEEne invalide : doit correspondre au mod\xE8le ${_issue.pattern}`;
            return `${Nouns[_issue.format] ?? issue2.format} invalide`;
          }
          case "not_multiple_of":
            return `Nombre invalide : doit \xEAtre un multiple de ${issue2.divisor}`;
          case "unrecognized_keys":
            return `Cl\xE9${issue2.keys.length > 1 ? "s" : ""} non reconnue${issue2.keys.length > 1 ? "s" : ""} : ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Cl\xE9 invalide dans ${issue2.origin}`;
          case "invalid_union":
            return "Entr\xE9e invalide";
          case "invalid_element":
            return `Valeur invalide dans ${issue2.origin}`;
          default:
            return `Entr\xE9e invalide`;
        }
      };
    }, "error");
    __name2(fr_default, "default");
  }
});
function fr_CA_default() {
  return {
    localeError: error14()
  };
}
__name(fr_CA_default, "fr_CA_default");
var error14;
var init_fr_CA = __esm({
  "../node_modules/zod/v4/locales/fr-CA.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    error14 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "caract\xE8res", verb: "avoir" },
        file: { unit: "octets", verb: "avoir" },
        array: { unit: "\xE9l\xE9ments", verb: "avoir" },
        set: { unit: "\xE9l\xE9ments", verb: "avoir" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const parsedType7 = /* @__PURE__ */ __name2((data) => {
        const t2 = typeof data;
        switch (t2) {
          case "number": {
            return Number.isNaN(data) ? "NaN" : "number";
          }
          case "object": {
            if (Array.isArray(data)) {
              return "array";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
        }
        return t2;
      }, "parsedType");
      const Nouns = {
        regex: "entr\xE9e",
        email: "adresse courriel",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "date-heure ISO",
        date: "date ISO",
        time: "heure ISO",
        duration: "dur\xE9e ISO",
        ipv4: "adresse IPv4",
        ipv6: "adresse IPv6",
        cidrv4: "plage IPv4",
        cidrv6: "plage IPv6",
        base64: "cha\xEEne encod\xE9e en base64",
        base64url: "cha\xEEne encod\xE9e en base64url",
        json_string: "cha\xEEne JSON",
        e164: "num\xE9ro E.164",
        jwt: "JWT",
        template_literal: "entr\xE9e"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Entr\xE9e invalide : attendu ${issue2.expected}, re\xE7u ${parsedType7(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Entr\xE9e invalide : attendu ${stringifyPrimitive(issue2.values[0])}`;
            return `Option invalide : attendu l'une des valeurs suivantes ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "\u2264" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `Trop grand : attendu que ${issue2.origin ?? "la valeur"} ait ${adj}${issue2.maximum.toString()} ${sizing.unit}`;
            return `Trop grand : attendu que ${issue2.origin ?? "la valeur"} soit ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? "\u2265" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Trop petit : attendu que ${issue2.origin} ait ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `Trop petit : attendu que ${issue2.origin} soit ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with") {
              return `Cha\xEEne invalide : doit commencer par "${_issue.prefix}"`;
            }
            if (_issue.format === "ends_with")
              return `Cha\xEEne invalide : doit se terminer par "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `Cha\xEEne invalide : doit inclure "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `Cha\xEEne invalide : doit correspondre au motif ${_issue.pattern}`;
            return `${Nouns[_issue.format] ?? issue2.format} invalide`;
          }
          case "not_multiple_of":
            return `Nombre invalide : doit \xEAtre un multiple de ${issue2.divisor}`;
          case "unrecognized_keys":
            return `Cl\xE9${issue2.keys.length > 1 ? "s" : ""} non reconnue${issue2.keys.length > 1 ? "s" : ""} : ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Cl\xE9 invalide dans ${issue2.origin}`;
          case "invalid_union":
            return "Entr\xE9e invalide";
          case "invalid_element":
            return `Valeur invalide dans ${issue2.origin}`;
          default:
            return `Entr\xE9e invalide`;
        }
      };
    }, "error");
    __name2(fr_CA_default, "default");
  }
});
function he_default() {
  return {
    localeError: error15()
  };
}
__name(he_default, "he_default");
var error15;
var init_he = __esm({
  "../node_modules/zod/v4/locales/he.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    error15 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "\u05D0\u05D5\u05EA\u05D9\u05D5\u05EA", verb: "\u05DC\u05DB\u05DC\u05D5\u05DC" },
        file: { unit: "\u05D1\u05D9\u05D9\u05D8\u05D9\u05DD", verb: "\u05DC\u05DB\u05DC\u05D5\u05DC" },
        array: { unit: "\u05E4\u05E8\u05D9\u05D8\u05D9\u05DD", verb: "\u05DC\u05DB\u05DC\u05D5\u05DC" },
        set: { unit: "\u05E4\u05E8\u05D9\u05D8\u05D9\u05DD", verb: "\u05DC\u05DB\u05DC\u05D5\u05DC" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const parsedType7 = /* @__PURE__ */ __name2((data) => {
        const t2 = typeof data;
        switch (t2) {
          case "number": {
            return Number.isNaN(data) ? "NaN" : "number";
          }
          case "object": {
            if (Array.isArray(data)) {
              return "array";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
        }
        return t2;
      }, "parsedType");
      const Nouns = {
        regex: "\u05E7\u05DC\u05D8",
        email: "\u05DB\u05EA\u05D5\u05D1\u05EA \u05D0\u05D9\u05DE\u05D9\u05D9\u05DC",
        url: "\u05DB\u05EA\u05D5\u05D1\u05EA \u05E8\u05E9\u05EA",
        emoji: "\u05D0\u05D9\u05DE\u05D5\u05D2'\u05D9",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "\u05EA\u05D0\u05E8\u05D9\u05DA \u05D5\u05D6\u05DE\u05DF ISO",
        date: "\u05EA\u05D0\u05E8\u05D9\u05DA ISO",
        time: "\u05D6\u05DE\u05DF ISO",
        duration: "\u05DE\u05E9\u05DA \u05D6\u05DE\u05DF ISO",
        ipv4: "\u05DB\u05EA\u05D5\u05D1\u05EA IPv4",
        ipv6: "\u05DB\u05EA\u05D5\u05D1\u05EA IPv6",
        cidrv4: "\u05D8\u05D5\u05D5\u05D7 IPv4",
        cidrv6: "\u05D8\u05D5\u05D5\u05D7 IPv6",
        base64: "\u05DE\u05D7\u05E8\u05D5\u05D6\u05EA \u05D1\u05D1\u05E1\u05D9\u05E1 64",
        base64url: "\u05DE\u05D7\u05E8\u05D5\u05D6\u05EA \u05D1\u05D1\u05E1\u05D9\u05E1 64 \u05DC\u05DB\u05EA\u05D5\u05D1\u05D5\u05EA \u05E8\u05E9\u05EA",
        json_string: "\u05DE\u05D7\u05E8\u05D5\u05D6\u05EA JSON",
        e164: "\u05DE\u05E1\u05E4\u05E8 E.164",
        jwt: "JWT",
        template_literal: "\u05E7\u05DC\u05D8"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\u05E7\u05DC\u05D8 \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF: \u05E6\u05E8\u05D9\u05DA ${issue2.expected}, \u05D4\u05EA\u05E7\u05D1\u05DC ${parsedType7(issue2.input)}`;
          // return `Invalid input: expected ${issue.expected}, received ${util.getParsedType(issue.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `\u05E7\u05DC\u05D8 \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF: \u05E6\u05E8\u05D9\u05DA ${stringifyPrimitive(issue2.values[0])}`;
            return `\u05E7\u05DC\u05D8 \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF: \u05E6\u05E8\u05D9\u05DA \u05D0\u05D7\u05EA \u05DE\u05D4\u05D0\u05E4\u05E9\u05E8\u05D5\u05D9\u05D5\u05EA  ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `\u05D2\u05D3\u05D5\u05DC \u05DE\u05D3\u05D9: ${issue2.origin ?? "value"} \u05E6\u05E8\u05D9\u05DA \u05DC\u05D4\u05D9\u05D5\u05EA ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elements"}`;
            return `\u05D2\u05D3\u05D5\u05DC \u05DE\u05D3\u05D9: ${issue2.origin ?? "value"} \u05E6\u05E8\u05D9\u05DA \u05DC\u05D4\u05D9\u05D5\u05EA ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `\u05E7\u05D8\u05DF \u05DE\u05D3\u05D9: ${issue2.origin} \u05E6\u05E8\u05D9\u05DA \u05DC\u05D4\u05D9\u05D5\u05EA ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `\u05E7\u05D8\u05DF \u05DE\u05D3\u05D9: ${issue2.origin} \u05E6\u05E8\u05D9\u05DA \u05DC\u05D4\u05D9\u05D5\u05EA ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `\u05DE\u05D7\u05E8\u05D5\u05D6\u05EA \u05DC\u05D0 \u05EA\u05E7\u05D9\u05E0\u05D4: \u05D7\u05D9\u05D9\u05D1\u05EA \u05DC\u05D4\u05EA\u05D7\u05D9\u05DC \u05D1"${_issue.prefix}"`;
            if (_issue.format === "ends_with")
              return `\u05DE\u05D7\u05E8\u05D5\u05D6\u05EA \u05DC\u05D0 \u05EA\u05E7\u05D9\u05E0\u05D4: \u05D7\u05D9\u05D9\u05D1\u05EA \u05DC\u05D4\u05E1\u05EA\u05D9\u05D9\u05DD \u05D1 "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `\u05DE\u05D7\u05E8\u05D5\u05D6\u05EA \u05DC\u05D0 \u05EA\u05E7\u05D9\u05E0\u05D4: \u05D7\u05D9\u05D9\u05D1\u05EA \u05DC\u05DB\u05DC\u05D5\u05DC "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `\u05DE\u05D7\u05E8\u05D5\u05D6\u05EA \u05DC\u05D0 \u05EA\u05E7\u05D9\u05E0\u05D4: \u05D7\u05D9\u05D9\u05D1\u05EA \u05DC\u05D4\u05EA\u05D0\u05D9\u05DD \u05DC\u05EA\u05D1\u05E0\u05D9\u05EA ${_issue.pattern}`;
            return `${Nouns[_issue.format] ?? issue2.format} \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF`;
          }
          case "not_multiple_of":
            return `\u05DE\u05E1\u05E4\u05E8 \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF: \u05D7\u05D9\u05D9\u05D1 \u05DC\u05D4\u05D9\u05D5\u05EA \u05DE\u05DB\u05E4\u05DC\u05D4 \u05E9\u05DC ${issue2.divisor}`;
          case "unrecognized_keys":
            return `\u05DE\u05E4\u05EA\u05D7${issue2.keys.length > 1 ? "\u05D5\u05EA" : ""} \u05DC\u05D0 \u05DE\u05D6\u05D5\u05D4${issue2.keys.length > 1 ? "\u05D9\u05DD" : "\u05D4"}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `\u05DE\u05E4\u05EA\u05D7 \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF \u05D1${issue2.origin}`;
          case "invalid_union":
            return "\u05E7\u05DC\u05D8 \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF";
          case "invalid_element":
            return `\u05E2\u05E8\u05DA \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF \u05D1${issue2.origin}`;
          default:
            return `\u05E7\u05DC\u05D8 \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF`;
        }
      };
    }, "error");
    __name2(he_default, "default");
  }
});
function hu_default() {
  return {
    localeError: error16()
  };
}
__name(hu_default, "hu_default");
var error16;
var init_hu = __esm({
  "../node_modules/zod/v4/locales/hu.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    error16 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "karakter", verb: "legyen" },
        file: { unit: "byte", verb: "legyen" },
        array: { unit: "elem", verb: "legyen" },
        set: { unit: "elem", verb: "legyen" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const parsedType7 = /* @__PURE__ */ __name2((data) => {
        const t2 = typeof data;
        switch (t2) {
          case "number": {
            return Number.isNaN(data) ? "NaN" : "sz\xE1m";
          }
          case "object": {
            if (Array.isArray(data)) {
              return "t\xF6mb";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
        }
        return t2;
      }, "parsedType");
      const Nouns = {
        regex: "bemenet",
        email: "email c\xEDm",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO id\u0151b\xE9lyeg",
        date: "ISO d\xE1tum",
        time: "ISO id\u0151",
        duration: "ISO id\u0151intervallum",
        ipv4: "IPv4 c\xEDm",
        ipv6: "IPv6 c\xEDm",
        cidrv4: "IPv4 tartom\xE1ny",
        cidrv6: "IPv6 tartom\xE1ny",
        base64: "base64-k\xF3dolt string",
        base64url: "base64url-k\xF3dolt string",
        json_string: "JSON string",
        e164: "E.164 sz\xE1m",
        jwt: "JWT",
        template_literal: "bemenet"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\xC9rv\xE9nytelen bemenet: a v\xE1rt \xE9rt\xE9k ${issue2.expected}, a kapott \xE9rt\xE9k ${parsedType7(issue2.input)}`;
          // return `Invalid input: expected ${issue.expected}, received ${util.getParsedType(issue.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `\xC9rv\xE9nytelen bemenet: a v\xE1rt \xE9rt\xE9k ${stringifyPrimitive(issue2.values[0])}`;
            return `\xC9rv\xE9nytelen opci\xF3: valamelyik \xE9rt\xE9k v\xE1rt ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `T\xFAl nagy: ${issue2.origin ?? "\xE9rt\xE9k"} m\xE9rete t\xFAl nagy ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elem"}`;
            return `T\xFAl nagy: a bemeneti \xE9rt\xE9k ${issue2.origin ?? "\xE9rt\xE9k"} t\xFAl nagy: ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `T\xFAl kicsi: a bemeneti \xE9rt\xE9k ${issue2.origin} m\xE9rete t\xFAl kicsi ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `T\xFAl kicsi: a bemeneti \xE9rt\xE9k ${issue2.origin} t\xFAl kicsi ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `\xC9rv\xE9nytelen string: "${_issue.prefix}" \xE9rt\xE9kkel kell kezd\u0151dnie`;
            if (_issue.format === "ends_with")
              return `\xC9rv\xE9nytelen string: "${_issue.suffix}" \xE9rt\xE9kkel kell v\xE9gz\u0151dnie`;
            if (_issue.format === "includes")
              return `\xC9rv\xE9nytelen string: "${_issue.includes}" \xE9rt\xE9ket kell tartalmaznia`;
            if (_issue.format === "regex")
              return `\xC9rv\xE9nytelen string: ${_issue.pattern} mint\xE1nak kell megfelelnie`;
            return `\xC9rv\xE9nytelen ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `\xC9rv\xE9nytelen sz\xE1m: ${issue2.divisor} t\xF6bbsz\xF6r\xF6s\xE9nek kell lennie`;
          case "unrecognized_keys":
            return `Ismeretlen kulcs${issue2.keys.length > 1 ? "s" : ""}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `\xC9rv\xE9nytelen kulcs ${issue2.origin}`;
          case "invalid_union":
            return "\xC9rv\xE9nytelen bemenet";
          case "invalid_element":
            return `\xC9rv\xE9nytelen \xE9rt\xE9k: ${issue2.origin}`;
          default:
            return `\xC9rv\xE9nytelen bemenet`;
        }
      };
    }, "error");
    __name2(hu_default, "default");
  }
});
function id_default() {
  return {
    localeError: error17()
  };
}
__name(id_default, "id_default");
var error17;
var init_id = __esm({
  "../node_modules/zod/v4/locales/id.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    error17 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "karakter", verb: "memiliki" },
        file: { unit: "byte", verb: "memiliki" },
        array: { unit: "item", verb: "memiliki" },
        set: { unit: "item", verb: "memiliki" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const parsedType7 = /* @__PURE__ */ __name2((data) => {
        const t2 = typeof data;
        switch (t2) {
          case "number": {
            return Number.isNaN(data) ? "NaN" : "number";
          }
          case "object": {
            if (Array.isArray(data)) {
              return "array";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
        }
        return t2;
      }, "parsedType");
      const Nouns = {
        regex: "input",
        email: "alamat email",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "tanggal dan waktu format ISO",
        date: "tanggal format ISO",
        time: "jam format ISO",
        duration: "durasi format ISO",
        ipv4: "alamat IPv4",
        ipv6: "alamat IPv6",
        cidrv4: "rentang alamat IPv4",
        cidrv6: "rentang alamat IPv6",
        base64: "string dengan enkode base64",
        base64url: "string dengan enkode base64url",
        json_string: "string JSON",
        e164: "angka E.164",
        jwt: "JWT",
        template_literal: "input"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Input tidak valid: diharapkan ${issue2.expected}, diterima ${parsedType7(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Input tidak valid: diharapkan ${stringifyPrimitive(issue2.values[0])}`;
            return `Pilihan tidak valid: diharapkan salah satu dari ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `Terlalu besar: diharapkan ${issue2.origin ?? "value"} memiliki ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elemen"}`;
            return `Terlalu besar: diharapkan ${issue2.origin ?? "value"} menjadi ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Terlalu kecil: diharapkan ${issue2.origin} memiliki ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `Terlalu kecil: diharapkan ${issue2.origin} menjadi ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `String tidak valid: harus dimulai dengan "${_issue.prefix}"`;
            if (_issue.format === "ends_with")
              return `String tidak valid: harus berakhir dengan "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `String tidak valid: harus menyertakan "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `String tidak valid: harus sesuai pola ${_issue.pattern}`;
            return `${Nouns[_issue.format] ?? issue2.format} tidak valid`;
          }
          case "not_multiple_of":
            return `Angka tidak valid: harus kelipatan dari ${issue2.divisor}`;
          case "unrecognized_keys":
            return `Kunci tidak dikenali ${issue2.keys.length > 1 ? "s" : ""}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Kunci tidak valid di ${issue2.origin}`;
          case "invalid_union":
            return "Input tidak valid";
          case "invalid_element":
            return `Nilai tidak valid di ${issue2.origin}`;
          default:
            return `Input tidak valid`;
        }
      };
    }, "error");
    __name2(id_default, "default");
  }
});
function is_default() {
  return {
    localeError: error18()
  };
}
__name(is_default, "is_default");
var parsedType3;
var error18;
var init_is = __esm({
  "../node_modules/zod/v4/locales/is.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    parsedType3 = /* @__PURE__ */ __name2((data) => {
      const t2 = typeof data;
      switch (t2) {
        case "number": {
          return Number.isNaN(data) ? "NaN" : "n\xFAmer";
        }
        case "object": {
          if (Array.isArray(data)) {
            return "fylki";
          }
          if (data === null) {
            return "null";
          }
          if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
            return data.constructor.name;
          }
        }
      }
      return t2;
    }, "parsedType");
    error18 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "stafi", verb: "a\xF0 hafa" },
        file: { unit: "b\xE6ti", verb: "a\xF0 hafa" },
        array: { unit: "hluti", verb: "a\xF0 hafa" },
        set: { unit: "hluti", verb: "a\xF0 hafa" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const Nouns = {
        regex: "gildi",
        email: "netfang",
        url: "vefsl\xF3\xF0",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO dagsetning og t\xEDmi",
        date: "ISO dagsetning",
        time: "ISO t\xEDmi",
        duration: "ISO t\xEDmalengd",
        ipv4: "IPv4 address",
        ipv6: "IPv6 address",
        cidrv4: "IPv4 range",
        cidrv6: "IPv6 range",
        base64: "base64-encoded strengur",
        base64url: "base64url-encoded strengur",
        json_string: "JSON strengur",
        e164: "E.164 t\xF6lugildi",
        jwt: "JWT",
        template_literal: "gildi"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Rangt gildi: \xDE\xFA sl\xF3st inn ${parsedType3(issue2.input)} \xFEar sem \xE1 a\xF0 vera ${issue2.expected}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Rangt gildi: gert r\xE1\xF0 fyrir ${stringifyPrimitive(issue2.values[0])}`;
            return `\xD3gilt val: m\xE1 vera eitt af eftirfarandi ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `Of st\xF3rt: gert er r\xE1\xF0 fyrir a\xF0 ${issue2.origin ?? "gildi"} hafi ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "hluti"}`;
            return `Of st\xF3rt: gert er r\xE1\xF0 fyrir a\xF0 ${issue2.origin ?? "gildi"} s\xE9 ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Of l\xEDti\xF0: gert er r\xE1\xF0 fyrir a\xF0 ${issue2.origin} hafi ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `Of l\xEDti\xF0: gert er r\xE1\xF0 fyrir a\xF0 ${issue2.origin} s\xE9 ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with") {
              return `\xD3gildur strengur: ver\xF0ur a\xF0 byrja \xE1 "${_issue.prefix}"`;
            }
            if (_issue.format === "ends_with")
              return `\xD3gildur strengur: ver\xF0ur a\xF0 enda \xE1 "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `\xD3gildur strengur: ver\xF0ur a\xF0 innihalda "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `\xD3gildur strengur: ver\xF0ur a\xF0 fylgja mynstri ${_issue.pattern}`;
            return `Rangt ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `R\xF6ng tala: ver\xF0ur a\xF0 vera margfeldi af ${issue2.divisor}`;
          case "unrecognized_keys":
            return `\xD3\xFEekkt ${issue2.keys.length > 1 ? "ir lyklar" : "ur lykill"}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Rangur lykill \xED ${issue2.origin}`;
          case "invalid_union":
            return "Rangt gildi";
          case "invalid_element":
            return `Rangt gildi \xED ${issue2.origin}`;
          default:
            return `Rangt gildi`;
        }
      };
    }, "error");
    __name2(is_default, "default");
  }
});
function it_default() {
  return {
    localeError: error19()
  };
}
__name(it_default, "it_default");
var error19;
var init_it = __esm({
  "../node_modules/zod/v4/locales/it.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    error19 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "caratteri", verb: "avere" },
        file: { unit: "byte", verb: "avere" },
        array: { unit: "elementi", verb: "avere" },
        set: { unit: "elementi", verb: "avere" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const parsedType7 = /* @__PURE__ */ __name2((data) => {
        const t2 = typeof data;
        switch (t2) {
          case "number": {
            return Number.isNaN(data) ? "NaN" : "numero";
          }
          case "object": {
            if (Array.isArray(data)) {
              return "vettore";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
        }
        return t2;
      }, "parsedType");
      const Nouns = {
        regex: "input",
        email: "indirizzo email",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "data e ora ISO",
        date: "data ISO",
        time: "ora ISO",
        duration: "durata ISO",
        ipv4: "indirizzo IPv4",
        ipv6: "indirizzo IPv6",
        cidrv4: "intervallo IPv4",
        cidrv6: "intervallo IPv6",
        base64: "stringa codificata in base64",
        base64url: "URL codificata in base64",
        json_string: "stringa JSON",
        e164: "numero E.164",
        jwt: "JWT",
        template_literal: "input"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Input non valido: atteso ${issue2.expected}, ricevuto ${parsedType7(issue2.input)}`;
          // return `Input non valido: atteso ${issue.expected}, ricevuto ${util.getParsedType(issue.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Input non valido: atteso ${stringifyPrimitive(issue2.values[0])}`;
            return `Opzione non valida: atteso uno tra ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `Troppo grande: ${issue2.origin ?? "valore"} deve avere ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elementi"}`;
            return `Troppo grande: ${issue2.origin ?? "valore"} deve essere ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Troppo piccolo: ${issue2.origin} deve avere ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `Troppo piccolo: ${issue2.origin} deve essere ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `Stringa non valida: deve iniziare con "${_issue.prefix}"`;
            if (_issue.format === "ends_with")
              return `Stringa non valida: deve terminare con "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `Stringa non valida: deve includere "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `Stringa non valida: deve corrispondere al pattern ${_issue.pattern}`;
            return `Invalid ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `Numero non valido: deve essere un multiplo di ${issue2.divisor}`;
          case "unrecognized_keys":
            return `Chiav${issue2.keys.length > 1 ? "i" : "e"} non riconosciut${issue2.keys.length > 1 ? "e" : "a"}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Chiave non valida in ${issue2.origin}`;
          case "invalid_union":
            return "Input non valido";
          case "invalid_element":
            return `Valore non valido in ${issue2.origin}`;
          default:
            return `Input non valido`;
        }
      };
    }, "error");
    __name2(it_default, "default");
  }
});
function ja_default() {
  return {
    localeError: error20()
  };
}
__name(ja_default, "ja_default");
var error20;
var init_ja = __esm({
  "../node_modules/zod/v4/locales/ja.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    error20 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "\u6587\u5B57", verb: "\u3067\u3042\u308B" },
        file: { unit: "\u30D0\u30A4\u30C8", verb: "\u3067\u3042\u308B" },
        array: { unit: "\u8981\u7D20", verb: "\u3067\u3042\u308B" },
        set: { unit: "\u8981\u7D20", verb: "\u3067\u3042\u308B" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const parsedType7 = /* @__PURE__ */ __name2((data) => {
        const t2 = typeof data;
        switch (t2) {
          case "number": {
            return Number.isNaN(data) ? "NaN" : "\u6570\u5024";
          }
          case "object": {
            if (Array.isArray(data)) {
              return "\u914D\u5217";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
        }
        return t2;
      }, "parsedType");
      const Nouns = {
        regex: "\u5165\u529B\u5024",
        email: "\u30E1\u30FC\u30EB\u30A2\u30C9\u30EC\u30B9",
        url: "URL",
        emoji: "\u7D75\u6587\u5B57",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO\u65E5\u6642",
        date: "ISO\u65E5\u4ED8",
        time: "ISO\u6642\u523B",
        duration: "ISO\u671F\u9593",
        ipv4: "IPv4\u30A2\u30C9\u30EC\u30B9",
        ipv6: "IPv6\u30A2\u30C9\u30EC\u30B9",
        cidrv4: "IPv4\u7BC4\u56F2",
        cidrv6: "IPv6\u7BC4\u56F2",
        base64: "base64\u30A8\u30F3\u30B3\u30FC\u30C9\u6587\u5B57\u5217",
        base64url: "base64url\u30A8\u30F3\u30B3\u30FC\u30C9\u6587\u5B57\u5217",
        json_string: "JSON\u6587\u5B57\u5217",
        e164: "E.164\u756A\u53F7",
        jwt: "JWT",
        template_literal: "\u5165\u529B\u5024"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\u7121\u52B9\u306A\u5165\u529B: ${issue2.expected}\u304C\u671F\u5F85\u3055\u308C\u307E\u3057\u305F\u304C\u3001${parsedType7(issue2.input)}\u304C\u5165\u529B\u3055\u308C\u307E\u3057\u305F`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `\u7121\u52B9\u306A\u5165\u529B: ${stringifyPrimitive(issue2.values[0])}\u304C\u671F\u5F85\u3055\u308C\u307E\u3057\u305F`;
            return `\u7121\u52B9\u306A\u9078\u629E: ${joinValues(issue2.values, "\u3001")}\u306E\u3044\u305A\u308C\u304B\u3067\u3042\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`;
          case "too_big": {
            const adj = issue2.inclusive ? "\u4EE5\u4E0B\u3067\u3042\u308B" : "\u3088\u308A\u5C0F\u3055\u3044";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `\u5927\u304D\u3059\u304E\u308B\u5024: ${issue2.origin ?? "\u5024"}\u306F${issue2.maximum.toString()}${sizing.unit ?? "\u8981\u7D20"}${adj}\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`;
            return `\u5927\u304D\u3059\u304E\u308B\u5024: ${issue2.origin ?? "\u5024"}\u306F${issue2.maximum.toString()}${adj}\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? "\u4EE5\u4E0A\u3067\u3042\u308B" : "\u3088\u308A\u5927\u304D\u3044";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `\u5C0F\u3055\u3059\u304E\u308B\u5024: ${issue2.origin}\u306F${issue2.minimum.toString()}${sizing.unit}${adj}\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`;
            return `\u5C0F\u3055\u3059\u304E\u308B\u5024: ${issue2.origin}\u306F${issue2.minimum.toString()}${adj}\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `\u7121\u52B9\u306A\u6587\u5B57\u5217: "${_issue.prefix}"\u3067\u59CB\u307E\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`;
            if (_issue.format === "ends_with")
              return `\u7121\u52B9\u306A\u6587\u5B57\u5217: "${_issue.suffix}"\u3067\u7D42\u308F\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`;
            if (_issue.format === "includes")
              return `\u7121\u52B9\u306A\u6587\u5B57\u5217: "${_issue.includes}"\u3092\u542B\u3080\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`;
            if (_issue.format === "regex")
              return `\u7121\u52B9\u306A\u6587\u5B57\u5217: \u30D1\u30BF\u30FC\u30F3${_issue.pattern}\u306B\u4E00\u81F4\u3059\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`;
            return `\u7121\u52B9\u306A${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `\u7121\u52B9\u306A\u6570\u5024: ${issue2.divisor}\u306E\u500D\u6570\u3067\u3042\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`;
          case "unrecognized_keys":
            return `\u8A8D\u8B58\u3055\u308C\u3066\u3044\u306A\u3044\u30AD\u30FC${issue2.keys.length > 1 ? "\u7FA4" : ""}: ${joinValues(issue2.keys, "\u3001")}`;
          case "invalid_key":
            return `${issue2.origin}\u5185\u306E\u7121\u52B9\u306A\u30AD\u30FC`;
          case "invalid_union":
            return "\u7121\u52B9\u306A\u5165\u529B";
          case "invalid_element":
            return `${issue2.origin}\u5185\u306E\u7121\u52B9\u306A\u5024`;
          default:
            return `\u7121\u52B9\u306A\u5165\u529B`;
        }
      };
    }, "error");
    __name2(ja_default, "default");
  }
});
function ka_default() {
  return {
    localeError: error21()
  };
}
__name(ka_default, "ka_default");
var parsedType4;
var error21;
var init_ka = __esm({
  "../node_modules/zod/v4/locales/ka.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    parsedType4 = /* @__PURE__ */ __name2((data) => {
      const t2 = typeof data;
      switch (t2) {
        case "number": {
          return Number.isNaN(data) ? "NaN" : "\u10E0\u10D8\u10EA\u10EE\u10D5\u10D8";
        }
        case "object": {
          if (Array.isArray(data)) {
            return "\u10DB\u10D0\u10E1\u10D8\u10D5\u10D8";
          }
          if (data === null) {
            return "null";
          }
          if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
            return data.constructor.name;
          }
        }
      }
      const typeMap = {
        string: "\u10E1\u10E2\u10E0\u10D8\u10DC\u10D2\u10D8",
        boolean: "\u10D1\u10E3\u10DA\u10D4\u10D0\u10DC\u10D8",
        undefined: "undefined",
        bigint: "bigint",
        symbol: "symbol",
        function: "\u10E4\u10E3\u10DC\u10E5\u10EA\u10D8\u10D0"
      };
      return typeMap[t2] ?? t2;
    }, "parsedType");
    error21 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "\u10E1\u10D8\u10DB\u10D1\u10DD\u10DA\u10DD", verb: "\u10E3\u10DC\u10D3\u10D0 \u10E8\u10D4\u10D8\u10EA\u10D0\u10D5\u10D3\u10D4\u10E1" },
        file: { unit: "\u10D1\u10D0\u10D8\u10E2\u10D8", verb: "\u10E3\u10DC\u10D3\u10D0 \u10E8\u10D4\u10D8\u10EA\u10D0\u10D5\u10D3\u10D4\u10E1" },
        array: { unit: "\u10D4\u10DA\u10D4\u10DB\u10D4\u10DC\u10E2\u10D8", verb: "\u10E3\u10DC\u10D3\u10D0 \u10E8\u10D4\u10D8\u10EA\u10D0\u10D5\u10D3\u10D4\u10E1" },
        set: { unit: "\u10D4\u10DA\u10D4\u10DB\u10D4\u10DC\u10E2\u10D8", verb: "\u10E3\u10DC\u10D3\u10D0 \u10E8\u10D4\u10D8\u10EA\u10D0\u10D5\u10D3\u10D4\u10E1" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const Nouns = {
        regex: "\u10E8\u10D4\u10E7\u10D5\u10D0\u10DC\u10D0",
        email: "\u10D4\u10DA-\u10E4\u10DD\u10E1\u10E2\u10D8\u10E1 \u10DB\u10D8\u10E1\u10D0\u10DB\u10D0\u10E0\u10D7\u10D8",
        url: "URL",
        emoji: "\u10D4\u10DB\u10DD\u10EF\u10D8",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "\u10D7\u10D0\u10E0\u10D8\u10E6\u10D8-\u10D3\u10E0\u10DD",
        date: "\u10D7\u10D0\u10E0\u10D8\u10E6\u10D8",
        time: "\u10D3\u10E0\u10DD",
        duration: "\u10EE\u10D0\u10DC\u10D2\u10E0\u10EB\u10DA\u10D8\u10D5\u10DD\u10D1\u10D0",
        ipv4: "IPv4 \u10DB\u10D8\u10E1\u10D0\u10DB\u10D0\u10E0\u10D7\u10D8",
        ipv6: "IPv6 \u10DB\u10D8\u10E1\u10D0\u10DB\u10D0\u10E0\u10D7\u10D8",
        cidrv4: "IPv4 \u10D3\u10D8\u10D0\u10DE\u10D0\u10D6\u10DD\u10DC\u10D8",
        cidrv6: "IPv6 \u10D3\u10D8\u10D0\u10DE\u10D0\u10D6\u10DD\u10DC\u10D8",
        base64: "base64-\u10D9\u10DD\u10D3\u10D8\u10E0\u10D4\u10D1\u10E3\u10DA\u10D8 \u10E1\u10E2\u10E0\u10D8\u10DC\u10D2\u10D8",
        base64url: "base64url-\u10D9\u10DD\u10D3\u10D8\u10E0\u10D4\u10D1\u10E3\u10DA\u10D8 \u10E1\u10E2\u10E0\u10D8\u10DC\u10D2\u10D8",
        json_string: "JSON \u10E1\u10E2\u10E0\u10D8\u10DC\u10D2\u10D8",
        e164: "E.164 \u10DC\u10DD\u10DB\u10D4\u10E0\u10D8",
        jwt: "JWT",
        template_literal: "\u10E8\u10D4\u10E7\u10D5\u10D0\u10DC\u10D0"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\u10D0\u10E0\u10D0\u10E1\u10EC\u10DD\u10E0\u10D8 \u10E8\u10D4\u10E7\u10D5\u10D0\u10DC\u10D0: \u10DB\u10DD\u10E1\u10D0\u10DA\u10DD\u10D3\u10DC\u10D4\u10DA\u10D8 ${issue2.expected}, \u10DB\u10D8\u10E6\u10D4\u10D1\u10E3\u10DA\u10D8 ${parsedType4(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `\u10D0\u10E0\u10D0\u10E1\u10EC\u10DD\u10E0\u10D8 \u10E8\u10D4\u10E7\u10D5\u10D0\u10DC\u10D0: \u10DB\u10DD\u10E1\u10D0\u10DA\u10DD\u10D3\u10DC\u10D4\u10DA\u10D8 ${stringifyPrimitive(issue2.values[0])}`;
            return `\u10D0\u10E0\u10D0\u10E1\u10EC\u10DD\u10E0\u10D8 \u10D5\u10D0\u10E0\u10D8\u10D0\u10DC\u10E2\u10D8: \u10DB\u10DD\u10E1\u10D0\u10DA\u10DD\u10D3\u10DC\u10D4\u10DA\u10D8\u10D0 \u10D4\u10E0\u10D7-\u10D4\u10E0\u10D7\u10D8 ${joinValues(issue2.values, "|")}-\u10D3\u10D0\u10DC`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `\u10D6\u10D4\u10D3\u10DB\u10D4\u10E2\u10D0\u10D3 \u10D3\u10D8\u10D3\u10D8: \u10DB\u10DD\u10E1\u10D0\u10DA\u10DD\u10D3\u10DC\u10D4\u10DA\u10D8 ${issue2.origin ?? "\u10DB\u10DC\u10D8\u10E8\u10D5\u10DC\u10D4\u10DA\u10DD\u10D1\u10D0"} ${sizing.verb} ${adj}${issue2.maximum.toString()} ${sizing.unit}`;
            return `\u10D6\u10D4\u10D3\u10DB\u10D4\u10E2\u10D0\u10D3 \u10D3\u10D8\u10D3\u10D8: \u10DB\u10DD\u10E1\u10D0\u10DA\u10DD\u10D3\u10DC\u10D4\u10DA\u10D8 ${issue2.origin ?? "\u10DB\u10DC\u10D8\u10E8\u10D5\u10DC\u10D4\u10DA\u10DD\u10D1\u10D0"} \u10D8\u10E7\u10DD\u10E1 ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `\u10D6\u10D4\u10D3\u10DB\u10D4\u10E2\u10D0\u10D3 \u10DE\u10D0\u10E2\u10D0\u10E0\u10D0: \u10DB\u10DD\u10E1\u10D0\u10DA\u10DD\u10D3\u10DC\u10D4\u10DA\u10D8 ${issue2.origin} ${sizing.verb} ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `\u10D6\u10D4\u10D3\u10DB\u10D4\u10E2\u10D0\u10D3 \u10DE\u10D0\u10E2\u10D0\u10E0\u10D0: \u10DB\u10DD\u10E1\u10D0\u10DA\u10DD\u10D3\u10DC\u10D4\u10DA\u10D8 ${issue2.origin} \u10D8\u10E7\u10DD\u10E1 ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with") {
              return `\u10D0\u10E0\u10D0\u10E1\u10EC\u10DD\u10E0\u10D8 \u10E1\u10E2\u10E0\u10D8\u10DC\u10D2\u10D8: \u10E3\u10DC\u10D3\u10D0 \u10D8\u10EC\u10E7\u10D4\u10D1\u10DD\u10D3\u10D4\u10E1 "${_issue.prefix}"-\u10D8\u10D7`;
            }
            if (_issue.format === "ends_with")
              return `\u10D0\u10E0\u10D0\u10E1\u10EC\u10DD\u10E0\u10D8 \u10E1\u10E2\u10E0\u10D8\u10DC\u10D2\u10D8: \u10E3\u10DC\u10D3\u10D0 \u10DB\u10D7\u10D0\u10D5\u10E0\u10D3\u10D4\u10D1\u10DD\u10D3\u10D4\u10E1 "${_issue.suffix}"-\u10D8\u10D7`;
            if (_issue.format === "includes")
              return `\u10D0\u10E0\u10D0\u10E1\u10EC\u10DD\u10E0\u10D8 \u10E1\u10E2\u10E0\u10D8\u10DC\u10D2\u10D8: \u10E3\u10DC\u10D3\u10D0 \u10E8\u10D4\u10D8\u10EA\u10D0\u10D5\u10D3\u10D4\u10E1 "${_issue.includes}"-\u10E1`;
            if (_issue.format === "regex")
              return `\u10D0\u10E0\u10D0\u10E1\u10EC\u10DD\u10E0\u10D8 \u10E1\u10E2\u10E0\u10D8\u10DC\u10D2\u10D8: \u10E3\u10DC\u10D3\u10D0 \u10E8\u10D4\u10D4\u10E1\u10D0\u10D1\u10D0\u10DB\u10D4\u10D1\u10DD\u10D3\u10D4\u10E1 \u10E8\u10D0\u10D1\u10DA\u10DD\u10DC\u10E1 ${_issue.pattern}`;
            return `\u10D0\u10E0\u10D0\u10E1\u10EC\u10DD\u10E0\u10D8 ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `\u10D0\u10E0\u10D0\u10E1\u10EC\u10DD\u10E0\u10D8 \u10E0\u10D8\u10EA\u10EE\u10D5\u10D8: \u10E3\u10DC\u10D3\u10D0 \u10D8\u10E7\u10DD\u10E1 ${issue2.divisor}-\u10D8\u10E1 \u10EF\u10D4\u10E0\u10D0\u10D3\u10D8`;
          case "unrecognized_keys":
            return `\u10E3\u10EA\u10DC\u10DD\u10D1\u10D8 \u10D2\u10D0\u10E1\u10D0\u10E6\u10D4\u10D1${issue2.keys.length > 1 ? "\u10D4\u10D1\u10D8" : "\u10D8"}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `\u10D0\u10E0\u10D0\u10E1\u10EC\u10DD\u10E0\u10D8 \u10D2\u10D0\u10E1\u10D0\u10E6\u10D4\u10D1\u10D8 ${issue2.origin}-\u10E8\u10D8`;
          case "invalid_union":
            return "\u10D0\u10E0\u10D0\u10E1\u10EC\u10DD\u10E0\u10D8 \u10E8\u10D4\u10E7\u10D5\u10D0\u10DC\u10D0";
          case "invalid_element":
            return `\u10D0\u10E0\u10D0\u10E1\u10EC\u10DD\u10E0\u10D8 \u10DB\u10DC\u10D8\u10E8\u10D5\u10DC\u10D4\u10DA\u10DD\u10D1\u10D0 ${issue2.origin}-\u10E8\u10D8`;
          default:
            return `\u10D0\u10E0\u10D0\u10E1\u10EC\u10DD\u10E0\u10D8 \u10E8\u10D4\u10E7\u10D5\u10D0\u10DC\u10D0`;
        }
      };
    }, "error");
    __name2(ka_default, "default");
  }
});
function km_default() {
  return {
    localeError: error22()
  };
}
__name(km_default, "km_default");
var error22;
var init_km = __esm({
  "../node_modules/zod/v4/locales/km.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    error22 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "\u178F\u17BD\u17A2\u1780\u17D2\u179F\u179A", verb: "\u1782\u17BD\u179A\u1798\u17B6\u1793" },
        file: { unit: "\u1794\u17C3", verb: "\u1782\u17BD\u179A\u1798\u17B6\u1793" },
        array: { unit: "\u1792\u17B6\u178F\u17BB", verb: "\u1782\u17BD\u179A\u1798\u17B6\u1793" },
        set: { unit: "\u1792\u17B6\u178F\u17BB", verb: "\u1782\u17BD\u179A\u1798\u17B6\u1793" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const parsedType7 = /* @__PURE__ */ __name2((data) => {
        const t2 = typeof data;
        switch (t2) {
          case "number": {
            return Number.isNaN(data) ? "\u1798\u17B7\u1793\u1798\u17C2\u1793\u1787\u17B6\u179B\u17C1\u1781 (NaN)" : "\u179B\u17C1\u1781";
          }
          case "object": {
            if (Array.isArray(data)) {
              return "\u17A2\u17B6\u179A\u17C1 (Array)";
            }
            if (data === null) {
              return "\u1782\u17D2\u1798\u17B6\u1793\u178F\u1798\u17D2\u179B\u17C3 (null)";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
        }
        return t2;
      }, "parsedType");
      const Nouns = {
        regex: "\u1791\u17B7\u1793\u17D2\u1793\u1793\u17D0\u1799\u1794\u1789\u17D2\u1785\u17BC\u179B",
        email: "\u17A2\u17B6\u179F\u1799\u178A\u17D2\u178B\u17B6\u1793\u17A2\u17CA\u17B8\u1798\u17C2\u179B",
        url: "URL",
        emoji: "\u179F\u1789\u17D2\u1789\u17B6\u17A2\u17B6\u179A\u1798\u17D2\u1798\u178E\u17CD",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "\u1780\u17B6\u179B\u1794\u179A\u17B7\u1785\u17D2\u1786\u17C1\u1791 \u1793\u17B7\u1784\u1798\u17C9\u17C4\u1784 ISO",
        date: "\u1780\u17B6\u179B\u1794\u179A\u17B7\u1785\u17D2\u1786\u17C1\u1791 ISO",
        time: "\u1798\u17C9\u17C4\u1784 ISO",
        duration: "\u179A\u1799\u17C8\u1796\u17C1\u179B ISO",
        ipv4: "\u17A2\u17B6\u179F\u1799\u178A\u17D2\u178B\u17B6\u1793 IPv4",
        ipv6: "\u17A2\u17B6\u179F\u1799\u178A\u17D2\u178B\u17B6\u1793 IPv6",
        cidrv4: "\u178A\u17C2\u1793\u17A2\u17B6\u179F\u1799\u178A\u17D2\u178B\u17B6\u1793 IPv4",
        cidrv6: "\u178A\u17C2\u1793\u17A2\u17B6\u179F\u1799\u178A\u17D2\u178B\u17B6\u1793 IPv6",
        base64: "\u1781\u17D2\u179F\u17C2\u17A2\u1780\u17D2\u179F\u179A\u17A2\u17CA\u17B7\u1780\u17BC\u178A base64",
        base64url: "\u1781\u17D2\u179F\u17C2\u17A2\u1780\u17D2\u179F\u179A\u17A2\u17CA\u17B7\u1780\u17BC\u178A base64url",
        json_string: "\u1781\u17D2\u179F\u17C2\u17A2\u1780\u17D2\u179F\u179A JSON",
        e164: "\u179B\u17C1\u1781 E.164",
        jwt: "JWT",
        template_literal: "\u1791\u17B7\u1793\u17D2\u1793\u1793\u17D0\u1799\u1794\u1789\u17D2\u1785\u17BC\u179B"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\u1791\u17B7\u1793\u17D2\u1793\u1793\u17D0\u1799\u1794\u1789\u17D2\u1785\u17BC\u179B\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1780\u17B6\u179A ${issue2.expected} \u1794\u17C9\u17BB\u1793\u17D2\u178F\u17C2\u1791\u1791\u17BD\u179B\u1794\u17B6\u1793 ${parsedType7(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `\u1791\u17B7\u1793\u17D2\u1793\u1793\u17D0\u1799\u1794\u1789\u17D2\u1785\u17BC\u179B\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1780\u17B6\u179A ${stringifyPrimitive(issue2.values[0])}`;
            return `\u1787\u1798\u17D2\u179A\u17BE\u179F\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1787\u17B6\u1798\u17BD\u1799\u1780\u17D2\u1793\u17BB\u1784\u1785\u17C6\u178E\u17C4\u1798 ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `\u1792\u17C6\u1796\u17C1\u1780\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1780\u17B6\u179A ${issue2.origin ?? "\u178F\u1798\u17D2\u179B\u17C3"} ${adj} ${issue2.maximum.toString()} ${sizing.unit ?? "\u1792\u17B6\u178F\u17BB"}`;
            return `\u1792\u17C6\u1796\u17C1\u1780\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1780\u17B6\u179A ${issue2.origin ?? "\u178F\u1798\u17D2\u179B\u17C3"} ${adj} ${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `\u178F\u17BC\u1785\u1796\u17C1\u1780\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1780\u17B6\u179A ${issue2.origin} ${adj} ${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `\u178F\u17BC\u1785\u1796\u17C1\u1780\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1780\u17B6\u179A ${issue2.origin} ${adj} ${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with") {
              return `\u1781\u17D2\u179F\u17C2\u17A2\u1780\u17D2\u179F\u179A\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1785\u17B6\u1794\u17CB\u1795\u17D2\u178F\u17BE\u1798\u178A\u17C4\u1799 "${_issue.prefix}"`;
            }
            if (_issue.format === "ends_with")
              return `\u1781\u17D2\u179F\u17C2\u17A2\u1780\u17D2\u179F\u179A\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1794\u1789\u17D2\u1785\u1794\u17CB\u178A\u17C4\u1799 "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `\u1781\u17D2\u179F\u17C2\u17A2\u1780\u17D2\u179F\u179A\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1798\u17B6\u1793 "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `\u1781\u17D2\u179F\u17C2\u17A2\u1780\u17D2\u179F\u179A\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u178F\u17C2\u1795\u17D2\u1782\u17BC\u1795\u17D2\u1782\u1784\u1793\u17B9\u1784\u1791\u1798\u17D2\u179A\u1784\u17CB\u178A\u17C2\u179B\u1794\u17B6\u1793\u1780\u17C6\u178E\u178F\u17CB ${_issue.pattern}`;
            return `\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `\u179B\u17C1\u1781\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u178F\u17C2\u1787\u17B6\u1796\u17A0\u17BB\u1782\u17BB\u178E\u1793\u17C3 ${issue2.divisor}`;
          case "unrecognized_keys":
            return `\u179A\u1780\u1783\u17BE\u1789\u179F\u17C4\u1798\u17B7\u1793\u179F\u17D2\u1782\u17B6\u179B\u17CB\u17D6 ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `\u179F\u17C4\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u1793\u17C5\u1780\u17D2\u1793\u17BB\u1784 ${issue2.origin}`;
          case "invalid_union":
            return `\u1791\u17B7\u1793\u17D2\u1793\u1793\u17D0\u1799\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C`;
          case "invalid_element":
            return `\u1791\u17B7\u1793\u17D2\u1793\u1793\u17D0\u1799\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u1793\u17C5\u1780\u17D2\u1793\u17BB\u1784 ${issue2.origin}`;
          default:
            return `\u1791\u17B7\u1793\u17D2\u1793\u1793\u17D0\u1799\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C`;
        }
      };
    }, "error");
    __name2(km_default, "default");
  }
});
function kh_default() {
  return km_default();
}
__name(kh_default, "kh_default");
var init_kh = __esm({
  "../node_modules/zod/v4/locales/kh.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_km();
    __name2(kh_default, "default");
  }
});
function ko_default() {
  return {
    localeError: error23()
  };
}
__name(ko_default, "ko_default");
var error23;
var init_ko = __esm({
  "../node_modules/zod/v4/locales/ko.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    error23 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "\uBB38\uC790", verb: "to have" },
        file: { unit: "\uBC14\uC774\uD2B8", verb: "to have" },
        array: { unit: "\uAC1C", verb: "to have" },
        set: { unit: "\uAC1C", verb: "to have" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const parsedType7 = /* @__PURE__ */ __name2((data) => {
        const t2 = typeof data;
        switch (t2) {
          case "number": {
            return Number.isNaN(data) ? "NaN" : "number";
          }
          case "object": {
            if (Array.isArray(data)) {
              return "array";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
        }
        return t2;
      }, "parsedType");
      const Nouns = {
        regex: "\uC785\uB825",
        email: "\uC774\uBA54\uC77C \uC8FC\uC18C",
        url: "URL",
        emoji: "\uC774\uBAA8\uC9C0",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO \uB0A0\uC9DC\uC2DC\uAC04",
        date: "ISO \uB0A0\uC9DC",
        time: "ISO \uC2DC\uAC04",
        duration: "ISO \uAE30\uAC04",
        ipv4: "IPv4 \uC8FC\uC18C",
        ipv6: "IPv6 \uC8FC\uC18C",
        cidrv4: "IPv4 \uBC94\uC704",
        cidrv6: "IPv6 \uBC94\uC704",
        base64: "base64 \uC778\uCF54\uB529 \uBB38\uC790\uC5F4",
        base64url: "base64url \uC778\uCF54\uB529 \uBB38\uC790\uC5F4",
        json_string: "JSON \uBB38\uC790\uC5F4",
        e164: "E.164 \uBC88\uD638",
        jwt: "JWT",
        template_literal: "\uC785\uB825"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\uC798\uBABB\uB41C \uC785\uB825: \uC608\uC0C1 \uD0C0\uC785\uC740 ${issue2.expected}, \uBC1B\uC740 \uD0C0\uC785\uC740 ${parsedType7(issue2.input)}\uC785\uB2C8\uB2E4`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `\uC798\uBABB\uB41C \uC785\uB825: \uAC12\uC740 ${stringifyPrimitive(issue2.values[0])} \uC774\uC5B4\uC57C \uD569\uB2C8\uB2E4`;
            return `\uC798\uBABB\uB41C \uC635\uC158: ${joinValues(issue2.values, "\uB610\uB294 ")} \uC911 \uD558\uB098\uC5EC\uC57C \uD569\uB2C8\uB2E4`;
          case "too_big": {
            const adj = issue2.inclusive ? "\uC774\uD558" : "\uBBF8\uB9CC";
            const suffix = adj === "\uBBF8\uB9CC" ? "\uC774\uC5B4\uC57C \uD569\uB2C8\uB2E4" : "\uC5EC\uC57C \uD569\uB2C8\uB2E4";
            const sizing = getSizing(issue2.origin);
            const unit = sizing?.unit ?? "\uC694\uC18C";
            if (sizing)
              return `${issue2.origin ?? "\uAC12"}\uC774 \uB108\uBB34 \uD07D\uB2C8\uB2E4: ${issue2.maximum.toString()}${unit} ${adj}${suffix}`;
            return `${issue2.origin ?? "\uAC12"}\uC774 \uB108\uBB34 \uD07D\uB2C8\uB2E4: ${issue2.maximum.toString()} ${adj}${suffix}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? "\uC774\uC0C1" : "\uCD08\uACFC";
            const suffix = adj === "\uC774\uC0C1" ? "\uC774\uC5B4\uC57C \uD569\uB2C8\uB2E4" : "\uC5EC\uC57C \uD569\uB2C8\uB2E4";
            const sizing = getSizing(issue2.origin);
            const unit = sizing?.unit ?? "\uC694\uC18C";
            if (sizing) {
              return `${issue2.origin ?? "\uAC12"}\uC774 \uB108\uBB34 \uC791\uC2B5\uB2C8\uB2E4: ${issue2.minimum.toString()}${unit} ${adj}${suffix}`;
            }
            return `${issue2.origin ?? "\uAC12"}\uC774 \uB108\uBB34 \uC791\uC2B5\uB2C8\uB2E4: ${issue2.minimum.toString()} ${adj}${suffix}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with") {
              return `\uC798\uBABB\uB41C \uBB38\uC790\uC5F4: "${_issue.prefix}"(\uC73C)\uB85C \uC2DC\uC791\uD574\uC57C \uD569\uB2C8\uB2E4`;
            }
            if (_issue.format === "ends_with")
              return `\uC798\uBABB\uB41C \uBB38\uC790\uC5F4: "${_issue.suffix}"(\uC73C)\uB85C \uB05D\uB098\uC57C \uD569\uB2C8\uB2E4`;
            if (_issue.format === "includes")
              return `\uC798\uBABB\uB41C \uBB38\uC790\uC5F4: "${_issue.includes}"\uC744(\uB97C) \uD3EC\uD568\uD574\uC57C \uD569\uB2C8\uB2E4`;
            if (_issue.format === "regex")
              return `\uC798\uBABB\uB41C \uBB38\uC790\uC5F4: \uC815\uADDC\uC2DD ${_issue.pattern} \uD328\uD134\uACFC \uC77C\uCE58\uD574\uC57C \uD569\uB2C8\uB2E4`;
            return `\uC798\uBABB\uB41C ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `\uC798\uBABB\uB41C \uC22B\uC790: ${issue2.divisor}\uC758 \uBC30\uC218\uC5EC\uC57C \uD569\uB2C8\uB2E4`;
          case "unrecognized_keys":
            return `\uC778\uC2DD\uD560 \uC218 \uC5C6\uB294 \uD0A4: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `\uC798\uBABB\uB41C \uD0A4: ${issue2.origin}`;
          case "invalid_union":
            return `\uC798\uBABB\uB41C \uC785\uB825`;
          case "invalid_element":
            return `\uC798\uBABB\uB41C \uAC12: ${issue2.origin}`;
          default:
            return `\uC798\uBABB\uB41C \uC785\uB825`;
        }
      };
    }, "error");
    __name2(ko_default, "default");
  }
});
function getUnitTypeFromNumber(number4) {
  const abs = Math.abs(number4);
  const last = abs % 10;
  const last2 = abs % 100;
  if (last2 >= 11 && last2 <= 19 || last === 0)
    return "many";
  if (last === 1)
    return "one";
  return "few";
}
__name(getUnitTypeFromNumber, "getUnitTypeFromNumber");
function lt_default() {
  return {
    localeError: error24()
  };
}
__name(lt_default, "lt_default");
var parsedType5;
var parsedTypeFromType;
var capitalizeFirstCharacter;
var error24;
var init_lt = __esm({
  "../node_modules/zod/v4/locales/lt.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    parsedType5 = /* @__PURE__ */ __name2((data) => {
      const t2 = typeof data;
      return parsedTypeFromType(t2, data);
    }, "parsedType");
    parsedTypeFromType = /* @__PURE__ */ __name2((t2, data = void 0) => {
      switch (t2) {
        case "number": {
          return Number.isNaN(data) ? "NaN" : "skai\u010Dius";
        }
        case "bigint": {
          return "sveikasis skai\u010Dius";
        }
        case "string": {
          return "eilut\u0117";
        }
        case "boolean": {
          return "login\u0117 reik\u0161m\u0117";
        }
        case "undefined":
        case "void": {
          return "neapibr\u0117\u017Eta reik\u0161m\u0117";
        }
        case "function": {
          return "funkcija";
        }
        case "symbol": {
          return "simbolis";
        }
        case "object": {
          if (data === void 0)
            return "ne\u017Einomas objektas";
          if (data === null)
            return "nulin\u0117 reik\u0161m\u0117";
          if (Array.isArray(data))
            return "masyvas";
          if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
            return data.constructor.name;
          }
          return "objektas";
        }
        //Zod types below
        case "null": {
          return "nulin\u0117 reik\u0161m\u0117";
        }
      }
      return t2;
    }, "parsedTypeFromType");
    capitalizeFirstCharacter = /* @__PURE__ */ __name2((text) => {
      return text.charAt(0).toUpperCase() + text.slice(1);
    }, "capitalizeFirstCharacter");
    __name2(getUnitTypeFromNumber, "getUnitTypeFromNumber");
    error24 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: {
          unit: {
            one: "simbolis",
            few: "simboliai",
            many: "simboli\u0173"
          },
          verb: {
            smaller: {
              inclusive: "turi b\u016Bti ne ilgesn\u0117 kaip",
              notInclusive: "turi b\u016Bti trumpesn\u0117 kaip"
            },
            bigger: {
              inclusive: "turi b\u016Bti ne trumpesn\u0117 kaip",
              notInclusive: "turi b\u016Bti ilgesn\u0117 kaip"
            }
          }
        },
        file: {
          unit: {
            one: "baitas",
            few: "baitai",
            many: "bait\u0173"
          },
          verb: {
            smaller: {
              inclusive: "turi b\u016Bti ne didesnis kaip",
              notInclusive: "turi b\u016Bti ma\u017Eesnis kaip"
            },
            bigger: {
              inclusive: "turi b\u016Bti ne ma\u017Eesnis kaip",
              notInclusive: "turi b\u016Bti didesnis kaip"
            }
          }
        },
        array: {
          unit: {
            one: "element\u0105",
            few: "elementus",
            many: "element\u0173"
          },
          verb: {
            smaller: {
              inclusive: "turi tur\u0117ti ne daugiau kaip",
              notInclusive: "turi tur\u0117ti ma\u017Eiau kaip"
            },
            bigger: {
              inclusive: "turi tur\u0117ti ne ma\u017Eiau kaip",
              notInclusive: "turi tur\u0117ti daugiau kaip"
            }
          }
        },
        set: {
          unit: {
            one: "element\u0105",
            few: "elementus",
            many: "element\u0173"
          },
          verb: {
            smaller: {
              inclusive: "turi tur\u0117ti ne daugiau kaip",
              notInclusive: "turi tur\u0117ti ma\u017Eiau kaip"
            },
            bigger: {
              inclusive: "turi tur\u0117ti ne ma\u017Eiau kaip",
              notInclusive: "turi tur\u0117ti daugiau kaip"
            }
          }
        }
      };
      function getSizing(origin, unitType, inclusive, targetShouldBe) {
        const result = Sizable[origin] ?? null;
        if (result === null)
          return result;
        return {
          unit: result.unit[unitType],
          verb: result.verb[targetShouldBe][inclusive ? "inclusive" : "notInclusive"]
        };
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const Nouns = {
        regex: "\u012Fvestis",
        email: "el. pa\u0161to adresas",
        url: "URL",
        emoji: "jaustukas",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO data ir laikas",
        date: "ISO data",
        time: "ISO laikas",
        duration: "ISO trukm\u0117",
        ipv4: "IPv4 adresas",
        ipv6: "IPv6 adresas",
        cidrv4: "IPv4 tinklo prefiksas (CIDR)",
        cidrv6: "IPv6 tinklo prefiksas (CIDR)",
        base64: "base64 u\u017Ekoduota eilut\u0117",
        base64url: "base64url u\u017Ekoduota eilut\u0117",
        json_string: "JSON eilut\u0117",
        e164: "E.164 numeris",
        jwt: "JWT",
        template_literal: "\u012Fvestis"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Gautas tipas ${parsedType5(issue2.input)}, o tik\u0117tasi - ${parsedTypeFromType(issue2.expected)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Privalo b\u016Bti ${stringifyPrimitive(issue2.values[0])}`;
            return `Privalo b\u016Bti vienas i\u0161 ${joinValues(issue2.values, "|")} pasirinkim\u0173`;
          case "too_big": {
            const origin = parsedTypeFromType(issue2.origin);
            const sizing = getSizing(issue2.origin, getUnitTypeFromNumber(Number(issue2.maximum)), issue2.inclusive ?? false, "smaller");
            if (sizing?.verb)
              return `${capitalizeFirstCharacter(origin ?? issue2.origin ?? "reik\u0161m\u0117")} ${sizing.verb} ${issue2.maximum.toString()} ${sizing.unit ?? "element\u0173"}`;
            const adj = issue2.inclusive ? "ne didesnis kaip" : "ma\u017Eesnis kaip";
            return `${capitalizeFirstCharacter(origin ?? issue2.origin ?? "reik\u0161m\u0117")} turi b\u016Bti ${adj} ${issue2.maximum.toString()} ${sizing?.unit}`;
          }
          case "too_small": {
            const origin = parsedTypeFromType(issue2.origin);
            const sizing = getSizing(issue2.origin, getUnitTypeFromNumber(Number(issue2.minimum)), issue2.inclusive ?? false, "bigger");
            if (sizing?.verb)
              return `${capitalizeFirstCharacter(origin ?? issue2.origin ?? "reik\u0161m\u0117")} ${sizing.verb} ${issue2.minimum.toString()} ${sizing.unit ?? "element\u0173"}`;
            const adj = issue2.inclusive ? "ne ma\u017Eesnis kaip" : "didesnis kaip";
            return `${capitalizeFirstCharacter(origin ?? issue2.origin ?? "reik\u0161m\u0117")} turi b\u016Bti ${adj} ${issue2.minimum.toString()} ${sizing?.unit}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with") {
              return `Eilut\u0117 privalo prasid\u0117ti "${_issue.prefix}"`;
            }
            if (_issue.format === "ends_with")
              return `Eilut\u0117 privalo pasibaigti "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `Eilut\u0117 privalo \u012Ftraukti "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `Eilut\u0117 privalo atitikti ${_issue.pattern}`;
            return `Neteisingas ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `Skai\u010Dius privalo b\u016Bti ${issue2.divisor} kartotinis.`;
          case "unrecognized_keys":
            return `Neatpa\u017Eint${issue2.keys.length > 1 ? "i" : "as"} rakt${issue2.keys.length > 1 ? "ai" : "as"}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return "Rastas klaidingas raktas";
          case "invalid_union":
            return "Klaidinga \u012Fvestis";
          case "invalid_element": {
            const origin = parsedTypeFromType(issue2.origin);
            return `${capitalizeFirstCharacter(origin ?? issue2.origin ?? "reik\u0161m\u0117")} turi klaiding\u0105 \u012Fvest\u012F`;
          }
          default:
            return "Klaidinga \u012Fvestis";
        }
      };
    }, "error");
    __name2(lt_default, "default");
  }
});
function mk_default() {
  return {
    localeError: error25()
  };
}
__name(mk_default, "mk_default");
var error25;
var init_mk = __esm({
  "../node_modules/zod/v4/locales/mk.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    error25 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "\u0437\u043D\u0430\u0446\u0438", verb: "\u0434\u0430 \u0438\u043C\u0430\u0430\u0442" },
        file: { unit: "\u0431\u0430\u0458\u0442\u0438", verb: "\u0434\u0430 \u0438\u043C\u0430\u0430\u0442" },
        array: { unit: "\u0441\u0442\u0430\u0432\u043A\u0438", verb: "\u0434\u0430 \u0438\u043C\u0430\u0430\u0442" },
        set: { unit: "\u0441\u0442\u0430\u0432\u043A\u0438", verb: "\u0434\u0430 \u0438\u043C\u0430\u0430\u0442" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const parsedType7 = /* @__PURE__ */ __name2((data) => {
        const t2 = typeof data;
        switch (t2) {
          case "number": {
            return Number.isNaN(data) ? "NaN" : "\u0431\u0440\u043E\u0458";
          }
          case "object": {
            if (Array.isArray(data)) {
              return "\u043D\u0438\u0437\u0430";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
        }
        return t2;
      }, "parsedType");
      const Nouns = {
        regex: "\u0432\u043D\u0435\u0441",
        email: "\u0430\u0434\u0440\u0435\u0441\u0430 \u043D\u0430 \u0435-\u043F\u043E\u0448\u0442\u0430",
        url: "URL",
        emoji: "\u0435\u043C\u043E\u045F\u0438",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO \u0434\u0430\u0442\u0443\u043C \u0438 \u0432\u0440\u0435\u043C\u0435",
        date: "ISO \u0434\u0430\u0442\u0443\u043C",
        time: "ISO \u0432\u0440\u0435\u043C\u0435",
        duration: "ISO \u0432\u0440\u0435\u043C\u0435\u0442\u0440\u0430\u0435\u045A\u0435",
        ipv4: "IPv4 \u0430\u0434\u0440\u0435\u0441\u0430",
        ipv6: "IPv6 \u0430\u0434\u0440\u0435\u0441\u0430",
        cidrv4: "IPv4 \u043E\u043F\u0441\u0435\u0433",
        cidrv6: "IPv6 \u043E\u043F\u0441\u0435\u0433",
        base64: "base64-\u0435\u043D\u043A\u043E\u0434\u0438\u0440\u0430\u043D\u0430 \u043D\u0438\u0437\u0430",
        base64url: "base64url-\u0435\u043D\u043A\u043E\u0434\u0438\u0440\u0430\u043D\u0430 \u043D\u0438\u0437\u0430",
        json_string: "JSON \u043D\u0438\u0437\u0430",
        e164: "E.164 \u0431\u0440\u043E\u0458",
        jwt: "JWT",
        template_literal: "\u0432\u043D\u0435\u0441"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\u0413\u0440\u0435\u0448\u0435\u043D \u0432\u043D\u0435\u0441: \u0441\u0435 \u043E\u0447\u0435\u043A\u0443\u0432\u0430 ${issue2.expected}, \u043F\u0440\u0438\u043C\u0435\u043D\u043E ${parsedType7(issue2.input)}`;
          // return `Invalid input: expected ${issue.expected}, received ${util.getParsedType(issue.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Invalid input: expected ${stringifyPrimitive(issue2.values[0])}`;
            return `\u0413\u0440\u0435\u0448\u0430\u043D\u0430 \u043E\u043F\u0446\u0438\u0458\u0430: \u0441\u0435 \u043E\u0447\u0435\u043A\u0443\u0432\u0430 \u0435\u0434\u043D\u0430 ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `\u041F\u0440\u0435\u043C\u043D\u043E\u0433\u0443 \u0433\u043E\u043B\u0435\u043C: \u0441\u0435 \u043E\u0447\u0435\u043A\u0443\u0432\u0430 ${issue2.origin ?? "\u0432\u0440\u0435\u0434\u043D\u043E\u0441\u0442\u0430"} \u0434\u0430 \u0438\u043C\u0430 ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "\u0435\u043B\u0435\u043C\u0435\u043D\u0442\u0438"}`;
            return `\u041F\u0440\u0435\u043C\u043D\u043E\u0433\u0443 \u0433\u043E\u043B\u0435\u043C: \u0441\u0435 \u043E\u0447\u0435\u043A\u0443\u0432\u0430 ${issue2.origin ?? "\u0432\u0440\u0435\u0434\u043D\u043E\u0441\u0442\u0430"} \u0434\u0430 \u0431\u0438\u0434\u0435 ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `\u041F\u0440\u0435\u043C\u043D\u043E\u0433\u0443 \u043C\u0430\u043B: \u0441\u0435 \u043E\u0447\u0435\u043A\u0443\u0432\u0430 ${issue2.origin} \u0434\u0430 \u0438\u043C\u0430 ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `\u041F\u0440\u0435\u043C\u043D\u043E\u0433\u0443 \u043C\u0430\u043B: \u0441\u0435 \u043E\u0447\u0435\u043A\u0443\u0432\u0430 ${issue2.origin} \u0434\u0430 \u0431\u0438\u0434\u0435 ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with") {
              return `\u041D\u0435\u0432\u0430\u0436\u0435\u0447\u043A\u0430 \u043D\u0438\u0437\u0430: \u043C\u043E\u0440\u0430 \u0434\u0430 \u0437\u0430\u043F\u043E\u0447\u043D\u0443\u0432\u0430 \u0441\u043E "${_issue.prefix}"`;
            }
            if (_issue.format === "ends_with")
              return `\u041D\u0435\u0432\u0430\u0436\u0435\u0447\u043A\u0430 \u043D\u0438\u0437\u0430: \u043C\u043E\u0440\u0430 \u0434\u0430 \u0437\u0430\u0432\u0440\u0448\u0443\u0432\u0430 \u0441\u043E "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `\u041D\u0435\u0432\u0430\u0436\u0435\u0447\u043A\u0430 \u043D\u0438\u0437\u0430: \u043C\u043E\u0440\u0430 \u0434\u0430 \u0432\u043A\u043B\u0443\u0447\u0443\u0432\u0430 "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `\u041D\u0435\u0432\u0430\u0436\u0435\u0447\u043A\u0430 \u043D\u0438\u0437\u0430: \u043C\u043E\u0440\u0430 \u0434\u0430 \u043E\u0434\u0433\u043E\u0430\u0440\u0430 \u043D\u0430 \u043F\u0430\u0442\u0435\u0440\u043D\u043E\u0442 ${_issue.pattern}`;
            return `Invalid ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `\u0413\u0440\u0435\u0448\u0435\u043D \u0431\u0440\u043E\u0458: \u043C\u043E\u0440\u0430 \u0434\u0430 \u0431\u0438\u0434\u0435 \u0434\u0435\u043B\u0438\u0432 \u0441\u043E ${issue2.divisor}`;
          case "unrecognized_keys":
            return `${issue2.keys.length > 1 ? "\u041D\u0435\u043F\u0440\u0435\u043F\u043E\u0437\u043D\u0430\u0435\u043D\u0438 \u043A\u043B\u0443\u0447\u0435\u0432\u0438" : "\u041D\u0435\u043F\u0440\u0435\u043F\u043E\u0437\u043D\u0430\u0435\u043D \u043A\u043B\u0443\u0447"}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `\u0413\u0440\u0435\u0448\u0435\u043D \u043A\u043B\u0443\u0447 \u0432\u043E ${issue2.origin}`;
          case "invalid_union":
            return "\u0413\u0440\u0435\u0448\u0435\u043D \u0432\u043D\u0435\u0441";
          case "invalid_element":
            return `\u0413\u0440\u0435\u0448\u043D\u0430 \u0432\u0440\u0435\u0434\u043D\u043E\u0441\u0442 \u0432\u043E ${issue2.origin}`;
          default:
            return `\u0413\u0440\u0435\u0448\u0435\u043D \u0432\u043D\u0435\u0441`;
        }
      };
    }, "error");
    __name2(mk_default, "default");
  }
});
function ms_default() {
  return {
    localeError: error26()
  };
}
__name(ms_default, "ms_default");
var error26;
var init_ms = __esm({
  "../node_modules/zod/v4/locales/ms.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    error26 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "aksara", verb: "mempunyai" },
        file: { unit: "bait", verb: "mempunyai" },
        array: { unit: "elemen", verb: "mempunyai" },
        set: { unit: "elemen", verb: "mempunyai" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const parsedType7 = /* @__PURE__ */ __name2((data) => {
        const t2 = typeof data;
        switch (t2) {
          case "number": {
            return Number.isNaN(data) ? "NaN" : "nombor";
          }
          case "object": {
            if (Array.isArray(data)) {
              return "array";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
        }
        return t2;
      }, "parsedType");
      const Nouns = {
        regex: "input",
        email: "alamat e-mel",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "tarikh masa ISO",
        date: "tarikh ISO",
        time: "masa ISO",
        duration: "tempoh ISO",
        ipv4: "alamat IPv4",
        ipv6: "alamat IPv6",
        cidrv4: "julat IPv4",
        cidrv6: "julat IPv6",
        base64: "string dikodkan base64",
        base64url: "string dikodkan base64url",
        json_string: "string JSON",
        e164: "nombor E.164",
        jwt: "JWT",
        template_literal: "input"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Input tidak sah: dijangka ${issue2.expected}, diterima ${parsedType7(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Input tidak sah: dijangka ${stringifyPrimitive(issue2.values[0])}`;
            return `Pilihan tidak sah: dijangka salah satu daripada ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `Terlalu besar: dijangka ${issue2.origin ?? "nilai"} ${sizing.verb} ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elemen"}`;
            return `Terlalu besar: dijangka ${issue2.origin ?? "nilai"} adalah ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Terlalu kecil: dijangka ${issue2.origin} ${sizing.verb} ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `Terlalu kecil: dijangka ${issue2.origin} adalah ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `String tidak sah: mesti bermula dengan "${_issue.prefix}"`;
            if (_issue.format === "ends_with")
              return `String tidak sah: mesti berakhir dengan "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `String tidak sah: mesti mengandungi "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `String tidak sah: mesti sepadan dengan corak ${_issue.pattern}`;
            return `${Nouns[_issue.format] ?? issue2.format} tidak sah`;
          }
          case "not_multiple_of":
            return `Nombor tidak sah: perlu gandaan ${issue2.divisor}`;
          case "unrecognized_keys":
            return `Kunci tidak dikenali: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Kunci tidak sah dalam ${issue2.origin}`;
          case "invalid_union":
            return "Input tidak sah";
          case "invalid_element":
            return `Nilai tidak sah dalam ${issue2.origin}`;
          default:
            return `Input tidak sah`;
        }
      };
    }, "error");
    __name2(ms_default, "default");
  }
});
function nl_default() {
  return {
    localeError: error27()
  };
}
__name(nl_default, "nl_default");
var error27;
var init_nl = __esm({
  "../node_modules/zod/v4/locales/nl.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    error27 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "tekens" },
        file: { unit: "bytes" },
        array: { unit: "elementen" },
        set: { unit: "elementen" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const parsedType7 = /* @__PURE__ */ __name2((data) => {
        const t2 = typeof data;
        switch (t2) {
          case "number": {
            return Number.isNaN(data) ? "NaN" : "getal";
          }
          case "object": {
            if (Array.isArray(data)) {
              return "array";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
        }
        return t2;
      }, "parsedType");
      const Nouns = {
        regex: "invoer",
        email: "emailadres",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO datum en tijd",
        date: "ISO datum",
        time: "ISO tijd",
        duration: "ISO duur",
        ipv4: "IPv4-adres",
        ipv6: "IPv6-adres",
        cidrv4: "IPv4-bereik",
        cidrv6: "IPv6-bereik",
        base64: "base64-gecodeerde tekst",
        base64url: "base64 URL-gecodeerde tekst",
        json_string: "JSON string",
        e164: "E.164-nummer",
        jwt: "JWT",
        template_literal: "invoer"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Ongeldige invoer: verwacht ${issue2.expected}, ontving ${parsedType7(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Ongeldige invoer: verwacht ${stringifyPrimitive(issue2.values[0])}`;
            return `Ongeldige optie: verwacht \xE9\xE9n van ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `Te lang: verwacht dat ${issue2.origin ?? "waarde"} ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elementen"} bevat`;
            return `Te lang: verwacht dat ${issue2.origin ?? "waarde"} ${adj}${issue2.maximum.toString()} is`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Te kort: verwacht dat ${issue2.origin} ${adj}${issue2.minimum.toString()} ${sizing.unit} bevat`;
            }
            return `Te kort: verwacht dat ${issue2.origin} ${adj}${issue2.minimum.toString()} is`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with") {
              return `Ongeldige tekst: moet met "${_issue.prefix}" beginnen`;
            }
            if (_issue.format === "ends_with")
              return `Ongeldige tekst: moet op "${_issue.suffix}" eindigen`;
            if (_issue.format === "includes")
              return `Ongeldige tekst: moet "${_issue.includes}" bevatten`;
            if (_issue.format === "regex")
              return `Ongeldige tekst: moet overeenkomen met patroon ${_issue.pattern}`;
            return `Ongeldig: ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `Ongeldig getal: moet een veelvoud van ${issue2.divisor} zijn`;
          case "unrecognized_keys":
            return `Onbekende key${issue2.keys.length > 1 ? "s" : ""}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Ongeldige key in ${issue2.origin}`;
          case "invalid_union":
            return "Ongeldige invoer";
          case "invalid_element":
            return `Ongeldige waarde in ${issue2.origin}`;
          default:
            return `Ongeldige invoer`;
        }
      };
    }, "error");
    __name2(nl_default, "default");
  }
});
function no_default() {
  return {
    localeError: error28()
  };
}
__name(no_default, "no_default");
var error28;
var init_no = __esm({
  "../node_modules/zod/v4/locales/no.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    error28 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "tegn", verb: "\xE5 ha" },
        file: { unit: "bytes", verb: "\xE5 ha" },
        array: { unit: "elementer", verb: "\xE5 inneholde" },
        set: { unit: "elementer", verb: "\xE5 inneholde" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const parsedType7 = /* @__PURE__ */ __name2((data) => {
        const t2 = typeof data;
        switch (t2) {
          case "number": {
            return Number.isNaN(data) ? "NaN" : "tall";
          }
          case "object": {
            if (Array.isArray(data)) {
              return "liste";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
        }
        return t2;
      }, "parsedType");
      const Nouns = {
        regex: "input",
        email: "e-postadresse",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO dato- og klokkeslett",
        date: "ISO-dato",
        time: "ISO-klokkeslett",
        duration: "ISO-varighet",
        ipv4: "IPv4-omr\xE5de",
        ipv6: "IPv6-omr\xE5de",
        cidrv4: "IPv4-spekter",
        cidrv6: "IPv6-spekter",
        base64: "base64-enkodet streng",
        base64url: "base64url-enkodet streng",
        json_string: "JSON-streng",
        e164: "E.164-nummer",
        jwt: "JWT",
        template_literal: "input"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Ugyldig input: forventet ${issue2.expected}, fikk ${parsedType7(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Ugyldig verdi: forventet ${stringifyPrimitive(issue2.values[0])}`;
            return `Ugyldig valg: forventet en av ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `For stor(t): forventet ${issue2.origin ?? "value"} til \xE5 ha ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elementer"}`;
            return `For stor(t): forventet ${issue2.origin ?? "value"} til \xE5 ha ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `For lite(n): forventet ${issue2.origin} til \xE5 ha ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `For lite(n): forventet ${issue2.origin} til \xE5 ha ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `Ugyldig streng: m\xE5 starte med "${_issue.prefix}"`;
            if (_issue.format === "ends_with")
              return `Ugyldig streng: m\xE5 ende med "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `Ugyldig streng: m\xE5 inneholde "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `Ugyldig streng: m\xE5 matche m\xF8nsteret ${_issue.pattern}`;
            return `Ugyldig ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `Ugyldig tall: m\xE5 v\xE6re et multiplum av ${issue2.divisor}`;
          case "unrecognized_keys":
            return `${issue2.keys.length > 1 ? "Ukjente n\xF8kler" : "Ukjent n\xF8kkel"}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Ugyldig n\xF8kkel i ${issue2.origin}`;
          case "invalid_union":
            return "Ugyldig input";
          case "invalid_element":
            return `Ugyldig verdi i ${issue2.origin}`;
          default:
            return `Ugyldig input`;
        }
      };
    }, "error");
    __name2(no_default, "default");
  }
});
function ota_default() {
  return {
    localeError: error29()
  };
}
__name(ota_default, "ota_default");
var error29;
var init_ota = __esm({
  "../node_modules/zod/v4/locales/ota.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    error29 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "harf", verb: "olmal\u0131d\u0131r" },
        file: { unit: "bayt", verb: "olmal\u0131d\u0131r" },
        array: { unit: "unsur", verb: "olmal\u0131d\u0131r" },
        set: { unit: "unsur", verb: "olmal\u0131d\u0131r" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const parsedType7 = /* @__PURE__ */ __name2((data) => {
        const t2 = typeof data;
        switch (t2) {
          case "number": {
            return Number.isNaN(data) ? "NaN" : "numara";
          }
          case "object": {
            if (Array.isArray(data)) {
              return "saf";
            }
            if (data === null) {
              return "gayb";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
        }
        return t2;
      }, "parsedType");
      const Nouns = {
        regex: "giren",
        email: "epostag\xE2h",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO heng\xE2m\u0131",
        date: "ISO tarihi",
        time: "ISO zaman\u0131",
        duration: "ISO m\xFCddeti",
        ipv4: "IPv4 ni\u015F\xE2n\u0131",
        ipv6: "IPv6 ni\u015F\xE2n\u0131",
        cidrv4: "IPv4 menzili",
        cidrv6: "IPv6 menzili",
        base64: "base64-\u015Fifreli metin",
        base64url: "base64url-\u015Fifreli metin",
        json_string: "JSON metin",
        e164: "E.164 say\u0131s\u0131",
        jwt: "JWT",
        template_literal: "giren"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `F\xE2sit giren: umulan ${issue2.expected}, al\u0131nan ${parsedType7(issue2.input)}`;
          // return `Fâsit giren: umulan ${issue.expected}, alınan ${util.getParsedType(issue.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `F\xE2sit giren: umulan ${stringifyPrimitive(issue2.values[0])}`;
            return `F\xE2sit tercih: m\xFBteberler ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `Fazla b\xFCy\xFCk: ${issue2.origin ?? "value"}, ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elements"} sahip olmal\u0131yd\u0131.`;
            return `Fazla b\xFCy\xFCk: ${issue2.origin ?? "value"}, ${adj}${issue2.maximum.toString()} olmal\u0131yd\u0131.`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Fazla k\xFC\xE7\xFCk: ${issue2.origin}, ${adj}${issue2.minimum.toString()} ${sizing.unit} sahip olmal\u0131yd\u0131.`;
            }
            return `Fazla k\xFC\xE7\xFCk: ${issue2.origin}, ${adj}${issue2.minimum.toString()} olmal\u0131yd\u0131.`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `F\xE2sit metin: "${_issue.prefix}" ile ba\u015Flamal\u0131.`;
            if (_issue.format === "ends_with")
              return `F\xE2sit metin: "${_issue.suffix}" ile bitmeli.`;
            if (_issue.format === "includes")
              return `F\xE2sit metin: "${_issue.includes}" ihtiv\xE2 etmeli.`;
            if (_issue.format === "regex")
              return `F\xE2sit metin: ${_issue.pattern} nak\u015F\u0131na uymal\u0131.`;
            return `F\xE2sit ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `F\xE2sit say\u0131: ${issue2.divisor} kat\u0131 olmal\u0131yd\u0131.`;
          case "unrecognized_keys":
            return `Tan\u0131nmayan anahtar ${issue2.keys.length > 1 ? "s" : ""}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `${issue2.origin} i\xE7in tan\u0131nmayan anahtar var.`;
          case "invalid_union":
            return "Giren tan\u0131namad\u0131.";
          case "invalid_element":
            return `${issue2.origin} i\xE7in tan\u0131nmayan k\u0131ymet var.`;
          default:
            return `K\u0131ymet tan\u0131namad\u0131.`;
        }
      };
    }, "error");
    __name2(ota_default, "default");
  }
});
function ps_default() {
  return {
    localeError: error30()
  };
}
__name(ps_default, "ps_default");
var error30;
var init_ps = __esm({
  "../node_modules/zod/v4/locales/ps.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    error30 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "\u062A\u0648\u06A9\u064A", verb: "\u0648\u0644\u0631\u064A" },
        file: { unit: "\u0628\u0627\u06CC\u067C\u0633", verb: "\u0648\u0644\u0631\u064A" },
        array: { unit: "\u062A\u0648\u06A9\u064A", verb: "\u0648\u0644\u0631\u064A" },
        set: { unit: "\u062A\u0648\u06A9\u064A", verb: "\u0648\u0644\u0631\u064A" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const parsedType7 = /* @__PURE__ */ __name2((data) => {
        const t2 = typeof data;
        switch (t2) {
          case "number": {
            return Number.isNaN(data) ? "NaN" : "\u0639\u062F\u062F";
          }
          case "object": {
            if (Array.isArray(data)) {
              return "\u0627\u0631\u06D0";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
        }
        return t2;
      }, "parsedType");
      const Nouns = {
        regex: "\u0648\u0631\u0648\u062F\u064A",
        email: "\u0628\u0631\u06CC\u069A\u0646\u0627\u0644\u06CC\u06A9",
        url: "\u06CC\u0648 \u0622\u0631 \u0627\u0644",
        emoji: "\u0627\u06CC\u0645\u0648\u062C\u064A",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "\u0646\u06CC\u067C\u0647 \u0627\u0648 \u0648\u062E\u062A",
        date: "\u0646\u06D0\u067C\u0647",
        time: "\u0648\u062E\u062A",
        duration: "\u0645\u0648\u062F\u0647",
        ipv4: "\u062F IPv4 \u067E\u062A\u0647",
        ipv6: "\u062F IPv6 \u067E\u062A\u0647",
        cidrv4: "\u062F IPv4 \u0633\u0627\u062D\u0647",
        cidrv6: "\u062F IPv6 \u0633\u0627\u062D\u0647",
        base64: "base64-encoded \u0645\u062A\u0646",
        base64url: "base64url-encoded \u0645\u062A\u0646",
        json_string: "JSON \u0645\u062A\u0646",
        e164: "\u062F E.164 \u0634\u0645\u06D0\u0631\u0647",
        jwt: "JWT",
        template_literal: "\u0648\u0631\u0648\u062F\u064A"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\u0646\u0627\u0633\u0645 \u0648\u0631\u0648\u062F\u064A: \u0628\u0627\u06CC\u062F ${issue2.expected} \u0648\u0627\u06CC, \u0645\u06AB\u0631 ${parsedType7(issue2.input)} \u062A\u0631\u0644\u0627\u0633\u0647 \u0634\u0648`;
          case "invalid_value":
            if (issue2.values.length === 1) {
              return `\u0646\u0627\u0633\u0645 \u0648\u0631\u0648\u062F\u064A: \u0628\u0627\u06CC\u062F ${stringifyPrimitive(issue2.values[0])} \u0648\u0627\u06CC`;
            }
            return `\u0646\u0627\u0633\u0645 \u0627\u0646\u062A\u062E\u0627\u0628: \u0628\u0627\u06CC\u062F \u06CC\u0648 \u0644\u0647 ${joinValues(issue2.values, "|")} \u0685\u062E\u0647 \u0648\u0627\u06CC`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `\u0689\u06CC\u0631 \u0644\u0648\u06CC: ${issue2.origin ?? "\u0627\u0631\u0632\u069A\u062A"} \u0628\u0627\u06CC\u062F ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "\u0639\u0646\u0635\u0631\u0648\u0646\u0647"} \u0648\u0644\u0631\u064A`;
            }
            return `\u0689\u06CC\u0631 \u0644\u0648\u06CC: ${issue2.origin ?? "\u0627\u0631\u0632\u069A\u062A"} \u0628\u0627\u06CC\u062F ${adj}${issue2.maximum.toString()} \u0648\u064A`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `\u0689\u06CC\u0631 \u06A9\u0648\u0686\u0646\u06CC: ${issue2.origin} \u0628\u0627\u06CC\u062F ${adj}${issue2.minimum.toString()} ${sizing.unit} \u0648\u0644\u0631\u064A`;
            }
            return `\u0689\u06CC\u0631 \u06A9\u0648\u0686\u0646\u06CC: ${issue2.origin} \u0628\u0627\u06CC\u062F ${adj}${issue2.minimum.toString()} \u0648\u064A`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with") {
              return `\u0646\u0627\u0633\u0645 \u0645\u062A\u0646: \u0628\u0627\u06CC\u062F \u062F "${_issue.prefix}" \u0633\u0631\u0647 \u067E\u06CC\u0644 \u0634\u064A`;
            }
            if (_issue.format === "ends_with") {
              return `\u0646\u0627\u0633\u0645 \u0645\u062A\u0646: \u0628\u0627\u06CC\u062F \u062F "${_issue.suffix}" \u0633\u0631\u0647 \u067E\u0627\u06CC \u062A\u0647 \u0648\u0631\u0633\u064A\u0696\u064A`;
            }
            if (_issue.format === "includes") {
              return `\u0646\u0627\u0633\u0645 \u0645\u062A\u0646: \u0628\u0627\u06CC\u062F "${_issue.includes}" \u0648\u0644\u0631\u064A`;
            }
            if (_issue.format === "regex") {
              return `\u0646\u0627\u0633\u0645 \u0645\u062A\u0646: \u0628\u0627\u06CC\u062F \u062F ${_issue.pattern} \u0633\u0631\u0647 \u0645\u0637\u0627\u0628\u0642\u062A \u0648\u0644\u0631\u064A`;
            }
            return `${Nouns[_issue.format] ?? issue2.format} \u0646\u0627\u0633\u0645 \u062F\u06CC`;
          }
          case "not_multiple_of":
            return `\u0646\u0627\u0633\u0645 \u0639\u062F\u062F: \u0628\u0627\u06CC\u062F \u062F ${issue2.divisor} \u0645\u0636\u0631\u0628 \u0648\u064A`;
          case "unrecognized_keys":
            return `\u0646\u0627\u0633\u0645 ${issue2.keys.length > 1 ? "\u06A9\u0644\u06CC\u0689\u0648\u0646\u0647" : "\u06A9\u0644\u06CC\u0689"}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `\u0646\u0627\u0633\u0645 \u06A9\u0644\u06CC\u0689 \u067E\u0647 ${issue2.origin} \u06A9\u06D0`;
          case "invalid_union":
            return `\u0646\u0627\u0633\u0645\u0647 \u0648\u0631\u0648\u062F\u064A`;
          case "invalid_element":
            return `\u0646\u0627\u0633\u0645 \u0639\u0646\u0635\u0631 \u067E\u0647 ${issue2.origin} \u06A9\u06D0`;
          default:
            return `\u0646\u0627\u0633\u0645\u0647 \u0648\u0631\u0648\u062F\u064A`;
        }
      };
    }, "error");
    __name2(ps_default, "default");
  }
});
function pl_default() {
  return {
    localeError: error31()
  };
}
__name(pl_default, "pl_default");
var error31;
var init_pl = __esm({
  "../node_modules/zod/v4/locales/pl.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    error31 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "znak\xF3w", verb: "mie\u0107" },
        file: { unit: "bajt\xF3w", verb: "mie\u0107" },
        array: { unit: "element\xF3w", verb: "mie\u0107" },
        set: { unit: "element\xF3w", verb: "mie\u0107" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const parsedType7 = /* @__PURE__ */ __name2((data) => {
        const t2 = typeof data;
        switch (t2) {
          case "number": {
            return Number.isNaN(data) ? "NaN" : "liczba";
          }
          case "object": {
            if (Array.isArray(data)) {
              return "tablica";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
        }
        return t2;
      }, "parsedType");
      const Nouns = {
        regex: "wyra\u017Cenie",
        email: "adres email",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "data i godzina w formacie ISO",
        date: "data w formacie ISO",
        time: "godzina w formacie ISO",
        duration: "czas trwania ISO",
        ipv4: "adres IPv4",
        ipv6: "adres IPv6",
        cidrv4: "zakres IPv4",
        cidrv6: "zakres IPv6",
        base64: "ci\u0105g znak\xF3w zakodowany w formacie base64",
        base64url: "ci\u0105g znak\xF3w zakodowany w formacie base64url",
        json_string: "ci\u0105g znak\xF3w w formacie JSON",
        e164: "liczba E.164",
        jwt: "JWT",
        template_literal: "wej\u015Bcie"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Nieprawid\u0142owe dane wej\u015Bciowe: oczekiwano ${issue2.expected}, otrzymano ${parsedType7(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Nieprawid\u0142owe dane wej\u015Bciowe: oczekiwano ${stringifyPrimitive(issue2.values[0])}`;
            return `Nieprawid\u0142owa opcja: oczekiwano jednej z warto\u015Bci ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Za du\u017Ca warto\u015B\u0107: oczekiwano, \u017Ce ${issue2.origin ?? "warto\u015B\u0107"} b\u0119dzie mie\u0107 ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "element\xF3w"}`;
            }
            return `Zbyt du\u017C(y/a/e): oczekiwano, \u017Ce ${issue2.origin ?? "warto\u015B\u0107"} b\u0119dzie wynosi\u0107 ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Za ma\u0142a warto\u015B\u0107: oczekiwano, \u017Ce ${issue2.origin ?? "warto\u015B\u0107"} b\u0119dzie mie\u0107 ${adj}${issue2.minimum.toString()} ${sizing.unit ?? "element\xF3w"}`;
            }
            return `Zbyt ma\u0142(y/a/e): oczekiwano, \u017Ce ${issue2.origin ?? "warto\u015B\u0107"} b\u0119dzie wynosi\u0107 ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `Nieprawid\u0142owy ci\u0105g znak\xF3w: musi zaczyna\u0107 si\u0119 od "${_issue.prefix}"`;
            if (_issue.format === "ends_with")
              return `Nieprawid\u0142owy ci\u0105g znak\xF3w: musi ko\u0144czy\u0107 si\u0119 na "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `Nieprawid\u0142owy ci\u0105g znak\xF3w: musi zawiera\u0107 "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `Nieprawid\u0142owy ci\u0105g znak\xF3w: musi odpowiada\u0107 wzorcowi ${_issue.pattern}`;
            return `Nieprawid\u0142ow(y/a/e) ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `Nieprawid\u0142owa liczba: musi by\u0107 wielokrotno\u015Bci\u0105 ${issue2.divisor}`;
          case "unrecognized_keys":
            return `Nierozpoznane klucze${issue2.keys.length > 1 ? "s" : ""}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Nieprawid\u0142owy klucz w ${issue2.origin}`;
          case "invalid_union":
            return "Nieprawid\u0142owe dane wej\u015Bciowe";
          case "invalid_element":
            return `Nieprawid\u0142owa warto\u015B\u0107 w ${issue2.origin}`;
          default:
            return `Nieprawid\u0142owe dane wej\u015Bciowe`;
        }
      };
    }, "error");
    __name2(pl_default, "default");
  }
});
function pt_default() {
  return {
    localeError: error32()
  };
}
__name(pt_default, "pt_default");
var error32;
var init_pt = __esm({
  "../node_modules/zod/v4/locales/pt.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    error32 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "caracteres", verb: "ter" },
        file: { unit: "bytes", verb: "ter" },
        array: { unit: "itens", verb: "ter" },
        set: { unit: "itens", verb: "ter" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const parsedType7 = /* @__PURE__ */ __name2((data) => {
        const t2 = typeof data;
        switch (t2) {
          case "number": {
            return Number.isNaN(data) ? "NaN" : "n\xFAmero";
          }
          case "object": {
            if (Array.isArray(data)) {
              return "array";
            }
            if (data === null) {
              return "nulo";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
        }
        return t2;
      }, "parsedType");
      const Nouns = {
        regex: "padr\xE3o",
        email: "endere\xE7o de e-mail",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "data e hora ISO",
        date: "data ISO",
        time: "hora ISO",
        duration: "dura\xE7\xE3o ISO",
        ipv4: "endere\xE7o IPv4",
        ipv6: "endere\xE7o IPv6",
        cidrv4: "faixa de IPv4",
        cidrv6: "faixa de IPv6",
        base64: "texto codificado em base64",
        base64url: "URL codificada em base64",
        json_string: "texto JSON",
        e164: "n\xFAmero E.164",
        jwt: "JWT",
        template_literal: "entrada"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Tipo inv\xE1lido: esperado ${issue2.expected}, recebido ${parsedType7(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Entrada inv\xE1lida: esperado ${stringifyPrimitive(issue2.values[0])}`;
            return `Op\xE7\xE3o inv\xE1lida: esperada uma das ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `Muito grande: esperado que ${issue2.origin ?? "valor"} tivesse ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elementos"}`;
            return `Muito grande: esperado que ${issue2.origin ?? "valor"} fosse ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Muito pequeno: esperado que ${issue2.origin} tivesse ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `Muito pequeno: esperado que ${issue2.origin} fosse ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `Texto inv\xE1lido: deve come\xE7ar com "${_issue.prefix}"`;
            if (_issue.format === "ends_with")
              return `Texto inv\xE1lido: deve terminar com "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `Texto inv\xE1lido: deve incluir "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `Texto inv\xE1lido: deve corresponder ao padr\xE3o ${_issue.pattern}`;
            return `${Nouns[_issue.format] ?? issue2.format} inv\xE1lido`;
          }
          case "not_multiple_of":
            return `N\xFAmero inv\xE1lido: deve ser m\xFAltiplo de ${issue2.divisor}`;
          case "unrecognized_keys":
            return `Chave${issue2.keys.length > 1 ? "s" : ""} desconhecida${issue2.keys.length > 1 ? "s" : ""}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Chave inv\xE1lida em ${issue2.origin}`;
          case "invalid_union":
            return "Entrada inv\xE1lida";
          case "invalid_element":
            return `Valor inv\xE1lido em ${issue2.origin}`;
          default:
            return `Campo inv\xE1lido`;
        }
      };
    }, "error");
    __name2(pt_default, "default");
  }
});
function getRussianPlural(count, one, few, many) {
  const absCount = Math.abs(count);
  const lastDigit = absCount % 10;
  const lastTwoDigits = absCount % 100;
  if (lastTwoDigits >= 11 && lastTwoDigits <= 19) {
    return many;
  }
  if (lastDigit === 1) {
    return one;
  }
  if (lastDigit >= 2 && lastDigit <= 4) {
    return few;
  }
  return many;
}
__name(getRussianPlural, "getRussianPlural");
function ru_default() {
  return {
    localeError: error33()
  };
}
__name(ru_default, "ru_default");
var error33;
var init_ru = __esm({
  "../node_modules/zod/v4/locales/ru.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    __name2(getRussianPlural, "getRussianPlural");
    error33 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: {
          unit: {
            one: "\u0441\u0438\u043C\u0432\u043E\u043B",
            few: "\u0441\u0438\u043C\u0432\u043E\u043B\u0430",
            many: "\u0441\u0438\u043C\u0432\u043E\u043B\u043E\u0432"
          },
          verb: "\u0438\u043C\u0435\u0442\u044C"
        },
        file: {
          unit: {
            one: "\u0431\u0430\u0439\u0442",
            few: "\u0431\u0430\u0439\u0442\u0430",
            many: "\u0431\u0430\u0439\u0442"
          },
          verb: "\u0438\u043C\u0435\u0442\u044C"
        },
        array: {
          unit: {
            one: "\u044D\u043B\u0435\u043C\u0435\u043D\u0442",
            few: "\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430",
            many: "\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u043E\u0432"
          },
          verb: "\u0438\u043C\u0435\u0442\u044C"
        },
        set: {
          unit: {
            one: "\u044D\u043B\u0435\u043C\u0435\u043D\u0442",
            few: "\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430",
            many: "\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u043E\u0432"
          },
          verb: "\u0438\u043C\u0435\u0442\u044C"
        }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const parsedType7 = /* @__PURE__ */ __name2((data) => {
        const t2 = typeof data;
        switch (t2) {
          case "number": {
            return Number.isNaN(data) ? "NaN" : "\u0447\u0438\u0441\u043B\u043E";
          }
          case "object": {
            if (Array.isArray(data)) {
              return "\u043C\u0430\u0441\u0441\u0438\u0432";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
        }
        return t2;
      }, "parsedType");
      const Nouns = {
        regex: "\u0432\u0432\u043E\u0434",
        email: "email \u0430\u0434\u0440\u0435\u0441",
        url: "URL",
        emoji: "\u044D\u043C\u043E\u0434\u0437\u0438",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO \u0434\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043C\u044F",
        date: "ISO \u0434\u0430\u0442\u0430",
        time: "ISO \u0432\u0440\u0435\u043C\u044F",
        duration: "ISO \u0434\u043B\u0438\u0442\u0435\u043B\u044C\u043D\u043E\u0441\u0442\u044C",
        ipv4: "IPv4 \u0430\u0434\u0440\u0435\u0441",
        ipv6: "IPv6 \u0430\u0434\u0440\u0435\u0441",
        cidrv4: "IPv4 \u0434\u0438\u0430\u043F\u0430\u0437\u043E\u043D",
        cidrv6: "IPv6 \u0434\u0438\u0430\u043F\u0430\u0437\u043E\u043D",
        base64: "\u0441\u0442\u0440\u043E\u043A\u0430 \u0432 \u0444\u043E\u0440\u043C\u0430\u0442\u0435 base64",
        base64url: "\u0441\u0442\u0440\u043E\u043A\u0430 \u0432 \u0444\u043E\u0440\u043C\u0430\u0442\u0435 base64url",
        json_string: "JSON \u0441\u0442\u0440\u043E\u043A\u0430",
        e164: "\u043D\u043E\u043C\u0435\u0440 E.164",
        jwt: "JWT",
        template_literal: "\u0432\u0432\u043E\u0434"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0439 \u0432\u0432\u043E\u0434: \u043E\u0436\u0438\u0434\u0430\u043B\u043E\u0441\u044C ${issue2.expected}, \u043F\u043E\u043B\u0443\u0447\u0435\u043D\u043E ${parsedType7(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0439 \u0432\u0432\u043E\u0434: \u043E\u0436\u0438\u0434\u0430\u043B\u043E\u0441\u044C ${stringifyPrimitive(issue2.values[0])}`;
            return `\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0439 \u0432\u0430\u0440\u0438\u0430\u043D\u0442: \u043E\u0436\u0438\u0434\u0430\u043B\u043E\u0441\u044C \u043E\u0434\u043D\u043E \u0438\u0437 ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              const maxValue = Number(issue2.maximum);
              const unit = getRussianPlural(maxValue, sizing.unit.one, sizing.unit.few, sizing.unit.many);
              return `\u0421\u043B\u0438\u0448\u043A\u043E\u043C \u0431\u043E\u043B\u044C\u0448\u043E\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435: \u043E\u0436\u0438\u0434\u0430\u043B\u043E\u0441\u044C, \u0447\u0442\u043E ${issue2.origin ?? "\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435"} \u0431\u0443\u0434\u0435\u0442 \u0438\u043C\u0435\u0442\u044C ${adj}${issue2.maximum.toString()} ${unit}`;
            }
            return `\u0421\u043B\u0438\u0448\u043A\u043E\u043C \u0431\u043E\u043B\u044C\u0448\u043E\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435: \u043E\u0436\u0438\u0434\u0430\u043B\u043E\u0441\u044C, \u0447\u0442\u043E ${issue2.origin ?? "\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435"} \u0431\u0443\u0434\u0435\u0442 ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              const minValue = Number(issue2.minimum);
              const unit = getRussianPlural(minValue, sizing.unit.one, sizing.unit.few, sizing.unit.many);
              return `\u0421\u043B\u0438\u0448\u043A\u043E\u043C \u043C\u0430\u043B\u0435\u043D\u044C\u043A\u043E\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435: \u043E\u0436\u0438\u0434\u0430\u043B\u043E\u0441\u044C, \u0447\u0442\u043E ${issue2.origin} \u0431\u0443\u0434\u0435\u0442 \u0438\u043C\u0435\u0442\u044C ${adj}${issue2.minimum.toString()} ${unit}`;
            }
            return `\u0421\u043B\u0438\u0448\u043A\u043E\u043C \u043C\u0430\u043B\u0435\u043D\u044C\u043A\u043E\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435: \u043E\u0436\u0438\u0434\u0430\u043B\u043E\u0441\u044C, \u0447\u0442\u043E ${issue2.origin} \u0431\u0443\u0434\u0435\u0442 ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `\u041D\u0435\u0432\u0435\u0440\u043D\u0430\u044F \u0441\u0442\u0440\u043E\u043A\u0430: \u0434\u043E\u043B\u0436\u043D\u0430 \u043D\u0430\u0447\u0438\u043D\u0430\u0442\u044C\u0441\u044F \u0441 "${_issue.prefix}"`;
            if (_issue.format === "ends_with")
              return `\u041D\u0435\u0432\u0435\u0440\u043D\u0430\u044F \u0441\u0442\u0440\u043E\u043A\u0430: \u0434\u043E\u043B\u0436\u043D\u0430 \u0437\u0430\u043A\u0430\u043D\u0447\u0438\u0432\u0430\u0442\u044C\u0441\u044F \u043D\u0430 "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `\u041D\u0435\u0432\u0435\u0440\u043D\u0430\u044F \u0441\u0442\u0440\u043E\u043A\u0430: \u0434\u043E\u043B\u0436\u043D\u0430 \u0441\u043E\u0434\u0435\u0440\u0436\u0430\u0442\u044C "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `\u041D\u0435\u0432\u0435\u0440\u043D\u0430\u044F \u0441\u0442\u0440\u043E\u043A\u0430: \u0434\u043E\u043B\u0436\u043D\u0430 \u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u043E\u0432\u0430\u0442\u044C \u0448\u0430\u0431\u043B\u043E\u043D\u0443 ${_issue.pattern}`;
            return `\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0439 ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `\u041D\u0435\u0432\u0435\u0440\u043D\u043E\u0435 \u0447\u0438\u0441\u043B\u043E: \u0434\u043E\u043B\u0436\u043D\u043E \u0431\u044B\u0442\u044C \u043A\u0440\u0430\u0442\u043D\u044B\u043C ${issue2.divisor}`;
          case "unrecognized_keys":
            return `\u041D\u0435\u0440\u0430\u0441\u043F\u043E\u0437\u043D\u0430\u043D\u043D${issue2.keys.length > 1 ? "\u044B\u0435" : "\u044B\u0439"} \u043A\u043B\u044E\u0447${issue2.keys.length > 1 ? "\u0438" : ""}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0439 \u043A\u043B\u044E\u0447 \u0432 ${issue2.origin}`;
          case "invalid_union":
            return "\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0435 \u0432\u0445\u043E\u0434\u043D\u044B\u0435 \u0434\u0430\u043D\u043D\u044B\u0435";
          case "invalid_element":
            return `\u041D\u0435\u0432\u0435\u0440\u043D\u043E\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u0432 ${issue2.origin}`;
          default:
            return `\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0435 \u0432\u0445\u043E\u0434\u043D\u044B\u0435 \u0434\u0430\u043D\u043D\u044B\u0435`;
        }
      };
    }, "error");
    __name2(ru_default, "default");
  }
});
function sl_default() {
  return {
    localeError: error34()
  };
}
__name(sl_default, "sl_default");
var error34;
var init_sl = __esm({
  "../node_modules/zod/v4/locales/sl.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    error34 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "znakov", verb: "imeti" },
        file: { unit: "bajtov", verb: "imeti" },
        array: { unit: "elementov", verb: "imeti" },
        set: { unit: "elementov", verb: "imeti" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const parsedType7 = /* @__PURE__ */ __name2((data) => {
        const t2 = typeof data;
        switch (t2) {
          case "number": {
            return Number.isNaN(data) ? "NaN" : "\u0161tevilo";
          }
          case "object": {
            if (Array.isArray(data)) {
              return "tabela";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
        }
        return t2;
      }, "parsedType");
      const Nouns = {
        regex: "vnos",
        email: "e-po\u0161tni naslov",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO datum in \u010Das",
        date: "ISO datum",
        time: "ISO \u010Das",
        duration: "ISO trajanje",
        ipv4: "IPv4 naslov",
        ipv6: "IPv6 naslov",
        cidrv4: "obseg IPv4",
        cidrv6: "obseg IPv6",
        base64: "base64 kodiran niz",
        base64url: "base64url kodiran niz",
        json_string: "JSON niz",
        e164: "E.164 \u0161tevilka",
        jwt: "JWT",
        template_literal: "vnos"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Neveljaven vnos: pri\u010Dakovano ${issue2.expected}, prejeto ${parsedType7(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Neveljaven vnos: pri\u010Dakovano ${stringifyPrimitive(issue2.values[0])}`;
            return `Neveljavna mo\u017Enost: pri\u010Dakovano eno izmed ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `Preveliko: pri\u010Dakovano, da bo ${issue2.origin ?? "vrednost"} imelo ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elementov"}`;
            return `Preveliko: pri\u010Dakovano, da bo ${issue2.origin ?? "vrednost"} ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Premajhno: pri\u010Dakovano, da bo ${issue2.origin} imelo ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `Premajhno: pri\u010Dakovano, da bo ${issue2.origin} ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with") {
              return `Neveljaven niz: mora se za\u010Deti z "${_issue.prefix}"`;
            }
            if (_issue.format === "ends_with")
              return `Neveljaven niz: mora se kon\u010Dati z "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `Neveljaven niz: mora vsebovati "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `Neveljaven niz: mora ustrezati vzorcu ${_issue.pattern}`;
            return `Neveljaven ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `Neveljavno \u0161tevilo: mora biti ve\u010Dkratnik ${issue2.divisor}`;
          case "unrecognized_keys":
            return `Neprepoznan${issue2.keys.length > 1 ? "i klju\u010Di" : " klju\u010D"}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Neveljaven klju\u010D v ${issue2.origin}`;
          case "invalid_union":
            return "Neveljaven vnos";
          case "invalid_element":
            return `Neveljavna vrednost v ${issue2.origin}`;
          default:
            return "Neveljaven vnos";
        }
      };
    }, "error");
    __name2(sl_default, "default");
  }
});
function sv_default() {
  return {
    localeError: error35()
  };
}
__name(sv_default, "sv_default");
var error35;
var init_sv = __esm({
  "../node_modules/zod/v4/locales/sv.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    error35 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "tecken", verb: "att ha" },
        file: { unit: "bytes", verb: "att ha" },
        array: { unit: "objekt", verb: "att inneh\xE5lla" },
        set: { unit: "objekt", verb: "att inneh\xE5lla" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const parsedType7 = /* @__PURE__ */ __name2((data) => {
        const t2 = typeof data;
        switch (t2) {
          case "number": {
            return Number.isNaN(data) ? "NaN" : "antal";
          }
          case "object": {
            if (Array.isArray(data)) {
              return "lista";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
        }
        return t2;
      }, "parsedType");
      const Nouns = {
        regex: "regulj\xE4rt uttryck",
        email: "e-postadress",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO-datum och tid",
        date: "ISO-datum",
        time: "ISO-tid",
        duration: "ISO-varaktighet",
        ipv4: "IPv4-intervall",
        ipv6: "IPv6-intervall",
        cidrv4: "IPv4-spektrum",
        cidrv6: "IPv6-spektrum",
        base64: "base64-kodad str\xE4ng",
        base64url: "base64url-kodad str\xE4ng",
        json_string: "JSON-str\xE4ng",
        e164: "E.164-nummer",
        jwt: "JWT",
        template_literal: "mall-literal"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Ogiltig inmatning: f\xF6rv\xE4ntat ${issue2.expected}, fick ${parsedType7(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Ogiltig inmatning: f\xF6rv\xE4ntat ${stringifyPrimitive(issue2.values[0])}`;
            return `Ogiltigt val: f\xF6rv\xE4ntade en av ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `F\xF6r stor(t): f\xF6rv\xE4ntade ${issue2.origin ?? "v\xE4rdet"} att ha ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "element"}`;
            }
            return `F\xF6r stor(t): f\xF6rv\xE4ntat ${issue2.origin ?? "v\xE4rdet"} att ha ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `F\xF6r lite(t): f\xF6rv\xE4ntade ${issue2.origin ?? "v\xE4rdet"} att ha ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `F\xF6r lite(t): f\xF6rv\xE4ntade ${issue2.origin ?? "v\xE4rdet"} att ha ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with") {
              return `Ogiltig str\xE4ng: m\xE5ste b\xF6rja med "${_issue.prefix}"`;
            }
            if (_issue.format === "ends_with")
              return `Ogiltig str\xE4ng: m\xE5ste sluta med "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `Ogiltig str\xE4ng: m\xE5ste inneh\xE5lla "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `Ogiltig str\xE4ng: m\xE5ste matcha m\xF6nstret "${_issue.pattern}"`;
            return `Ogiltig(t) ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `Ogiltigt tal: m\xE5ste vara en multipel av ${issue2.divisor}`;
          case "unrecognized_keys":
            return `${issue2.keys.length > 1 ? "Ok\xE4nda nycklar" : "Ok\xE4nd nyckel"}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Ogiltig nyckel i ${issue2.origin ?? "v\xE4rdet"}`;
          case "invalid_union":
            return "Ogiltig input";
          case "invalid_element":
            return `Ogiltigt v\xE4rde i ${issue2.origin ?? "v\xE4rdet"}`;
          default:
            return `Ogiltig input`;
        }
      };
    }, "error");
    __name2(sv_default, "default");
  }
});
function ta_default() {
  return {
    localeError: error36()
  };
}
__name(ta_default, "ta_default");
var error36;
var init_ta = __esm({
  "../node_modules/zod/v4/locales/ta.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    error36 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "\u0B8E\u0BB4\u0BC1\u0BA4\u0BCD\u0BA4\u0BC1\u0B95\u0BCD\u0B95\u0BB3\u0BCD", verb: "\u0B95\u0BCA\u0BA3\u0BCD\u0B9F\u0BBF\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD" },
        file: { unit: "\u0BAA\u0BC8\u0B9F\u0BCD\u0B9F\u0BC1\u0B95\u0BB3\u0BCD", verb: "\u0B95\u0BCA\u0BA3\u0BCD\u0B9F\u0BBF\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD" },
        array: { unit: "\u0B89\u0BB1\u0BC1\u0BAA\u0BCD\u0BAA\u0BC1\u0B95\u0BB3\u0BCD", verb: "\u0B95\u0BCA\u0BA3\u0BCD\u0B9F\u0BBF\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD" },
        set: { unit: "\u0B89\u0BB1\u0BC1\u0BAA\u0BCD\u0BAA\u0BC1\u0B95\u0BB3\u0BCD", verb: "\u0B95\u0BCA\u0BA3\u0BCD\u0B9F\u0BBF\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const parsedType7 = /* @__PURE__ */ __name2((data) => {
        const t2 = typeof data;
        switch (t2) {
          case "number": {
            return Number.isNaN(data) ? "\u0B8E\u0BA3\u0BCD \u0B85\u0BB2\u0BCD\u0BB2\u0BBE\u0BA4\u0BA4\u0BC1" : "\u0B8E\u0BA3\u0BCD";
          }
          case "object": {
            if (Array.isArray(data)) {
              return "\u0B85\u0BA3\u0BBF";
            }
            if (data === null) {
              return "\u0BB5\u0BC6\u0BB1\u0BC1\u0BAE\u0BC8";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
        }
        return t2;
      }, "parsedType");
      const Nouns = {
        regex: "\u0B89\u0BB3\u0BCD\u0BB3\u0BC0\u0B9F\u0BC1",
        email: "\u0BAE\u0BBF\u0BA9\u0BCD\u0BA9\u0B9E\u0BCD\u0B9A\u0BB2\u0BCD \u0BAE\u0BC1\u0B95\u0BB5\u0BB0\u0BBF",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO \u0BA4\u0BC7\u0BA4\u0BBF \u0BA8\u0BC7\u0BB0\u0BAE\u0BCD",
        date: "ISO \u0BA4\u0BC7\u0BA4\u0BBF",
        time: "ISO \u0BA8\u0BC7\u0BB0\u0BAE\u0BCD",
        duration: "ISO \u0B95\u0BBE\u0BB2 \u0B85\u0BB3\u0BB5\u0BC1",
        ipv4: "IPv4 \u0BAE\u0BC1\u0B95\u0BB5\u0BB0\u0BBF",
        ipv6: "IPv6 \u0BAE\u0BC1\u0B95\u0BB5\u0BB0\u0BBF",
        cidrv4: "IPv4 \u0BB5\u0BB0\u0BAE\u0BCD\u0BAA\u0BC1",
        cidrv6: "IPv6 \u0BB5\u0BB0\u0BAE\u0BCD\u0BAA\u0BC1",
        base64: "base64-encoded \u0B9A\u0BB0\u0BAE\u0BCD",
        base64url: "base64url-encoded \u0B9A\u0BB0\u0BAE\u0BCD",
        json_string: "JSON \u0B9A\u0BB0\u0BAE\u0BCD",
        e164: "E.164 \u0B8E\u0BA3\u0BCD",
        jwt: "JWT",
        template_literal: "input"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B89\u0BB3\u0BCD\u0BB3\u0BC0\u0B9F\u0BC1: \u0B8E\u0BA4\u0BBF\u0BB0\u0BCD\u0BAA\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ${issue2.expected}, \u0BAA\u0BC6\u0BB1\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ${parsedType7(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B89\u0BB3\u0BCD\u0BB3\u0BC0\u0B9F\u0BC1: \u0B8E\u0BA4\u0BBF\u0BB0\u0BCD\u0BAA\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ${stringifyPrimitive(issue2.values[0])}`;
            return `\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0BB5\u0BBF\u0BB0\u0BC1\u0BAA\u0BCD\u0BAA\u0BAE\u0BCD: \u0B8E\u0BA4\u0BBF\u0BB0\u0BCD\u0BAA\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ${joinValues(issue2.values, "|")} \u0B87\u0BB2\u0BCD \u0B92\u0BA9\u0BCD\u0BB1\u0BC1`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `\u0BAE\u0BBF\u0B95 \u0BAA\u0BC6\u0BB0\u0BBF\u0BAF\u0BA4\u0BC1: \u0B8E\u0BA4\u0BBF\u0BB0\u0BCD\u0BAA\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ${issue2.origin ?? "\u0BAE\u0BA4\u0BBF\u0BAA\u0BCD\u0BAA\u0BC1"} ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "\u0B89\u0BB1\u0BC1\u0BAA\u0BCD\u0BAA\u0BC1\u0B95\u0BB3\u0BCD"} \u0B86\u0B95 \u0B87\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD`;
            }
            return `\u0BAE\u0BBF\u0B95 \u0BAA\u0BC6\u0BB0\u0BBF\u0BAF\u0BA4\u0BC1: \u0B8E\u0BA4\u0BBF\u0BB0\u0BCD\u0BAA\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ${issue2.origin ?? "\u0BAE\u0BA4\u0BBF\u0BAA\u0BCD\u0BAA\u0BC1"} ${adj}${issue2.maximum.toString()} \u0B86\u0B95 \u0B87\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `\u0BAE\u0BBF\u0B95\u0B9A\u0BCD \u0B9A\u0BBF\u0BB1\u0BBF\u0BAF\u0BA4\u0BC1: \u0B8E\u0BA4\u0BBF\u0BB0\u0BCD\u0BAA\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ${issue2.origin} ${adj}${issue2.minimum.toString()} ${sizing.unit} \u0B86\u0B95 \u0B87\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD`;
            }
            return `\u0BAE\u0BBF\u0B95\u0B9A\u0BCD \u0B9A\u0BBF\u0BB1\u0BBF\u0BAF\u0BA4\u0BC1: \u0B8E\u0BA4\u0BBF\u0BB0\u0BCD\u0BAA\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ${issue2.origin} ${adj}${issue2.minimum.toString()} \u0B86\u0B95 \u0B87\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B9A\u0BB0\u0BAE\u0BCD: "${_issue.prefix}" \u0B87\u0BB2\u0BCD \u0BA4\u0BCA\u0B9F\u0B99\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD`;
            if (_issue.format === "ends_with")
              return `\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B9A\u0BB0\u0BAE\u0BCD: "${_issue.suffix}" \u0B87\u0BB2\u0BCD \u0BAE\u0BC1\u0B9F\u0BBF\u0BB5\u0B9F\u0BC8\u0BAF \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD`;
            if (_issue.format === "includes")
              return `\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B9A\u0BB0\u0BAE\u0BCD: "${_issue.includes}" \u0B90 \u0B89\u0BB3\u0BCD\u0BB3\u0B9F\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD`;
            if (_issue.format === "regex")
              return `\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B9A\u0BB0\u0BAE\u0BCD: ${_issue.pattern} \u0BAE\u0BC1\u0BB1\u0BC8\u0BAA\u0BBE\u0B9F\u0BCD\u0B9F\u0BC1\u0B9F\u0BA9\u0BCD \u0BAA\u0BCA\u0BB0\u0BC1\u0BA8\u0BCD\u0BA4 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD`;
            return `\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B8E\u0BA3\u0BCD: ${issue2.divisor} \u0B87\u0BA9\u0BCD \u0BAA\u0BB2\u0BAE\u0BBE\u0B95 \u0B87\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD`;
          case "unrecognized_keys":
            return `\u0B85\u0B9F\u0BC8\u0BAF\u0BBE\u0BB3\u0BAE\u0BCD \u0BA4\u0BC6\u0BB0\u0BBF\u0BAF\u0BBE\u0BA4 \u0BB5\u0BBF\u0B9A\u0BC8${issue2.keys.length > 1 ? "\u0B95\u0BB3\u0BCD" : ""}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `${issue2.origin} \u0B87\u0BB2\u0BCD \u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0BB5\u0BBF\u0B9A\u0BC8`;
          case "invalid_union":
            return "\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B89\u0BB3\u0BCD\u0BB3\u0BC0\u0B9F\u0BC1";
          case "invalid_element":
            return `${issue2.origin} \u0B87\u0BB2\u0BCD \u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0BAE\u0BA4\u0BBF\u0BAA\u0BCD\u0BAA\u0BC1`;
          default:
            return `\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B89\u0BB3\u0BCD\u0BB3\u0BC0\u0B9F\u0BC1`;
        }
      };
    }, "error");
    __name2(ta_default, "default");
  }
});
function th_default() {
  return {
    localeError: error37()
  };
}
__name(th_default, "th_default");
var error37;
var init_th = __esm({
  "../node_modules/zod/v4/locales/th.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    error37 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "\u0E15\u0E31\u0E27\u0E2D\u0E31\u0E01\u0E29\u0E23", verb: "\u0E04\u0E27\u0E23\u0E21\u0E35" },
        file: { unit: "\u0E44\u0E1A\u0E15\u0E4C", verb: "\u0E04\u0E27\u0E23\u0E21\u0E35" },
        array: { unit: "\u0E23\u0E32\u0E22\u0E01\u0E32\u0E23", verb: "\u0E04\u0E27\u0E23\u0E21\u0E35" },
        set: { unit: "\u0E23\u0E32\u0E22\u0E01\u0E32\u0E23", verb: "\u0E04\u0E27\u0E23\u0E21\u0E35" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const parsedType7 = /* @__PURE__ */ __name2((data) => {
        const t2 = typeof data;
        switch (t2) {
          case "number": {
            return Number.isNaN(data) ? "\u0E44\u0E21\u0E48\u0E43\u0E0A\u0E48\u0E15\u0E31\u0E27\u0E40\u0E25\u0E02 (NaN)" : "\u0E15\u0E31\u0E27\u0E40\u0E25\u0E02";
          }
          case "object": {
            if (Array.isArray(data)) {
              return "\u0E2D\u0E32\u0E23\u0E4C\u0E40\u0E23\u0E22\u0E4C (Array)";
            }
            if (data === null) {
              return "\u0E44\u0E21\u0E48\u0E21\u0E35\u0E04\u0E48\u0E32 (null)";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
        }
        return t2;
      }, "parsedType");
      const Nouns = {
        regex: "\u0E02\u0E49\u0E2D\u0E21\u0E39\u0E25\u0E17\u0E35\u0E48\u0E1B\u0E49\u0E2D\u0E19",
        email: "\u0E17\u0E35\u0E48\u0E2D\u0E22\u0E39\u0E48\u0E2D\u0E35\u0E40\u0E21\u0E25",
        url: "URL",
        emoji: "\u0E2D\u0E34\u0E42\u0E21\u0E08\u0E34",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "\u0E27\u0E31\u0E19\u0E17\u0E35\u0E48\u0E40\u0E27\u0E25\u0E32\u0E41\u0E1A\u0E1A ISO",
        date: "\u0E27\u0E31\u0E19\u0E17\u0E35\u0E48\u0E41\u0E1A\u0E1A ISO",
        time: "\u0E40\u0E27\u0E25\u0E32\u0E41\u0E1A\u0E1A ISO",
        duration: "\u0E0A\u0E48\u0E27\u0E07\u0E40\u0E27\u0E25\u0E32\u0E41\u0E1A\u0E1A ISO",
        ipv4: "\u0E17\u0E35\u0E48\u0E2D\u0E22\u0E39\u0E48 IPv4",
        ipv6: "\u0E17\u0E35\u0E48\u0E2D\u0E22\u0E39\u0E48 IPv6",
        cidrv4: "\u0E0A\u0E48\u0E27\u0E07 IP \u0E41\u0E1A\u0E1A IPv4",
        cidrv6: "\u0E0A\u0E48\u0E27\u0E07 IP \u0E41\u0E1A\u0E1A IPv6",
        base64: "\u0E02\u0E49\u0E2D\u0E04\u0E27\u0E32\u0E21\u0E41\u0E1A\u0E1A Base64",
        base64url: "\u0E02\u0E49\u0E2D\u0E04\u0E27\u0E32\u0E21\u0E41\u0E1A\u0E1A Base64 \u0E2A\u0E33\u0E2B\u0E23\u0E31\u0E1A URL",
        json_string: "\u0E02\u0E49\u0E2D\u0E04\u0E27\u0E32\u0E21\u0E41\u0E1A\u0E1A JSON",
        e164: "\u0E40\u0E1A\u0E2D\u0E23\u0E4C\u0E42\u0E17\u0E23\u0E28\u0E31\u0E1E\u0E17\u0E4C\u0E23\u0E30\u0E2B\u0E27\u0E48\u0E32\u0E07\u0E1B\u0E23\u0E30\u0E40\u0E17\u0E28 (E.164)",
        jwt: "\u0E42\u0E17\u0E40\u0E04\u0E19 JWT",
        template_literal: "\u0E02\u0E49\u0E2D\u0E21\u0E39\u0E25\u0E17\u0E35\u0E48\u0E1B\u0E49\u0E2D\u0E19"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\u0E1B\u0E23\u0E30\u0E40\u0E20\u0E17\u0E02\u0E49\u0E2D\u0E21\u0E39\u0E25\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E04\u0E27\u0E23\u0E40\u0E1B\u0E47\u0E19 ${issue2.expected} \u0E41\u0E15\u0E48\u0E44\u0E14\u0E49\u0E23\u0E31\u0E1A ${parsedType7(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `\u0E04\u0E48\u0E32\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E04\u0E27\u0E23\u0E40\u0E1B\u0E47\u0E19 ${stringifyPrimitive(issue2.values[0])}`;
            return `\u0E15\u0E31\u0E27\u0E40\u0E25\u0E37\u0E2D\u0E01\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E04\u0E27\u0E23\u0E40\u0E1B\u0E47\u0E19\u0E2B\u0E19\u0E36\u0E48\u0E07\u0E43\u0E19 ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "\u0E44\u0E21\u0E48\u0E40\u0E01\u0E34\u0E19" : "\u0E19\u0E49\u0E2D\u0E22\u0E01\u0E27\u0E48\u0E32";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `\u0E40\u0E01\u0E34\u0E19\u0E01\u0E33\u0E2B\u0E19\u0E14: ${issue2.origin ?? "\u0E04\u0E48\u0E32"} \u0E04\u0E27\u0E23\u0E21\u0E35${adj} ${issue2.maximum.toString()} ${sizing.unit ?? "\u0E23\u0E32\u0E22\u0E01\u0E32\u0E23"}`;
            return `\u0E40\u0E01\u0E34\u0E19\u0E01\u0E33\u0E2B\u0E19\u0E14: ${issue2.origin ?? "\u0E04\u0E48\u0E32"} \u0E04\u0E27\u0E23\u0E21\u0E35${adj} ${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? "\u0E2D\u0E22\u0E48\u0E32\u0E07\u0E19\u0E49\u0E2D\u0E22" : "\u0E21\u0E32\u0E01\u0E01\u0E27\u0E48\u0E32";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `\u0E19\u0E49\u0E2D\u0E22\u0E01\u0E27\u0E48\u0E32\u0E01\u0E33\u0E2B\u0E19\u0E14: ${issue2.origin} \u0E04\u0E27\u0E23\u0E21\u0E35${adj} ${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `\u0E19\u0E49\u0E2D\u0E22\u0E01\u0E27\u0E48\u0E32\u0E01\u0E33\u0E2B\u0E19\u0E14: ${issue2.origin} \u0E04\u0E27\u0E23\u0E21\u0E35${adj} ${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with") {
              return `\u0E23\u0E39\u0E1B\u0E41\u0E1A\u0E1A\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E02\u0E49\u0E2D\u0E04\u0E27\u0E32\u0E21\u0E15\u0E49\u0E2D\u0E07\u0E02\u0E36\u0E49\u0E19\u0E15\u0E49\u0E19\u0E14\u0E49\u0E27\u0E22 "${_issue.prefix}"`;
            }
            if (_issue.format === "ends_with")
              return `\u0E23\u0E39\u0E1B\u0E41\u0E1A\u0E1A\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E02\u0E49\u0E2D\u0E04\u0E27\u0E32\u0E21\u0E15\u0E49\u0E2D\u0E07\u0E25\u0E07\u0E17\u0E49\u0E32\u0E22\u0E14\u0E49\u0E27\u0E22 "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `\u0E23\u0E39\u0E1B\u0E41\u0E1A\u0E1A\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E02\u0E49\u0E2D\u0E04\u0E27\u0E32\u0E21\u0E15\u0E49\u0E2D\u0E07\u0E21\u0E35 "${_issue.includes}" \u0E2D\u0E22\u0E39\u0E48\u0E43\u0E19\u0E02\u0E49\u0E2D\u0E04\u0E27\u0E32\u0E21`;
            if (_issue.format === "regex")
              return `\u0E23\u0E39\u0E1B\u0E41\u0E1A\u0E1A\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E15\u0E49\u0E2D\u0E07\u0E15\u0E23\u0E07\u0E01\u0E31\u0E1A\u0E23\u0E39\u0E1B\u0E41\u0E1A\u0E1A\u0E17\u0E35\u0E48\u0E01\u0E33\u0E2B\u0E19\u0E14 ${_issue.pattern}`;
            return `\u0E23\u0E39\u0E1B\u0E41\u0E1A\u0E1A\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `\u0E15\u0E31\u0E27\u0E40\u0E25\u0E02\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E15\u0E49\u0E2D\u0E07\u0E40\u0E1B\u0E47\u0E19\u0E08\u0E33\u0E19\u0E27\u0E19\u0E17\u0E35\u0E48\u0E2B\u0E32\u0E23\u0E14\u0E49\u0E27\u0E22 ${issue2.divisor} \u0E44\u0E14\u0E49\u0E25\u0E07\u0E15\u0E31\u0E27`;
          case "unrecognized_keys":
            return `\u0E1E\u0E1A\u0E04\u0E35\u0E22\u0E4C\u0E17\u0E35\u0E48\u0E44\u0E21\u0E48\u0E23\u0E39\u0E49\u0E08\u0E31\u0E01: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `\u0E04\u0E35\u0E22\u0E4C\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07\u0E43\u0E19 ${issue2.origin}`;
          case "invalid_union":
            return "\u0E02\u0E49\u0E2D\u0E21\u0E39\u0E25\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E44\u0E21\u0E48\u0E15\u0E23\u0E07\u0E01\u0E31\u0E1A\u0E23\u0E39\u0E1B\u0E41\u0E1A\u0E1A\u0E22\u0E39\u0E40\u0E19\u0E35\u0E22\u0E19\u0E17\u0E35\u0E48\u0E01\u0E33\u0E2B\u0E19\u0E14\u0E44\u0E27\u0E49";
          case "invalid_element":
            return `\u0E02\u0E49\u0E2D\u0E21\u0E39\u0E25\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07\u0E43\u0E19 ${issue2.origin}`;
          default:
            return `\u0E02\u0E49\u0E2D\u0E21\u0E39\u0E25\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07`;
        }
      };
    }, "error");
    __name2(th_default, "default");
  }
});
function tr_default() {
  return {
    localeError: error38()
  };
}
__name(tr_default, "tr_default");
var parsedType6;
var error38;
var init_tr = __esm({
  "../node_modules/zod/v4/locales/tr.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    parsedType6 = /* @__PURE__ */ __name2((data) => {
      const t2 = typeof data;
      switch (t2) {
        case "number": {
          return Number.isNaN(data) ? "NaN" : "number";
        }
        case "object": {
          if (Array.isArray(data)) {
            return "array";
          }
          if (data === null) {
            return "null";
          }
          if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
            return data.constructor.name;
          }
        }
      }
      return t2;
    }, "parsedType");
    error38 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "karakter", verb: "olmal\u0131" },
        file: { unit: "bayt", verb: "olmal\u0131" },
        array: { unit: "\xF6\u011Fe", verb: "olmal\u0131" },
        set: { unit: "\xF6\u011Fe", verb: "olmal\u0131" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const Nouns = {
        regex: "girdi",
        email: "e-posta adresi",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO tarih ve saat",
        date: "ISO tarih",
        time: "ISO saat",
        duration: "ISO s\xFCre",
        ipv4: "IPv4 adresi",
        ipv6: "IPv6 adresi",
        cidrv4: "IPv4 aral\u0131\u011F\u0131",
        cidrv6: "IPv6 aral\u0131\u011F\u0131",
        base64: "base64 ile \u015Fifrelenmi\u015F metin",
        base64url: "base64url ile \u015Fifrelenmi\u015F metin",
        json_string: "JSON dizesi",
        e164: "E.164 say\u0131s\u0131",
        jwt: "JWT",
        template_literal: "\u015Eablon dizesi"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Ge\xE7ersiz de\u011Fer: beklenen ${issue2.expected}, al\u0131nan ${parsedType6(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Ge\xE7ersiz de\u011Fer: beklenen ${stringifyPrimitive(issue2.values[0])}`;
            return `Ge\xE7ersiz se\xE7enek: a\u015Fa\u011F\u0131dakilerden biri olmal\u0131: ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `\xC7ok b\xFCy\xFCk: beklenen ${issue2.origin ?? "de\u011Fer"} ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "\xF6\u011Fe"}`;
            return `\xC7ok b\xFCy\xFCk: beklenen ${issue2.origin ?? "de\u011Fer"} ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `\xC7ok k\xFC\xE7\xFCk: beklenen ${issue2.origin} ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            return `\xC7ok k\xFC\xE7\xFCk: beklenen ${issue2.origin} ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `Ge\xE7ersiz metin: "${_issue.prefix}" ile ba\u015Flamal\u0131`;
            if (_issue.format === "ends_with")
              return `Ge\xE7ersiz metin: "${_issue.suffix}" ile bitmeli`;
            if (_issue.format === "includes")
              return `Ge\xE7ersiz metin: "${_issue.includes}" i\xE7ermeli`;
            if (_issue.format === "regex")
              return `Ge\xE7ersiz metin: ${_issue.pattern} desenine uymal\u0131`;
            return `Ge\xE7ersiz ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `Ge\xE7ersiz say\u0131: ${issue2.divisor} ile tam b\xF6l\xFCnebilmeli`;
          case "unrecognized_keys":
            return `Tan\u0131nmayan anahtar${issue2.keys.length > 1 ? "lar" : ""}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `${issue2.origin} i\xE7inde ge\xE7ersiz anahtar`;
          case "invalid_union":
            return "Ge\xE7ersiz de\u011Fer";
          case "invalid_element":
            return `${issue2.origin} i\xE7inde ge\xE7ersiz de\u011Fer`;
          default:
            return `Ge\xE7ersiz de\u011Fer`;
        }
      };
    }, "error");
    __name2(tr_default, "default");
  }
});
function uk_default() {
  return {
    localeError: error39()
  };
}
__name(uk_default, "uk_default");
var error39;
var init_uk = __esm({
  "../node_modules/zod/v4/locales/uk.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    error39 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "\u0441\u0438\u043C\u0432\u043E\u043B\u0456\u0432", verb: "\u043C\u0430\u0442\u0438\u043C\u0435" },
        file: { unit: "\u0431\u0430\u0439\u0442\u0456\u0432", verb: "\u043C\u0430\u0442\u0438\u043C\u0435" },
        array: { unit: "\u0435\u043B\u0435\u043C\u0435\u043D\u0442\u0456\u0432", verb: "\u043C\u0430\u0442\u0438\u043C\u0435" },
        set: { unit: "\u0435\u043B\u0435\u043C\u0435\u043D\u0442\u0456\u0432", verb: "\u043C\u0430\u0442\u0438\u043C\u0435" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const parsedType7 = /* @__PURE__ */ __name2((data) => {
        const t2 = typeof data;
        switch (t2) {
          case "number": {
            return Number.isNaN(data) ? "NaN" : "\u0447\u0438\u0441\u043B\u043E";
          }
          case "object": {
            if (Array.isArray(data)) {
              return "\u043C\u0430\u0441\u0438\u0432";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
        }
        return t2;
      }, "parsedType");
      const Nouns = {
        regex: "\u0432\u0445\u0456\u0434\u043D\u0456 \u0434\u0430\u043D\u0456",
        email: "\u0430\u0434\u0440\u0435\u0441\u0430 \u0435\u043B\u0435\u043A\u0442\u0440\u043E\u043D\u043D\u043E\u0457 \u043F\u043E\u0448\u0442\u0438",
        url: "URL",
        emoji: "\u0435\u043C\u043E\u0434\u0437\u0456",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "\u0434\u0430\u0442\u0430 \u0442\u0430 \u0447\u0430\u0441 ISO",
        date: "\u0434\u0430\u0442\u0430 ISO",
        time: "\u0447\u0430\u0441 ISO",
        duration: "\u0442\u0440\u0438\u0432\u0430\u043B\u0456\u0441\u0442\u044C ISO",
        ipv4: "\u0430\u0434\u0440\u0435\u0441\u0430 IPv4",
        ipv6: "\u0430\u0434\u0440\u0435\u0441\u0430 IPv6",
        cidrv4: "\u0434\u0456\u0430\u043F\u0430\u0437\u043E\u043D IPv4",
        cidrv6: "\u0434\u0456\u0430\u043F\u0430\u0437\u043E\u043D IPv6",
        base64: "\u0440\u044F\u0434\u043E\u043A \u0443 \u043A\u043E\u0434\u0443\u0432\u0430\u043D\u043D\u0456 base64",
        base64url: "\u0440\u044F\u0434\u043E\u043A \u0443 \u043A\u043E\u0434\u0443\u0432\u0430\u043D\u043D\u0456 base64url",
        json_string: "\u0440\u044F\u0434\u043E\u043A JSON",
        e164: "\u043D\u043E\u043C\u0435\u0440 E.164",
        jwt: "JWT",
        template_literal: "\u0432\u0445\u0456\u0434\u043D\u0456 \u0434\u0430\u043D\u0456"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0456 \u0432\u0445\u0456\u0434\u043D\u0456 \u0434\u0430\u043D\u0456: \u043E\u0447\u0456\u043A\u0443\u0454\u0442\u044C\u0441\u044F ${issue2.expected}, \u043E\u0442\u0440\u0438\u043C\u0430\u043D\u043E ${parsedType7(issue2.input)}`;
          // return `Неправильні вхідні дані: очікується ${issue.expected}, отримано ${util.getParsedType(issue.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0456 \u0432\u0445\u0456\u0434\u043D\u0456 \u0434\u0430\u043D\u0456: \u043E\u0447\u0456\u043A\u0443\u0454\u0442\u044C\u0441\u044F ${stringifyPrimitive(issue2.values[0])}`;
            return `\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0430 \u043E\u043F\u0446\u0456\u044F: \u043E\u0447\u0456\u043A\u0443\u0454\u0442\u044C\u0441\u044F \u043E\u0434\u043D\u0435 \u0437 ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `\u0417\u0430\u043D\u0430\u0434\u0442\u043E \u0432\u0435\u043B\u0438\u043A\u0435: \u043E\u0447\u0456\u043A\u0443\u0454\u0442\u044C\u0441\u044F, \u0449\u043E ${issue2.origin ?? "\u0437\u043D\u0430\u0447\u0435\u043D\u043D\u044F"} ${sizing.verb} ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "\u0435\u043B\u0435\u043C\u0435\u043D\u0442\u0456\u0432"}`;
            return `\u0417\u0430\u043D\u0430\u0434\u0442\u043E \u0432\u0435\u043B\u0438\u043A\u0435: \u043E\u0447\u0456\u043A\u0443\u0454\u0442\u044C\u0441\u044F, \u0449\u043E ${issue2.origin ?? "\u0437\u043D\u0430\u0447\u0435\u043D\u043D\u044F"} \u0431\u0443\u0434\u0435 ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `\u0417\u0430\u043D\u0430\u0434\u0442\u043E \u043C\u0430\u043B\u0435: \u043E\u0447\u0456\u043A\u0443\u0454\u0442\u044C\u0441\u044F, \u0449\u043E ${issue2.origin} ${sizing.verb} ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `\u0417\u0430\u043D\u0430\u0434\u0442\u043E \u043C\u0430\u043B\u0435: \u043E\u0447\u0456\u043A\u0443\u0454\u0442\u044C\u0441\u044F, \u0449\u043E ${issue2.origin} \u0431\u0443\u0434\u0435 ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0438\u0439 \u0440\u044F\u0434\u043E\u043A: \u043F\u043E\u0432\u0438\u043D\u0435\u043D \u043F\u043E\u0447\u0438\u043D\u0430\u0442\u0438\u0441\u044F \u0437 "${_issue.prefix}"`;
            if (_issue.format === "ends_with")
              return `\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0438\u0439 \u0440\u044F\u0434\u043E\u043A: \u043F\u043E\u0432\u0438\u043D\u0435\u043D \u0437\u0430\u043A\u0456\u043D\u0447\u0443\u0432\u0430\u0442\u0438\u0441\u044F \u043D\u0430 "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0438\u0439 \u0440\u044F\u0434\u043E\u043A: \u043F\u043E\u0432\u0438\u043D\u0435\u043D \u043C\u0456\u0441\u0442\u0438\u0442\u0438 "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0438\u0439 \u0440\u044F\u0434\u043E\u043A: \u043F\u043E\u0432\u0438\u043D\u0435\u043D \u0432\u0456\u0434\u043F\u043E\u0432\u0456\u0434\u0430\u0442\u0438 \u0448\u0430\u0431\u043B\u043E\u043D\u0443 ${_issue.pattern}`;
            return `\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0438\u0439 ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0435 \u0447\u0438\u0441\u043B\u043E: \u043F\u043E\u0432\u0438\u043D\u043D\u043E \u0431\u0443\u0442\u0438 \u043A\u0440\u0430\u0442\u043D\u0438\u043C ${issue2.divisor}`;
          case "unrecognized_keys":
            return `\u041D\u0435\u0440\u043E\u0437\u043F\u0456\u0437\u043D\u0430\u043D\u0438\u0439 \u043A\u043B\u044E\u0447${issue2.keys.length > 1 ? "\u0456" : ""}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0438\u0439 \u043A\u043B\u044E\u0447 \u0443 ${issue2.origin}`;
          case "invalid_union":
            return "\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0456 \u0432\u0445\u0456\u0434\u043D\u0456 \u0434\u0430\u043D\u0456";
          case "invalid_element":
            return `\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u043D\u044F \u0443 ${issue2.origin}`;
          default:
            return `\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0456 \u0432\u0445\u0456\u0434\u043D\u0456 \u0434\u0430\u043D\u0456`;
        }
      };
    }, "error");
    __name2(uk_default, "default");
  }
});
function ua_default() {
  return uk_default();
}
__name(ua_default, "ua_default");
var init_ua = __esm({
  "../node_modules/zod/v4/locales/ua.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_uk();
    __name2(ua_default, "default");
  }
});
function ur_default() {
  return {
    localeError: error40()
  };
}
__name(ur_default, "ur_default");
var error40;
var init_ur = __esm({
  "../node_modules/zod/v4/locales/ur.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    error40 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "\u062D\u0631\u0648\u0641", verb: "\u06C1\u0648\u0646\u0627" },
        file: { unit: "\u0628\u0627\u0626\u0679\u0633", verb: "\u06C1\u0648\u0646\u0627" },
        array: { unit: "\u0622\u0626\u0679\u0645\u0632", verb: "\u06C1\u0648\u0646\u0627" },
        set: { unit: "\u0622\u0626\u0679\u0645\u0632", verb: "\u06C1\u0648\u0646\u0627" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const parsedType7 = /* @__PURE__ */ __name2((data) => {
        const t2 = typeof data;
        switch (t2) {
          case "number": {
            return Number.isNaN(data) ? "NaN" : "\u0646\u0645\u0628\u0631";
          }
          case "object": {
            if (Array.isArray(data)) {
              return "\u0622\u0631\u06D2";
            }
            if (data === null) {
              return "\u0646\u0644";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
        }
        return t2;
      }, "parsedType");
      const Nouns = {
        regex: "\u0627\u0646 \u067E\u0679",
        email: "\u0627\u06CC \u0645\u06CC\u0644 \u0627\u06CC\u0688\u0631\u06CC\u0633",
        url: "\u06CC\u0648 \u0622\u0631 \u0627\u06CC\u0644",
        emoji: "\u0627\u06CC\u0645\u0648\u062C\u06CC",
        uuid: "\u06CC\u0648 \u06CC\u0648 \u0622\u0626\u06CC \u0688\u06CC",
        uuidv4: "\u06CC\u0648 \u06CC\u0648 \u0622\u0626\u06CC \u0688\u06CC \u0648\u06CC 4",
        uuidv6: "\u06CC\u0648 \u06CC\u0648 \u0622\u0626\u06CC \u0688\u06CC \u0648\u06CC 6",
        nanoid: "\u0646\u06CC\u0646\u0648 \u0622\u0626\u06CC \u0688\u06CC",
        guid: "\u062C\u06CC \u06CC\u0648 \u0622\u0626\u06CC \u0688\u06CC",
        cuid: "\u0633\u06CC \u06CC\u0648 \u0622\u0626\u06CC \u0688\u06CC",
        cuid2: "\u0633\u06CC \u06CC\u0648 \u0622\u0626\u06CC \u0688\u06CC 2",
        ulid: "\u06CC\u0648 \u0627\u06CC\u0644 \u0622\u0626\u06CC \u0688\u06CC",
        xid: "\u0627\u06CC\u06A9\u0633 \u0622\u0626\u06CC \u0688\u06CC",
        ksuid: "\u06A9\u06D2 \u0627\u06CC\u0633 \u06CC\u0648 \u0622\u0626\u06CC \u0688\u06CC",
        datetime: "\u0622\u0626\u06CC \u0627\u06CC\u0633 \u0627\u0648 \u0688\u06CC\u0679 \u0679\u0627\u0626\u0645",
        date: "\u0622\u0626\u06CC \u0627\u06CC\u0633 \u0627\u0648 \u062A\u0627\u0631\u06CC\u062E",
        time: "\u0622\u0626\u06CC \u0627\u06CC\u0633 \u0627\u0648 \u0648\u0642\u062A",
        duration: "\u0622\u0626\u06CC \u0627\u06CC\u0633 \u0627\u0648 \u0645\u062F\u062A",
        ipv4: "\u0622\u0626\u06CC \u067E\u06CC \u0648\u06CC 4 \u0627\u06CC\u0688\u0631\u06CC\u0633",
        ipv6: "\u0622\u0626\u06CC \u067E\u06CC \u0648\u06CC 6 \u0627\u06CC\u0688\u0631\u06CC\u0633",
        cidrv4: "\u0622\u0626\u06CC \u067E\u06CC \u0648\u06CC 4 \u0631\u06CC\u0646\u062C",
        cidrv6: "\u0622\u0626\u06CC \u067E\u06CC \u0648\u06CC 6 \u0631\u06CC\u0646\u062C",
        base64: "\u0628\u06CC\u0633 64 \u0627\u0646 \u06A9\u0648\u0688\u0688 \u0633\u0679\u0631\u0646\u06AF",
        base64url: "\u0628\u06CC\u0633 64 \u06CC\u0648 \u0622\u0631 \u0627\u06CC\u0644 \u0627\u0646 \u06A9\u0648\u0688\u0688 \u0633\u0679\u0631\u0646\u06AF",
        json_string: "\u062C\u06D2 \u0627\u06CC\u0633 \u0627\u0648 \u0627\u06CC\u0646 \u0633\u0679\u0631\u0646\u06AF",
        e164: "\u0627\u06CC 164 \u0646\u0645\u0628\u0631",
        jwt: "\u062C\u06D2 \u0688\u0628\u0644\u06CC\u0648 \u0679\u06CC",
        template_literal: "\u0627\u0646 \u067E\u0679"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\u063A\u0644\u0637 \u0627\u0646 \u067E\u0679: ${issue2.expected} \u0645\u062A\u0648\u0642\u0639 \u062A\u06BE\u0627\u060C ${parsedType7(issue2.input)} \u0645\u0648\u0635\u0648\u0644 \u06C1\u0648\u0627`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `\u063A\u0644\u0637 \u0627\u0646 \u067E\u0679: ${stringifyPrimitive(issue2.values[0])} \u0645\u062A\u0648\u0642\u0639 \u062A\u06BE\u0627`;
            return `\u063A\u0644\u0637 \u0622\u067E\u0634\u0646: ${joinValues(issue2.values, "|")} \u0645\u06CC\u06BA \u0633\u06D2 \u0627\u06CC\u06A9 \u0645\u062A\u0648\u0642\u0639 \u062A\u06BE\u0627`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `\u0628\u06C1\u062A \u0628\u0691\u0627: ${issue2.origin ?? "\u0648\u06CC\u0644\u06CC\u0648"} \u06A9\u06D2 ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "\u0639\u0646\u0627\u0635\u0631"} \u06C1\u0648\u0646\u06D2 \u0645\u062A\u0648\u0642\u0639 \u062A\u06BE\u06D2`;
            return `\u0628\u06C1\u062A \u0628\u0691\u0627: ${issue2.origin ?? "\u0648\u06CC\u0644\u06CC\u0648"} \u06A9\u0627 ${adj}${issue2.maximum.toString()} \u06C1\u0648\u0646\u0627 \u0645\u062A\u0648\u0642\u0639 \u062A\u06BE\u0627`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `\u0628\u06C1\u062A \u0686\u06BE\u0648\u0679\u0627: ${issue2.origin} \u06A9\u06D2 ${adj}${issue2.minimum.toString()} ${sizing.unit} \u06C1\u0648\u0646\u06D2 \u0645\u062A\u0648\u0642\u0639 \u062A\u06BE\u06D2`;
            }
            return `\u0628\u06C1\u062A \u0686\u06BE\u0648\u0679\u0627: ${issue2.origin} \u06A9\u0627 ${adj}${issue2.minimum.toString()} \u06C1\u0648\u0646\u0627 \u0645\u062A\u0648\u0642\u0639 \u062A\u06BE\u0627`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with") {
              return `\u063A\u0644\u0637 \u0633\u0679\u0631\u0646\u06AF: "${_issue.prefix}" \u0633\u06D2 \u0634\u0631\u0648\u0639 \u06C1\u0648\u0646\u0627 \u0686\u0627\u06C1\u06CC\u06D2`;
            }
            if (_issue.format === "ends_with")
              return `\u063A\u0644\u0637 \u0633\u0679\u0631\u0646\u06AF: "${_issue.suffix}" \u067E\u0631 \u062E\u062A\u0645 \u06C1\u0648\u0646\u0627 \u0686\u0627\u06C1\u06CC\u06D2`;
            if (_issue.format === "includes")
              return `\u063A\u0644\u0637 \u0633\u0679\u0631\u0646\u06AF: "${_issue.includes}" \u0634\u0627\u0645\u0644 \u06C1\u0648\u0646\u0627 \u0686\u0627\u06C1\u06CC\u06D2`;
            if (_issue.format === "regex")
              return `\u063A\u0644\u0637 \u0633\u0679\u0631\u0646\u06AF: \u067E\u06CC\u0679\u0631\u0646 ${_issue.pattern} \u0633\u06D2 \u0645\u06CC\u0686 \u06C1\u0648\u0646\u0627 \u0686\u0627\u06C1\u06CC\u06D2`;
            return `\u063A\u0644\u0637 ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `\u063A\u0644\u0637 \u0646\u0645\u0628\u0631: ${issue2.divisor} \u06A9\u0627 \u0645\u0636\u0627\u0639\u0641 \u06C1\u0648\u0646\u0627 \u0686\u0627\u06C1\u06CC\u06D2`;
          case "unrecognized_keys":
            return `\u063A\u06CC\u0631 \u062A\u0633\u0644\u06CC\u0645 \u0634\u062F\u06C1 \u06A9\u06CC${issue2.keys.length > 1 ? "\u0632" : ""}: ${joinValues(issue2.keys, "\u060C ")}`;
          case "invalid_key":
            return `${issue2.origin} \u0645\u06CC\u06BA \u063A\u0644\u0637 \u06A9\u06CC`;
          case "invalid_union":
            return "\u063A\u0644\u0637 \u0627\u0646 \u067E\u0679";
          case "invalid_element":
            return `${issue2.origin} \u0645\u06CC\u06BA \u063A\u0644\u0637 \u0648\u06CC\u0644\u06CC\u0648`;
          default:
            return `\u063A\u0644\u0637 \u0627\u0646 \u067E\u0679`;
        }
      };
    }, "error");
    __name2(ur_default, "default");
  }
});
function vi_default() {
  return {
    localeError: error41()
  };
}
__name(vi_default, "vi_default");
var error41;
var init_vi = __esm({
  "../node_modules/zod/v4/locales/vi.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    error41 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "k\xFD t\u1EF1", verb: "c\xF3" },
        file: { unit: "byte", verb: "c\xF3" },
        array: { unit: "ph\u1EA7n t\u1EED", verb: "c\xF3" },
        set: { unit: "ph\u1EA7n t\u1EED", verb: "c\xF3" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const parsedType7 = /* @__PURE__ */ __name2((data) => {
        const t2 = typeof data;
        switch (t2) {
          case "number": {
            return Number.isNaN(data) ? "NaN" : "s\u1ED1";
          }
          case "object": {
            if (Array.isArray(data)) {
              return "m\u1EA3ng";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
        }
        return t2;
      }, "parsedType");
      const Nouns = {
        regex: "\u0111\u1EA7u v\xE0o",
        email: "\u0111\u1ECBa ch\u1EC9 email",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ng\xE0y gi\u1EDD ISO",
        date: "ng\xE0y ISO",
        time: "gi\u1EDD ISO",
        duration: "kho\u1EA3ng th\u1EDDi gian ISO",
        ipv4: "\u0111\u1ECBa ch\u1EC9 IPv4",
        ipv6: "\u0111\u1ECBa ch\u1EC9 IPv6",
        cidrv4: "d\u1EA3i IPv4",
        cidrv6: "d\u1EA3i IPv6",
        base64: "chu\u1ED7i m\xE3 h\xF3a base64",
        base64url: "chu\u1ED7i m\xE3 h\xF3a base64url",
        json_string: "chu\u1ED7i JSON",
        e164: "s\u1ED1 E.164",
        jwt: "JWT",
        template_literal: "\u0111\u1EA7u v\xE0o"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\u0110\u1EA7u v\xE0o kh\xF4ng h\u1EE3p l\u1EC7: mong \u0111\u1EE3i ${issue2.expected}, nh\u1EADn \u0111\u01B0\u1EE3c ${parsedType7(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `\u0110\u1EA7u v\xE0o kh\xF4ng h\u1EE3p l\u1EC7: mong \u0111\u1EE3i ${stringifyPrimitive(issue2.values[0])}`;
            return `T\xF9y ch\u1ECDn kh\xF4ng h\u1EE3p l\u1EC7: mong \u0111\u1EE3i m\u1ED9t trong c\xE1c gi\xE1 tr\u1ECB ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `Qu\xE1 l\u1EDBn: mong \u0111\u1EE3i ${issue2.origin ?? "gi\xE1 tr\u1ECB"} ${sizing.verb} ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "ph\u1EA7n t\u1EED"}`;
            return `Qu\xE1 l\u1EDBn: mong \u0111\u1EE3i ${issue2.origin ?? "gi\xE1 tr\u1ECB"} ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Qu\xE1 nh\u1ECF: mong \u0111\u1EE3i ${issue2.origin} ${sizing.verb} ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `Qu\xE1 nh\u1ECF: mong \u0111\u1EE3i ${issue2.origin} ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `Chu\u1ED7i kh\xF4ng h\u1EE3p l\u1EC7: ph\u1EA3i b\u1EAFt \u0111\u1EA7u b\u1EB1ng "${_issue.prefix}"`;
            if (_issue.format === "ends_with")
              return `Chu\u1ED7i kh\xF4ng h\u1EE3p l\u1EC7: ph\u1EA3i k\u1EBFt th\xFAc b\u1EB1ng "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `Chu\u1ED7i kh\xF4ng h\u1EE3p l\u1EC7: ph\u1EA3i bao g\u1ED3m "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `Chu\u1ED7i kh\xF4ng h\u1EE3p l\u1EC7: ph\u1EA3i kh\u1EDBp v\u1EDBi m\u1EABu ${_issue.pattern}`;
            return `${Nouns[_issue.format] ?? issue2.format} kh\xF4ng h\u1EE3p l\u1EC7`;
          }
          case "not_multiple_of":
            return `S\u1ED1 kh\xF4ng h\u1EE3p l\u1EC7: ph\u1EA3i l\xE0 b\u1ED9i s\u1ED1 c\u1EE7a ${issue2.divisor}`;
          case "unrecognized_keys":
            return `Kh\xF3a kh\xF4ng \u0111\u01B0\u1EE3c nh\u1EADn d\u1EA1ng: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Kh\xF3a kh\xF4ng h\u1EE3p l\u1EC7 trong ${issue2.origin}`;
          case "invalid_union":
            return "\u0110\u1EA7u v\xE0o kh\xF4ng h\u1EE3p l\u1EC7";
          case "invalid_element":
            return `Gi\xE1 tr\u1ECB kh\xF4ng h\u1EE3p l\u1EC7 trong ${issue2.origin}`;
          default:
            return `\u0110\u1EA7u v\xE0o kh\xF4ng h\u1EE3p l\u1EC7`;
        }
      };
    }, "error");
    __name2(vi_default, "default");
  }
});
function zh_CN_default() {
  return {
    localeError: error42()
  };
}
__name(zh_CN_default, "zh_CN_default");
var error42;
var init_zh_CN = __esm({
  "../node_modules/zod/v4/locales/zh-CN.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    error42 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "\u5B57\u7B26", verb: "\u5305\u542B" },
        file: { unit: "\u5B57\u8282", verb: "\u5305\u542B" },
        array: { unit: "\u9879", verb: "\u5305\u542B" },
        set: { unit: "\u9879", verb: "\u5305\u542B" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const parsedType7 = /* @__PURE__ */ __name2((data) => {
        const t2 = typeof data;
        switch (t2) {
          case "number": {
            return Number.isNaN(data) ? "\u975E\u6570\u5B57(NaN)" : "\u6570\u5B57";
          }
          case "object": {
            if (Array.isArray(data)) {
              return "\u6570\u7EC4";
            }
            if (data === null) {
              return "\u7A7A\u503C(null)";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
        }
        return t2;
      }, "parsedType");
      const Nouns = {
        regex: "\u8F93\u5165",
        email: "\u7535\u5B50\u90AE\u4EF6",
        url: "URL",
        emoji: "\u8868\u60C5\u7B26\u53F7",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO\u65E5\u671F\u65F6\u95F4",
        date: "ISO\u65E5\u671F",
        time: "ISO\u65F6\u95F4",
        duration: "ISO\u65F6\u957F",
        ipv4: "IPv4\u5730\u5740",
        ipv6: "IPv6\u5730\u5740",
        cidrv4: "IPv4\u7F51\u6BB5",
        cidrv6: "IPv6\u7F51\u6BB5",
        base64: "base64\u7F16\u7801\u5B57\u7B26\u4E32",
        base64url: "base64url\u7F16\u7801\u5B57\u7B26\u4E32",
        json_string: "JSON\u5B57\u7B26\u4E32",
        e164: "E.164\u53F7\u7801",
        jwt: "JWT",
        template_literal: "\u8F93\u5165"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\u65E0\u6548\u8F93\u5165\uFF1A\u671F\u671B ${issue2.expected}\uFF0C\u5B9E\u9645\u63A5\u6536 ${parsedType7(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `\u65E0\u6548\u8F93\u5165\uFF1A\u671F\u671B ${stringifyPrimitive(issue2.values[0])}`;
            return `\u65E0\u6548\u9009\u9879\uFF1A\u671F\u671B\u4EE5\u4E0B\u4E4B\u4E00 ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `\u6570\u503C\u8FC7\u5927\uFF1A\u671F\u671B ${issue2.origin ?? "\u503C"} ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "\u4E2A\u5143\u7D20"}`;
            return `\u6570\u503C\u8FC7\u5927\uFF1A\u671F\u671B ${issue2.origin ?? "\u503C"} ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `\u6570\u503C\u8FC7\u5C0F\uFF1A\u671F\u671B ${issue2.origin} ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `\u6570\u503C\u8FC7\u5C0F\uFF1A\u671F\u671B ${issue2.origin} ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `\u65E0\u6548\u5B57\u7B26\u4E32\uFF1A\u5FC5\u987B\u4EE5 "${_issue.prefix}" \u5F00\u5934`;
            if (_issue.format === "ends_with")
              return `\u65E0\u6548\u5B57\u7B26\u4E32\uFF1A\u5FC5\u987B\u4EE5 "${_issue.suffix}" \u7ED3\u5C3E`;
            if (_issue.format === "includes")
              return `\u65E0\u6548\u5B57\u7B26\u4E32\uFF1A\u5FC5\u987B\u5305\u542B "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `\u65E0\u6548\u5B57\u7B26\u4E32\uFF1A\u5FC5\u987B\u6EE1\u8DB3\u6B63\u5219\u8868\u8FBE\u5F0F ${_issue.pattern}`;
            return `\u65E0\u6548${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `\u65E0\u6548\u6570\u5B57\uFF1A\u5FC5\u987B\u662F ${issue2.divisor} \u7684\u500D\u6570`;
          case "unrecognized_keys":
            return `\u51FA\u73B0\u672A\u77E5\u7684\u952E(key): ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `${issue2.origin} \u4E2D\u7684\u952E(key)\u65E0\u6548`;
          case "invalid_union":
            return "\u65E0\u6548\u8F93\u5165";
          case "invalid_element":
            return `${issue2.origin} \u4E2D\u5305\u542B\u65E0\u6548\u503C(value)`;
          default:
            return `\u65E0\u6548\u8F93\u5165`;
        }
      };
    }, "error");
    __name2(zh_CN_default, "default");
  }
});
function zh_TW_default() {
  return {
    localeError: error43()
  };
}
__name(zh_TW_default, "zh_TW_default");
var error43;
var init_zh_TW = __esm({
  "../node_modules/zod/v4/locales/zh-TW.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    error43 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "\u5B57\u5143", verb: "\u64C1\u6709" },
        file: { unit: "\u4F4D\u5143\u7D44", verb: "\u64C1\u6709" },
        array: { unit: "\u9805\u76EE", verb: "\u64C1\u6709" },
        set: { unit: "\u9805\u76EE", verb: "\u64C1\u6709" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const parsedType7 = /* @__PURE__ */ __name2((data) => {
        const t2 = typeof data;
        switch (t2) {
          case "number": {
            return Number.isNaN(data) ? "NaN" : "number";
          }
          case "object": {
            if (Array.isArray(data)) {
              return "array";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
        }
        return t2;
      }, "parsedType");
      const Nouns = {
        regex: "\u8F38\u5165",
        email: "\u90F5\u4EF6\u5730\u5740",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO \u65E5\u671F\u6642\u9593",
        date: "ISO \u65E5\u671F",
        time: "ISO \u6642\u9593",
        duration: "ISO \u671F\u9593",
        ipv4: "IPv4 \u4F4D\u5740",
        ipv6: "IPv6 \u4F4D\u5740",
        cidrv4: "IPv4 \u7BC4\u570D",
        cidrv6: "IPv6 \u7BC4\u570D",
        base64: "base64 \u7DE8\u78BC\u5B57\u4E32",
        base64url: "base64url \u7DE8\u78BC\u5B57\u4E32",
        json_string: "JSON \u5B57\u4E32",
        e164: "E.164 \u6578\u503C",
        jwt: "JWT",
        template_literal: "\u8F38\u5165"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\u7121\u6548\u7684\u8F38\u5165\u503C\uFF1A\u9810\u671F\u70BA ${issue2.expected}\uFF0C\u4F46\u6536\u5230 ${parsedType7(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `\u7121\u6548\u7684\u8F38\u5165\u503C\uFF1A\u9810\u671F\u70BA ${stringifyPrimitive(issue2.values[0])}`;
            return `\u7121\u6548\u7684\u9078\u9805\uFF1A\u9810\u671F\u70BA\u4EE5\u4E0B\u5176\u4E2D\u4E4B\u4E00 ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `\u6578\u503C\u904E\u5927\uFF1A\u9810\u671F ${issue2.origin ?? "\u503C"} \u61C9\u70BA ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "\u500B\u5143\u7D20"}`;
            return `\u6578\u503C\u904E\u5927\uFF1A\u9810\u671F ${issue2.origin ?? "\u503C"} \u61C9\u70BA ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `\u6578\u503C\u904E\u5C0F\uFF1A\u9810\u671F ${issue2.origin} \u61C9\u70BA ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `\u6578\u503C\u904E\u5C0F\uFF1A\u9810\u671F ${issue2.origin} \u61C9\u70BA ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with") {
              return `\u7121\u6548\u7684\u5B57\u4E32\uFF1A\u5FC5\u9808\u4EE5 "${_issue.prefix}" \u958B\u982D`;
            }
            if (_issue.format === "ends_with")
              return `\u7121\u6548\u7684\u5B57\u4E32\uFF1A\u5FC5\u9808\u4EE5 "${_issue.suffix}" \u7D50\u5C3E`;
            if (_issue.format === "includes")
              return `\u7121\u6548\u7684\u5B57\u4E32\uFF1A\u5FC5\u9808\u5305\u542B "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `\u7121\u6548\u7684\u5B57\u4E32\uFF1A\u5FC5\u9808\u7B26\u5408\u683C\u5F0F ${_issue.pattern}`;
            return `\u7121\u6548\u7684 ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `\u7121\u6548\u7684\u6578\u5B57\uFF1A\u5FC5\u9808\u70BA ${issue2.divisor} \u7684\u500D\u6578`;
          case "unrecognized_keys":
            return `\u7121\u6CD5\u8B58\u5225\u7684\u9375\u503C${issue2.keys.length > 1 ? "\u5011" : ""}\uFF1A${joinValues(issue2.keys, "\u3001")}`;
          case "invalid_key":
            return `${issue2.origin} \u4E2D\u6709\u7121\u6548\u7684\u9375\u503C`;
          case "invalid_union":
            return "\u7121\u6548\u7684\u8F38\u5165\u503C";
          case "invalid_element":
            return `${issue2.origin} \u4E2D\u6709\u7121\u6548\u7684\u503C`;
          default:
            return `\u7121\u6548\u7684\u8F38\u5165\u503C`;
        }
      };
    }, "error");
    __name2(zh_TW_default, "default");
  }
});
function yo_default() {
  return {
    localeError: error44()
  };
}
__name(yo_default, "yo_default");
var error44;
var init_yo = __esm({
  "../node_modules/zod/v4/locales/yo.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util();
    error44 = /* @__PURE__ */ __name2(() => {
      const Sizable = {
        string: { unit: "\xE0mi", verb: "n\xED" },
        file: { unit: "bytes", verb: "n\xED" },
        array: { unit: "nkan", verb: "n\xED" },
        set: { unit: "nkan", verb: "n\xED" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      __name(getSizing, "getSizing");
      __name2(getSizing, "getSizing");
      const parsedType7 = /* @__PURE__ */ __name2((data) => {
        const t2 = typeof data;
        switch (t2) {
          case "number": {
            return Number.isNaN(data) ? "NaN" : "n\u1ECD\u0301mb\xE0";
          }
          case "object": {
            if (Array.isArray(data)) {
              return "akop\u1ECD";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
        }
        return t2;
      }, "parsedType");
      const Nouns = {
        regex: "\u1EB9\u0300r\u1ECD \xECb\xE1w\u1ECDl\xE9",
        email: "\xE0d\xEDr\u1EB9\u0301s\xEC \xECm\u1EB9\u0301l\xEC",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "\xE0k\xF3k\xF2 ISO",
        date: "\u1ECDj\u1ECD\u0301 ISO",
        time: "\xE0k\xF3k\xF2 ISO",
        duration: "\xE0k\xF3k\xF2 t\xF3 p\xE9 ISO",
        ipv4: "\xE0d\xEDr\u1EB9\u0301s\xEC IPv4",
        ipv6: "\xE0d\xEDr\u1EB9\u0301s\xEC IPv6",
        cidrv4: "\xE0gb\xE8gb\xE8 IPv4",
        cidrv6: "\xE0gb\xE8gb\xE8 IPv6",
        base64: "\u1ECD\u0300r\u1ECD\u0300 t\xED a k\u1ECD\u0301 n\xED base64",
        base64url: "\u1ECD\u0300r\u1ECD\u0300 base64url",
        json_string: "\u1ECD\u0300r\u1ECD\u0300 JSON",
        e164: "n\u1ECD\u0301mb\xE0 E.164",
        jwt: "JWT",
        template_literal: "\u1EB9\u0300r\u1ECD \xECb\xE1w\u1ECDl\xE9"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\xCCb\xE1w\u1ECDl\xE9 a\u1E63\xEC\u1E63e: a n\xED l\xE1ti fi ${issue2.expected}, \xE0m\u1ECD\u0300 a r\xED ${parsedType7(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `\xCCb\xE1w\u1ECDl\xE9 a\u1E63\xEC\u1E63e: a n\xED l\xE1ti fi ${stringifyPrimitive(issue2.values[0])}`;
            return `\xC0\u1E63\xE0y\xE0n a\u1E63\xEC\u1E63e: yan \u1ECD\u0300kan l\xE1ra ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `T\xF3 p\u1ECD\u0300 j\xF9: a n\xED l\xE1ti j\u1EB9\u0301 p\xE9 ${issue2.origin ?? "iye"} ${sizing.verb} ${adj}${issue2.maximum} ${sizing.unit}`;
            return `T\xF3 p\u1ECD\u0300 j\xF9: a n\xED l\xE1ti j\u1EB9\u0301 ${adj}${issue2.maximum}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `K\xE9r\xE9 ju: a n\xED l\xE1ti j\u1EB9\u0301 p\xE9 ${issue2.origin} ${sizing.verb} ${adj}${issue2.minimum} ${sizing.unit}`;
            return `K\xE9r\xE9 ju: a n\xED l\xE1ti j\u1EB9\u0301 ${adj}${issue2.minimum}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `\u1ECC\u0300r\u1ECD\u0300 a\u1E63\xEC\u1E63e: gb\u1ECD\u0301d\u1ECD\u0300 b\u1EB9\u0300r\u1EB9\u0300 p\u1EB9\u0300l\xFA "${_issue.prefix}"`;
            if (_issue.format === "ends_with")
              return `\u1ECC\u0300r\u1ECD\u0300 a\u1E63\xEC\u1E63e: gb\u1ECD\u0301d\u1ECD\u0300 par\xED p\u1EB9\u0300l\xFA "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `\u1ECC\u0300r\u1ECD\u0300 a\u1E63\xEC\u1E63e: gb\u1ECD\u0301d\u1ECD\u0300 n\xED "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `\u1ECC\u0300r\u1ECD\u0300 a\u1E63\xEC\u1E63e: gb\u1ECD\u0301d\u1ECD\u0300 b\xE1 \xE0p\u1EB9\u1EB9r\u1EB9 mu ${_issue.pattern}`;
            return `A\u1E63\xEC\u1E63e: ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `N\u1ECD\u0301mb\xE0 a\u1E63\xEC\u1E63e: gb\u1ECD\u0301d\u1ECD\u0300 j\u1EB9\u0301 \xE8y\xE0 p\xEDp\xEDn ti ${issue2.divisor}`;
          case "unrecognized_keys":
            return `B\u1ECDt\xECn\xEC \xE0\xECm\u1ECD\u0300: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `B\u1ECDt\xECn\xEC a\u1E63\xEC\u1E63e n\xEDn\xFA ${issue2.origin}`;
          case "invalid_union":
            return "\xCCb\xE1w\u1ECDl\xE9 a\u1E63\xEC\u1E63e";
          case "invalid_element":
            return `Iye a\u1E63\xEC\u1E63e n\xEDn\xFA ${issue2.origin}`;
          default:
            return "\xCCb\xE1w\u1ECDl\xE9 a\u1E63\xEC\u1E63e";
        }
      };
    }, "error");
    __name2(yo_default, "default");
  }
});
var locales_exports = {};
__export(locales_exports, {
  ar: /* @__PURE__ */ __name(() => ar_default, "ar"),
  az: /* @__PURE__ */ __name(() => az_default, "az"),
  be: /* @__PURE__ */ __name(() => be_default, "be"),
  ca: /* @__PURE__ */ __name(() => ca_default, "ca"),
  cs: /* @__PURE__ */ __name(() => cs_default, "cs"),
  da: /* @__PURE__ */ __name(() => da_default, "da"),
  de: /* @__PURE__ */ __name(() => de_default, "de"),
  en: /* @__PURE__ */ __name(() => en_default, "en"),
  eo: /* @__PURE__ */ __name(() => eo_default, "eo"),
  es: /* @__PURE__ */ __name(() => es_default, "es"),
  fa: /* @__PURE__ */ __name(() => fa_default, "fa"),
  fi: /* @__PURE__ */ __name(() => fi_default, "fi"),
  fr: /* @__PURE__ */ __name(() => fr_default, "fr"),
  frCA: /* @__PURE__ */ __name(() => fr_CA_default, "frCA"),
  he: /* @__PURE__ */ __name(() => he_default, "he"),
  hu: /* @__PURE__ */ __name(() => hu_default, "hu"),
  id: /* @__PURE__ */ __name(() => id_default, "id"),
  is: /* @__PURE__ */ __name(() => is_default, "is"),
  it: /* @__PURE__ */ __name(() => it_default, "it"),
  ja: /* @__PURE__ */ __name(() => ja_default, "ja"),
  ka: /* @__PURE__ */ __name(() => ka_default, "ka"),
  kh: /* @__PURE__ */ __name(() => kh_default, "kh"),
  km: /* @__PURE__ */ __name(() => km_default, "km"),
  ko: /* @__PURE__ */ __name(() => ko_default, "ko"),
  lt: /* @__PURE__ */ __name(() => lt_default, "lt"),
  mk: /* @__PURE__ */ __name(() => mk_default, "mk"),
  ms: /* @__PURE__ */ __name(() => ms_default, "ms"),
  nl: /* @__PURE__ */ __name(() => nl_default, "nl"),
  no: /* @__PURE__ */ __name(() => no_default, "no"),
  ota: /* @__PURE__ */ __name(() => ota_default, "ota"),
  pl: /* @__PURE__ */ __name(() => pl_default, "pl"),
  ps: /* @__PURE__ */ __name(() => ps_default, "ps"),
  pt: /* @__PURE__ */ __name(() => pt_default, "pt"),
  ru: /* @__PURE__ */ __name(() => ru_default, "ru"),
  sl: /* @__PURE__ */ __name(() => sl_default, "sl"),
  sv: /* @__PURE__ */ __name(() => sv_default, "sv"),
  ta: /* @__PURE__ */ __name(() => ta_default, "ta"),
  th: /* @__PURE__ */ __name(() => th_default, "th"),
  tr: /* @__PURE__ */ __name(() => tr_default, "tr"),
  ua: /* @__PURE__ */ __name(() => ua_default, "ua"),
  uk: /* @__PURE__ */ __name(() => uk_default, "uk"),
  ur: /* @__PURE__ */ __name(() => ur_default, "ur"),
  vi: /* @__PURE__ */ __name(() => vi_default, "vi"),
  yo: /* @__PURE__ */ __name(() => yo_default, "yo"),
  zhCN: /* @__PURE__ */ __name(() => zh_CN_default, "zhCN"),
  zhTW: /* @__PURE__ */ __name(() => zh_TW_default, "zhTW")
});
var init_locales = __esm({
  "../node_modules/zod/v4/locales/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_ar();
    init_az();
    init_be();
    init_ca();
    init_cs();
    init_da();
    init_de();
    init_en();
    init_eo();
    init_es();
    init_fa();
    init_fi();
    init_fr();
    init_fr_CA();
    init_he();
    init_hu();
    init_id();
    init_is();
    init_it();
    init_ja();
    init_ka();
    init_kh();
    init_km();
    init_ko();
    init_lt();
    init_mk();
    init_ms();
    init_nl();
    init_no();
    init_ota();
    init_ps();
    init_pl();
    init_pt();
    init_ru();
    init_sl();
    init_sv();
    init_ta();
    init_th();
    init_tr();
    init_ua();
    init_uk();
    init_ur();
    init_vi();
    init_zh_CN();
    init_zh_TW();
    init_yo();
  }
});
function registry() {
  return new $ZodRegistry();
}
__name(registry, "registry");
var $output;
var $input;
var $ZodRegistry;
var globalRegistry;
var init_registries = __esm({
  "../node_modules/zod/v4/core/registries.js"() {
    init_functionsRoutes_0_09879299104094341();
    $output = Symbol("ZodOutput");
    $input = Symbol("ZodInput");
    $ZodRegistry = class {
      static {
        __name(this, "$ZodRegistry");
      }
      static {
        __name2(this, "$ZodRegistry");
      }
      constructor() {
        this._map = /* @__PURE__ */ new WeakMap();
        this._idmap = /* @__PURE__ */ new Map();
      }
      add(schema, ..._meta) {
        const meta = _meta[0];
        this._map.set(schema, meta);
        if (meta && typeof meta === "object" && "id" in meta) {
          if (this._idmap.has(meta.id)) {
            throw new Error(`ID ${meta.id} already exists in the registry`);
          }
          this._idmap.set(meta.id, schema);
        }
        return this;
      }
      clear() {
        this._map = /* @__PURE__ */ new WeakMap();
        this._idmap = /* @__PURE__ */ new Map();
        return this;
      }
      remove(schema) {
        const meta = this._map.get(schema);
        if (meta && typeof meta === "object" && "id" in meta) {
          this._idmap.delete(meta.id);
        }
        this._map.delete(schema);
        return this;
      }
      get(schema) {
        const p2 = schema._zod.parent;
        if (p2) {
          const pm = { ...this.get(p2) ?? {} };
          delete pm.id;
          const f2 = { ...pm, ...this._map.get(schema) };
          return Object.keys(f2).length ? f2 : void 0;
        }
        return this._map.get(schema);
      }
      has(schema) {
        return this._map.has(schema);
      }
    };
    __name2(registry, "registry");
    globalRegistry = /* @__PURE__ */ registry();
  }
});
function _string(Class2, params) {
  return new Class2({
    type: "string",
    ...normalizeParams(params)
  });
}
__name(_string, "_string");
function _coercedString(Class2, params) {
  return new Class2({
    type: "string",
    coerce: true,
    ...normalizeParams(params)
  });
}
__name(_coercedString, "_coercedString");
function _email(Class2, params) {
  return new Class2({
    type: "string",
    format: "email",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
__name(_email, "_email");
function _guid(Class2, params) {
  return new Class2({
    type: "string",
    format: "guid",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
__name(_guid, "_guid");
function _uuid(Class2, params) {
  return new Class2({
    type: "string",
    format: "uuid",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
__name(_uuid, "_uuid");
function _uuidv4(Class2, params) {
  return new Class2({
    type: "string",
    format: "uuid",
    check: "string_format",
    abort: false,
    version: "v4",
    ...normalizeParams(params)
  });
}
__name(_uuidv4, "_uuidv4");
function _uuidv6(Class2, params) {
  return new Class2({
    type: "string",
    format: "uuid",
    check: "string_format",
    abort: false,
    version: "v6",
    ...normalizeParams(params)
  });
}
__name(_uuidv6, "_uuidv6");
function _uuidv7(Class2, params) {
  return new Class2({
    type: "string",
    format: "uuid",
    check: "string_format",
    abort: false,
    version: "v7",
    ...normalizeParams(params)
  });
}
__name(_uuidv7, "_uuidv7");
function _url(Class2, params) {
  return new Class2({
    type: "string",
    format: "url",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
__name(_url, "_url");
function _emoji2(Class2, params) {
  return new Class2({
    type: "string",
    format: "emoji",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
__name(_emoji2, "_emoji2");
function _nanoid(Class2, params) {
  return new Class2({
    type: "string",
    format: "nanoid",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
__name(_nanoid, "_nanoid");
function _cuid(Class2, params) {
  return new Class2({
    type: "string",
    format: "cuid",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
__name(_cuid, "_cuid");
function _cuid2(Class2, params) {
  return new Class2({
    type: "string",
    format: "cuid2",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
__name(_cuid2, "_cuid2");
function _ulid(Class2, params) {
  return new Class2({
    type: "string",
    format: "ulid",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
__name(_ulid, "_ulid");
function _xid(Class2, params) {
  return new Class2({
    type: "string",
    format: "xid",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
__name(_xid, "_xid");
function _ksuid(Class2, params) {
  return new Class2({
    type: "string",
    format: "ksuid",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
__name(_ksuid, "_ksuid");
function _ipv4(Class2, params) {
  return new Class2({
    type: "string",
    format: "ipv4",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
__name(_ipv4, "_ipv4");
function _ipv6(Class2, params) {
  return new Class2({
    type: "string",
    format: "ipv6",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
__name(_ipv6, "_ipv6");
function _cidrv4(Class2, params) {
  return new Class2({
    type: "string",
    format: "cidrv4",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
__name(_cidrv4, "_cidrv4");
function _cidrv6(Class2, params) {
  return new Class2({
    type: "string",
    format: "cidrv6",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
__name(_cidrv6, "_cidrv6");
function _base64(Class2, params) {
  return new Class2({
    type: "string",
    format: "base64",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
__name(_base64, "_base64");
function _base64url(Class2, params) {
  return new Class2({
    type: "string",
    format: "base64url",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
__name(_base64url, "_base64url");
function _e164(Class2, params) {
  return new Class2({
    type: "string",
    format: "e164",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
__name(_e164, "_e164");
function _jwt(Class2, params) {
  return new Class2({
    type: "string",
    format: "jwt",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
__name(_jwt, "_jwt");
function _isoDateTime(Class2, params) {
  return new Class2({
    type: "string",
    format: "datetime",
    check: "string_format",
    offset: false,
    local: false,
    precision: null,
    ...normalizeParams(params)
  });
}
__name(_isoDateTime, "_isoDateTime");
function _isoDate(Class2, params) {
  return new Class2({
    type: "string",
    format: "date",
    check: "string_format",
    ...normalizeParams(params)
  });
}
__name(_isoDate, "_isoDate");
function _isoTime(Class2, params) {
  return new Class2({
    type: "string",
    format: "time",
    check: "string_format",
    precision: null,
    ...normalizeParams(params)
  });
}
__name(_isoTime, "_isoTime");
function _isoDuration(Class2, params) {
  return new Class2({
    type: "string",
    format: "duration",
    check: "string_format",
    ...normalizeParams(params)
  });
}
__name(_isoDuration, "_isoDuration");
function _number(Class2, params) {
  return new Class2({
    type: "number",
    checks: [],
    ...normalizeParams(params)
  });
}
__name(_number, "_number");
function _coercedNumber(Class2, params) {
  return new Class2({
    type: "number",
    coerce: true,
    checks: [],
    ...normalizeParams(params)
  });
}
__name(_coercedNumber, "_coercedNumber");
function _int(Class2, params) {
  return new Class2({
    type: "number",
    check: "number_format",
    abort: false,
    format: "safeint",
    ...normalizeParams(params)
  });
}
__name(_int, "_int");
function _float32(Class2, params) {
  return new Class2({
    type: "number",
    check: "number_format",
    abort: false,
    format: "float32",
    ...normalizeParams(params)
  });
}
__name(_float32, "_float32");
function _float64(Class2, params) {
  return new Class2({
    type: "number",
    check: "number_format",
    abort: false,
    format: "float64",
    ...normalizeParams(params)
  });
}
__name(_float64, "_float64");
function _int32(Class2, params) {
  return new Class2({
    type: "number",
    check: "number_format",
    abort: false,
    format: "int32",
    ...normalizeParams(params)
  });
}
__name(_int32, "_int32");
function _uint32(Class2, params) {
  return new Class2({
    type: "number",
    check: "number_format",
    abort: false,
    format: "uint32",
    ...normalizeParams(params)
  });
}
__name(_uint32, "_uint32");
function _boolean(Class2, params) {
  return new Class2({
    type: "boolean",
    ...normalizeParams(params)
  });
}
__name(_boolean, "_boolean");
function _coercedBoolean(Class2, params) {
  return new Class2({
    type: "boolean",
    coerce: true,
    ...normalizeParams(params)
  });
}
__name(_coercedBoolean, "_coercedBoolean");
function _bigint(Class2, params) {
  return new Class2({
    type: "bigint",
    ...normalizeParams(params)
  });
}
__name(_bigint, "_bigint");
function _coercedBigint(Class2, params) {
  return new Class2({
    type: "bigint",
    coerce: true,
    ...normalizeParams(params)
  });
}
__name(_coercedBigint, "_coercedBigint");
function _int64(Class2, params) {
  return new Class2({
    type: "bigint",
    check: "bigint_format",
    abort: false,
    format: "int64",
    ...normalizeParams(params)
  });
}
__name(_int64, "_int64");
function _uint64(Class2, params) {
  return new Class2({
    type: "bigint",
    check: "bigint_format",
    abort: false,
    format: "uint64",
    ...normalizeParams(params)
  });
}
__name(_uint64, "_uint64");
function _symbol(Class2, params) {
  return new Class2({
    type: "symbol",
    ...normalizeParams(params)
  });
}
__name(_symbol, "_symbol");
function _undefined2(Class2, params) {
  return new Class2({
    type: "undefined",
    ...normalizeParams(params)
  });
}
__name(_undefined2, "_undefined2");
function _null2(Class2, params) {
  return new Class2({
    type: "null",
    ...normalizeParams(params)
  });
}
__name(_null2, "_null2");
function _any(Class2) {
  return new Class2({
    type: "any"
  });
}
__name(_any, "_any");
function _unknown(Class2) {
  return new Class2({
    type: "unknown"
  });
}
__name(_unknown, "_unknown");
function _never(Class2, params) {
  return new Class2({
    type: "never",
    ...normalizeParams(params)
  });
}
__name(_never, "_never");
function _void(Class2, params) {
  return new Class2({
    type: "void",
    ...normalizeParams(params)
  });
}
__name(_void, "_void");
function _date(Class2, params) {
  return new Class2({
    type: "date",
    ...normalizeParams(params)
  });
}
__name(_date, "_date");
function _coercedDate(Class2, params) {
  return new Class2({
    type: "date",
    coerce: true,
    ...normalizeParams(params)
  });
}
__name(_coercedDate, "_coercedDate");
function _nan(Class2, params) {
  return new Class2({
    type: "nan",
    ...normalizeParams(params)
  });
}
__name(_nan, "_nan");
function _lt(value, params) {
  return new $ZodCheckLessThan({
    check: "less_than",
    ...normalizeParams(params),
    value,
    inclusive: false
  });
}
__name(_lt, "_lt");
function _lte(value, params) {
  return new $ZodCheckLessThan({
    check: "less_than",
    ...normalizeParams(params),
    value,
    inclusive: true
  });
}
__name(_lte, "_lte");
function _gt(value, params) {
  return new $ZodCheckGreaterThan({
    check: "greater_than",
    ...normalizeParams(params),
    value,
    inclusive: false
  });
}
__name(_gt, "_gt");
function _gte(value, params) {
  return new $ZodCheckGreaterThan({
    check: "greater_than",
    ...normalizeParams(params),
    value,
    inclusive: true
  });
}
__name(_gte, "_gte");
function _positive(params) {
  return _gt(0, params);
}
__name(_positive, "_positive");
function _negative(params) {
  return _lt(0, params);
}
__name(_negative, "_negative");
function _nonpositive(params) {
  return _lte(0, params);
}
__name(_nonpositive, "_nonpositive");
function _nonnegative(params) {
  return _gte(0, params);
}
__name(_nonnegative, "_nonnegative");
function _multipleOf(value, params) {
  return new $ZodCheckMultipleOf({
    check: "multiple_of",
    ...normalizeParams(params),
    value
  });
}
__name(_multipleOf, "_multipleOf");
function _maxSize(maximum, params) {
  return new $ZodCheckMaxSize({
    check: "max_size",
    ...normalizeParams(params),
    maximum
  });
}
__name(_maxSize, "_maxSize");
function _minSize(minimum, params) {
  return new $ZodCheckMinSize({
    check: "min_size",
    ...normalizeParams(params),
    minimum
  });
}
__name(_minSize, "_minSize");
function _size(size, params) {
  return new $ZodCheckSizeEquals({
    check: "size_equals",
    ...normalizeParams(params),
    size
  });
}
__name(_size, "_size");
function _maxLength(maximum, params) {
  const ch2 = new $ZodCheckMaxLength({
    check: "max_length",
    ...normalizeParams(params),
    maximum
  });
  return ch2;
}
__name(_maxLength, "_maxLength");
function _minLength(minimum, params) {
  return new $ZodCheckMinLength({
    check: "min_length",
    ...normalizeParams(params),
    minimum
  });
}
__name(_minLength, "_minLength");
function _length(length, params) {
  return new $ZodCheckLengthEquals({
    check: "length_equals",
    ...normalizeParams(params),
    length
  });
}
__name(_length, "_length");
function _regex(pattern, params) {
  return new $ZodCheckRegex({
    check: "string_format",
    format: "regex",
    ...normalizeParams(params),
    pattern
  });
}
__name(_regex, "_regex");
function _lowercase(params) {
  return new $ZodCheckLowerCase({
    check: "string_format",
    format: "lowercase",
    ...normalizeParams(params)
  });
}
__name(_lowercase, "_lowercase");
function _uppercase(params) {
  return new $ZodCheckUpperCase({
    check: "string_format",
    format: "uppercase",
    ...normalizeParams(params)
  });
}
__name(_uppercase, "_uppercase");
function _includes(includes, params) {
  return new $ZodCheckIncludes({
    check: "string_format",
    format: "includes",
    ...normalizeParams(params),
    includes
  });
}
__name(_includes, "_includes");
function _startsWith(prefix, params) {
  return new $ZodCheckStartsWith({
    check: "string_format",
    format: "starts_with",
    ...normalizeParams(params),
    prefix
  });
}
__name(_startsWith, "_startsWith");
function _endsWith(suffix, params) {
  return new $ZodCheckEndsWith({
    check: "string_format",
    format: "ends_with",
    ...normalizeParams(params),
    suffix
  });
}
__name(_endsWith, "_endsWith");
function _property(property, schema, params) {
  return new $ZodCheckProperty({
    check: "property",
    property,
    schema,
    ...normalizeParams(params)
  });
}
__name(_property, "_property");
function _mime(types, params) {
  return new $ZodCheckMimeType({
    check: "mime_type",
    mime: types,
    ...normalizeParams(params)
  });
}
__name(_mime, "_mime");
function _overwrite(tx) {
  return new $ZodCheckOverwrite({
    check: "overwrite",
    tx
  });
}
__name(_overwrite, "_overwrite");
function _normalize(form) {
  return _overwrite((input) => input.normalize(form));
}
__name(_normalize, "_normalize");
function _trim() {
  return _overwrite((input) => input.trim());
}
__name(_trim, "_trim");
function _toLowerCase() {
  return _overwrite((input) => input.toLowerCase());
}
__name(_toLowerCase, "_toLowerCase");
function _toUpperCase() {
  return _overwrite((input) => input.toUpperCase());
}
__name(_toUpperCase, "_toUpperCase");
function _array(Class2, element, params) {
  return new Class2({
    type: "array",
    element,
    // get element() {
    //   return element;
    // },
    ...normalizeParams(params)
  });
}
__name(_array, "_array");
function _union(Class2, options, params) {
  return new Class2({
    type: "union",
    options,
    ...normalizeParams(params)
  });
}
__name(_union, "_union");
function _discriminatedUnion(Class2, discriminator, options, params) {
  return new Class2({
    type: "union",
    options,
    discriminator,
    ...normalizeParams(params)
  });
}
__name(_discriminatedUnion, "_discriminatedUnion");
function _intersection(Class2, left, right) {
  return new Class2({
    type: "intersection",
    left,
    right
  });
}
__name(_intersection, "_intersection");
function _tuple(Class2, items, _paramsOrRest, _params) {
  const hasRest = _paramsOrRest instanceof $ZodType;
  const params = hasRest ? _params : _paramsOrRest;
  const rest = hasRest ? _paramsOrRest : null;
  return new Class2({
    type: "tuple",
    items,
    rest,
    ...normalizeParams(params)
  });
}
__name(_tuple, "_tuple");
function _record(Class2, keyType, valueType, params) {
  return new Class2({
    type: "record",
    keyType,
    valueType,
    ...normalizeParams(params)
  });
}
__name(_record, "_record");
function _map(Class2, keyType, valueType, params) {
  return new Class2({
    type: "map",
    keyType,
    valueType,
    ...normalizeParams(params)
  });
}
__name(_map, "_map");
function _set(Class2, valueType, params) {
  return new Class2({
    type: "set",
    valueType,
    ...normalizeParams(params)
  });
}
__name(_set, "_set");
function _enum(Class2, values, params) {
  const entries = Array.isArray(values) ? Object.fromEntries(values.map((v2) => [v2, v2])) : values;
  return new Class2({
    type: "enum",
    entries,
    ...normalizeParams(params)
  });
}
__name(_enum, "_enum");
function _nativeEnum(Class2, entries, params) {
  return new Class2({
    type: "enum",
    entries,
    ...normalizeParams(params)
  });
}
__name(_nativeEnum, "_nativeEnum");
function _literal(Class2, value, params) {
  return new Class2({
    type: "literal",
    values: Array.isArray(value) ? value : [value],
    ...normalizeParams(params)
  });
}
__name(_literal, "_literal");
function _file(Class2, params) {
  return new Class2({
    type: "file",
    ...normalizeParams(params)
  });
}
__name(_file, "_file");
function _transform(Class2, fn) {
  return new Class2({
    type: "transform",
    transform: fn
  });
}
__name(_transform, "_transform");
function _optional(Class2, innerType) {
  return new Class2({
    type: "optional",
    innerType
  });
}
__name(_optional, "_optional");
function _nullable(Class2, innerType) {
  return new Class2({
    type: "nullable",
    innerType
  });
}
__name(_nullable, "_nullable");
function _default(Class2, innerType, defaultValue) {
  return new Class2({
    type: "default",
    innerType,
    get defaultValue() {
      return typeof defaultValue === "function" ? defaultValue() : shallowClone(defaultValue);
    }
  });
}
__name(_default, "_default");
function _nonoptional(Class2, innerType, params) {
  return new Class2({
    type: "nonoptional",
    innerType,
    ...normalizeParams(params)
  });
}
__name(_nonoptional, "_nonoptional");
function _success(Class2, innerType) {
  return new Class2({
    type: "success",
    innerType
  });
}
__name(_success, "_success");
function _catch(Class2, innerType, catchValue) {
  return new Class2({
    type: "catch",
    innerType,
    catchValue: typeof catchValue === "function" ? catchValue : () => catchValue
  });
}
__name(_catch, "_catch");
function _pipe(Class2, in_, out) {
  return new Class2({
    type: "pipe",
    in: in_,
    out
  });
}
__name(_pipe, "_pipe");
function _readonly(Class2, innerType) {
  return new Class2({
    type: "readonly",
    innerType
  });
}
__name(_readonly, "_readonly");
function _templateLiteral(Class2, parts, params) {
  return new Class2({
    type: "template_literal",
    parts,
    ...normalizeParams(params)
  });
}
__name(_templateLiteral, "_templateLiteral");
function _lazy(Class2, getter) {
  return new Class2({
    type: "lazy",
    getter
  });
}
__name(_lazy, "_lazy");
function _promise(Class2, innerType) {
  return new Class2({
    type: "promise",
    innerType
  });
}
__name(_promise, "_promise");
function _custom(Class2, fn, _params) {
  const norm = normalizeParams(_params);
  norm.abort ?? (norm.abort = true);
  const schema = new Class2({
    type: "custom",
    check: "custom",
    fn,
    ...norm
  });
  return schema;
}
__name(_custom, "_custom");
function _refine(Class2, fn, _params) {
  const schema = new Class2({
    type: "custom",
    check: "custom",
    fn,
    ...normalizeParams(_params)
  });
  return schema;
}
__name(_refine, "_refine");
function _superRefine(fn) {
  const ch2 = _check((payload) => {
    payload.addIssue = (issue2) => {
      if (typeof issue2 === "string") {
        payload.issues.push(issue(issue2, payload.value, ch2._zod.def));
      } else {
        const _issue = issue2;
        if (_issue.fatal)
          _issue.continue = false;
        _issue.code ?? (_issue.code = "custom");
        _issue.input ?? (_issue.input = payload.value);
        _issue.inst ?? (_issue.inst = ch2);
        _issue.continue ?? (_issue.continue = !ch2._zod.def.abort);
        payload.issues.push(issue(_issue));
      }
    };
    return fn(payload.value, payload);
  });
  return ch2;
}
__name(_superRefine, "_superRefine");
function _check(fn, params) {
  const ch2 = new $ZodCheck({
    check: "custom",
    ...normalizeParams(params)
  });
  ch2._zod.check = fn;
  return ch2;
}
__name(_check, "_check");
function _stringbool(Classes, _params) {
  const params = normalizeParams(_params);
  let truthyArray = params.truthy ?? ["true", "1", "yes", "on", "y", "enabled"];
  let falsyArray = params.falsy ?? ["false", "0", "no", "off", "n", "disabled"];
  if (params.case !== "sensitive") {
    truthyArray = truthyArray.map((v2) => typeof v2 === "string" ? v2.toLowerCase() : v2);
    falsyArray = falsyArray.map((v2) => typeof v2 === "string" ? v2.toLowerCase() : v2);
  }
  const truthySet = new Set(truthyArray);
  const falsySet = new Set(falsyArray);
  const _Codec = Classes.Codec ?? $ZodCodec;
  const _Boolean = Classes.Boolean ?? $ZodBoolean;
  const _String = Classes.String ?? $ZodString;
  const stringSchema = new _String({ type: "string", error: params.error });
  const booleanSchema = new _Boolean({ type: "boolean", error: params.error });
  const codec2 = new _Codec({
    type: "pipe",
    in: stringSchema,
    out: booleanSchema,
    transform: /* @__PURE__ */ __name2((input, payload) => {
      let data = input;
      if (params.case !== "sensitive")
        data = data.toLowerCase();
      if (truthySet.has(data)) {
        return true;
      } else if (falsySet.has(data)) {
        return false;
      } else {
        payload.issues.push({
          code: "invalid_value",
          expected: "stringbool",
          values: [...truthySet, ...falsySet],
          input: payload.value,
          inst: codec2,
          continue: false
        });
        return {};
      }
    }, "transform"),
    reverseTransform: /* @__PURE__ */ __name2((input, _payload) => {
      if (input === true) {
        return truthyArray[0] || "true";
      } else {
        return falsyArray[0] || "false";
      }
    }, "reverseTransform"),
    error: params.error
  });
  return codec2;
}
__name(_stringbool, "_stringbool");
function _stringFormat(Class2, format, fnOrRegex, _params = {}) {
  const params = normalizeParams(_params);
  const def = {
    ...normalizeParams(_params),
    check: "string_format",
    type: "string",
    format,
    fn: typeof fnOrRegex === "function" ? fnOrRegex : (val) => fnOrRegex.test(val),
    ...params
  };
  if (fnOrRegex instanceof RegExp) {
    def.pattern = fnOrRegex;
  }
  const inst = new Class2(def);
  return inst;
}
__name(_stringFormat, "_stringFormat");
var TimePrecision;
var init_api = __esm({
  "../node_modules/zod/v4/core/api.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_checks();
    init_schemas();
    init_util();
    __name2(_string, "_string");
    __name2(_coercedString, "_coercedString");
    __name2(_email, "_email");
    __name2(_guid, "_guid");
    __name2(_uuid, "_uuid");
    __name2(_uuidv4, "_uuidv4");
    __name2(_uuidv6, "_uuidv6");
    __name2(_uuidv7, "_uuidv7");
    __name2(_url, "_url");
    __name2(_emoji2, "_emoji");
    __name2(_nanoid, "_nanoid");
    __name2(_cuid, "_cuid");
    __name2(_cuid2, "_cuid2");
    __name2(_ulid, "_ulid");
    __name2(_xid, "_xid");
    __name2(_ksuid, "_ksuid");
    __name2(_ipv4, "_ipv4");
    __name2(_ipv6, "_ipv6");
    __name2(_cidrv4, "_cidrv4");
    __name2(_cidrv6, "_cidrv6");
    __name2(_base64, "_base64");
    __name2(_base64url, "_base64url");
    __name2(_e164, "_e164");
    __name2(_jwt, "_jwt");
    TimePrecision = {
      Any: null,
      Minute: -1,
      Second: 0,
      Millisecond: 3,
      Microsecond: 6
    };
    __name2(_isoDateTime, "_isoDateTime");
    __name2(_isoDate, "_isoDate");
    __name2(_isoTime, "_isoTime");
    __name2(_isoDuration, "_isoDuration");
    __name2(_number, "_number");
    __name2(_coercedNumber, "_coercedNumber");
    __name2(_int, "_int");
    __name2(_float32, "_float32");
    __name2(_float64, "_float64");
    __name2(_int32, "_int32");
    __name2(_uint32, "_uint32");
    __name2(_boolean, "_boolean");
    __name2(_coercedBoolean, "_coercedBoolean");
    __name2(_bigint, "_bigint");
    __name2(_coercedBigint, "_coercedBigint");
    __name2(_int64, "_int64");
    __name2(_uint64, "_uint64");
    __name2(_symbol, "_symbol");
    __name2(_undefined2, "_undefined");
    __name2(_null2, "_null");
    __name2(_any, "_any");
    __name2(_unknown, "_unknown");
    __name2(_never, "_never");
    __name2(_void, "_void");
    __name2(_date, "_date");
    __name2(_coercedDate, "_coercedDate");
    __name2(_nan, "_nan");
    __name2(_lt, "_lt");
    __name2(_lte, "_lte");
    __name2(_gt, "_gt");
    __name2(_gte, "_gte");
    __name2(_positive, "_positive");
    __name2(_negative, "_negative");
    __name2(_nonpositive, "_nonpositive");
    __name2(_nonnegative, "_nonnegative");
    __name2(_multipleOf, "_multipleOf");
    __name2(_maxSize, "_maxSize");
    __name2(_minSize, "_minSize");
    __name2(_size, "_size");
    __name2(_maxLength, "_maxLength");
    __name2(_minLength, "_minLength");
    __name2(_length, "_length");
    __name2(_regex, "_regex");
    __name2(_lowercase, "_lowercase");
    __name2(_uppercase, "_uppercase");
    __name2(_includes, "_includes");
    __name2(_startsWith, "_startsWith");
    __name2(_endsWith, "_endsWith");
    __name2(_property, "_property");
    __name2(_mime, "_mime");
    __name2(_overwrite, "_overwrite");
    __name2(_normalize, "_normalize");
    __name2(_trim, "_trim");
    __name2(_toLowerCase, "_toLowerCase");
    __name2(_toUpperCase, "_toUpperCase");
    __name2(_array, "_array");
    __name2(_union, "_union");
    __name2(_discriminatedUnion, "_discriminatedUnion");
    __name2(_intersection, "_intersection");
    __name2(_tuple, "_tuple");
    __name2(_record, "_record");
    __name2(_map, "_map");
    __name2(_set, "_set");
    __name2(_enum, "_enum");
    __name2(_nativeEnum, "_nativeEnum");
    __name2(_literal, "_literal");
    __name2(_file, "_file");
    __name2(_transform, "_transform");
    __name2(_optional, "_optional");
    __name2(_nullable, "_nullable");
    __name2(_default, "_default");
    __name2(_nonoptional, "_nonoptional");
    __name2(_success, "_success");
    __name2(_catch, "_catch");
    __name2(_pipe, "_pipe");
    __name2(_readonly, "_readonly");
    __name2(_templateLiteral, "_templateLiteral");
    __name2(_lazy, "_lazy");
    __name2(_promise, "_promise");
    __name2(_custom, "_custom");
    __name2(_refine, "_refine");
    __name2(_superRefine, "_superRefine");
    __name2(_check, "_check");
    __name2(_stringbool, "_stringbool");
    __name2(_stringFormat, "_stringFormat");
  }
});
function toJSONSchema(input, _params) {
  if (input instanceof $ZodRegistry) {
    const gen2 = new JSONSchemaGenerator(_params);
    const defs = {};
    for (const entry of input._idmap.entries()) {
      const [_, schema] = entry;
      gen2.process(schema);
    }
    const schemas = {};
    const external = {
      registry: input,
      uri: _params?.uri,
      defs
    };
    for (const entry of input._idmap.entries()) {
      const [key, schema] = entry;
      schemas[key] = gen2.emit(schema, {
        ..._params,
        external
      });
    }
    if (Object.keys(defs).length > 0) {
      const defsSegment = gen2.target === "draft-2020-12" ? "$defs" : "definitions";
      schemas.__shared = {
        [defsSegment]: defs
      };
    }
    return { schemas };
  }
  const gen = new JSONSchemaGenerator(_params);
  gen.process(input);
  return gen.emit(input, _params);
}
__name(toJSONSchema, "toJSONSchema");
function isTransforming(_schema, _ctx) {
  const ctx = _ctx ?? { seen: /* @__PURE__ */ new Set() };
  if (ctx.seen.has(_schema))
    return false;
  ctx.seen.add(_schema);
  const schema = _schema;
  const def = schema._zod.def;
  switch (def.type) {
    case "string":
    case "number":
    case "bigint":
    case "boolean":
    case "date":
    case "symbol":
    case "undefined":
    case "null":
    case "any":
    case "unknown":
    case "never":
    case "void":
    case "literal":
    case "enum":
    case "nan":
    case "file":
    case "template_literal":
      return false;
    case "array": {
      return isTransforming(def.element, ctx);
    }
    case "object": {
      for (const key in def.shape) {
        if (isTransforming(def.shape[key], ctx))
          return true;
      }
      return false;
    }
    case "union": {
      for (const option of def.options) {
        if (isTransforming(option, ctx))
          return true;
      }
      return false;
    }
    case "intersection": {
      return isTransforming(def.left, ctx) || isTransforming(def.right, ctx);
    }
    case "tuple": {
      for (const item of def.items) {
        if (isTransforming(item, ctx))
          return true;
      }
      if (def.rest && isTransforming(def.rest, ctx))
        return true;
      return false;
    }
    case "record": {
      return isTransforming(def.keyType, ctx) || isTransforming(def.valueType, ctx);
    }
    case "map": {
      return isTransforming(def.keyType, ctx) || isTransforming(def.valueType, ctx);
    }
    case "set": {
      return isTransforming(def.valueType, ctx);
    }
    // inner types
    case "promise":
    case "optional":
    case "nonoptional":
    case "nullable":
    case "readonly":
      return isTransforming(def.innerType, ctx);
    case "lazy":
      return isTransforming(def.getter(), ctx);
    case "default": {
      return isTransforming(def.innerType, ctx);
    }
    case "prefault": {
      return isTransforming(def.innerType, ctx);
    }
    case "custom": {
      return false;
    }
    case "transform": {
      return true;
    }
    case "pipe": {
      return isTransforming(def.in, ctx) || isTransforming(def.out, ctx);
    }
    case "success": {
      return false;
    }
    case "catch": {
      return false;
    }
    case "function": {
      return false;
    }
    default:
      def;
  }
  throw new Error(`Unknown schema type: ${def.type}`);
}
__name(isTransforming, "isTransforming");
var JSONSchemaGenerator;
var init_to_json_schema = __esm({
  "../node_modules/zod/v4/core/to-json-schema.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_registries();
    init_util();
    JSONSchemaGenerator = class {
      static {
        __name(this, "JSONSchemaGenerator");
      }
      static {
        __name2(this, "JSONSchemaGenerator");
      }
      constructor(params) {
        this.counter = 0;
        this.metadataRegistry = params?.metadata ?? globalRegistry;
        this.target = params?.target ?? "draft-2020-12";
        this.unrepresentable = params?.unrepresentable ?? "throw";
        this.override = params?.override ?? (() => {
        });
        this.io = params?.io ?? "output";
        this.seen = /* @__PURE__ */ new Map();
      }
      process(schema, _params = { path: [], schemaPath: [] }) {
        var _a2;
        const def = schema._zod.def;
        const formatMap = {
          guid: "uuid",
          url: "uri",
          datetime: "date-time",
          json_string: "json-string",
          regex: ""
          // do not set
        };
        const seen = this.seen.get(schema);
        if (seen) {
          seen.count++;
          const isCycle = _params.schemaPath.includes(schema);
          if (isCycle) {
            seen.cycle = _params.path;
          }
          return seen.schema;
        }
        const result = { schema: {}, count: 1, cycle: void 0, path: _params.path };
        this.seen.set(schema, result);
        const overrideSchema = schema._zod.toJSONSchema?.();
        if (overrideSchema) {
          result.schema = overrideSchema;
        } else {
          const params = {
            ..._params,
            schemaPath: [..._params.schemaPath, schema],
            path: _params.path
          };
          const parent = schema._zod.parent;
          if (parent) {
            result.ref = parent;
            this.process(parent, params);
            this.seen.get(parent).isParent = true;
          } else {
            const _json = result.schema;
            switch (def.type) {
              case "string": {
                const json6 = _json;
                json6.type = "string";
                const { minimum, maximum, format, patterns, contentEncoding } = schema._zod.bag;
                if (typeof minimum === "number")
                  json6.minLength = minimum;
                if (typeof maximum === "number")
                  json6.maxLength = maximum;
                if (format) {
                  json6.format = formatMap[format] ?? format;
                  if (json6.format === "")
                    delete json6.format;
                }
                if (contentEncoding)
                  json6.contentEncoding = contentEncoding;
                if (patterns && patterns.size > 0) {
                  const regexes = [...patterns];
                  if (regexes.length === 1)
                    json6.pattern = regexes[0].source;
                  else if (regexes.length > 1) {
                    result.schema.allOf = [
                      ...regexes.map((regex) => ({
                        ...this.target === "draft-7" || this.target === "draft-4" || this.target === "openapi-3.0" ? { type: "string" } : {},
                        pattern: regex.source
                      }))
                    ];
                  }
                }
                break;
              }
              case "number": {
                const json6 = _json;
                const { minimum, maximum, format, multipleOf, exclusiveMaximum, exclusiveMinimum } = schema._zod.bag;
                if (typeof format === "string" && format.includes("int"))
                  json6.type = "integer";
                else
                  json6.type = "number";
                if (typeof exclusiveMinimum === "number") {
                  if (this.target === "draft-4" || this.target === "openapi-3.0") {
                    json6.minimum = exclusiveMinimum;
                    json6.exclusiveMinimum = true;
                  } else {
                    json6.exclusiveMinimum = exclusiveMinimum;
                  }
                }
                if (typeof minimum === "number") {
                  json6.minimum = minimum;
                  if (typeof exclusiveMinimum === "number" && this.target !== "draft-4") {
                    if (exclusiveMinimum >= minimum)
                      delete json6.minimum;
                    else
                      delete json6.exclusiveMinimum;
                  }
                }
                if (typeof exclusiveMaximum === "number") {
                  if (this.target === "draft-4" || this.target === "openapi-3.0") {
                    json6.maximum = exclusiveMaximum;
                    json6.exclusiveMaximum = true;
                  } else {
                    json6.exclusiveMaximum = exclusiveMaximum;
                  }
                }
                if (typeof maximum === "number") {
                  json6.maximum = maximum;
                  if (typeof exclusiveMaximum === "number" && this.target !== "draft-4") {
                    if (exclusiveMaximum <= maximum)
                      delete json6.maximum;
                    else
                      delete json6.exclusiveMaximum;
                  }
                }
                if (typeof multipleOf === "number")
                  json6.multipleOf = multipleOf;
                break;
              }
              case "boolean": {
                const json6 = _json;
                json6.type = "boolean";
                break;
              }
              case "bigint": {
                if (this.unrepresentable === "throw") {
                  throw new Error("BigInt cannot be represented in JSON Schema");
                }
                break;
              }
              case "symbol": {
                if (this.unrepresentable === "throw") {
                  throw new Error("Symbols cannot be represented in JSON Schema");
                }
                break;
              }
              case "null": {
                if (this.target === "openapi-3.0") {
                  _json.type = "string";
                  _json.nullable = true;
                  _json.enum = [null];
                } else
                  _json.type = "null";
                break;
              }
              case "any": {
                break;
              }
              case "unknown": {
                break;
              }
              case "undefined": {
                if (this.unrepresentable === "throw") {
                  throw new Error("Undefined cannot be represented in JSON Schema");
                }
                break;
              }
              case "void": {
                if (this.unrepresentable === "throw") {
                  throw new Error("Void cannot be represented in JSON Schema");
                }
                break;
              }
              case "never": {
                _json.not = {};
                break;
              }
              case "date": {
                if (this.unrepresentable === "throw") {
                  throw new Error("Date cannot be represented in JSON Schema");
                }
                break;
              }
              case "array": {
                const json6 = _json;
                const { minimum, maximum } = schema._zod.bag;
                if (typeof minimum === "number")
                  json6.minItems = minimum;
                if (typeof maximum === "number")
                  json6.maxItems = maximum;
                json6.type = "array";
                json6.items = this.process(def.element, { ...params, path: [...params.path, "items"] });
                break;
              }
              case "object": {
                const json6 = _json;
                json6.type = "object";
                json6.properties = {};
                const shape = def.shape;
                for (const key in shape) {
                  json6.properties[key] = this.process(shape[key], {
                    ...params,
                    path: [...params.path, "properties", key]
                  });
                }
                const allKeys = new Set(Object.keys(shape));
                const requiredKeys = new Set([...allKeys].filter((key) => {
                  const v2 = def.shape[key]._zod;
                  if (this.io === "input") {
                    return v2.optin === void 0;
                  } else {
                    return v2.optout === void 0;
                  }
                }));
                if (requiredKeys.size > 0) {
                  json6.required = Array.from(requiredKeys);
                }
                if (def.catchall?._zod.def.type === "never") {
                  json6.additionalProperties = false;
                } else if (!def.catchall) {
                  if (this.io === "output")
                    json6.additionalProperties = false;
                } else if (def.catchall) {
                  json6.additionalProperties = this.process(def.catchall, {
                    ...params,
                    path: [...params.path, "additionalProperties"]
                  });
                }
                break;
              }
              case "union": {
                const json6 = _json;
                const options = def.options.map((x2, i2) => this.process(x2, {
                  ...params,
                  path: [...params.path, "anyOf", i2]
                }));
                json6.anyOf = options;
                break;
              }
              case "intersection": {
                const json6 = _json;
                const a2 = this.process(def.left, {
                  ...params,
                  path: [...params.path, "allOf", 0]
                });
                const b2 = this.process(def.right, {
                  ...params,
                  path: [...params.path, "allOf", 1]
                });
                const isSimpleIntersection = /* @__PURE__ */ __name2((val) => "allOf" in val && Object.keys(val).length === 1, "isSimpleIntersection");
                const allOf = [
                  ...isSimpleIntersection(a2) ? a2.allOf : [a2],
                  ...isSimpleIntersection(b2) ? b2.allOf : [b2]
                ];
                json6.allOf = allOf;
                break;
              }
              case "tuple": {
                const json6 = _json;
                json6.type = "array";
                const prefixPath = this.target === "draft-2020-12" ? "prefixItems" : "items";
                const restPath = this.target === "draft-2020-12" ? "items" : this.target === "openapi-3.0" ? "items" : "additionalItems";
                const prefixItems = def.items.map((x2, i2) => this.process(x2, {
                  ...params,
                  path: [...params.path, prefixPath, i2]
                }));
                const rest = def.rest ? this.process(def.rest, {
                  ...params,
                  path: [...params.path, restPath, ...this.target === "openapi-3.0" ? [def.items.length] : []]
                }) : null;
                if (this.target === "draft-2020-12") {
                  json6.prefixItems = prefixItems;
                  if (rest) {
                    json6.items = rest;
                  }
                } else if (this.target === "openapi-3.0") {
                  json6.items = {
                    anyOf: prefixItems
                  };
                  if (rest) {
                    json6.items.anyOf.push(rest);
                  }
                  json6.minItems = prefixItems.length;
                  if (!rest) {
                    json6.maxItems = prefixItems.length;
                  }
                } else {
                  json6.items = prefixItems;
                  if (rest) {
                    json6.additionalItems = rest;
                  }
                }
                const { minimum, maximum } = schema._zod.bag;
                if (typeof minimum === "number")
                  json6.minItems = minimum;
                if (typeof maximum === "number")
                  json6.maxItems = maximum;
                break;
              }
              case "record": {
                const json6 = _json;
                json6.type = "object";
                if (this.target === "draft-7" || this.target === "draft-2020-12") {
                  json6.propertyNames = this.process(def.keyType, {
                    ...params,
                    path: [...params.path, "propertyNames"]
                  });
                }
                json6.additionalProperties = this.process(def.valueType, {
                  ...params,
                  path: [...params.path, "additionalProperties"]
                });
                break;
              }
              case "map": {
                if (this.unrepresentable === "throw") {
                  throw new Error("Map cannot be represented in JSON Schema");
                }
                break;
              }
              case "set": {
                if (this.unrepresentable === "throw") {
                  throw new Error("Set cannot be represented in JSON Schema");
                }
                break;
              }
              case "enum": {
                const json6 = _json;
                const values = getEnumValues(def.entries);
                if (values.every((v2) => typeof v2 === "number"))
                  json6.type = "number";
                if (values.every((v2) => typeof v2 === "string"))
                  json6.type = "string";
                json6.enum = values;
                break;
              }
              case "literal": {
                const json6 = _json;
                const vals = [];
                for (const val of def.values) {
                  if (val === void 0) {
                    if (this.unrepresentable === "throw") {
                      throw new Error("Literal `undefined` cannot be represented in JSON Schema");
                    } else {
                    }
                  } else if (typeof val === "bigint") {
                    if (this.unrepresentable === "throw") {
                      throw new Error("BigInt literals cannot be represented in JSON Schema");
                    } else {
                      vals.push(Number(val));
                    }
                  } else {
                    vals.push(val);
                  }
                }
                if (vals.length === 0) {
                } else if (vals.length === 1) {
                  const val = vals[0];
                  json6.type = val === null ? "null" : typeof val;
                  if (this.target === "draft-4" || this.target === "openapi-3.0") {
                    json6.enum = [val];
                  } else {
                    json6.const = val;
                  }
                } else {
                  if (vals.every((v2) => typeof v2 === "number"))
                    json6.type = "number";
                  if (vals.every((v2) => typeof v2 === "string"))
                    json6.type = "string";
                  if (vals.every((v2) => typeof v2 === "boolean"))
                    json6.type = "string";
                  if (vals.every((v2) => v2 === null))
                    json6.type = "null";
                  json6.enum = vals;
                }
                break;
              }
              case "file": {
                const json6 = _json;
                const file2 = {
                  type: "string",
                  format: "binary",
                  contentEncoding: "binary"
                };
                const { minimum, maximum, mime } = schema._zod.bag;
                if (minimum !== void 0)
                  file2.minLength = minimum;
                if (maximum !== void 0)
                  file2.maxLength = maximum;
                if (mime) {
                  if (mime.length === 1) {
                    file2.contentMediaType = mime[0];
                    Object.assign(json6, file2);
                  } else {
                    json6.anyOf = mime.map((m2) => {
                      const mFile = { ...file2, contentMediaType: m2 };
                      return mFile;
                    });
                  }
                } else {
                  Object.assign(json6, file2);
                }
                break;
              }
              case "transform": {
                if (this.unrepresentable === "throw") {
                  throw new Error("Transforms cannot be represented in JSON Schema");
                }
                break;
              }
              case "nullable": {
                const inner = this.process(def.innerType, params);
                if (this.target === "openapi-3.0") {
                  result.ref = def.innerType;
                  _json.nullable = true;
                } else {
                  _json.anyOf = [inner, { type: "null" }];
                }
                break;
              }
              case "nonoptional": {
                this.process(def.innerType, params);
                result.ref = def.innerType;
                break;
              }
              case "success": {
                const json6 = _json;
                json6.type = "boolean";
                break;
              }
              case "default": {
                this.process(def.innerType, params);
                result.ref = def.innerType;
                _json.default = JSON.parse(JSON.stringify(def.defaultValue));
                break;
              }
              case "prefault": {
                this.process(def.innerType, params);
                result.ref = def.innerType;
                if (this.io === "input")
                  _json._prefault = JSON.parse(JSON.stringify(def.defaultValue));
                break;
              }
              case "catch": {
                this.process(def.innerType, params);
                result.ref = def.innerType;
                let catchValue;
                try {
                  catchValue = def.catchValue(void 0);
                } catch {
                  throw new Error("Dynamic catch values are not supported in JSON Schema");
                }
                _json.default = catchValue;
                break;
              }
              case "nan": {
                if (this.unrepresentable === "throw") {
                  throw new Error("NaN cannot be represented in JSON Schema");
                }
                break;
              }
              case "template_literal": {
                const json6 = _json;
                const pattern = schema._zod.pattern;
                if (!pattern)
                  throw new Error("Pattern not found in template literal");
                json6.type = "string";
                json6.pattern = pattern.source;
                break;
              }
              case "pipe": {
                const innerType = this.io === "input" ? def.in._zod.def.type === "transform" ? def.out : def.in : def.out;
                this.process(innerType, params);
                result.ref = innerType;
                break;
              }
              case "readonly": {
                this.process(def.innerType, params);
                result.ref = def.innerType;
                _json.readOnly = true;
                break;
              }
              // passthrough types
              case "promise": {
                this.process(def.innerType, params);
                result.ref = def.innerType;
                break;
              }
              case "optional": {
                this.process(def.innerType, params);
                result.ref = def.innerType;
                break;
              }
              case "lazy": {
                const innerType = schema._zod.innerType;
                this.process(innerType, params);
                result.ref = innerType;
                break;
              }
              case "custom": {
                if (this.unrepresentable === "throw") {
                  throw new Error("Custom types cannot be represented in JSON Schema");
                }
                break;
              }
              case "function": {
                if (this.unrepresentable === "throw") {
                  throw new Error("Function types cannot be represented in JSON Schema");
                }
                break;
              }
              default: {
                def;
              }
            }
          }
        }
        const meta = this.metadataRegistry.get(schema);
        if (meta)
          Object.assign(result.schema, meta);
        if (this.io === "input" && isTransforming(schema)) {
          delete result.schema.examples;
          delete result.schema.default;
        }
        if (this.io === "input" && result.schema._prefault)
          (_a2 = result.schema).default ?? (_a2.default = result.schema._prefault);
        delete result.schema._prefault;
        const _result = this.seen.get(schema);
        return _result.schema;
      }
      emit(schema, _params) {
        const params = {
          cycles: _params?.cycles ?? "ref",
          reused: _params?.reused ?? "inline",
          // unrepresentable: _params?.unrepresentable ?? "throw",
          // uri: _params?.uri ?? ((id) => `${id}`),
          external: _params?.external ?? void 0
        };
        const root = this.seen.get(schema);
        if (!root)
          throw new Error("Unprocessed schema. This is a bug in Zod.");
        const makeURI = /* @__PURE__ */ __name2((entry) => {
          const defsSegment = this.target === "draft-2020-12" ? "$defs" : "definitions";
          if (params.external) {
            const externalId = params.external.registry.get(entry[0])?.id;
            const uriGenerator = params.external.uri ?? ((id2) => id2);
            if (externalId) {
              return { ref: uriGenerator(externalId) };
            }
            const id = entry[1].defId ?? entry[1].schema.id ?? `schema${this.counter++}`;
            entry[1].defId = id;
            return { defId: id, ref: `${uriGenerator("__shared")}#/${defsSegment}/${id}` };
          }
          if (entry[1] === root) {
            return { ref: "#" };
          }
          const uriPrefix = `#`;
          const defUriPrefix = `${uriPrefix}/${defsSegment}/`;
          const defId = entry[1].schema.id ?? `__schema${this.counter++}`;
          return { defId, ref: defUriPrefix + defId };
        }, "makeURI");
        const extractToDef = /* @__PURE__ */ __name2((entry) => {
          if (entry[1].schema.$ref) {
            return;
          }
          const seen = entry[1];
          const { ref, defId } = makeURI(entry);
          seen.def = { ...seen.schema };
          if (defId)
            seen.defId = defId;
          const schema2 = seen.schema;
          for (const key in schema2) {
            delete schema2[key];
          }
          schema2.$ref = ref;
        }, "extractToDef");
        if (params.cycles === "throw") {
          for (const entry of this.seen.entries()) {
            const seen = entry[1];
            if (seen.cycle) {
              throw new Error(`Cycle detected: #/${seen.cycle?.join("/")}/<root>

Set the \`cycles\` parameter to \`"ref"\` to resolve cyclical schemas with defs.`);
            }
          }
        }
        for (const entry of this.seen.entries()) {
          const seen = entry[1];
          if (schema === entry[0]) {
            extractToDef(entry);
            continue;
          }
          if (params.external) {
            const ext = params.external.registry.get(entry[0])?.id;
            if (schema !== entry[0] && ext) {
              extractToDef(entry);
              continue;
            }
          }
          const id = this.metadataRegistry.get(entry[0])?.id;
          if (id) {
            extractToDef(entry);
            continue;
          }
          if (seen.cycle) {
            extractToDef(entry);
            continue;
          }
          if (seen.count > 1) {
            if (params.reused === "ref") {
              extractToDef(entry);
              continue;
            }
          }
        }
        const flattenRef = /* @__PURE__ */ __name2((zodSchema, params2) => {
          const seen = this.seen.get(zodSchema);
          const schema2 = seen.def ?? seen.schema;
          const _cached = { ...schema2 };
          if (seen.ref === null) {
            return;
          }
          const ref = seen.ref;
          seen.ref = null;
          if (ref) {
            flattenRef(ref, params2);
            const refSchema = this.seen.get(ref).schema;
            if (refSchema.$ref && (params2.target === "draft-7" || params2.target === "draft-4" || params2.target === "openapi-3.0")) {
              schema2.allOf = schema2.allOf ?? [];
              schema2.allOf.push(refSchema);
            } else {
              Object.assign(schema2, refSchema);
              Object.assign(schema2, _cached);
            }
          }
          if (!seen.isParent)
            this.override({
              zodSchema,
              jsonSchema: schema2,
              path: seen.path ?? []
            });
        }, "flattenRef");
        for (const entry of [...this.seen.entries()].reverse()) {
          flattenRef(entry[0], { target: this.target });
        }
        const result = {};
        if (this.target === "draft-2020-12") {
          result.$schema = "https://json-schema.org/draft/2020-12/schema";
        } else if (this.target === "draft-7") {
          result.$schema = "http://json-schema.org/draft-07/schema#";
        } else if (this.target === "draft-4") {
          result.$schema = "http://json-schema.org/draft-04/schema#";
        } else if (this.target === "openapi-3.0") {
        } else {
          console.warn(`Invalid target: ${this.target}`);
        }
        if (params.external?.uri) {
          const id = params.external.registry.get(schema)?.id;
          if (!id)
            throw new Error("Schema is missing an `id` property");
          result.$id = params.external.uri(id);
        }
        Object.assign(result, root.def);
        const defs = params.external?.defs ?? {};
        for (const entry of this.seen.entries()) {
          const seen = entry[1];
          if (seen.def && seen.defId) {
            defs[seen.defId] = seen.def;
          }
        }
        if (params.external) {
        } else {
          if (Object.keys(defs).length > 0) {
            if (this.target === "draft-2020-12") {
              result.$defs = defs;
            } else {
              result.definitions = defs;
            }
          }
        }
        try {
          return JSON.parse(JSON.stringify(result));
        } catch (_err) {
          throw new Error("Error converting schema to JSON.");
        }
      }
    };
    __name2(toJSONSchema, "toJSONSchema");
    __name2(isTransforming, "isTransforming");
  }
});
var json_schema_exports = {};
var init_json_schema = __esm({
  "../node_modules/zod/v4/core/json-schema.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var core_exports2 = {};
__export(core_exports2, {
  $ZodAny: /* @__PURE__ */ __name(() => $ZodAny, "$ZodAny"),
  $ZodArray: /* @__PURE__ */ __name(() => $ZodArray, "$ZodArray"),
  $ZodAsyncError: /* @__PURE__ */ __name(() => $ZodAsyncError, "$ZodAsyncError"),
  $ZodBase64: /* @__PURE__ */ __name(() => $ZodBase64, "$ZodBase64"),
  $ZodBase64URL: /* @__PURE__ */ __name(() => $ZodBase64URL, "$ZodBase64URL"),
  $ZodBigInt: /* @__PURE__ */ __name(() => $ZodBigInt, "$ZodBigInt"),
  $ZodBigIntFormat: /* @__PURE__ */ __name(() => $ZodBigIntFormat, "$ZodBigIntFormat"),
  $ZodBoolean: /* @__PURE__ */ __name(() => $ZodBoolean, "$ZodBoolean"),
  $ZodCIDRv4: /* @__PURE__ */ __name(() => $ZodCIDRv4, "$ZodCIDRv4"),
  $ZodCIDRv6: /* @__PURE__ */ __name(() => $ZodCIDRv6, "$ZodCIDRv6"),
  $ZodCUID: /* @__PURE__ */ __name(() => $ZodCUID, "$ZodCUID"),
  $ZodCUID2: /* @__PURE__ */ __name(() => $ZodCUID2, "$ZodCUID2"),
  $ZodCatch: /* @__PURE__ */ __name(() => $ZodCatch, "$ZodCatch"),
  $ZodCheck: /* @__PURE__ */ __name(() => $ZodCheck, "$ZodCheck"),
  $ZodCheckBigIntFormat: /* @__PURE__ */ __name(() => $ZodCheckBigIntFormat, "$ZodCheckBigIntFormat"),
  $ZodCheckEndsWith: /* @__PURE__ */ __name(() => $ZodCheckEndsWith, "$ZodCheckEndsWith"),
  $ZodCheckGreaterThan: /* @__PURE__ */ __name(() => $ZodCheckGreaterThan, "$ZodCheckGreaterThan"),
  $ZodCheckIncludes: /* @__PURE__ */ __name(() => $ZodCheckIncludes, "$ZodCheckIncludes"),
  $ZodCheckLengthEquals: /* @__PURE__ */ __name(() => $ZodCheckLengthEquals, "$ZodCheckLengthEquals"),
  $ZodCheckLessThan: /* @__PURE__ */ __name(() => $ZodCheckLessThan, "$ZodCheckLessThan"),
  $ZodCheckLowerCase: /* @__PURE__ */ __name(() => $ZodCheckLowerCase, "$ZodCheckLowerCase"),
  $ZodCheckMaxLength: /* @__PURE__ */ __name(() => $ZodCheckMaxLength, "$ZodCheckMaxLength"),
  $ZodCheckMaxSize: /* @__PURE__ */ __name(() => $ZodCheckMaxSize, "$ZodCheckMaxSize"),
  $ZodCheckMimeType: /* @__PURE__ */ __name(() => $ZodCheckMimeType, "$ZodCheckMimeType"),
  $ZodCheckMinLength: /* @__PURE__ */ __name(() => $ZodCheckMinLength, "$ZodCheckMinLength"),
  $ZodCheckMinSize: /* @__PURE__ */ __name(() => $ZodCheckMinSize, "$ZodCheckMinSize"),
  $ZodCheckMultipleOf: /* @__PURE__ */ __name(() => $ZodCheckMultipleOf, "$ZodCheckMultipleOf"),
  $ZodCheckNumberFormat: /* @__PURE__ */ __name(() => $ZodCheckNumberFormat, "$ZodCheckNumberFormat"),
  $ZodCheckOverwrite: /* @__PURE__ */ __name(() => $ZodCheckOverwrite, "$ZodCheckOverwrite"),
  $ZodCheckProperty: /* @__PURE__ */ __name(() => $ZodCheckProperty, "$ZodCheckProperty"),
  $ZodCheckRegex: /* @__PURE__ */ __name(() => $ZodCheckRegex, "$ZodCheckRegex"),
  $ZodCheckSizeEquals: /* @__PURE__ */ __name(() => $ZodCheckSizeEquals, "$ZodCheckSizeEquals"),
  $ZodCheckStartsWith: /* @__PURE__ */ __name(() => $ZodCheckStartsWith, "$ZodCheckStartsWith"),
  $ZodCheckStringFormat: /* @__PURE__ */ __name(() => $ZodCheckStringFormat, "$ZodCheckStringFormat"),
  $ZodCheckUpperCase: /* @__PURE__ */ __name(() => $ZodCheckUpperCase, "$ZodCheckUpperCase"),
  $ZodCodec: /* @__PURE__ */ __name(() => $ZodCodec, "$ZodCodec"),
  $ZodCustom: /* @__PURE__ */ __name(() => $ZodCustom, "$ZodCustom"),
  $ZodCustomStringFormat: /* @__PURE__ */ __name(() => $ZodCustomStringFormat, "$ZodCustomStringFormat"),
  $ZodDate: /* @__PURE__ */ __name(() => $ZodDate, "$ZodDate"),
  $ZodDefault: /* @__PURE__ */ __name(() => $ZodDefault, "$ZodDefault"),
  $ZodDiscriminatedUnion: /* @__PURE__ */ __name(() => $ZodDiscriminatedUnion, "$ZodDiscriminatedUnion"),
  $ZodE164: /* @__PURE__ */ __name(() => $ZodE164, "$ZodE164"),
  $ZodEmail: /* @__PURE__ */ __name(() => $ZodEmail, "$ZodEmail"),
  $ZodEmoji: /* @__PURE__ */ __name(() => $ZodEmoji, "$ZodEmoji"),
  $ZodEncodeError: /* @__PURE__ */ __name(() => $ZodEncodeError, "$ZodEncodeError"),
  $ZodEnum: /* @__PURE__ */ __name(() => $ZodEnum, "$ZodEnum"),
  $ZodError: /* @__PURE__ */ __name(() => $ZodError, "$ZodError"),
  $ZodFile: /* @__PURE__ */ __name(() => $ZodFile, "$ZodFile"),
  $ZodFunction: /* @__PURE__ */ __name(() => $ZodFunction, "$ZodFunction"),
  $ZodGUID: /* @__PURE__ */ __name(() => $ZodGUID, "$ZodGUID"),
  $ZodIPv4: /* @__PURE__ */ __name(() => $ZodIPv4, "$ZodIPv4"),
  $ZodIPv6: /* @__PURE__ */ __name(() => $ZodIPv6, "$ZodIPv6"),
  $ZodISODate: /* @__PURE__ */ __name(() => $ZodISODate, "$ZodISODate"),
  $ZodISODateTime: /* @__PURE__ */ __name(() => $ZodISODateTime, "$ZodISODateTime"),
  $ZodISODuration: /* @__PURE__ */ __name(() => $ZodISODuration, "$ZodISODuration"),
  $ZodISOTime: /* @__PURE__ */ __name(() => $ZodISOTime, "$ZodISOTime"),
  $ZodIntersection: /* @__PURE__ */ __name(() => $ZodIntersection, "$ZodIntersection"),
  $ZodJWT: /* @__PURE__ */ __name(() => $ZodJWT, "$ZodJWT"),
  $ZodKSUID: /* @__PURE__ */ __name(() => $ZodKSUID, "$ZodKSUID"),
  $ZodLazy: /* @__PURE__ */ __name(() => $ZodLazy, "$ZodLazy"),
  $ZodLiteral: /* @__PURE__ */ __name(() => $ZodLiteral, "$ZodLiteral"),
  $ZodMap: /* @__PURE__ */ __name(() => $ZodMap, "$ZodMap"),
  $ZodNaN: /* @__PURE__ */ __name(() => $ZodNaN, "$ZodNaN"),
  $ZodNanoID: /* @__PURE__ */ __name(() => $ZodNanoID, "$ZodNanoID"),
  $ZodNever: /* @__PURE__ */ __name(() => $ZodNever, "$ZodNever"),
  $ZodNonOptional: /* @__PURE__ */ __name(() => $ZodNonOptional, "$ZodNonOptional"),
  $ZodNull: /* @__PURE__ */ __name(() => $ZodNull, "$ZodNull"),
  $ZodNullable: /* @__PURE__ */ __name(() => $ZodNullable, "$ZodNullable"),
  $ZodNumber: /* @__PURE__ */ __name(() => $ZodNumber, "$ZodNumber"),
  $ZodNumberFormat: /* @__PURE__ */ __name(() => $ZodNumberFormat, "$ZodNumberFormat"),
  $ZodObject: /* @__PURE__ */ __name(() => $ZodObject, "$ZodObject"),
  $ZodObjectJIT: /* @__PURE__ */ __name(() => $ZodObjectJIT, "$ZodObjectJIT"),
  $ZodOptional: /* @__PURE__ */ __name(() => $ZodOptional, "$ZodOptional"),
  $ZodPipe: /* @__PURE__ */ __name(() => $ZodPipe, "$ZodPipe"),
  $ZodPrefault: /* @__PURE__ */ __name(() => $ZodPrefault, "$ZodPrefault"),
  $ZodPromise: /* @__PURE__ */ __name(() => $ZodPromise, "$ZodPromise"),
  $ZodReadonly: /* @__PURE__ */ __name(() => $ZodReadonly, "$ZodReadonly"),
  $ZodRealError: /* @__PURE__ */ __name(() => $ZodRealError, "$ZodRealError"),
  $ZodRecord: /* @__PURE__ */ __name(() => $ZodRecord, "$ZodRecord"),
  $ZodRegistry: /* @__PURE__ */ __name(() => $ZodRegistry, "$ZodRegistry"),
  $ZodSet: /* @__PURE__ */ __name(() => $ZodSet, "$ZodSet"),
  $ZodString: /* @__PURE__ */ __name(() => $ZodString, "$ZodString"),
  $ZodStringFormat: /* @__PURE__ */ __name(() => $ZodStringFormat, "$ZodStringFormat"),
  $ZodSuccess: /* @__PURE__ */ __name(() => $ZodSuccess, "$ZodSuccess"),
  $ZodSymbol: /* @__PURE__ */ __name(() => $ZodSymbol, "$ZodSymbol"),
  $ZodTemplateLiteral: /* @__PURE__ */ __name(() => $ZodTemplateLiteral, "$ZodTemplateLiteral"),
  $ZodTransform: /* @__PURE__ */ __name(() => $ZodTransform, "$ZodTransform"),
  $ZodTuple: /* @__PURE__ */ __name(() => $ZodTuple, "$ZodTuple"),
  $ZodType: /* @__PURE__ */ __name(() => $ZodType, "$ZodType"),
  $ZodULID: /* @__PURE__ */ __name(() => $ZodULID, "$ZodULID"),
  $ZodURL: /* @__PURE__ */ __name(() => $ZodURL, "$ZodURL"),
  $ZodUUID: /* @__PURE__ */ __name(() => $ZodUUID, "$ZodUUID"),
  $ZodUndefined: /* @__PURE__ */ __name(() => $ZodUndefined, "$ZodUndefined"),
  $ZodUnion: /* @__PURE__ */ __name(() => $ZodUnion, "$ZodUnion"),
  $ZodUnknown: /* @__PURE__ */ __name(() => $ZodUnknown, "$ZodUnknown"),
  $ZodVoid: /* @__PURE__ */ __name(() => $ZodVoid, "$ZodVoid"),
  $ZodXID: /* @__PURE__ */ __name(() => $ZodXID, "$ZodXID"),
  $brand: /* @__PURE__ */ __name(() => $brand, "$brand"),
  $constructor: /* @__PURE__ */ __name(() => $constructor, "$constructor"),
  $input: /* @__PURE__ */ __name(() => $input, "$input"),
  $output: /* @__PURE__ */ __name(() => $output, "$output"),
  Doc: /* @__PURE__ */ __name(() => Doc, "Doc"),
  JSONSchema: /* @__PURE__ */ __name(() => json_schema_exports, "JSONSchema"),
  JSONSchemaGenerator: /* @__PURE__ */ __name(() => JSONSchemaGenerator, "JSONSchemaGenerator"),
  NEVER: /* @__PURE__ */ __name(() => NEVER, "NEVER"),
  TimePrecision: /* @__PURE__ */ __name(() => TimePrecision, "TimePrecision"),
  _any: /* @__PURE__ */ __name(() => _any, "_any"),
  _array: /* @__PURE__ */ __name(() => _array, "_array"),
  _base64: /* @__PURE__ */ __name(() => _base64, "_base64"),
  _base64url: /* @__PURE__ */ __name(() => _base64url, "_base64url"),
  _bigint: /* @__PURE__ */ __name(() => _bigint, "_bigint"),
  _boolean: /* @__PURE__ */ __name(() => _boolean, "_boolean"),
  _catch: /* @__PURE__ */ __name(() => _catch, "_catch"),
  _check: /* @__PURE__ */ __name(() => _check, "_check"),
  _cidrv4: /* @__PURE__ */ __name(() => _cidrv4, "_cidrv4"),
  _cidrv6: /* @__PURE__ */ __name(() => _cidrv6, "_cidrv6"),
  _coercedBigint: /* @__PURE__ */ __name(() => _coercedBigint, "_coercedBigint"),
  _coercedBoolean: /* @__PURE__ */ __name(() => _coercedBoolean, "_coercedBoolean"),
  _coercedDate: /* @__PURE__ */ __name(() => _coercedDate, "_coercedDate"),
  _coercedNumber: /* @__PURE__ */ __name(() => _coercedNumber, "_coercedNumber"),
  _coercedString: /* @__PURE__ */ __name(() => _coercedString, "_coercedString"),
  _cuid: /* @__PURE__ */ __name(() => _cuid, "_cuid"),
  _cuid2: /* @__PURE__ */ __name(() => _cuid2, "_cuid2"),
  _custom: /* @__PURE__ */ __name(() => _custom, "_custom"),
  _date: /* @__PURE__ */ __name(() => _date, "_date"),
  _decode: /* @__PURE__ */ __name(() => _decode, "_decode"),
  _decodeAsync: /* @__PURE__ */ __name(() => _decodeAsync, "_decodeAsync"),
  _default: /* @__PURE__ */ __name(() => _default, "_default"),
  _discriminatedUnion: /* @__PURE__ */ __name(() => _discriminatedUnion, "_discriminatedUnion"),
  _e164: /* @__PURE__ */ __name(() => _e164, "_e164"),
  _email: /* @__PURE__ */ __name(() => _email, "_email"),
  _emoji: /* @__PURE__ */ __name(() => _emoji2, "_emoji"),
  _encode: /* @__PURE__ */ __name(() => _encode, "_encode"),
  _encodeAsync: /* @__PURE__ */ __name(() => _encodeAsync, "_encodeAsync"),
  _endsWith: /* @__PURE__ */ __name(() => _endsWith, "_endsWith"),
  _enum: /* @__PURE__ */ __name(() => _enum, "_enum"),
  _file: /* @__PURE__ */ __name(() => _file, "_file"),
  _float32: /* @__PURE__ */ __name(() => _float32, "_float32"),
  _float64: /* @__PURE__ */ __name(() => _float64, "_float64"),
  _gt: /* @__PURE__ */ __name(() => _gt, "_gt"),
  _gte: /* @__PURE__ */ __name(() => _gte, "_gte"),
  _guid: /* @__PURE__ */ __name(() => _guid, "_guid"),
  _includes: /* @__PURE__ */ __name(() => _includes, "_includes"),
  _int: /* @__PURE__ */ __name(() => _int, "_int"),
  _int32: /* @__PURE__ */ __name(() => _int32, "_int32"),
  _int64: /* @__PURE__ */ __name(() => _int64, "_int64"),
  _intersection: /* @__PURE__ */ __name(() => _intersection, "_intersection"),
  _ipv4: /* @__PURE__ */ __name(() => _ipv4, "_ipv4"),
  _ipv6: /* @__PURE__ */ __name(() => _ipv6, "_ipv6"),
  _isoDate: /* @__PURE__ */ __name(() => _isoDate, "_isoDate"),
  _isoDateTime: /* @__PURE__ */ __name(() => _isoDateTime, "_isoDateTime"),
  _isoDuration: /* @__PURE__ */ __name(() => _isoDuration, "_isoDuration"),
  _isoTime: /* @__PURE__ */ __name(() => _isoTime, "_isoTime"),
  _jwt: /* @__PURE__ */ __name(() => _jwt, "_jwt"),
  _ksuid: /* @__PURE__ */ __name(() => _ksuid, "_ksuid"),
  _lazy: /* @__PURE__ */ __name(() => _lazy, "_lazy"),
  _length: /* @__PURE__ */ __name(() => _length, "_length"),
  _literal: /* @__PURE__ */ __name(() => _literal, "_literal"),
  _lowercase: /* @__PURE__ */ __name(() => _lowercase, "_lowercase"),
  _lt: /* @__PURE__ */ __name(() => _lt, "_lt"),
  _lte: /* @__PURE__ */ __name(() => _lte, "_lte"),
  _map: /* @__PURE__ */ __name(() => _map, "_map"),
  _max: /* @__PURE__ */ __name(() => _lte, "_max"),
  _maxLength: /* @__PURE__ */ __name(() => _maxLength, "_maxLength"),
  _maxSize: /* @__PURE__ */ __name(() => _maxSize, "_maxSize"),
  _mime: /* @__PURE__ */ __name(() => _mime, "_mime"),
  _min: /* @__PURE__ */ __name(() => _gte, "_min"),
  _minLength: /* @__PURE__ */ __name(() => _minLength, "_minLength"),
  _minSize: /* @__PURE__ */ __name(() => _minSize, "_minSize"),
  _multipleOf: /* @__PURE__ */ __name(() => _multipleOf, "_multipleOf"),
  _nan: /* @__PURE__ */ __name(() => _nan, "_nan"),
  _nanoid: /* @__PURE__ */ __name(() => _nanoid, "_nanoid"),
  _nativeEnum: /* @__PURE__ */ __name(() => _nativeEnum, "_nativeEnum"),
  _negative: /* @__PURE__ */ __name(() => _negative, "_negative"),
  _never: /* @__PURE__ */ __name(() => _never, "_never"),
  _nonnegative: /* @__PURE__ */ __name(() => _nonnegative, "_nonnegative"),
  _nonoptional: /* @__PURE__ */ __name(() => _nonoptional, "_nonoptional"),
  _nonpositive: /* @__PURE__ */ __name(() => _nonpositive, "_nonpositive"),
  _normalize: /* @__PURE__ */ __name(() => _normalize, "_normalize"),
  _null: /* @__PURE__ */ __name(() => _null2, "_null"),
  _nullable: /* @__PURE__ */ __name(() => _nullable, "_nullable"),
  _number: /* @__PURE__ */ __name(() => _number, "_number"),
  _optional: /* @__PURE__ */ __name(() => _optional, "_optional"),
  _overwrite: /* @__PURE__ */ __name(() => _overwrite, "_overwrite"),
  _parse: /* @__PURE__ */ __name(() => _parse, "_parse"),
  _parseAsync: /* @__PURE__ */ __name(() => _parseAsync, "_parseAsync"),
  _pipe: /* @__PURE__ */ __name(() => _pipe, "_pipe"),
  _positive: /* @__PURE__ */ __name(() => _positive, "_positive"),
  _promise: /* @__PURE__ */ __name(() => _promise, "_promise"),
  _property: /* @__PURE__ */ __name(() => _property, "_property"),
  _readonly: /* @__PURE__ */ __name(() => _readonly, "_readonly"),
  _record: /* @__PURE__ */ __name(() => _record, "_record"),
  _refine: /* @__PURE__ */ __name(() => _refine, "_refine"),
  _regex: /* @__PURE__ */ __name(() => _regex, "_regex"),
  _safeDecode: /* @__PURE__ */ __name(() => _safeDecode, "_safeDecode"),
  _safeDecodeAsync: /* @__PURE__ */ __name(() => _safeDecodeAsync, "_safeDecodeAsync"),
  _safeEncode: /* @__PURE__ */ __name(() => _safeEncode, "_safeEncode"),
  _safeEncodeAsync: /* @__PURE__ */ __name(() => _safeEncodeAsync, "_safeEncodeAsync"),
  _safeParse: /* @__PURE__ */ __name(() => _safeParse, "_safeParse"),
  _safeParseAsync: /* @__PURE__ */ __name(() => _safeParseAsync, "_safeParseAsync"),
  _set: /* @__PURE__ */ __name(() => _set, "_set"),
  _size: /* @__PURE__ */ __name(() => _size, "_size"),
  _startsWith: /* @__PURE__ */ __name(() => _startsWith, "_startsWith"),
  _string: /* @__PURE__ */ __name(() => _string, "_string"),
  _stringFormat: /* @__PURE__ */ __name(() => _stringFormat, "_stringFormat"),
  _stringbool: /* @__PURE__ */ __name(() => _stringbool, "_stringbool"),
  _success: /* @__PURE__ */ __name(() => _success, "_success"),
  _superRefine: /* @__PURE__ */ __name(() => _superRefine, "_superRefine"),
  _symbol: /* @__PURE__ */ __name(() => _symbol, "_symbol"),
  _templateLiteral: /* @__PURE__ */ __name(() => _templateLiteral, "_templateLiteral"),
  _toLowerCase: /* @__PURE__ */ __name(() => _toLowerCase, "_toLowerCase"),
  _toUpperCase: /* @__PURE__ */ __name(() => _toUpperCase, "_toUpperCase"),
  _transform: /* @__PURE__ */ __name(() => _transform, "_transform"),
  _trim: /* @__PURE__ */ __name(() => _trim, "_trim"),
  _tuple: /* @__PURE__ */ __name(() => _tuple, "_tuple"),
  _uint32: /* @__PURE__ */ __name(() => _uint32, "_uint32"),
  _uint64: /* @__PURE__ */ __name(() => _uint64, "_uint64"),
  _ulid: /* @__PURE__ */ __name(() => _ulid, "_ulid"),
  _undefined: /* @__PURE__ */ __name(() => _undefined2, "_undefined"),
  _union: /* @__PURE__ */ __name(() => _union, "_union"),
  _unknown: /* @__PURE__ */ __name(() => _unknown, "_unknown"),
  _uppercase: /* @__PURE__ */ __name(() => _uppercase, "_uppercase"),
  _url: /* @__PURE__ */ __name(() => _url, "_url"),
  _uuid: /* @__PURE__ */ __name(() => _uuid, "_uuid"),
  _uuidv4: /* @__PURE__ */ __name(() => _uuidv4, "_uuidv4"),
  _uuidv6: /* @__PURE__ */ __name(() => _uuidv6, "_uuidv6"),
  _uuidv7: /* @__PURE__ */ __name(() => _uuidv7, "_uuidv7"),
  _void: /* @__PURE__ */ __name(() => _void, "_void"),
  _xid: /* @__PURE__ */ __name(() => _xid, "_xid"),
  clone: /* @__PURE__ */ __name(() => clone, "clone"),
  config: /* @__PURE__ */ __name(() => config, "config"),
  decode: /* @__PURE__ */ __name(() => decode, "decode"),
  decodeAsync: /* @__PURE__ */ __name(() => decodeAsync, "decodeAsync"),
  encode: /* @__PURE__ */ __name(() => encode, "encode"),
  encodeAsync: /* @__PURE__ */ __name(() => encodeAsync, "encodeAsync"),
  flattenError: /* @__PURE__ */ __name(() => flattenError, "flattenError"),
  formatError: /* @__PURE__ */ __name(() => formatError, "formatError"),
  globalConfig: /* @__PURE__ */ __name(() => globalConfig, "globalConfig"),
  globalRegistry: /* @__PURE__ */ __name(() => globalRegistry, "globalRegistry"),
  isValidBase64: /* @__PURE__ */ __name(() => isValidBase64, "isValidBase64"),
  isValidBase64URL: /* @__PURE__ */ __name(() => isValidBase64URL, "isValidBase64URL"),
  isValidJWT: /* @__PURE__ */ __name(() => isValidJWT, "isValidJWT"),
  locales: /* @__PURE__ */ __name(() => locales_exports, "locales"),
  parse: /* @__PURE__ */ __name(() => parse, "parse"),
  parseAsync: /* @__PURE__ */ __name(() => parseAsync, "parseAsync"),
  prettifyError: /* @__PURE__ */ __name(() => prettifyError, "prettifyError"),
  regexes: /* @__PURE__ */ __name(() => regexes_exports, "regexes"),
  registry: /* @__PURE__ */ __name(() => registry, "registry"),
  safeDecode: /* @__PURE__ */ __name(() => safeDecode, "safeDecode"),
  safeDecodeAsync: /* @__PURE__ */ __name(() => safeDecodeAsync, "safeDecodeAsync"),
  safeEncode: /* @__PURE__ */ __name(() => safeEncode, "safeEncode"),
  safeEncodeAsync: /* @__PURE__ */ __name(() => safeEncodeAsync, "safeEncodeAsync"),
  safeParse: /* @__PURE__ */ __name(() => safeParse, "safeParse"),
  safeParseAsync: /* @__PURE__ */ __name(() => safeParseAsync, "safeParseAsync"),
  toDotPath: /* @__PURE__ */ __name(() => toDotPath, "toDotPath"),
  toJSONSchema: /* @__PURE__ */ __name(() => toJSONSchema, "toJSONSchema"),
  treeifyError: /* @__PURE__ */ __name(() => treeifyError, "treeifyError"),
  util: /* @__PURE__ */ __name(() => util_exports, "util"),
  version: /* @__PURE__ */ __name(() => version, "version")
});
var init_core2 = __esm({
  "../node_modules/zod/v4/core/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_core();
    init_parse();
    init_errors();
    init_schemas();
    init_checks();
    init_versions();
    init_util();
    init_regexes();
    init_locales();
    init_registries();
    init_doc();
    init_api();
    init_to_json_schema();
    init_json_schema();
  }
});
var init_checks2 = __esm({
  "../node_modules/zod/v4/classic/checks.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_core2();
  }
});
var iso_exports = {};
__export(iso_exports, {
  ZodISODate: /* @__PURE__ */ __name(() => ZodISODate, "ZodISODate"),
  ZodISODateTime: /* @__PURE__ */ __name(() => ZodISODateTime, "ZodISODateTime"),
  ZodISODuration: /* @__PURE__ */ __name(() => ZodISODuration, "ZodISODuration"),
  ZodISOTime: /* @__PURE__ */ __name(() => ZodISOTime, "ZodISOTime"),
  date: /* @__PURE__ */ __name(() => date2, "date"),
  datetime: /* @__PURE__ */ __name(() => datetime2, "datetime"),
  duration: /* @__PURE__ */ __name(() => duration2, "duration"),
  time: /* @__PURE__ */ __name(() => time2, "time")
});
function datetime2(params) {
  return _isoDateTime(ZodISODateTime, params);
}
__name(datetime2, "datetime2");
function date2(params) {
  return _isoDate(ZodISODate, params);
}
__name(date2, "date2");
function time2(params) {
  return _isoTime(ZodISOTime, params);
}
__name(time2, "time2");
function duration2(params) {
  return _isoDuration(ZodISODuration, params);
}
__name(duration2, "duration2");
var ZodISODateTime;
var ZodISODate;
var ZodISOTime;
var ZodISODuration;
var init_iso = __esm({
  "../node_modules/zod/v4/classic/iso.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_core2();
    init_schemas2();
    ZodISODateTime = /* @__PURE__ */ $constructor("ZodISODateTime", (inst, def) => {
      $ZodISODateTime.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    __name2(datetime2, "datetime");
    ZodISODate = /* @__PURE__ */ $constructor("ZodISODate", (inst, def) => {
      $ZodISODate.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    __name2(date2, "date");
    ZodISOTime = /* @__PURE__ */ $constructor("ZodISOTime", (inst, def) => {
      $ZodISOTime.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    __name2(time2, "time");
    ZodISODuration = /* @__PURE__ */ $constructor("ZodISODuration", (inst, def) => {
      $ZodISODuration.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    __name2(duration2, "duration");
  }
});
var initializer2;
var ZodError;
var ZodRealError;
var init_errors2 = __esm({
  "../node_modules/zod/v4/classic/errors.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_core2();
    init_core2();
    init_util();
    initializer2 = /* @__PURE__ */ __name2((inst, issues) => {
      $ZodError.init(inst, issues);
      inst.name = "ZodError";
      Object.defineProperties(inst, {
        format: {
          value: /* @__PURE__ */ __name2((mapper) => formatError(inst, mapper), "value")
          // enumerable: false,
        },
        flatten: {
          value: /* @__PURE__ */ __name2((mapper) => flattenError(inst, mapper), "value")
          // enumerable: false,
        },
        addIssue: {
          value: /* @__PURE__ */ __name2((issue2) => {
            inst.issues.push(issue2);
            inst.message = JSON.stringify(inst.issues, jsonStringifyReplacer, 2);
          }, "value")
          // enumerable: false,
        },
        addIssues: {
          value: /* @__PURE__ */ __name2((issues2) => {
            inst.issues.push(...issues2);
            inst.message = JSON.stringify(inst.issues, jsonStringifyReplacer, 2);
          }, "value")
          // enumerable: false,
        },
        isEmpty: {
          get() {
            return inst.issues.length === 0;
          }
          // enumerable: false,
        }
      });
    }, "initializer");
    ZodError = /* @__PURE__ */ $constructor("ZodError", initializer2);
    ZodRealError = /* @__PURE__ */ $constructor("ZodError", initializer2, {
      Parent: Error
    });
  }
});
var parse2;
var parseAsync2;
var safeParse2;
var safeParseAsync2;
var encode2;
var decode2;
var encodeAsync2;
var decodeAsync2;
var safeEncode2;
var safeDecode2;
var safeEncodeAsync2;
var safeDecodeAsync2;
var init_parse2 = __esm({
  "../node_modules/zod/v4/classic/parse.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_core2();
    init_errors2();
    parse2 = /* @__PURE__ */ _parse(ZodRealError);
    parseAsync2 = /* @__PURE__ */ _parseAsync(ZodRealError);
    safeParse2 = /* @__PURE__ */ _safeParse(ZodRealError);
    safeParseAsync2 = /* @__PURE__ */ _safeParseAsync(ZodRealError);
    encode2 = /* @__PURE__ */ _encode(ZodRealError);
    decode2 = /* @__PURE__ */ _decode(ZodRealError);
    encodeAsync2 = /* @__PURE__ */ _encodeAsync(ZodRealError);
    decodeAsync2 = /* @__PURE__ */ _decodeAsync(ZodRealError);
    safeEncode2 = /* @__PURE__ */ _safeEncode(ZodRealError);
    safeDecode2 = /* @__PURE__ */ _safeDecode(ZodRealError);
    safeEncodeAsync2 = /* @__PURE__ */ _safeEncodeAsync(ZodRealError);
    safeDecodeAsync2 = /* @__PURE__ */ _safeDecodeAsync(ZodRealError);
  }
});
function string2(params) {
  return _string(ZodString, params);
}
__name(string2, "string2");
function email2(params) {
  return _email(ZodEmail, params);
}
__name(email2, "email2");
function guid2(params) {
  return _guid(ZodGUID, params);
}
__name(guid2, "guid2");
function uuid2(params) {
  return _uuid(ZodUUID, params);
}
__name(uuid2, "uuid2");
function uuidv4(params) {
  return _uuidv4(ZodUUID, params);
}
__name(uuidv4, "uuidv4");
function uuidv6(params) {
  return _uuidv6(ZodUUID, params);
}
__name(uuidv6, "uuidv6");
function uuidv7(params) {
  return _uuidv7(ZodUUID, params);
}
__name(uuidv7, "uuidv7");
function url(params) {
  return _url(ZodURL, params);
}
__name(url, "url");
function httpUrl(params) {
  return _url(ZodURL, {
    protocol: /^https?$/,
    hostname: regexes_exports.domain,
    ...util_exports.normalizeParams(params)
  });
}
__name(httpUrl, "httpUrl");
function emoji2(params) {
  return _emoji2(ZodEmoji, params);
}
__name(emoji2, "emoji2");
function nanoid2(params) {
  return _nanoid(ZodNanoID, params);
}
__name(nanoid2, "nanoid2");
function cuid3(params) {
  return _cuid(ZodCUID, params);
}
__name(cuid3, "cuid3");
function cuid22(params) {
  return _cuid2(ZodCUID2, params);
}
__name(cuid22, "cuid22");
function ulid2(params) {
  return _ulid(ZodULID, params);
}
__name(ulid2, "ulid2");
function xid2(params) {
  return _xid(ZodXID, params);
}
__name(xid2, "xid2");
function ksuid2(params) {
  return _ksuid(ZodKSUID, params);
}
__name(ksuid2, "ksuid2");
function ipv42(params) {
  return _ipv4(ZodIPv4, params);
}
__name(ipv42, "ipv42");
function ipv62(params) {
  return _ipv6(ZodIPv6, params);
}
__name(ipv62, "ipv62");
function cidrv42(params) {
  return _cidrv4(ZodCIDRv4, params);
}
__name(cidrv42, "cidrv42");
function cidrv62(params) {
  return _cidrv6(ZodCIDRv6, params);
}
__name(cidrv62, "cidrv62");
function base642(params) {
  return _base64(ZodBase64, params);
}
__name(base642, "base642");
function base64url2(params) {
  return _base64url(ZodBase64URL, params);
}
__name(base64url2, "base64url2");
function e1642(params) {
  return _e164(ZodE164, params);
}
__name(e1642, "e1642");
function jwt(params) {
  return _jwt(ZodJWT, params);
}
__name(jwt, "jwt");
function stringFormat(format, fnOrRegex, _params = {}) {
  return _stringFormat(ZodCustomStringFormat, format, fnOrRegex, _params);
}
__name(stringFormat, "stringFormat");
function hostname2(_params) {
  return _stringFormat(ZodCustomStringFormat, "hostname", regexes_exports.hostname, _params);
}
__name(hostname2, "hostname2");
function hex2(_params) {
  return _stringFormat(ZodCustomStringFormat, "hex", regexes_exports.hex, _params);
}
__name(hex2, "hex2");
function hash(alg, params) {
  const enc = params?.enc ?? "hex";
  const format = `${alg}_${enc}`;
  const regex = regexes_exports[format];
  if (!regex)
    throw new Error(`Unrecognized hash format: ${format}`);
  return _stringFormat(ZodCustomStringFormat, format, regex, params);
}
__name(hash, "hash");
function number2(params) {
  return _number(ZodNumber, params);
}
__name(number2, "number2");
function int(params) {
  return _int(ZodNumberFormat, params);
}
__name(int, "int");
function float32(params) {
  return _float32(ZodNumberFormat, params);
}
__name(float32, "float32");
function float64(params) {
  return _float64(ZodNumberFormat, params);
}
__name(float64, "float64");
function int32(params) {
  return _int32(ZodNumberFormat, params);
}
__name(int32, "int32");
function uint32(params) {
  return _uint32(ZodNumberFormat, params);
}
__name(uint32, "uint32");
function boolean2(params) {
  return _boolean(ZodBoolean, params);
}
__name(boolean2, "boolean2");
function bigint2(params) {
  return _bigint(ZodBigInt, params);
}
__name(bigint2, "bigint2");
function int64(params) {
  return _int64(ZodBigIntFormat, params);
}
__name(int64, "int64");
function uint64(params) {
  return _uint64(ZodBigIntFormat, params);
}
__name(uint64, "uint64");
function symbol(params) {
  return _symbol(ZodSymbol, params);
}
__name(symbol, "symbol");
function _undefined3(params) {
  return _undefined2(ZodUndefined, params);
}
__name(_undefined3, "_undefined3");
function _null3(params) {
  return _null2(ZodNull, params);
}
__name(_null3, "_null3");
function any() {
  return _any(ZodAny);
}
__name(any, "any");
function unknown() {
  return _unknown(ZodUnknown);
}
__name(unknown, "unknown");
function never(params) {
  return _never(ZodNever, params);
}
__name(never, "never");
function _void2(params) {
  return _void(ZodVoid, params);
}
__name(_void2, "_void2");
function date3(params) {
  return _date(ZodDate, params);
}
__name(date3, "date3");
function array(element, params) {
  return _array(ZodArray, element, params);
}
__name(array, "array");
function keyof(schema) {
  const shape = schema._zod.def.shape;
  return _enum2(Object.keys(shape));
}
__name(keyof, "keyof");
function object(shape, params) {
  const def = {
    type: "object",
    get shape() {
      util_exports.assignProp(this, "shape", shape ? util_exports.objectClone(shape) : {});
      return this.shape;
    },
    ...util_exports.normalizeParams(params)
  };
  return new ZodObject(def);
}
__name(object, "object");
function strictObject(shape, params) {
  return new ZodObject({
    type: "object",
    get shape() {
      util_exports.assignProp(this, "shape", util_exports.objectClone(shape));
      return this.shape;
    },
    catchall: never(),
    ...util_exports.normalizeParams(params)
  });
}
__name(strictObject, "strictObject");
function looseObject(shape, params) {
  return new ZodObject({
    type: "object",
    get shape() {
      util_exports.assignProp(this, "shape", util_exports.objectClone(shape));
      return this.shape;
    },
    catchall: unknown(),
    ...util_exports.normalizeParams(params)
  });
}
__name(looseObject, "looseObject");
function union(options, params) {
  return new ZodUnion({
    type: "union",
    options,
    ...util_exports.normalizeParams(params)
  });
}
__name(union, "union");
function discriminatedUnion(discriminator, options, params) {
  return new ZodDiscriminatedUnion({
    type: "union",
    options,
    discriminator,
    ...util_exports.normalizeParams(params)
  });
}
__name(discriminatedUnion, "discriminatedUnion");
function intersection(left, right) {
  return new ZodIntersection({
    type: "intersection",
    left,
    right
  });
}
__name(intersection, "intersection");
function tuple(items, _paramsOrRest, _params) {
  const hasRest = _paramsOrRest instanceof $ZodType;
  const params = hasRest ? _params : _paramsOrRest;
  const rest = hasRest ? _paramsOrRest : null;
  return new ZodTuple({
    type: "tuple",
    items,
    rest,
    ...util_exports.normalizeParams(params)
  });
}
__name(tuple, "tuple");
function record(keyType, valueType, params) {
  return new ZodRecord({
    type: "record",
    keyType,
    valueType,
    ...util_exports.normalizeParams(params)
  });
}
__name(record, "record");
function partialRecord(keyType, valueType, params) {
  const k2 = clone(keyType);
  k2._zod.values = void 0;
  return new ZodRecord({
    type: "record",
    keyType: k2,
    valueType,
    ...util_exports.normalizeParams(params)
  });
}
__name(partialRecord, "partialRecord");
function map(keyType, valueType, params) {
  return new ZodMap({
    type: "map",
    keyType,
    valueType,
    ...util_exports.normalizeParams(params)
  });
}
__name(map, "map");
function set(valueType, params) {
  return new ZodSet({
    type: "set",
    valueType,
    ...util_exports.normalizeParams(params)
  });
}
__name(set, "set");
function _enum2(values, params) {
  const entries = Array.isArray(values) ? Object.fromEntries(values.map((v2) => [v2, v2])) : values;
  return new ZodEnum({
    type: "enum",
    entries,
    ...util_exports.normalizeParams(params)
  });
}
__name(_enum2, "_enum2");
function nativeEnum(entries, params) {
  return new ZodEnum({
    type: "enum",
    entries,
    ...util_exports.normalizeParams(params)
  });
}
__name(nativeEnum, "nativeEnum");
function literal(value, params) {
  return new ZodLiteral({
    type: "literal",
    values: Array.isArray(value) ? value : [value],
    ...util_exports.normalizeParams(params)
  });
}
__name(literal, "literal");
function file(params) {
  return _file(ZodFile, params);
}
__name(file, "file");
function transform(fn) {
  return new ZodTransform({
    type: "transform",
    transform: fn
  });
}
__name(transform, "transform");
function optional(innerType) {
  return new ZodOptional({
    type: "optional",
    innerType
  });
}
__name(optional, "optional");
function nullable(innerType) {
  return new ZodNullable({
    type: "nullable",
    innerType
  });
}
__name(nullable, "nullable");
function nullish2(innerType) {
  return optional(nullable(innerType));
}
__name(nullish2, "nullish2");
function _default2(innerType, defaultValue) {
  return new ZodDefault({
    type: "default",
    innerType,
    get defaultValue() {
      return typeof defaultValue === "function" ? defaultValue() : util_exports.shallowClone(defaultValue);
    }
  });
}
__name(_default2, "_default2");
function prefault(innerType, defaultValue) {
  return new ZodPrefault({
    type: "prefault",
    innerType,
    get defaultValue() {
      return typeof defaultValue === "function" ? defaultValue() : util_exports.shallowClone(defaultValue);
    }
  });
}
__name(prefault, "prefault");
function nonoptional(innerType, params) {
  return new ZodNonOptional({
    type: "nonoptional",
    innerType,
    ...util_exports.normalizeParams(params)
  });
}
__name(nonoptional, "nonoptional");
function success(innerType) {
  return new ZodSuccess({
    type: "success",
    innerType
  });
}
__name(success, "success");
function _catch2(innerType, catchValue) {
  return new ZodCatch({
    type: "catch",
    innerType,
    catchValue: typeof catchValue === "function" ? catchValue : () => catchValue
  });
}
__name(_catch2, "_catch2");
function nan(params) {
  return _nan(ZodNaN, params);
}
__name(nan, "nan");
function pipe(in_, out) {
  return new ZodPipe({
    type: "pipe",
    in: in_,
    out
    // ...util.normalizeParams(params),
  });
}
__name(pipe, "pipe");
function codec(in_, out, params) {
  return new ZodCodec({
    type: "pipe",
    in: in_,
    out,
    transform: params.decode,
    reverseTransform: params.encode
  });
}
__name(codec, "codec");
function readonly(innerType) {
  return new ZodReadonly({
    type: "readonly",
    innerType
  });
}
__name(readonly, "readonly");
function templateLiteral(parts, params) {
  return new ZodTemplateLiteral({
    type: "template_literal",
    parts,
    ...util_exports.normalizeParams(params)
  });
}
__name(templateLiteral, "templateLiteral");
function lazy(getter) {
  return new ZodLazy({
    type: "lazy",
    getter
  });
}
__name(lazy, "lazy");
function promise(innerType) {
  return new ZodPromise({
    type: "promise",
    innerType
  });
}
__name(promise, "promise");
function _function(params) {
  return new ZodFunction({
    type: "function",
    input: Array.isArray(params?.input) ? tuple(params?.input) : params?.input ?? array(unknown()),
    output: params?.output ?? unknown()
  });
}
__name(_function, "_function");
function check(fn) {
  const ch2 = new $ZodCheck({
    check: "custom"
    // ...util.normalizeParams(params),
  });
  ch2._zod.check = fn;
  return ch2;
}
__name(check, "check");
function custom(fn, _params) {
  return _custom(ZodCustom, fn ?? (() => true), _params);
}
__name(custom, "custom");
function refine(fn, _params = {}) {
  return _refine(ZodCustom, fn, _params);
}
__name(refine, "refine");
function superRefine(fn) {
  return _superRefine(fn);
}
__name(superRefine, "superRefine");
function _instanceof(cls, params = {
  error: `Input not instance of ${cls.name}`
}) {
  const inst = new ZodCustom({
    type: "custom",
    check: "custom",
    fn: /* @__PURE__ */ __name2((data) => data instanceof cls, "fn"),
    abort: true,
    ...util_exports.normalizeParams(params)
  });
  inst._zod.bag.Class = cls;
  return inst;
}
__name(_instanceof, "_instanceof");
function json(params) {
  const jsonSchema = lazy(() => {
    return union([string2(params), number2(), boolean2(), _null3(), array(jsonSchema), record(string2(), jsonSchema)]);
  });
  return jsonSchema;
}
__name(json, "json");
function preprocess(fn, schema) {
  return pipe(transform(fn), schema);
}
__name(preprocess, "preprocess");
var ZodType;
var _ZodString;
var ZodString;
var ZodStringFormat;
var ZodEmail;
var ZodGUID;
var ZodUUID;
var ZodURL;
var ZodEmoji;
var ZodNanoID;
var ZodCUID;
var ZodCUID2;
var ZodULID;
var ZodXID;
var ZodKSUID;
var ZodIPv4;
var ZodIPv6;
var ZodCIDRv4;
var ZodCIDRv6;
var ZodBase64;
var ZodBase64URL;
var ZodE164;
var ZodJWT;
var ZodCustomStringFormat;
var ZodNumber;
var ZodNumberFormat;
var ZodBoolean;
var ZodBigInt;
var ZodBigIntFormat;
var ZodSymbol;
var ZodUndefined;
var ZodNull;
var ZodAny;
var ZodUnknown;
var ZodNever;
var ZodVoid;
var ZodDate;
var ZodArray;
var ZodObject;
var ZodUnion;
var ZodDiscriminatedUnion;
var ZodIntersection;
var ZodTuple;
var ZodRecord;
var ZodMap;
var ZodSet;
var ZodEnum;
var ZodLiteral;
var ZodFile;
var ZodTransform;
var ZodOptional;
var ZodNullable;
var ZodDefault;
var ZodPrefault;
var ZodNonOptional;
var ZodSuccess;
var ZodCatch;
var ZodNaN;
var ZodPipe;
var ZodCodec;
var ZodReadonly;
var ZodTemplateLiteral;
var ZodLazy;
var ZodPromise;
var ZodFunction;
var ZodCustom;
var stringbool;
var init_schemas2 = __esm({
  "../node_modules/zod/v4/classic/schemas.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_core2();
    init_core2();
    init_checks2();
    init_iso();
    init_parse2();
    ZodType = /* @__PURE__ */ $constructor("ZodType", (inst, def) => {
      $ZodType.init(inst, def);
      inst.def = def;
      inst.type = def.type;
      Object.defineProperty(inst, "_def", { value: def });
      inst.check = (...checks) => {
        return inst.clone(
          {
            ...def,
            checks: [
              ...def.checks ?? [],
              ...checks.map((ch2) => typeof ch2 === "function" ? { _zod: { check: ch2, def: { check: "custom" }, onattach: [] } } : ch2)
            ]
          }
          // { parent: true }
        );
      };
      inst.clone = (def2, params) => clone(inst, def2, params);
      inst.brand = () => inst;
      inst.register = (reg, meta) => {
        reg.add(inst, meta);
        return inst;
      };
      inst.parse = (data, params) => parse2(inst, data, params, { callee: inst.parse });
      inst.safeParse = (data, params) => safeParse2(inst, data, params);
      inst.parseAsync = async (data, params) => parseAsync2(inst, data, params, { callee: inst.parseAsync });
      inst.safeParseAsync = async (data, params) => safeParseAsync2(inst, data, params);
      inst.spa = inst.safeParseAsync;
      inst.encode = (data, params) => encode2(inst, data, params);
      inst.decode = (data, params) => decode2(inst, data, params);
      inst.encodeAsync = async (data, params) => encodeAsync2(inst, data, params);
      inst.decodeAsync = async (data, params) => decodeAsync2(inst, data, params);
      inst.safeEncode = (data, params) => safeEncode2(inst, data, params);
      inst.safeDecode = (data, params) => safeDecode2(inst, data, params);
      inst.safeEncodeAsync = async (data, params) => safeEncodeAsync2(inst, data, params);
      inst.safeDecodeAsync = async (data, params) => safeDecodeAsync2(inst, data, params);
      inst.refine = (check2, params) => inst.check(refine(check2, params));
      inst.superRefine = (refinement) => inst.check(superRefine(refinement));
      inst.overwrite = (fn) => inst.check(_overwrite(fn));
      inst.optional = () => optional(inst);
      inst.nullable = () => nullable(inst);
      inst.nullish = () => optional(nullable(inst));
      inst.nonoptional = (params) => nonoptional(inst, params);
      inst.array = () => array(inst);
      inst.or = (arg) => union([inst, arg]);
      inst.and = (arg) => intersection(inst, arg);
      inst.transform = (tx) => pipe(inst, transform(tx));
      inst.default = (def2) => _default2(inst, def2);
      inst.prefault = (def2) => prefault(inst, def2);
      inst.catch = (params) => _catch2(inst, params);
      inst.pipe = (target) => pipe(inst, target);
      inst.readonly = () => readonly(inst);
      inst.describe = (description) => {
        const cl2 = inst.clone();
        globalRegistry.add(cl2, { description });
        return cl2;
      };
      Object.defineProperty(inst, "description", {
        get() {
          return globalRegistry.get(inst)?.description;
        },
        configurable: true
      });
      inst.meta = (...args) => {
        if (args.length === 0) {
          return globalRegistry.get(inst);
        }
        const cl2 = inst.clone();
        globalRegistry.add(cl2, args[0]);
        return cl2;
      };
      inst.isOptional = () => inst.safeParse(void 0).success;
      inst.isNullable = () => inst.safeParse(null).success;
      return inst;
    });
    _ZodString = /* @__PURE__ */ $constructor("_ZodString", (inst, def) => {
      $ZodString.init(inst, def);
      ZodType.init(inst, def);
      const bag = inst._zod.bag;
      inst.format = bag.format ?? null;
      inst.minLength = bag.minimum ?? null;
      inst.maxLength = bag.maximum ?? null;
      inst.regex = (...args) => inst.check(_regex(...args));
      inst.includes = (...args) => inst.check(_includes(...args));
      inst.startsWith = (...args) => inst.check(_startsWith(...args));
      inst.endsWith = (...args) => inst.check(_endsWith(...args));
      inst.min = (...args) => inst.check(_minLength(...args));
      inst.max = (...args) => inst.check(_maxLength(...args));
      inst.length = (...args) => inst.check(_length(...args));
      inst.nonempty = (...args) => inst.check(_minLength(1, ...args));
      inst.lowercase = (params) => inst.check(_lowercase(params));
      inst.uppercase = (params) => inst.check(_uppercase(params));
      inst.trim = () => inst.check(_trim());
      inst.normalize = (...args) => inst.check(_normalize(...args));
      inst.toLowerCase = () => inst.check(_toLowerCase());
      inst.toUpperCase = () => inst.check(_toUpperCase());
    });
    ZodString = /* @__PURE__ */ $constructor("ZodString", (inst, def) => {
      $ZodString.init(inst, def);
      _ZodString.init(inst, def);
      inst.email = (params) => inst.check(_email(ZodEmail, params));
      inst.url = (params) => inst.check(_url(ZodURL, params));
      inst.jwt = (params) => inst.check(_jwt(ZodJWT, params));
      inst.emoji = (params) => inst.check(_emoji2(ZodEmoji, params));
      inst.guid = (params) => inst.check(_guid(ZodGUID, params));
      inst.uuid = (params) => inst.check(_uuid(ZodUUID, params));
      inst.uuidv4 = (params) => inst.check(_uuidv4(ZodUUID, params));
      inst.uuidv6 = (params) => inst.check(_uuidv6(ZodUUID, params));
      inst.uuidv7 = (params) => inst.check(_uuidv7(ZodUUID, params));
      inst.nanoid = (params) => inst.check(_nanoid(ZodNanoID, params));
      inst.guid = (params) => inst.check(_guid(ZodGUID, params));
      inst.cuid = (params) => inst.check(_cuid(ZodCUID, params));
      inst.cuid2 = (params) => inst.check(_cuid2(ZodCUID2, params));
      inst.ulid = (params) => inst.check(_ulid(ZodULID, params));
      inst.base64 = (params) => inst.check(_base64(ZodBase64, params));
      inst.base64url = (params) => inst.check(_base64url(ZodBase64URL, params));
      inst.xid = (params) => inst.check(_xid(ZodXID, params));
      inst.ksuid = (params) => inst.check(_ksuid(ZodKSUID, params));
      inst.ipv4 = (params) => inst.check(_ipv4(ZodIPv4, params));
      inst.ipv6 = (params) => inst.check(_ipv6(ZodIPv6, params));
      inst.cidrv4 = (params) => inst.check(_cidrv4(ZodCIDRv4, params));
      inst.cidrv6 = (params) => inst.check(_cidrv6(ZodCIDRv6, params));
      inst.e164 = (params) => inst.check(_e164(ZodE164, params));
      inst.datetime = (params) => inst.check(datetime2(params));
      inst.date = (params) => inst.check(date2(params));
      inst.time = (params) => inst.check(time2(params));
      inst.duration = (params) => inst.check(duration2(params));
    });
    __name2(string2, "string");
    ZodStringFormat = /* @__PURE__ */ $constructor("ZodStringFormat", (inst, def) => {
      $ZodStringFormat.init(inst, def);
      _ZodString.init(inst, def);
    });
    ZodEmail = /* @__PURE__ */ $constructor("ZodEmail", (inst, def) => {
      $ZodEmail.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    __name2(email2, "email");
    ZodGUID = /* @__PURE__ */ $constructor("ZodGUID", (inst, def) => {
      $ZodGUID.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    __name2(guid2, "guid");
    ZodUUID = /* @__PURE__ */ $constructor("ZodUUID", (inst, def) => {
      $ZodUUID.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    __name2(uuid2, "uuid");
    __name2(uuidv4, "uuidv4");
    __name2(uuidv6, "uuidv6");
    __name2(uuidv7, "uuidv7");
    ZodURL = /* @__PURE__ */ $constructor("ZodURL", (inst, def) => {
      $ZodURL.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    __name2(url, "url");
    __name2(httpUrl, "httpUrl");
    ZodEmoji = /* @__PURE__ */ $constructor("ZodEmoji", (inst, def) => {
      $ZodEmoji.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    __name2(emoji2, "emoji");
    ZodNanoID = /* @__PURE__ */ $constructor("ZodNanoID", (inst, def) => {
      $ZodNanoID.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    __name2(nanoid2, "nanoid");
    ZodCUID = /* @__PURE__ */ $constructor("ZodCUID", (inst, def) => {
      $ZodCUID.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    __name2(cuid3, "cuid");
    ZodCUID2 = /* @__PURE__ */ $constructor("ZodCUID2", (inst, def) => {
      $ZodCUID2.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    __name2(cuid22, "cuid2");
    ZodULID = /* @__PURE__ */ $constructor("ZodULID", (inst, def) => {
      $ZodULID.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    __name2(ulid2, "ulid");
    ZodXID = /* @__PURE__ */ $constructor("ZodXID", (inst, def) => {
      $ZodXID.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    __name2(xid2, "xid");
    ZodKSUID = /* @__PURE__ */ $constructor("ZodKSUID", (inst, def) => {
      $ZodKSUID.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    __name2(ksuid2, "ksuid");
    ZodIPv4 = /* @__PURE__ */ $constructor("ZodIPv4", (inst, def) => {
      $ZodIPv4.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    __name2(ipv42, "ipv4");
    ZodIPv6 = /* @__PURE__ */ $constructor("ZodIPv6", (inst, def) => {
      $ZodIPv6.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    __name2(ipv62, "ipv6");
    ZodCIDRv4 = /* @__PURE__ */ $constructor("ZodCIDRv4", (inst, def) => {
      $ZodCIDRv4.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    __name2(cidrv42, "cidrv4");
    ZodCIDRv6 = /* @__PURE__ */ $constructor("ZodCIDRv6", (inst, def) => {
      $ZodCIDRv6.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    __name2(cidrv62, "cidrv6");
    ZodBase64 = /* @__PURE__ */ $constructor("ZodBase64", (inst, def) => {
      $ZodBase64.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    __name2(base642, "base64");
    ZodBase64URL = /* @__PURE__ */ $constructor("ZodBase64URL", (inst, def) => {
      $ZodBase64URL.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    __name2(base64url2, "base64url");
    ZodE164 = /* @__PURE__ */ $constructor("ZodE164", (inst, def) => {
      $ZodE164.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    __name2(e1642, "e164");
    ZodJWT = /* @__PURE__ */ $constructor("ZodJWT", (inst, def) => {
      $ZodJWT.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    __name2(jwt, "jwt");
    ZodCustomStringFormat = /* @__PURE__ */ $constructor("ZodCustomStringFormat", (inst, def) => {
      $ZodCustomStringFormat.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    __name2(stringFormat, "stringFormat");
    __name2(hostname2, "hostname");
    __name2(hex2, "hex");
    __name2(hash, "hash");
    ZodNumber = /* @__PURE__ */ $constructor("ZodNumber", (inst, def) => {
      $ZodNumber.init(inst, def);
      ZodType.init(inst, def);
      inst.gt = (value, params) => inst.check(_gt(value, params));
      inst.gte = (value, params) => inst.check(_gte(value, params));
      inst.min = (value, params) => inst.check(_gte(value, params));
      inst.lt = (value, params) => inst.check(_lt(value, params));
      inst.lte = (value, params) => inst.check(_lte(value, params));
      inst.max = (value, params) => inst.check(_lte(value, params));
      inst.int = (params) => inst.check(int(params));
      inst.safe = (params) => inst.check(int(params));
      inst.positive = (params) => inst.check(_gt(0, params));
      inst.nonnegative = (params) => inst.check(_gte(0, params));
      inst.negative = (params) => inst.check(_lt(0, params));
      inst.nonpositive = (params) => inst.check(_lte(0, params));
      inst.multipleOf = (value, params) => inst.check(_multipleOf(value, params));
      inst.step = (value, params) => inst.check(_multipleOf(value, params));
      inst.finite = () => inst;
      const bag = inst._zod.bag;
      inst.minValue = Math.max(bag.minimum ?? Number.NEGATIVE_INFINITY, bag.exclusiveMinimum ?? Number.NEGATIVE_INFINITY) ?? null;
      inst.maxValue = Math.min(bag.maximum ?? Number.POSITIVE_INFINITY, bag.exclusiveMaximum ?? Number.POSITIVE_INFINITY) ?? null;
      inst.isInt = (bag.format ?? "").includes("int") || Number.isSafeInteger(bag.multipleOf ?? 0.5);
      inst.isFinite = true;
      inst.format = bag.format ?? null;
    });
    __name2(number2, "number");
    ZodNumberFormat = /* @__PURE__ */ $constructor("ZodNumberFormat", (inst, def) => {
      $ZodNumberFormat.init(inst, def);
      ZodNumber.init(inst, def);
    });
    __name2(int, "int");
    __name2(float32, "float32");
    __name2(float64, "float64");
    __name2(int32, "int32");
    __name2(uint32, "uint32");
    ZodBoolean = /* @__PURE__ */ $constructor("ZodBoolean", (inst, def) => {
      $ZodBoolean.init(inst, def);
      ZodType.init(inst, def);
    });
    __name2(boolean2, "boolean");
    ZodBigInt = /* @__PURE__ */ $constructor("ZodBigInt", (inst, def) => {
      $ZodBigInt.init(inst, def);
      ZodType.init(inst, def);
      inst.gte = (value, params) => inst.check(_gte(value, params));
      inst.min = (value, params) => inst.check(_gte(value, params));
      inst.gt = (value, params) => inst.check(_gt(value, params));
      inst.gte = (value, params) => inst.check(_gte(value, params));
      inst.min = (value, params) => inst.check(_gte(value, params));
      inst.lt = (value, params) => inst.check(_lt(value, params));
      inst.lte = (value, params) => inst.check(_lte(value, params));
      inst.max = (value, params) => inst.check(_lte(value, params));
      inst.positive = (params) => inst.check(_gt(BigInt(0), params));
      inst.negative = (params) => inst.check(_lt(BigInt(0), params));
      inst.nonpositive = (params) => inst.check(_lte(BigInt(0), params));
      inst.nonnegative = (params) => inst.check(_gte(BigInt(0), params));
      inst.multipleOf = (value, params) => inst.check(_multipleOf(value, params));
      const bag = inst._zod.bag;
      inst.minValue = bag.minimum ?? null;
      inst.maxValue = bag.maximum ?? null;
      inst.format = bag.format ?? null;
    });
    __name2(bigint2, "bigint");
    ZodBigIntFormat = /* @__PURE__ */ $constructor("ZodBigIntFormat", (inst, def) => {
      $ZodBigIntFormat.init(inst, def);
      ZodBigInt.init(inst, def);
    });
    __name2(int64, "int64");
    __name2(uint64, "uint64");
    ZodSymbol = /* @__PURE__ */ $constructor("ZodSymbol", (inst, def) => {
      $ZodSymbol.init(inst, def);
      ZodType.init(inst, def);
    });
    __name2(symbol, "symbol");
    ZodUndefined = /* @__PURE__ */ $constructor("ZodUndefined", (inst, def) => {
      $ZodUndefined.init(inst, def);
      ZodType.init(inst, def);
    });
    __name2(_undefined3, "_undefined");
    ZodNull = /* @__PURE__ */ $constructor("ZodNull", (inst, def) => {
      $ZodNull.init(inst, def);
      ZodType.init(inst, def);
    });
    __name2(_null3, "_null");
    ZodAny = /* @__PURE__ */ $constructor("ZodAny", (inst, def) => {
      $ZodAny.init(inst, def);
      ZodType.init(inst, def);
    });
    __name2(any, "any");
    ZodUnknown = /* @__PURE__ */ $constructor("ZodUnknown", (inst, def) => {
      $ZodUnknown.init(inst, def);
      ZodType.init(inst, def);
    });
    __name2(unknown, "unknown");
    ZodNever = /* @__PURE__ */ $constructor("ZodNever", (inst, def) => {
      $ZodNever.init(inst, def);
      ZodType.init(inst, def);
    });
    __name2(never, "never");
    ZodVoid = /* @__PURE__ */ $constructor("ZodVoid", (inst, def) => {
      $ZodVoid.init(inst, def);
      ZodType.init(inst, def);
    });
    __name2(_void2, "_void");
    ZodDate = /* @__PURE__ */ $constructor("ZodDate", (inst, def) => {
      $ZodDate.init(inst, def);
      ZodType.init(inst, def);
      inst.min = (value, params) => inst.check(_gte(value, params));
      inst.max = (value, params) => inst.check(_lte(value, params));
      const c2 = inst._zod.bag;
      inst.minDate = c2.minimum ? new Date(c2.minimum) : null;
      inst.maxDate = c2.maximum ? new Date(c2.maximum) : null;
    });
    __name2(date3, "date");
    ZodArray = /* @__PURE__ */ $constructor("ZodArray", (inst, def) => {
      $ZodArray.init(inst, def);
      ZodType.init(inst, def);
      inst.element = def.element;
      inst.min = (minLength, params) => inst.check(_minLength(minLength, params));
      inst.nonempty = (params) => inst.check(_minLength(1, params));
      inst.max = (maxLength, params) => inst.check(_maxLength(maxLength, params));
      inst.length = (len, params) => inst.check(_length(len, params));
      inst.unwrap = () => inst.element;
    });
    __name2(array, "array");
    __name2(keyof, "keyof");
    ZodObject = /* @__PURE__ */ $constructor("ZodObject", (inst, def) => {
      $ZodObjectJIT.init(inst, def);
      ZodType.init(inst, def);
      util_exports.defineLazy(inst, "shape", () => def.shape);
      inst.keyof = () => _enum2(Object.keys(inst._zod.def.shape));
      inst.catchall = (catchall) => inst.clone({ ...inst._zod.def, catchall });
      inst.passthrough = () => inst.clone({ ...inst._zod.def, catchall: unknown() });
      inst.loose = () => inst.clone({ ...inst._zod.def, catchall: unknown() });
      inst.strict = () => inst.clone({ ...inst._zod.def, catchall: never() });
      inst.strip = () => inst.clone({ ...inst._zod.def, catchall: void 0 });
      inst.extend = (incoming) => {
        return util_exports.extend(inst, incoming);
      };
      inst.safeExtend = (incoming) => {
        return util_exports.safeExtend(inst, incoming);
      };
      inst.merge = (other) => util_exports.merge(inst, other);
      inst.pick = (mask) => util_exports.pick(inst, mask);
      inst.omit = (mask) => util_exports.omit(inst, mask);
      inst.partial = (...args) => util_exports.partial(ZodOptional, inst, args[0]);
      inst.required = (...args) => util_exports.required(ZodNonOptional, inst, args[0]);
    });
    __name2(object, "object");
    __name2(strictObject, "strictObject");
    __name2(looseObject, "looseObject");
    ZodUnion = /* @__PURE__ */ $constructor("ZodUnion", (inst, def) => {
      $ZodUnion.init(inst, def);
      ZodType.init(inst, def);
      inst.options = def.options;
    });
    __name2(union, "union");
    ZodDiscriminatedUnion = /* @__PURE__ */ $constructor("ZodDiscriminatedUnion", (inst, def) => {
      ZodUnion.init(inst, def);
      $ZodDiscriminatedUnion.init(inst, def);
    });
    __name2(discriminatedUnion, "discriminatedUnion");
    ZodIntersection = /* @__PURE__ */ $constructor("ZodIntersection", (inst, def) => {
      $ZodIntersection.init(inst, def);
      ZodType.init(inst, def);
    });
    __name2(intersection, "intersection");
    ZodTuple = /* @__PURE__ */ $constructor("ZodTuple", (inst, def) => {
      $ZodTuple.init(inst, def);
      ZodType.init(inst, def);
      inst.rest = (rest) => inst.clone({
        ...inst._zod.def,
        rest
      });
    });
    __name2(tuple, "tuple");
    ZodRecord = /* @__PURE__ */ $constructor("ZodRecord", (inst, def) => {
      $ZodRecord.init(inst, def);
      ZodType.init(inst, def);
      inst.keyType = def.keyType;
      inst.valueType = def.valueType;
    });
    __name2(record, "record");
    __name2(partialRecord, "partialRecord");
    ZodMap = /* @__PURE__ */ $constructor("ZodMap", (inst, def) => {
      $ZodMap.init(inst, def);
      ZodType.init(inst, def);
      inst.keyType = def.keyType;
      inst.valueType = def.valueType;
    });
    __name2(map, "map");
    ZodSet = /* @__PURE__ */ $constructor("ZodSet", (inst, def) => {
      $ZodSet.init(inst, def);
      ZodType.init(inst, def);
      inst.min = (...args) => inst.check(_minSize(...args));
      inst.nonempty = (params) => inst.check(_minSize(1, params));
      inst.max = (...args) => inst.check(_maxSize(...args));
      inst.size = (...args) => inst.check(_size(...args));
    });
    __name2(set, "set");
    ZodEnum = /* @__PURE__ */ $constructor("ZodEnum", (inst, def) => {
      $ZodEnum.init(inst, def);
      ZodType.init(inst, def);
      inst.enum = def.entries;
      inst.options = Object.values(def.entries);
      const keys = new Set(Object.keys(def.entries));
      inst.extract = (values, params) => {
        const newEntries = {};
        for (const value of values) {
          if (keys.has(value)) {
            newEntries[value] = def.entries[value];
          } else
            throw new Error(`Key ${value} not found in enum`);
        }
        return new ZodEnum({
          ...def,
          checks: [],
          ...util_exports.normalizeParams(params),
          entries: newEntries
        });
      };
      inst.exclude = (values, params) => {
        const newEntries = { ...def.entries };
        for (const value of values) {
          if (keys.has(value)) {
            delete newEntries[value];
          } else
            throw new Error(`Key ${value} not found in enum`);
        }
        return new ZodEnum({
          ...def,
          checks: [],
          ...util_exports.normalizeParams(params),
          entries: newEntries
        });
      };
    });
    __name2(_enum2, "_enum");
    __name2(nativeEnum, "nativeEnum");
    ZodLiteral = /* @__PURE__ */ $constructor("ZodLiteral", (inst, def) => {
      $ZodLiteral.init(inst, def);
      ZodType.init(inst, def);
      inst.values = new Set(def.values);
      Object.defineProperty(inst, "value", {
        get() {
          if (def.values.length > 1) {
            throw new Error("This schema contains multiple valid literal values. Use `.values` instead.");
          }
          return def.values[0];
        }
      });
    });
    __name2(literal, "literal");
    ZodFile = /* @__PURE__ */ $constructor("ZodFile", (inst, def) => {
      $ZodFile.init(inst, def);
      ZodType.init(inst, def);
      inst.min = (size, params) => inst.check(_minSize(size, params));
      inst.max = (size, params) => inst.check(_maxSize(size, params));
      inst.mime = (types, params) => inst.check(_mime(Array.isArray(types) ? types : [types], params));
    });
    __name2(file, "file");
    ZodTransform = /* @__PURE__ */ $constructor("ZodTransform", (inst, def) => {
      $ZodTransform.init(inst, def);
      ZodType.init(inst, def);
      inst._zod.parse = (payload, _ctx) => {
        if (_ctx.direction === "backward") {
          throw new $ZodEncodeError(inst.constructor.name);
        }
        payload.addIssue = (issue2) => {
          if (typeof issue2 === "string") {
            payload.issues.push(util_exports.issue(issue2, payload.value, def));
          } else {
            const _issue = issue2;
            if (_issue.fatal)
              _issue.continue = false;
            _issue.code ?? (_issue.code = "custom");
            _issue.input ?? (_issue.input = payload.value);
            _issue.inst ?? (_issue.inst = inst);
            payload.issues.push(util_exports.issue(_issue));
          }
        };
        const output = def.transform(payload.value, payload);
        if (output instanceof Promise) {
          return output.then((output2) => {
            payload.value = output2;
            return payload;
          });
        }
        payload.value = output;
        return payload;
      };
    });
    __name2(transform, "transform");
    ZodOptional = /* @__PURE__ */ $constructor("ZodOptional", (inst, def) => {
      $ZodOptional.init(inst, def);
      ZodType.init(inst, def);
      inst.unwrap = () => inst._zod.def.innerType;
    });
    __name2(optional, "optional");
    ZodNullable = /* @__PURE__ */ $constructor("ZodNullable", (inst, def) => {
      $ZodNullable.init(inst, def);
      ZodType.init(inst, def);
      inst.unwrap = () => inst._zod.def.innerType;
    });
    __name2(nullable, "nullable");
    __name2(nullish2, "nullish");
    ZodDefault = /* @__PURE__ */ $constructor("ZodDefault", (inst, def) => {
      $ZodDefault.init(inst, def);
      ZodType.init(inst, def);
      inst.unwrap = () => inst._zod.def.innerType;
      inst.removeDefault = inst.unwrap;
    });
    __name2(_default2, "_default");
    ZodPrefault = /* @__PURE__ */ $constructor("ZodPrefault", (inst, def) => {
      $ZodPrefault.init(inst, def);
      ZodType.init(inst, def);
      inst.unwrap = () => inst._zod.def.innerType;
    });
    __name2(prefault, "prefault");
    ZodNonOptional = /* @__PURE__ */ $constructor("ZodNonOptional", (inst, def) => {
      $ZodNonOptional.init(inst, def);
      ZodType.init(inst, def);
      inst.unwrap = () => inst._zod.def.innerType;
    });
    __name2(nonoptional, "nonoptional");
    ZodSuccess = /* @__PURE__ */ $constructor("ZodSuccess", (inst, def) => {
      $ZodSuccess.init(inst, def);
      ZodType.init(inst, def);
      inst.unwrap = () => inst._zod.def.innerType;
    });
    __name2(success, "success");
    ZodCatch = /* @__PURE__ */ $constructor("ZodCatch", (inst, def) => {
      $ZodCatch.init(inst, def);
      ZodType.init(inst, def);
      inst.unwrap = () => inst._zod.def.innerType;
      inst.removeCatch = inst.unwrap;
    });
    __name2(_catch2, "_catch");
    ZodNaN = /* @__PURE__ */ $constructor("ZodNaN", (inst, def) => {
      $ZodNaN.init(inst, def);
      ZodType.init(inst, def);
    });
    __name2(nan, "nan");
    ZodPipe = /* @__PURE__ */ $constructor("ZodPipe", (inst, def) => {
      $ZodPipe.init(inst, def);
      ZodType.init(inst, def);
      inst.in = def.in;
      inst.out = def.out;
    });
    __name2(pipe, "pipe");
    ZodCodec = /* @__PURE__ */ $constructor("ZodCodec", (inst, def) => {
      ZodPipe.init(inst, def);
      $ZodCodec.init(inst, def);
    });
    __name2(codec, "codec");
    ZodReadonly = /* @__PURE__ */ $constructor("ZodReadonly", (inst, def) => {
      $ZodReadonly.init(inst, def);
      ZodType.init(inst, def);
      inst.unwrap = () => inst._zod.def.innerType;
    });
    __name2(readonly, "readonly");
    ZodTemplateLiteral = /* @__PURE__ */ $constructor("ZodTemplateLiteral", (inst, def) => {
      $ZodTemplateLiteral.init(inst, def);
      ZodType.init(inst, def);
    });
    __name2(templateLiteral, "templateLiteral");
    ZodLazy = /* @__PURE__ */ $constructor("ZodLazy", (inst, def) => {
      $ZodLazy.init(inst, def);
      ZodType.init(inst, def);
      inst.unwrap = () => inst._zod.def.getter();
    });
    __name2(lazy, "lazy");
    ZodPromise = /* @__PURE__ */ $constructor("ZodPromise", (inst, def) => {
      $ZodPromise.init(inst, def);
      ZodType.init(inst, def);
      inst.unwrap = () => inst._zod.def.innerType;
    });
    __name2(promise, "promise");
    ZodFunction = /* @__PURE__ */ $constructor("ZodFunction", (inst, def) => {
      $ZodFunction.init(inst, def);
      ZodType.init(inst, def);
    });
    __name2(_function, "_function");
    ZodCustom = /* @__PURE__ */ $constructor("ZodCustom", (inst, def) => {
      $ZodCustom.init(inst, def);
      ZodType.init(inst, def);
    });
    __name2(check, "check");
    __name2(custom, "custom");
    __name2(refine, "refine");
    __name2(superRefine, "superRefine");
    __name2(_instanceof, "_instanceof");
    stringbool = /* @__PURE__ */ __name2((...args) => _stringbool({
      Codec: ZodCodec,
      Boolean: ZodBoolean,
      String: ZodString
    }, ...args), "stringbool");
    __name2(json, "json");
    __name2(preprocess, "preprocess");
  }
});
function setErrorMap(map3) {
  config({
    customError: map3
  });
}
__name(setErrorMap, "setErrorMap");
function getErrorMap() {
  return config().customError;
}
__name(getErrorMap, "getErrorMap");
var ZodIssueCode;
var ZodFirstPartyTypeKind;
var init_compat = __esm({
  "../node_modules/zod/v4/classic/compat.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_core2();
    init_core2();
    ZodIssueCode = {
      invalid_type: "invalid_type",
      too_big: "too_big",
      too_small: "too_small",
      invalid_format: "invalid_format",
      not_multiple_of: "not_multiple_of",
      unrecognized_keys: "unrecognized_keys",
      invalid_union: "invalid_union",
      invalid_key: "invalid_key",
      invalid_element: "invalid_element",
      invalid_value: "invalid_value",
      custom: "custom"
    };
    __name2(setErrorMap, "setErrorMap");
    __name2(getErrorMap, "getErrorMap");
    /* @__PURE__ */ (function(ZodFirstPartyTypeKind2) {
    })(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
  }
});
var coerce_exports = {};
__export(coerce_exports, {
  bigint: /* @__PURE__ */ __name(() => bigint3, "bigint"),
  boolean: /* @__PURE__ */ __name(() => boolean3, "boolean"),
  date: /* @__PURE__ */ __name(() => date4, "date"),
  number: /* @__PURE__ */ __name(() => number3, "number"),
  string: /* @__PURE__ */ __name(() => string3, "string")
});
function string3(params) {
  return _coercedString(ZodString, params);
}
__name(string3, "string3");
function number3(params) {
  return _coercedNumber(ZodNumber, params);
}
__name(number3, "number3");
function boolean3(params) {
  return _coercedBoolean(ZodBoolean, params);
}
__name(boolean3, "boolean3");
function bigint3(params) {
  return _coercedBigint(ZodBigInt, params);
}
__name(bigint3, "bigint3");
function date4(params) {
  return _coercedDate(ZodDate, params);
}
__name(date4, "date4");
var init_coerce = __esm({
  "../node_modules/zod/v4/classic/coerce.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_core2();
    init_schemas2();
    __name2(string3, "string");
    __name2(number3, "number");
    __name2(boolean3, "boolean");
    __name2(bigint3, "bigint");
    __name2(date4, "date");
  }
});
var external_exports = {};
__export(external_exports, {
  $brand: /* @__PURE__ */ __name(() => $brand, "$brand"),
  $input: /* @__PURE__ */ __name(() => $input, "$input"),
  $output: /* @__PURE__ */ __name(() => $output, "$output"),
  NEVER: /* @__PURE__ */ __name(() => NEVER, "NEVER"),
  TimePrecision: /* @__PURE__ */ __name(() => TimePrecision, "TimePrecision"),
  ZodAny: /* @__PURE__ */ __name(() => ZodAny, "ZodAny"),
  ZodArray: /* @__PURE__ */ __name(() => ZodArray, "ZodArray"),
  ZodBase64: /* @__PURE__ */ __name(() => ZodBase64, "ZodBase64"),
  ZodBase64URL: /* @__PURE__ */ __name(() => ZodBase64URL, "ZodBase64URL"),
  ZodBigInt: /* @__PURE__ */ __name(() => ZodBigInt, "ZodBigInt"),
  ZodBigIntFormat: /* @__PURE__ */ __name(() => ZodBigIntFormat, "ZodBigIntFormat"),
  ZodBoolean: /* @__PURE__ */ __name(() => ZodBoolean, "ZodBoolean"),
  ZodCIDRv4: /* @__PURE__ */ __name(() => ZodCIDRv4, "ZodCIDRv4"),
  ZodCIDRv6: /* @__PURE__ */ __name(() => ZodCIDRv6, "ZodCIDRv6"),
  ZodCUID: /* @__PURE__ */ __name(() => ZodCUID, "ZodCUID"),
  ZodCUID2: /* @__PURE__ */ __name(() => ZodCUID2, "ZodCUID2"),
  ZodCatch: /* @__PURE__ */ __name(() => ZodCatch, "ZodCatch"),
  ZodCodec: /* @__PURE__ */ __name(() => ZodCodec, "ZodCodec"),
  ZodCustom: /* @__PURE__ */ __name(() => ZodCustom, "ZodCustom"),
  ZodCustomStringFormat: /* @__PURE__ */ __name(() => ZodCustomStringFormat, "ZodCustomStringFormat"),
  ZodDate: /* @__PURE__ */ __name(() => ZodDate, "ZodDate"),
  ZodDefault: /* @__PURE__ */ __name(() => ZodDefault, "ZodDefault"),
  ZodDiscriminatedUnion: /* @__PURE__ */ __name(() => ZodDiscriminatedUnion, "ZodDiscriminatedUnion"),
  ZodE164: /* @__PURE__ */ __name(() => ZodE164, "ZodE164"),
  ZodEmail: /* @__PURE__ */ __name(() => ZodEmail, "ZodEmail"),
  ZodEmoji: /* @__PURE__ */ __name(() => ZodEmoji, "ZodEmoji"),
  ZodEnum: /* @__PURE__ */ __name(() => ZodEnum, "ZodEnum"),
  ZodError: /* @__PURE__ */ __name(() => ZodError, "ZodError"),
  ZodFile: /* @__PURE__ */ __name(() => ZodFile, "ZodFile"),
  ZodFirstPartyTypeKind: /* @__PURE__ */ __name(() => ZodFirstPartyTypeKind, "ZodFirstPartyTypeKind"),
  ZodFunction: /* @__PURE__ */ __name(() => ZodFunction, "ZodFunction"),
  ZodGUID: /* @__PURE__ */ __name(() => ZodGUID, "ZodGUID"),
  ZodIPv4: /* @__PURE__ */ __name(() => ZodIPv4, "ZodIPv4"),
  ZodIPv6: /* @__PURE__ */ __name(() => ZodIPv6, "ZodIPv6"),
  ZodISODate: /* @__PURE__ */ __name(() => ZodISODate, "ZodISODate"),
  ZodISODateTime: /* @__PURE__ */ __name(() => ZodISODateTime, "ZodISODateTime"),
  ZodISODuration: /* @__PURE__ */ __name(() => ZodISODuration, "ZodISODuration"),
  ZodISOTime: /* @__PURE__ */ __name(() => ZodISOTime, "ZodISOTime"),
  ZodIntersection: /* @__PURE__ */ __name(() => ZodIntersection, "ZodIntersection"),
  ZodIssueCode: /* @__PURE__ */ __name(() => ZodIssueCode, "ZodIssueCode"),
  ZodJWT: /* @__PURE__ */ __name(() => ZodJWT, "ZodJWT"),
  ZodKSUID: /* @__PURE__ */ __name(() => ZodKSUID, "ZodKSUID"),
  ZodLazy: /* @__PURE__ */ __name(() => ZodLazy, "ZodLazy"),
  ZodLiteral: /* @__PURE__ */ __name(() => ZodLiteral, "ZodLiteral"),
  ZodMap: /* @__PURE__ */ __name(() => ZodMap, "ZodMap"),
  ZodNaN: /* @__PURE__ */ __name(() => ZodNaN, "ZodNaN"),
  ZodNanoID: /* @__PURE__ */ __name(() => ZodNanoID, "ZodNanoID"),
  ZodNever: /* @__PURE__ */ __name(() => ZodNever, "ZodNever"),
  ZodNonOptional: /* @__PURE__ */ __name(() => ZodNonOptional, "ZodNonOptional"),
  ZodNull: /* @__PURE__ */ __name(() => ZodNull, "ZodNull"),
  ZodNullable: /* @__PURE__ */ __name(() => ZodNullable, "ZodNullable"),
  ZodNumber: /* @__PURE__ */ __name(() => ZodNumber, "ZodNumber"),
  ZodNumberFormat: /* @__PURE__ */ __name(() => ZodNumberFormat, "ZodNumberFormat"),
  ZodObject: /* @__PURE__ */ __name(() => ZodObject, "ZodObject"),
  ZodOptional: /* @__PURE__ */ __name(() => ZodOptional, "ZodOptional"),
  ZodPipe: /* @__PURE__ */ __name(() => ZodPipe, "ZodPipe"),
  ZodPrefault: /* @__PURE__ */ __name(() => ZodPrefault, "ZodPrefault"),
  ZodPromise: /* @__PURE__ */ __name(() => ZodPromise, "ZodPromise"),
  ZodReadonly: /* @__PURE__ */ __name(() => ZodReadonly, "ZodReadonly"),
  ZodRealError: /* @__PURE__ */ __name(() => ZodRealError, "ZodRealError"),
  ZodRecord: /* @__PURE__ */ __name(() => ZodRecord, "ZodRecord"),
  ZodSet: /* @__PURE__ */ __name(() => ZodSet, "ZodSet"),
  ZodString: /* @__PURE__ */ __name(() => ZodString, "ZodString"),
  ZodStringFormat: /* @__PURE__ */ __name(() => ZodStringFormat, "ZodStringFormat"),
  ZodSuccess: /* @__PURE__ */ __name(() => ZodSuccess, "ZodSuccess"),
  ZodSymbol: /* @__PURE__ */ __name(() => ZodSymbol, "ZodSymbol"),
  ZodTemplateLiteral: /* @__PURE__ */ __name(() => ZodTemplateLiteral, "ZodTemplateLiteral"),
  ZodTransform: /* @__PURE__ */ __name(() => ZodTransform, "ZodTransform"),
  ZodTuple: /* @__PURE__ */ __name(() => ZodTuple, "ZodTuple"),
  ZodType: /* @__PURE__ */ __name(() => ZodType, "ZodType"),
  ZodULID: /* @__PURE__ */ __name(() => ZodULID, "ZodULID"),
  ZodURL: /* @__PURE__ */ __name(() => ZodURL, "ZodURL"),
  ZodUUID: /* @__PURE__ */ __name(() => ZodUUID, "ZodUUID"),
  ZodUndefined: /* @__PURE__ */ __name(() => ZodUndefined, "ZodUndefined"),
  ZodUnion: /* @__PURE__ */ __name(() => ZodUnion, "ZodUnion"),
  ZodUnknown: /* @__PURE__ */ __name(() => ZodUnknown, "ZodUnknown"),
  ZodVoid: /* @__PURE__ */ __name(() => ZodVoid, "ZodVoid"),
  ZodXID: /* @__PURE__ */ __name(() => ZodXID, "ZodXID"),
  _ZodString: /* @__PURE__ */ __name(() => _ZodString, "_ZodString"),
  _default: /* @__PURE__ */ __name(() => _default2, "_default"),
  _function: /* @__PURE__ */ __name(() => _function, "_function"),
  any: /* @__PURE__ */ __name(() => any, "any"),
  array: /* @__PURE__ */ __name(() => array, "array"),
  base64: /* @__PURE__ */ __name(() => base642, "base64"),
  base64url: /* @__PURE__ */ __name(() => base64url2, "base64url"),
  bigint: /* @__PURE__ */ __name(() => bigint2, "bigint"),
  boolean: /* @__PURE__ */ __name(() => boolean2, "boolean"),
  catch: /* @__PURE__ */ __name(() => _catch2, "catch"),
  check: /* @__PURE__ */ __name(() => check, "check"),
  cidrv4: /* @__PURE__ */ __name(() => cidrv42, "cidrv4"),
  cidrv6: /* @__PURE__ */ __name(() => cidrv62, "cidrv6"),
  clone: /* @__PURE__ */ __name(() => clone, "clone"),
  codec: /* @__PURE__ */ __name(() => codec, "codec"),
  coerce: /* @__PURE__ */ __name(() => coerce_exports, "coerce"),
  config: /* @__PURE__ */ __name(() => config, "config"),
  core: /* @__PURE__ */ __name(() => core_exports2, "core"),
  cuid: /* @__PURE__ */ __name(() => cuid3, "cuid"),
  cuid2: /* @__PURE__ */ __name(() => cuid22, "cuid2"),
  custom: /* @__PURE__ */ __name(() => custom, "custom"),
  date: /* @__PURE__ */ __name(() => date3, "date"),
  decode: /* @__PURE__ */ __name(() => decode2, "decode"),
  decodeAsync: /* @__PURE__ */ __name(() => decodeAsync2, "decodeAsync"),
  discriminatedUnion: /* @__PURE__ */ __name(() => discriminatedUnion, "discriminatedUnion"),
  e164: /* @__PURE__ */ __name(() => e1642, "e164"),
  email: /* @__PURE__ */ __name(() => email2, "email"),
  emoji: /* @__PURE__ */ __name(() => emoji2, "emoji"),
  encode: /* @__PURE__ */ __name(() => encode2, "encode"),
  encodeAsync: /* @__PURE__ */ __name(() => encodeAsync2, "encodeAsync"),
  endsWith: /* @__PURE__ */ __name(() => _endsWith, "endsWith"),
  enum: /* @__PURE__ */ __name(() => _enum2, "enum"),
  file: /* @__PURE__ */ __name(() => file, "file"),
  flattenError: /* @__PURE__ */ __name(() => flattenError, "flattenError"),
  float32: /* @__PURE__ */ __name(() => float32, "float32"),
  float64: /* @__PURE__ */ __name(() => float64, "float64"),
  formatError: /* @__PURE__ */ __name(() => formatError, "formatError"),
  function: /* @__PURE__ */ __name(() => _function, "function"),
  getErrorMap: /* @__PURE__ */ __name(() => getErrorMap, "getErrorMap"),
  globalRegistry: /* @__PURE__ */ __name(() => globalRegistry, "globalRegistry"),
  gt: /* @__PURE__ */ __name(() => _gt, "gt"),
  gte: /* @__PURE__ */ __name(() => _gte, "gte"),
  guid: /* @__PURE__ */ __name(() => guid2, "guid"),
  hash: /* @__PURE__ */ __name(() => hash, "hash"),
  hex: /* @__PURE__ */ __name(() => hex2, "hex"),
  hostname: /* @__PURE__ */ __name(() => hostname2, "hostname"),
  httpUrl: /* @__PURE__ */ __name(() => httpUrl, "httpUrl"),
  includes: /* @__PURE__ */ __name(() => _includes, "includes"),
  instanceof: /* @__PURE__ */ __name(() => _instanceof, "instanceof"),
  int: /* @__PURE__ */ __name(() => int, "int"),
  int32: /* @__PURE__ */ __name(() => int32, "int32"),
  int64: /* @__PURE__ */ __name(() => int64, "int64"),
  intersection: /* @__PURE__ */ __name(() => intersection, "intersection"),
  ipv4: /* @__PURE__ */ __name(() => ipv42, "ipv4"),
  ipv6: /* @__PURE__ */ __name(() => ipv62, "ipv6"),
  iso: /* @__PURE__ */ __name(() => iso_exports, "iso"),
  json: /* @__PURE__ */ __name(() => json, "json"),
  jwt: /* @__PURE__ */ __name(() => jwt, "jwt"),
  keyof: /* @__PURE__ */ __name(() => keyof, "keyof"),
  ksuid: /* @__PURE__ */ __name(() => ksuid2, "ksuid"),
  lazy: /* @__PURE__ */ __name(() => lazy, "lazy"),
  length: /* @__PURE__ */ __name(() => _length, "length"),
  literal: /* @__PURE__ */ __name(() => literal, "literal"),
  locales: /* @__PURE__ */ __name(() => locales_exports, "locales"),
  looseObject: /* @__PURE__ */ __name(() => looseObject, "looseObject"),
  lowercase: /* @__PURE__ */ __name(() => _lowercase, "lowercase"),
  lt: /* @__PURE__ */ __name(() => _lt, "lt"),
  lte: /* @__PURE__ */ __name(() => _lte, "lte"),
  map: /* @__PURE__ */ __name(() => map, "map"),
  maxLength: /* @__PURE__ */ __name(() => _maxLength, "maxLength"),
  maxSize: /* @__PURE__ */ __name(() => _maxSize, "maxSize"),
  mime: /* @__PURE__ */ __name(() => _mime, "mime"),
  minLength: /* @__PURE__ */ __name(() => _minLength, "minLength"),
  minSize: /* @__PURE__ */ __name(() => _minSize, "minSize"),
  multipleOf: /* @__PURE__ */ __name(() => _multipleOf, "multipleOf"),
  nan: /* @__PURE__ */ __name(() => nan, "nan"),
  nanoid: /* @__PURE__ */ __name(() => nanoid2, "nanoid"),
  nativeEnum: /* @__PURE__ */ __name(() => nativeEnum, "nativeEnum"),
  negative: /* @__PURE__ */ __name(() => _negative, "negative"),
  never: /* @__PURE__ */ __name(() => never, "never"),
  nonnegative: /* @__PURE__ */ __name(() => _nonnegative, "nonnegative"),
  nonoptional: /* @__PURE__ */ __name(() => nonoptional, "nonoptional"),
  nonpositive: /* @__PURE__ */ __name(() => _nonpositive, "nonpositive"),
  normalize: /* @__PURE__ */ __name(() => _normalize, "normalize"),
  null: /* @__PURE__ */ __name(() => _null3, "null"),
  nullable: /* @__PURE__ */ __name(() => nullable, "nullable"),
  nullish: /* @__PURE__ */ __name(() => nullish2, "nullish"),
  number: /* @__PURE__ */ __name(() => number2, "number"),
  object: /* @__PURE__ */ __name(() => object, "object"),
  optional: /* @__PURE__ */ __name(() => optional, "optional"),
  overwrite: /* @__PURE__ */ __name(() => _overwrite, "overwrite"),
  parse: /* @__PURE__ */ __name(() => parse2, "parse"),
  parseAsync: /* @__PURE__ */ __name(() => parseAsync2, "parseAsync"),
  partialRecord: /* @__PURE__ */ __name(() => partialRecord, "partialRecord"),
  pipe: /* @__PURE__ */ __name(() => pipe, "pipe"),
  positive: /* @__PURE__ */ __name(() => _positive, "positive"),
  prefault: /* @__PURE__ */ __name(() => prefault, "prefault"),
  preprocess: /* @__PURE__ */ __name(() => preprocess, "preprocess"),
  prettifyError: /* @__PURE__ */ __name(() => prettifyError, "prettifyError"),
  promise: /* @__PURE__ */ __name(() => promise, "promise"),
  property: /* @__PURE__ */ __name(() => _property, "property"),
  readonly: /* @__PURE__ */ __name(() => readonly, "readonly"),
  record: /* @__PURE__ */ __name(() => record, "record"),
  refine: /* @__PURE__ */ __name(() => refine, "refine"),
  regex: /* @__PURE__ */ __name(() => _regex, "regex"),
  regexes: /* @__PURE__ */ __name(() => regexes_exports, "regexes"),
  registry: /* @__PURE__ */ __name(() => registry, "registry"),
  safeDecode: /* @__PURE__ */ __name(() => safeDecode2, "safeDecode"),
  safeDecodeAsync: /* @__PURE__ */ __name(() => safeDecodeAsync2, "safeDecodeAsync"),
  safeEncode: /* @__PURE__ */ __name(() => safeEncode2, "safeEncode"),
  safeEncodeAsync: /* @__PURE__ */ __name(() => safeEncodeAsync2, "safeEncodeAsync"),
  safeParse: /* @__PURE__ */ __name(() => safeParse2, "safeParse"),
  safeParseAsync: /* @__PURE__ */ __name(() => safeParseAsync2, "safeParseAsync"),
  set: /* @__PURE__ */ __name(() => set, "set"),
  setErrorMap: /* @__PURE__ */ __name(() => setErrorMap, "setErrorMap"),
  size: /* @__PURE__ */ __name(() => _size, "size"),
  startsWith: /* @__PURE__ */ __name(() => _startsWith, "startsWith"),
  strictObject: /* @__PURE__ */ __name(() => strictObject, "strictObject"),
  string: /* @__PURE__ */ __name(() => string2, "string"),
  stringFormat: /* @__PURE__ */ __name(() => stringFormat, "stringFormat"),
  stringbool: /* @__PURE__ */ __name(() => stringbool, "stringbool"),
  success: /* @__PURE__ */ __name(() => success, "success"),
  superRefine: /* @__PURE__ */ __name(() => superRefine, "superRefine"),
  symbol: /* @__PURE__ */ __name(() => symbol, "symbol"),
  templateLiteral: /* @__PURE__ */ __name(() => templateLiteral, "templateLiteral"),
  toJSONSchema: /* @__PURE__ */ __name(() => toJSONSchema, "toJSONSchema"),
  toLowerCase: /* @__PURE__ */ __name(() => _toLowerCase, "toLowerCase"),
  toUpperCase: /* @__PURE__ */ __name(() => _toUpperCase, "toUpperCase"),
  transform: /* @__PURE__ */ __name(() => transform, "transform"),
  treeifyError: /* @__PURE__ */ __name(() => treeifyError, "treeifyError"),
  trim: /* @__PURE__ */ __name(() => _trim, "trim"),
  tuple: /* @__PURE__ */ __name(() => tuple, "tuple"),
  uint32: /* @__PURE__ */ __name(() => uint32, "uint32"),
  uint64: /* @__PURE__ */ __name(() => uint64, "uint64"),
  ulid: /* @__PURE__ */ __name(() => ulid2, "ulid"),
  undefined: /* @__PURE__ */ __name(() => _undefined3, "undefined"),
  union: /* @__PURE__ */ __name(() => union, "union"),
  unknown: /* @__PURE__ */ __name(() => unknown, "unknown"),
  uppercase: /* @__PURE__ */ __name(() => _uppercase, "uppercase"),
  url: /* @__PURE__ */ __name(() => url, "url"),
  util: /* @__PURE__ */ __name(() => util_exports, "util"),
  uuid: /* @__PURE__ */ __name(() => uuid2, "uuid"),
  uuidv4: /* @__PURE__ */ __name(() => uuidv4, "uuidv4"),
  uuidv6: /* @__PURE__ */ __name(() => uuidv6, "uuidv6"),
  uuidv7: /* @__PURE__ */ __name(() => uuidv7, "uuidv7"),
  void: /* @__PURE__ */ __name(() => _void2, "void"),
  xid: /* @__PURE__ */ __name(() => xid2, "xid")
});
var init_external = __esm({
  "../node_modules/zod/v4/classic/external.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_core2();
    init_schemas2();
    init_checks2();
    init_errors2();
    init_parse2();
    init_compat();
    init_core2();
    init_en();
    init_core2();
    init_locales();
    init_iso();
    init_iso();
    init_coerce();
    config(en_default());
  }
});
var init_zod = __esm({
  "../node_modules/zod/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_external();
    init_external();
  }
});
function json2(data, init) {
  const status = typeof init === "number" ? init : init?.status ?? 200;
  const headers = new Headers(typeof init === "object" ? init.headers : void 0);
  if (!headers.has("content-type")) headers.set("content-type", "application/json; charset=utf-8");
  return new Response(JSON.stringify(data), { ...typeof init === "object" ? init : {}, status, headers });
}
__name(json2, "json2");
function newId(prefix = "id") {
  return `${prefix}_${crypto.randomUUID()}`;
}
__name(newId, "newId");
var RSVPSubmissionSchema;
var init_utils = __esm({
  "api/_utils.ts"() {
    init_functionsRoutes_0_09879299104094341();
    init_zod();
    RSVPSubmissionSchema = external_exports.object({
      contact: external_exports.object({
        email: external_exports.string().email().optional(),
        phone: external_exports.string().optional()
      }).optional(),
      members: external_exports.array(external_exports.object({
        memberId: external_exports.string(),
        attending: external_exports.object({
          ceremony: external_exports.boolean().nullable(),
          reception: external_exports.boolean().nullable()
        }),
        dietary: external_exports.string().max(500).optional(),
        notes: external_exports.string().max(1e3).optional()
      })),
      reminderOptIn: external_exports.boolean().optional()
    });
    __name2(json2, "json");
    __name2(newId, "newId");
  }
});
var onRequestPost;
var init_approve = __esm({
  "api/admin/photos/[id]/approve.ts"() {
    init_functionsRoutes_0_09879299104094341();
    init_utils();
    onRequestPost = /* @__PURE__ */ __name2(async ({ env, params }) => {
      const raw = String(params.id ?? "");
      const id = decodeURIComponent(raw);
      if (!id) return json2({ ok: false, message: "Missing id" }, { status: 400 });
      const res = await env.DB.prepare(`UPDATE photos SET status='approved', is_public=1 WHERE id=?`).bind(id).run();
      const changed = res?.meta?.changes ?? 0;
      if (!changed) return json2({ ok: false, message: "Photo not found" }, { status: 404 });
      return json2({ ok: true, id, changed });
    }, "onRequestPost");
  }
});
var onRequestPost2;
var init_reject = __esm({
  "api/admin/photos/[id]/reject.ts"() {
    init_functionsRoutes_0_09879299104094341();
    init_utils();
    onRequestPost2 = /* @__PURE__ */ __name2(async ({ env, params }) => {
      const raw = String(params.id ?? "");
      const id = decodeURIComponent(raw);
      if (!id) return json2({ ok: false, message: "Missing id" }, { status: 400 });
      const res = await env.DB.prepare(`UPDATE photos SET status='rejected', is_public=0 WHERE id=?`).bind(id).run();
      const changed = res?.meta?.changes ?? 0;
      if (!changed) return json2({ ok: false, message: "Photo not found" }, { status: 404 });
      const setting = await env.DB.prepare(
        `SELECT value FROM settings WHERE key='purge_rejected_uploads'`
      ).first();
      const shouldPurge = setting?.value ? setting.value === "1" : true;
      let r2Deleted = false;
      if (shouldPurge) {
        try {
          await env.R2.delete(id);
          r2Deleted = true;
        } catch (e2) {
          console.warn("R2 delete failed for", id, e2);
        }
      }
      return json2({ ok: true, id, r2Deleted, changed });
    }, "onRequestPost");
  }
});
function csvEscapeCell(s2) {
  return /[",\n]/.test(s2) ? `"${s2.replace(/"/g, '""')}"` : s2;
}
__name(csvEscapeCell, "csvEscapeCell");
function rowsToCSV(headers, rows) {
  const head = headers.join(",") + "\r\n";
  const body = rows.map((row) => headers.map((h2) => csvEscapeCell(String(row[h2] ?? ""))).join(",")).join("\r\n");
  return head + body + "\r\n";
}
__name(rowsToCSV, "rowsToCSV");
function asYesNo(b2) {
  return b2 ? "Yes" : "No";
}
__name(asYesNo, "asYesNo");
function asExcelText(s2) {
  if (s2 === null || s2 === void 0) return "";
  return `="${String(s2)}"`;
}
__name(asExcelText, "asExcelText");
var onRequestGet;
var init_latest_rsvps = __esm({
  "api/admin/export/latest-rsvps.ts"() {
    init_functionsRoutes_0_09879299104094341();
    __name2(csvEscapeCell, "csvEscapeCell");
    __name2(rowsToCSV, "rowsToCSV");
    __name2(asYesNo, "asYesNo");
    __name2(asExcelText, "asExcelText");
    onRequestGet = /* @__PURE__ */ __name2(async ({ env }) => {
      try {
        const sqlLatest = `
      WITH ranked AS (
        SELECT
          s.id                AS submission_id,
          s.party_id,
          strftime('%Y-%m-%dT%H:%M:%SZ', s.submitted_at) AS submitted_at,
          s.contact_email,
          s.contact_phone,
          s.reminder_opt_in,
          s.payload_json,
          ROW_NUMBER() OVER (
            PARTITION BY s.party_id
            ORDER BY s.submitted_at DESC, s.id DESC
          ) AS rn
        FROM rsvp_submissions s
      )
      SELECT
        p.id           AS party_id,
        p.display_name AS party_name,
        r.submission_id,
        strftime('%Y-%m-%dT%H:%M:%SZ', r.submitted_at) AS submitted_at,
        r.contact_email,
        r.contact_phone,
        r.reminder_opt_in,
        r.payload_json
      FROM ranked r
      JOIN parties p ON p.id = r.party_id
      WHERE r.rn = 1
      ORDER BY p.display_name;
    `;
        const { results: latest } = await env.DB.prepare(sqlLatest).all();
        const memberIds = [];
        for (const row of latest ?? []) {
          try {
            const payload = JSON.parse(row.payload_json ?? "{}");
            for (const m2 of payload?.members ?? []) {
              const id = m2?.memberId;
              if (id && !memberIds.includes(id)) memberIds.push(id);
            }
          } catch {
          }
        }
        const memberMap = /* @__PURE__ */ new Map();
        if (memberIds.length) {
          const placeholders = memberIds.map(() => "?").join(",");
          const sqlMembers = `
        SELECT id, full_name
        FROM members
        WHERE id IN (${placeholders})
      `;
          const { results: members } = await env.DB.prepare(sqlMembers).bind(...memberIds).all();
          for (const m2 of members ?? []) {
            memberMap.set(m2.id, { full_name: m2.full_name });
          }
        }
        const headers = [
          "Party Name",
          "Member Name",
          "Phone",
          "Email",
          "Email Reminders",
          "Attending Ceremony",
          "Attending Reception",
          "Dietary",
          "Notes"
        ];
        const rows = [];
        for (const r2 of latest ?? []) {
          let payload = {};
          try {
            payload = JSON.parse(r2.payload_json ?? "{}");
          } catch {
            payload = {};
          }
          const membersArr = Array.isArray(payload.members) ? payload.members : [];
          const email3 = r2.contact_email ?? payload?.contact?.email ?? "";
          const phone = r2.contact_phone ?? "";
          for (const m2 of membersArr) {
            const memberId = m2?.memberId ?? "";
            const name = memberMap.get(memberId)?.full_name ?? memberId;
            const attendCer = !!m2?.attending?.ceremony;
            const attendRec = !!m2?.attending?.reception;
            const dietary = m2?.dietary ?? "";
            const mNotes = m2?.notes ?? "";
            rows.push({
              "Party Name": r2.party_name,
              "Member Name": name,
              Phone: asExcelText(phone),
              Email: email3,
              "Email Reminders": asYesNo(r2.reminder_opt_in ?? payload?.reminderOptIn),
              "Attending Ceremony": asYesNo(attendCer),
              "Attending Reception": asYesNo(attendRec),
              Dietary: dietary,
              Notes: mNotes
            });
          }
          if (membersArr.length === 0) {
            rows.push({
              "Party Name": r2.party_name,
              "Member Name": "",
              Phone: asExcelText(phone),
              Email: email3,
              "Email Reminders": asYesNo(r2.reminder_opt_in ?? payload?.reminderOptIn),
              "Attending Ceremony": "",
              "Attending Reception": "",
              Dietary: "",
              Notes: String(payload.notes ?? "")
            });
          }
        }
        const csvCore = rowsToCSV(headers, rows);
        const BOM = "\uFEFF";
        const stamp = (/* @__PURE__ */ new Date()).toISOString().slice(0, 10);
        return new Response(BOM + csvCore, {
          headers: {
            "Content-Type": "text/csv; charset=utf-8",
            "Content-Disposition": `attachment; filename="latest_rsvps_${stamp}.csv"`,
            "Cache-Control": "no-store"
          }
        });
      } catch (err) {
        return new Response(JSON.stringify({ ok: false, error: String(err) }), {
          status: 500,
          headers: { "Content-Type": "application/json" }
        });
      }
    }, "onRequestGet");
  }
});
function decodeKey(s2) {
  try {
    return decodeURIComponent(s2);
  } catch {
    return s2;
  }
}
__name(decodeKey, "decodeKey");
var onRequestOptions;
var onRequestDelete;
var init_id2 = __esm({
  "api/admin/photos/[id].ts"() {
    init_functionsRoutes_0_09879299104094341();
    init_utils();
    __name2(decodeKey, "decodeKey");
    onRequestOptions = /* @__PURE__ */ __name2(async () => new Response(null, {
      status: 204,
      headers: {
        "access-control-allow-origin": "*",
        "access-control-allow-methods": "GET,POST,DELETE,OPTIONS",
        "access-control-allow-headers": "*",
        "access-control-max-age": "86400"
      }
    }), "onRequestOptions");
    onRequestDelete = /* @__PURE__ */ __name2(async (ctx) => {
      try {
        const rawId = String(ctx.params.id || "");
        if (!rawId) return json2({ ok: false, message: "Missing id" }, 400);
        const id = decodeKey(rawId);
        const row = await ctx.env.DB.prepare(
          `SELECT id, status, is_public FROM photos WHERE id = ? LIMIT 1`
        ).bind(id).first();
        if (!row) return json2({ ok: false, message: "Not found" }, 404);
        if (row.status !== "approved" || row.is_public !== 1) {
          return json2({ ok: false, message: "Only posted images can be deleted" }, 400);
        }
        await ctx.env.DB.prepare(`DELETE FROM photos WHERE id = ?`).bind(id).run();
        await ctx.env.R2.delete(id);
        return json2({ ok: true }, 200);
      } catch (err) {
        return json2(
          { ok: false, message: err?.message || "Delete failed" },
          500
        );
      }
    }, "onRequestDelete");
  }
});
function json3(data, init) {
  return new Response(JSON.stringify(data), {
    headers: { "Content-Type": "application/json", "Cache-Control": "no-store" },
    ...init
  });
}
__name(json3, "json3");
var init_util2 = __esm({
  "api/admin/_util.ts"() {
    init_functionsRoutes_0_09879299104094341();
    __name2(json3, "json");
  }
});
var onRequestPatch;
var onRequestDelete2;
var init_title = __esm({
  "api/admin/reminders/[title].ts"() {
    init_functionsRoutes_0_09879299104094341();
    init_util2();
    onRequestPatch = /* @__PURE__ */ __name2(async ({ params, request, env }) => {
      const raw = params.title ?? "";
      let current = String(raw);
      try {
        current = decodeURIComponent(current);
      } catch {
      }
      current = current.trim().normalize("NFC");
      if (!current) return json3(400);
      try {
        const body = await request.json();
        const nextTitle = String(body.reminder_title || current).trim();
        const send_date = body.send_date && String(body.send_date).trim() !== "" ? String(body.send_date) : null;
        const days_out = body.days_out === null || body.days_out === void 0 || body.days_out === "" ? null : Number(body.days_out);
        const html_index = Number(body.html_content_index || 0);
        const both = send_date && days_out !== null;
        const neither = !send_date && days_out === null;
        if (both || neither) return json3(400);
        const tx1 = await env.DB.prepare(`DELETE FROM reminder_sends WHERE reminder_title=?`).bind(current).run();
        await env.DB.prepare(
          `INSERT INTO reminder_sends(reminder_title, send_date, days_out, html_content_index) VALUES (?, ?, ?, ?)`
        ).bind(nextTitle, send_date, days_out, html_index).run();
        return new Response(JSON.stringify({ ok: true }), {
          headers: { "content-type": "application/json" }
        });
      } catch (e2) {
        return json3(500, e2?.message || String(e2));
      }
    }, "onRequestPatch");
    onRequestDelete2 = /* @__PURE__ */ __name2(async ({ params, env }) => {
      const raw = params.title ?? "";
      let title = String(raw);
      try {
        title = decodeURIComponent(title);
      } catch {
      }
      title = title.trim().normalize("NFC");
      if (!title) return json3({ ok: false, error: "missing title" }, { status: 400 });
      const res = await env.DB.prepare(`DELETE FROM reminder_sends WHERE reminder_title=?`).bind(title).run();
      if (!res.meta || res.meta.changes === 0) {
        console.log("DELETE missed. Wanted:", JSON.stringify(title));
        return json3({ ok: false, error: `no row with title '${title}'` }, { status: 404 });
      }
      return json3({ ok: true, deleted: res.meta.changes });
    }, "onRequestDelete");
  }
});
var onRequest;
var init_id3 = __esm({
  "api/admin/member/[id].ts"() {
    init_functionsRoutes_0_09879299104094341();
    init_utils();
    onRequest = /* @__PURE__ */ __name2(async ({ env, params, request }) => {
      const id = String(params.id);
      if (request.method === "PATCH") {
        const b2 = await request.json();
        await env.DB.prepare(
          `UPDATE members
       SET full_name = COALESCE(?, full_name),
           is_plus_one = ?,
           plus_one_for = ?,
           sort_order = ?,
           invite_ceremony = ?,
           invite_reception = ?
       WHERE id = ?`
        ).bind(
          b2.full_name ?? null,
          Number(!!b2.is_plus_one),
          b2.plus_one_for ?? null,
          Number(b2.sort_order ?? 0),
          Number(!!b2.invite_ceremony),
          Number(!!b2.invite_reception),
          id
        ).run();
        await env.DB.prepare(
          `INSERT INTO member_attendance_current (member_id, attending_ceremony, attending_reception, dietary, notes)
       VALUES (?, ?, ?, ?, ?)
       ON CONFLICT(member_id) DO UPDATE SET
         attending_ceremony = excluded.attending_ceremony,
         attending_reception = excluded.attending_reception,
         dietary = excluded.dietary,
         notes = excluded.notes`
        ).bind(
          id,
          b2.attending_ceremony === null || b2.attending_ceremony === void 0 ? null : Number(b2.attending_ceremony),
          b2.attending_reception === null || b2.attending_reception === void 0 ? null : Number(b2.attending_reception),
          b2.dietary ?? null,
          b2.notes ?? null
        ).run();
        return json2({ ok: true });
      }
      if (request.method === "DELETE") {
        await env.DB.prepare(`DELETE FROM members WHERE id = ?`).bind(id).run();
        return json2({ ok: true });
      }
      return json2({ error: "method not allowed" }, 405);
    }, "onRequest");
  }
});
var onRequest2;
var init_id4 = __esm({
  "api/admin/party/[id].ts"() {
    init_functionsRoutes_0_09879299104094341();
    init_utils();
    onRequest2 = /* @__PURE__ */ __name2(async ({ env, params, request }) => {
      const id = String(params.id);
      if (request.method === "GET") {
        const party = await env.DB.prepare(
          `SELECT id, slug, display_name, contact_email, contact_phone, reminder_opt_in, can_rsvp, rsvp_deadline
       FROM parties WHERE id = ? LIMIT 1`
        ).bind(id).first();
        if (!party) return json2({ error: "not found" }, 404);
        const members = await env.DB.prepare(
          `SELECT m.id, m.party_id, m.full_name, m.is_plus_one, m.plus_one_for, m.sort_order,
              m.invite_ceremony, m.invite_reception,
              a.attending_ceremony, a.attending_reception, a.dietary, a.notes
       FROM members m
       LEFT JOIN member_attendance_current a ON a.member_id = m.id
       WHERE m.party_id = ?
       ORDER BY m.sort_order, m.full_name`
        ).bind(id).all();
        return json2({ party: { ...party, members: members.results ?? [] } });
      }
      if (request.method === "PATCH") {
        const body = await request.json();
        await env.DB.prepare(
          `UPDATE parties
       SET slug = COALESCE(?, slug),
           display_name = COALESCE(?, display_name),
           contact_email = ?,
           contact_phone = ?,
           reminder_opt_in = ?,
           can_rsvp = ?,
           rsvp_deadline = ?
       WHERE id = ?`
        ).bind(
          body.slug ?? null,
          body.display_name ?? null,
          body.contact_email ?? null,
          body.contact_phone ?? null,
          Number(!!body.reminder_opt_in),
          Number(!!body.can_rsvp),
          body.rsvp_deadline ?? null,
          id
        ).run();
        return json2({ ok: true });
      }
      if (request.method === "DELETE") {
        await env.DB.prepare(`DELETE FROM parties WHERE id = ?`).bind(id).run();
        return json2({ ok: true });
      }
      return json2({ error: "method not allowed" }, 405);
    }, "onRequest");
  }
});
function currentYM() {
  const d2 = /* @__PURE__ */ new Date();
  return `${d2.getUTCFullYear()}-${String(d2.getUTCMonth() + 1).padStart(2, "0")}`;
}
__name(currentYM, "currentYM");
async function getCount(env) {
  const ym = currentYM();
  const row = await env.DB.prepare("SELECT count FROM email_usage WHERE ym=?").bind(ym).first();
  return row?.count ?? 0;
}
__name(getCount, "getCount");
async function setCount(env, newCount) {
  const ym = currentYM();
  await env.DB.prepare(`
    INSERT INTO email_usage (ym, count) VALUES (?, ?)
    ON CONFLICT(ym) DO UPDATE SET count=excluded.count
  `).bind(ym, newCount).run();
}
__name(setCount, "setCount");
function toList(s2) {
  return Array.isArray(s2) ? s2 : s2.split(",").map((x2) => x2.trim()).filter(Boolean);
}
__name(toList, "toList");
async function resendSend(env, to, subject, html) {
  const res = await fetch("https://api.resend.com/emails", {
    method: "POST",
    headers: {
      "Authorization": `Bearer ${env.RESEND_API_KEY}`,
      "Content-Type": "application/json"
    },
    body: JSON.stringify({
      from: env.EMAIL_FROM,
      to,
      subject,
      html
    })
  });
  const text = await res.text();
  if (!res.ok) {
    const err = new Error(`Resend failed ${res.status}`);
    err.status = res.status;
    err.body = text;
    throw err;
  }
  return true;
}
__name(resendSend, "resendSend");
async function sendEmail(env, opts, config2 = { warnAt: 90 }) {
  if (env.EMAIL_ENABLED === "false") {
    console.log("[email] disabled; would send:", { to: opts.to, subject: opts.subject });
    return { ok: true, disabled: true };
  }
  const warnAt = config2.warnAt ?? 90;
  const adminList = env.EMAIL_ADMIN_TO ? toList(env.EMAIL_ADMIN_TO) : [];
  const to = toList(opts.to);
  try {
    await resendSend(env, to, opts.subject, opts.html);
    const current = await getCount(env);
    const next = current + 1;
    await setCount(env, next);
    if (next === warnAt && adminList.length) {
      try {
        await resendSend(
          env,
          adminList,
          "\u26A0\uFE0F Resend usage nearing your threshold",
          `<p>You have sent ${next} emails in ${currentYM()} (free cap is 100 on the free plan).</p>`
        );
      } catch (warnErr) {
        console.error("Warning email failed:", warnErr);
      }
    }
    return { ok: true, count: next };
  } catch (e2) {
    const status = e2?.status ?? 0;
    const body = e2?.body ?? "";
    if (status === 402) {
      console.warn("[email] Resend quota or billing error (402).", { subject: opts.subject, body });
    } else if (status === 429) {
      console.warn("[email] Resend rate-limited (429). Consider retry/backoff.", { subject: opts.subject, body });
    } else {
      console.error("[email] Resend failed:", status, body);
    }
    return { ok: false, status, error: String(e2?.message ?? e2), body };
  }
}
__name(sendEmail, "sendEmail");
var init_email = __esm({
  "api/email.ts"() {
    init_functionsRoutes_0_09879299104094341();
    __name2(currentYM, "currentYM");
    __name2(getCount, "getCount");
    __name2(setCount, "setCount");
    __name2(toList, "toList");
    __name2(resendSend, "resendSend");
    __name2(sendEmail, "sendEmail");
  }
});
function escapeHtml(s2) {
  return String(s2 ?? "").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
}
__name(escapeHtml, "escapeHtml");
function fmtNY(dt) {
  if (!dt) return (/* @__PURE__ */ new Date()).toLocaleString("en-US", { timeZone: "America/New_York" });
  const d2 = new Date(dt.replace(" ", "T").replace(/Z?$/, "Z"));
  return isNaN(+d2) ? (/* @__PURE__ */ new Date()).toLocaleString("en-US", { timeZone: "America/New_York" }) : d2.toLocaleString("en-US", { timeZone: "America/New_York" });
}
__name(fmtNY, "fmtNY");
function dotTag(text) {
  return `<span style="display:inline-block;background:#f0efe6;border:1px solid #e3e0d1;border-radius:999px;padding:2px 8px;font-size:12px;margin-right:6px;">${escapeHtml(
    text
  )}</span>`;
}
__name(dotTag, "dotTag");
function attendanceChips(m2) {
  const chips = [];
  const hasMulti = typeof m2.attending.ceremony === "boolean" || typeof m2.attending.reception === "boolean";
  if (hasMulti) {
    if (m2.attending.ceremony === true) chips.push(dotTag("Ceremony \u2713"));
    else if (m2.attending.ceremony === false) chips.push(dotTag("Ceremony \u2717"));
    if (m2.attending.reception === true) chips.push(dotTag("Reception \u2713"));
    else if (m2.attending.reception === false) chips.push(dotTag("Reception \u2717"));
  } else if (typeof m2.attending === "boolean") {
    chips.push(dotTag(m2.attending ? "Attending \u2713" : "Not attending \u2717"));
  }
}
__name(attendanceChips, "attendanceChips");
function summarizeCounts(members) {
  const c2 = {
    total: members.length,
    ceremonyYes: members.filter((x2) => x2.attending.ceremony === true).length,
    receptionYes: members.filter((x2) => x2.attending.reception === true).length,
    dietary: members.filter((x2) => (x2.dietary ?? "").trim().length > 0).length,
    notes: members.filter((x2) => (x2.notes ?? "").trim().length > 0).length
  };
  return c2;
}
__name(summarizeCounts, "summarizeCounts");
function renderRSVPEmailHTML(payload, adminUrl, csvUrl) {
  const { partyName, submissionId, submittedAt, contactEmail, contactPhone, notes, members } = payload;
  const counts = summarizeCounts(members);
  const headerSub = [
    submissionId ? `Submission ID: ${escapeHtml(submissionId)}` : null,
    `${fmtNY(submittedAt)} (ET)`
  ].filter(Boolean).join(" \u2022 ");
  const summaryLine = (() => {
    const hasMulti = members.some(
      (m2) => typeof m2.attending.ceremony === "boolean" || typeof m2.attending.reception === "boolean"
    );
    if (hasMulti) {
      return `<b>${counts.total}</b> member${counts.total === 1 ? "" : "s"} \u2022 Ceremony: <b>${counts.ceremonyYes}</b> \u2713 \u2022 Reception: <b>${counts.receptionYes}</b> \u2713`;
    }
    return `<b>${counts.total}</b> member${counts.total === 1 ? "" : "s"}`;
  })();
  const contactBits = [
    contactEmail ? `Email: ${escapeHtml(contactEmail)}` : null,
    contactPhone ? `Phone: ${escapeHtml(contactPhone)}` : null
  ].filter(Boolean).join(" \u2022 ");
  const memberRows = members.map((m2) => {
    const name = escapeHtml(m2.memberId);
    const chips = attendanceChips(m2);
    const dietary = (m2.dietary ?? "").trim();
    const notes2 = (m2.notes ?? "").trim();
    const extra = [
      dietary ? `<div style="color:#5b5b5b;margin-top:3px;"><b>Dietary:</b> ${escapeHtml(
        dietary
      )}</div>` : "",
      notes2 ? `<div style="color:#5b5b5b;margin-top:3px;"><b>Notes:</b> ${escapeHtml(
        notes2
      )}</div>` : ""
    ].join("");
    return `
      <tr>
        <td style="padding:10px 0;border-bottom:1px solid #eee;">
          <div style="font-size:14px;line-height:1.35;">
            <div><b>${name}</b></div>
            ${extra}
          </div>
        </td>
      </tr>
    `;
  }).join("");
  return `
  <div style="background:#f6f5ef;padding:24px 0;">
    <table role="presentation" cellpadding="0" cellspacing="0" border="0" width="100%">
      <tr>
        <td align="center">
          <table role="presentation" cellpadding="0" cellspacing="0" border="0" width="600" style="max-width:600px;background:#ffffff;border-radius:14px;padding:24px;border:1px solid #e7e4d8;">
            <tr>
              <td>
                <h2 style="margin:0 0 6px 0;font:600 20px ui-sans-serif,system-ui,Segoe UI,Roboto,Helvetica,Arial;">New RSVP Received</h2>
                <div style="color:#666;font-size:12px;margin-bottom:16px;">${escapeHtml(
    headerSub
  )}</div>

                <div style="font-size:16px;margin-bottom:6px;"><b>${escapeHtml(partyName)}</b></div>
                ${contactBits ? `<div style="color:#555;font-size:13px;margin-bottom:10px;">${contactBits}</div>` : ""}

                <div style="font-size:14px;margin:10px 0 14px 0;">${summaryLine}
                  ${counts.dietary ? ` \u2022 Dietary entries: <b>${counts.dietary}</b>` : ""}
                  ${counts.notes ? ` \u2022 Member notes: <b>${counts.notes}</b>` : ""}
                </div>

                ${notes ? `
                  <div style="background:#faf7ec;border:1px solid #eee8d5;border-radius:10px;padding:10px 12px;font-size:14px;margin-bottom:12px;">
                    <b>Party Notes:</b> ${escapeHtml(notes)}
                  </div>` : ""}

                <div style="height:1px;background:#eee;margin:14px 0;"></div>

                <table role="presentation" cellpadding="0" cellspacing="0" border="0" width="100%">
                  ${memberRows}
                </table>

                <div style="height:1px;background:#eee;margin:18px 0;"></div>

                <!-- Buttons -->
                <table role="presentation" cellpadding="0" cellspacing="0" border="0" align="left" style="margin:0 -6px;">
                  <tr>
                    <td style="padding:6px;">
                      <a href="${escapeHtml(adminUrl)}"
                        style="display:inline-block;background:#111;color:#fff;text-decoration:none;
                               padding:12px 18px;border-radius:10px;font-weight:600;">
                        Review in Admin
                      </a>
                    </td>
                    <td style="padding:6px;">
                      <a href="${escapeHtml(csvUrl)}"
                        style="display:inline-block;background:#155e75;color:#fff;text-decoration:none;
                               padding:12px 18px;border-radius:10px;font-weight:600;">
                        Export to CSV
                      </a>
                    </td>
                  </tr>
                </table>

                <div style="clear:both;"></div>

                <div style="color:#999;font-size:12px;margin-top:18px;">
                  This is an automated notification from thehoffmans.wedding
                </div>
              </td>
            </tr>
          </table>

          <div style="color:#999;font-size:11px;margin-top:10px;">Email ID: ${escapeHtml(
    globalThis.crypto?.randomUUID?.() ?? ""
  )}</div>
        </td>
      </tr>
    </table>
  </div>`;
}
__name(renderRSVPEmailHTML, "renderRSVPEmailHTML");
var onRequestPost3;
var init_submit = __esm({
  "api/party/[id]/submit.ts"() {
    init_functionsRoutes_0_09879299104094341();
    init_utils();
    init_email();
    __name2(escapeHtml, "escapeHtml");
    __name2(fmtNY, "fmtNY");
    __name2(dotTag, "dotTag");
    __name2(attendanceChips, "attendanceChips");
    __name2(summarizeCounts, "summarizeCounts");
    __name2(renderRSVPEmailHTML, "renderRSVPEmailHTML");
    onRequestPost3 = /* @__PURE__ */ __name2(async ({ env, params, request }) => {
      try {
        const rawId = String(params.id);
        const party = await env.DB.prepare(
          `
        SELECT id, display_name, can_rsvp, rsvp_deadline
        FROM parties
        WHERE id = ? OR slug = ?
        LIMIT 1
      `
        ).bind(rawId, rawId).first();
        if (!party) return json2({ error: "Not found" }, 404);
        if (party.can_rsvp === 0)
          return json2({ error: "RSVP not enabled for this invitation" }, 403);
        if (party.rsvp_deadline) {
          const deadline = Date.parse(party.rsvp_deadline);
          if (!Number.isNaN(deadline) && Date.now() > deadline) {
            return json2({ error: "RSVP deadline has passed" }, 403);
          }
        }
        const body = await request.json().catch(() => null);
        const parsed = RSVPSubmissionSchema.safeParse(body);
        if (!parsed.success)
          return json2({ error: "Invalid payload", issues: parsed.error.format() }, 400);
        const idemKey = request.headers.get("x-idempotency-key");
        if (idemKey) {
          const prior = await env.DB.prepare(
            `SELECT submission_id FROM idempotency WHERE key = ?`
          ).bind(idemKey).first();
          if (prior?.submission_id) return json2({ ok: true, submissionId: prior.submission_id });
        }
        const memberIds = parsed.data.members.map((m2) => m2.memberId);
        if (memberIds.length === 0) return json2({ error: "members[] required" }, 400);
        const placeholders = memberIds.map(() => "?").join(",");
        const belonging = await env.DB.prepare(
          `SELECT id FROM members WHERE party_id = ? AND id IN (${placeholders})`
        ).bind(party.id, ...memberIds).all();
        const found = new Set((belonging?.results ?? []).map((r2) => r2.id));
        const missing = memberIds.filter((id) => !found.has(id));
        if (missing.length) {
          return json2(
            { error: "Member(s) not in party", details: { partyId: party.id, missing } },
            400
          );
        }
        const submissionId = newId("rsvp");
        const payloadJson = JSON.stringify(parsed.data);
        const stmts = [];
        const contactEmail = parsed.data.contact?.email?.trim() || null;
        const contactPhone = parsed.data.contact?.phone?.trim() || null;
        const reminderOptIn = typeof parsed.data.reminderOptIn === "boolean" ? parsed.data.reminderOptIn ? 1 : 0 : null;
        stmts.push(
          env.DB.prepare(
            `INSERT INTO rsvp_submissions (id, party_id, contact_email, contact_phone, reminder_opt_in, payload_json)
     VALUES (?, ?, ?, ?, ?, ?)`
          ).bind(
            submissionId,
            party.id,
            parsed.data.contact?.email ?? null,
            parsed.data.contact?.phone ?? null,
            parsed.data.reminderOptIn ?? null,
            payloadJson
          )
        );
        for (const m2 of parsed.data.members) {
          stmts.push(
            env.DB.prepare(
              `
  INSERT INTO member_attendance_current
    (member_id, attending_ceremony, attending_reception, dietary, notes)
  VALUES
    (?, ?, ?, ?, ?)
  ON CONFLICT(member_id) DO UPDATE SET
    attending_ceremony = excluded.attending_ceremony,
    attending_reception = excluded.attending_reception,
    dietary = excluded.dietary,
    notes = excluded.notes
         `
            ).bind(
              m2.memberId,
              m2.attending.ceremony === null ? null : m2.attending.ceremony ? 1 : 0,
              m2.attending.reception === null ? null : m2.attending.reception ? 1 : 0,
              m2.dietary ?? null,
              m2.notes ?? null
            )
          );
        }
        if (idemKey) {
          stmts.push(
            env.DB.prepare(
              `INSERT OR IGNORE INTO idempotency (key, submission_id) VALUES (?, ?)`
            ).bind(idemKey, submissionId)
          );
        }
        stmts.push(
          env.DB.prepare(
            `UPDATE parties
       SET
         contact_email = COALESCE(?, contact_email),
         contact_phone = COALESCE(?, contact_phone),
         reminder_opt_in = COALESCE(?, reminder_opt_in)
     WHERE id = ?`
          ).bind(contactEmail, contactPhone, reminderOptIn, party.id)
        );
        await env.DB.batch(stmts);
        const adminUrl = "https://thehoffmans.wedding/admin";
        const csvUrl = "https://thehoffmans.wedding/api/admin/export/latest-rsvps";
        const html = renderRSVPEmailHTML(
          {
            partyName: party.display_name,
            submissionId,
            contactEmail,
            contactPhone,
            members: parsed.data.members
          },
          adminUrl,
          csvUrl
        );
        await sendEmail(env, {
          to: env.EMAIL_ADMIN_TO,
          subject: `New RSVP: ${party.display_name}`,
          html
        });
        return json2({ ok: true, submissionId });
      } catch (err) {
        console.error("RSVP submit error:", err?.message, err?.stack);
        return json2(
          { ok: false, error: "Server error", message: err?.message ?? "Unknown error" },
          500
        );
      }
    }, "onRequestPost");
  }
});
var onRequestPost4;
var onRequest3;
var init_member = __esm({
  "api/admin/member/index.ts"() {
    init_functionsRoutes_0_09879299104094341();
    init_utils();
    onRequestPost4 = /* @__PURE__ */ __name2(async ({ env, request }) => {
      const b2 = await request.json();
      if (!b2?.party_id || !b2?.full_name) return json2({ error: "party_id and full_name required" }, 400);
      const id = newId?.() ?? crypto.randomUUID();
      await env.DB.prepare(
        `INSERT INTO members (id, party_id, full_name, is_plus_one, plus_one_for, sort_order, invite_ceremony, invite_reception)
     VALUES (?, ?, ?, ?, ?, ?, ?, ?)`
      ).bind(
        id,
        b2.party_id,
        b2.full_name,
        Number(!!b2.is_plus_one),
        b2.plus_one_for ?? null,
        Number(b2.sort_order ?? 0),
        Number(b2.invite_ceremony ?? 1),
        Number(b2.invite_reception ?? 1)
      ).run();
      return json2({ ok: true, id });
    }, "onRequestPost");
    onRequest3 = onRequestPost4;
  }
});
var onRequestGet2;
var init_missing = __esm({
  "api/admin/missing.ts"() {
    init_functionsRoutes_0_09879299104094341();
    init_util2();
    onRequestGet2 = /* @__PURE__ */ __name2(async ({ env }) => {
      const membersNoRSVP = await env.DB.prepare(
        `SELECT m.id AS member_id,
            m.full_name,
            p.id AS party_id,
            p.display_name
     FROM members m
     JOIN parties p ON p.id = m.party_id
     LEFT JOIN member_attendance_current a ON a.member_id = m.id
     WHERE a.member_id IS NULL
     ORDER BY p.display_name, m.full_name
     LIMIT 500`
      ).all();
      const partiesNoRSVP = await env.DB.prepare(
        `SELECT p.id,
            p.display_name,
            COUNT(m.id) AS member_count
     FROM parties p
     JOIN members m ON m.party_id = p.id
     LEFT JOIN rsvp_submissions s ON s.party_id = p.id
     GROUP BY p.id
     HAVING COUNT(s.id) = 0
     ORDER BY p.display_name
     LIMIT 500`
      ).all();
      return json3({
        membersNoRSVP: membersNoRSVP.results ?? [],
        partiesNoRSVP: partiesNoRSVP.results ?? []
      });
    }, "onRequestGet");
  }
});
var onRequestGet3;
var init_overview = __esm({
  "api/admin/overview.ts"() {
    init_functionsRoutes_0_09879299104094341();
    init_util2();
    onRequestGet3 = /* @__PURE__ */ __name2(async ({ env }) => {
      const parties = await env.DB.prepare(`SELECT COUNT(*) AS c FROM parties`).first();
      const members = await env.DB.prepare(`SELECT COUNT(*) AS c FROM members`).first();
      const submissions = await env.DB.prepare(`SELECT COUNT(*) AS c FROM rsvp_submissions`).first();
      const recent = await env.DB.prepare(
        `SELECT s.id, s.party_id, p.display_name AS party_name, strftime('%Y-%m-%dT%H:%M:%SZ', s.submitted_at) AS submitted_at
     FROM rsvp_submissions s
     JOIN parties p ON p.id = s.party_id
     WHERE s.submitted_at >= datetime('now','-7 days')
     ORDER BY s.submitted_at DESC
     LIMIT 10`
      ).all();
      return json3({
        counts: {
          parties: parties?.c ?? 0,
          members: members?.c ?? 0,
          submissions: submissions?.c ?? 0
        },
        recentSubmissions: recent.results ?? []
      });
    }, "onRequestGet");
  }
});
var onRequestGet4;
var init_parties = __esm({
  "api/admin/parties.ts"() {
    init_functionsRoutes_0_09879299104094341();
    init_util2();
    onRequestGet4 = /* @__PURE__ */ __name2(async ({ env, request }) => {
      const url2 = new URL(request.url);
      const q2 = (url2.searchParams.get("q") || "").trim();
      const limit = Math.min(parseInt(url2.searchParams.get("limit") || "25", 10), 100);
      const offset = Math.max(parseInt(url2.searchParams.get("offset") || "0", 10), 0);
      let sql = `SELECT p.id, p.slug, p.display_name,
                    (SELECT COUNT(*) FROM members m WHERE m.party_id = p.id) AS member_count
             FROM parties p`;
      let args = [];
      if (q2) {
        sql += ` WHERE p.display_name LIKE ? OR p.slug LIKE ?`;
        args.push(`%${q2}%`, `%${q2}%`);
      }
      sql += ` ORDER BY p.display_name LIMIT ? OFFSET ?`;
      args.push(limit, offset);
      const res = await env.DB.prepare(sql).bind(...args).all();
      return json3({ items: res.results ?? [], nextOffset: (res.results?.length ?? 0) === limit ? offset + limit : null });
    }, "onRequestGet");
  }
});
var onRequestGet5;
var init_photos = __esm({
  "api/admin/photos.ts"() {
    init_functionsRoutes_0_09879299104094341();
    init_utils();
    onRequestGet5 = /* @__PURE__ */ __name2(async ({ env, request }) => {
      const url2 = new URL(request.url);
      const status = url2.searchParams.get("status") ?? "pending";
      const album = url2.searchParams.get("album") ?? "all";
      const limit = Math.min(parseInt(url2.searchParams.get("limit") ?? "100", 10), 200);
      const albumFilter = album !== "all" && album !== "*" ? " AND album_id = ? " : "";
      const sql = `
    SELECT id, caption, display_name, width, height, created_at, album_id
    FROM photos
    WHERE status = ?
    ${albumFilter}
    ORDER BY created_at DESC, id DESC
    LIMIT ?
  `;
      const binds = albumFilter ? [status, album, limit] : [status, limit];
      const rows = await env.DB.prepare(sql).bind(...binds).all();
      return json2({ ok: true, items: rows.results ?? [] });
    }, "onRequestGet");
  }
});
var onRequestGet6;
var init_reminder_log = __esm({
  "api/admin/reminder-log.ts"() {
    init_functionsRoutes_0_09879299104094341();
    onRequestGet6 = /* @__PURE__ */ __name2(async ({ request, env }) => {
      try {
        const url2 = new URL(request.url);
        const reminder = url2.searchParams.get("reminder");
        const ymd = url2.searchParams.get("ymd");
        const email3 = url2.searchParams.get("email");
        const limit = Math.min(Number(url2.searchParams.get("limit") || 50), 200);
        const cursor = url2.searchParams.get("cursor");
        const where = [];
        const binds = [];
        if (reminder) {
          where.push("reminder_title LIKE ?");
          binds.push(`%${reminder}%`);
        }
        if (ymd) {
          where.push("ymd = ?");
          binds.push(ymd);
        }
        if (email3) {
          where.push("email LIKE ?");
          binds.push(`%${email3}%`);
        }
        if (cursor) {
          const [cTime, cId] = cursor.split("|");
          where.push("(created_at < ? OR (created_at = ? AND id < ?))");
          binds.push(cTime, cTime, cId);
        }
        const sql = `SELECT id, reminder_title, email, ymd, kind, created_at
                 FROM reminder_log
                 ${where.length ? `WHERE ${where.join(" AND ")}` : ""}
                 ORDER BY created_at DESC, id DESC
                 LIMIT ?`;
        binds.push(limit + 1);
        const rs = await env.DB.prepare(sql).bind(...binds).all();
        const rows = rs.results || [];
        let nextCursor = null;
        if (rows.length > limit) {
          const last = rows[limit - 1];
          nextCursor = `${last.created_at}|${last.id}`;
        }
        const items = rows.slice(0, limit);
        return new Response(JSON.stringify({ ok: true, items, nextCursor }), {
          headers: { "content-type": "application/json; charset=UTF-8" }
        });
      } catch (err) {
        return new Response(JSON.stringify({ ok: false, error: String(err?.message || err) }), {
          status: 500,
          headers: { "content-type": "application/json; charset=UTF-8" }
        });
      }
    }, "onRequestGet");
  }
});
function jsonBad(status, message) {
  return new Response(JSON.stringify({ ok: false, error: message }), {
    status,
    headers: { "content-type": "application/json" }
  });
}
__name(jsonBad, "jsonBad");
var onRequestGet7;
var onRequestPost5;
var init_reminders = __esm({
  "api/admin/reminders.ts"() {
    init_functionsRoutes_0_09879299104094341();
    init_utils();
    onRequestGet7 = /* @__PURE__ */ __name2(async ({ env }) => {
      const rows = await env.DB.prepare(
        `
SELECT reminder_title, send_date, days_out, html_content_index
FROM reminder_sends
ORDER BY (send_date IS NULL), send_date ASC, reminder_title ASC
`
      ).all();
      return new Response(JSON.stringify({ ok: true, items: rows.results || [] }), {
        headers: { "content-type": "application/json" }
      });
    }, "onRequestGet");
    onRequestPost5 = /* @__PURE__ */ __name2(async ({ request, env }) => {
      try {
        const body = await request.json();
        const title = String(body.reminder_title || "").trim();
        const send_date = body.send_date && String(body.send_date).trim() !== "" ? String(body.send_date) : null;
        const days_out = body.days_out === null || body.days_out === void 0 || body.days_out === "" ? null : Number(body.days_out);
        const html_index = Number(body.html_content_index || 0);
        if (!title) return jsonBad(400, "reminder_title is required");
        const both = send_date && days_out !== null;
        const neither = !send_date && days_out === null;
        if (both || neither)
          return json2({ error: "Provide exactly one of send_date or days_out" }, 400);
        await env.DB.prepare(
          `
INSERT INTO reminder_sends(reminder_title, send_date, days_out, html_content_index)
VALUES (?, ?, ?, ?)
ON CONFLICT(reminder_title) DO UPDATE SET
send_date=excluded.send_date,
days_out=excluded.days_out,
html_content_index=excluded.html_content_index
`
        ).bind(title, send_date, days_out, html_index).run();
        return new Response(JSON.stringify({ ok: true }), {
          headers: { "content-type": "application/json" }
        });
      } catch (e2) {
        return json2({ error: "Failed to add/update reminder" }, 400);
      }
    }, "onRequestPost");
    __name2(jsonBad, "jsonBad");
  }
});
var onRequestPost6;
var onRequestGet8;
var init_settings = __esm({
  "api/admin/settings.ts"() {
    init_functionsRoutes_0_09879299104094341();
    init_utils();
    onRequestPost6 = /* @__PURE__ */ __name2(async ({ env, request }) => {
      if (!(request.headers.get("content-type") || "").includes("application/json")) {
        return json2({ ok: false, message: "Expected application/json" }, { status: 400 });
      }
      const body = await request.json().catch(() => ({}));
      const entries = [];
      if (body.auto_publish_uploads !== void 0) {
        const v2 = body.auto_publish_uploads === true || body.auto_publish_uploads === 1 || body.auto_publish_uploads === "1" ? "1" : "0";
        entries.push(["auto_publish_uploads", v2]);
      }
      if (body.upload_rate_per_hour !== void 0) {
        const n2 = Math.max(1, Number(body.upload_rate_per_hour || 20));
        entries.push(["upload_rate_per_hour", String(n2)]);
      }
      if (body.purge_rejected_uploads !== void 0) {
        const v2 = body.purge_rejected_uploads === true || body.purge_rejected_uploads === 1 || body.purge_rejected_uploads === "1" ? "1" : "0";
        entries.push(["purge_rejected_uploads", v2]);
      }
      if (entries.length === 0) return json2({ ok: false, message: "No changes" }, { status: 400 });
      const stmts = entries.map(
        ([k2, v2]) => env.DB.prepare(
          `INSERT INTO settings(key, value) VALUES(?, ?)
       ON CONFLICT(key) DO UPDATE SET value=excluded.value`
        ).bind(k2, v2)
      );
      await env.DB.batch(stmts);
      return json2({ ok: true, updated: Object.fromEntries(entries) });
    }, "onRequestPost");
    onRequestGet8 = /* @__PURE__ */ __name2(async ({ env }) => {
      const KEYS = ["auto_publish_uploads", "upload_rate_per_hour", "purge_rejected_uploads"];
      const placeholders = KEYS.map(() => "?").join(", ");
      const rows = await env.DB.prepare(
        `SELECT key, value FROM settings WHERE key IN (${placeholders})`
      ).bind(...KEYS).all();
      const map3 = Object.fromEntries((rows.results ?? []).map((r2) => [r2.key, r2.value]));
      const settings = {
        auto_publish_uploads: (map3["auto_publish_uploads"] ?? "0") === "1",
        upload_rate_per_hour: Number(map3["upload_rate_per_hour"] ?? 20),
        purge_rejected_uploads: (map3["purge_rejected_uploads"] ?? "1") === "1"
      };
      return json2({ ok: true, settings });
    }, "onRequestGet");
  }
});
var onRequestGet9;
var init_submissions = __esm({
  "api/admin/submissions.ts"() {
    init_functionsRoutes_0_09879299104094341();
    init_util2();
    onRequestGet9 = /* @__PURE__ */ __name2(async ({ env, request }) => {
      const url2 = new URL(request.url);
      const limit = Math.min(parseInt(url2.searchParams.get("limit") || "25", 10), 100);
      const cursor = url2.searchParams.get("cursor");
      const where = cursor ? `WHERE s.submitted_at < ?` : ``;
      const stmt = env.DB.prepare(
        `
    SELECT
      s.id,
      s.party_id,
      p.display_name AS party_name,
      s.payload_json,
      strftime('%Y-%m-%dT%H:%M:%SZ', submitted_at) AS submitted_at,
      s.contact_email,
      s.contact_phone,
      s.reminder_opt_in
    FROM rsvp_submissions s
    LEFT JOIN parties p ON p.id = s.party_id
    ${where}
    ORDER BY s.submitted_at DESC, s.id DESC
    LIMIT ?
    `
      );
      const res = cursor ? await stmt.bind(cursor, limit + 1).all() : await stmt.bind(limit + 1).all();
      const page = res.results ?? [];
      const hasMore = page.length > limit;
      const pageItems = hasMore ? page.slice(0, limit) : page;
      const nextCursor = hasMore ? pageItems[pageItems.length - 1].submitted_at : null;
      const memberIds = [];
      for (const row of pageItems) {
        try {
          const payload = JSON.parse(row.payload_json ?? "{}");
          for (const m2 of payload?.members ?? []) {
            const id = m2?.memberId;
            if (id && !memberIds.includes(id)) memberIds.push(id);
          }
        } catch {
        }
      }
      const memberMap = /* @__PURE__ */ new Map();
      if (memberIds.length) {
        const placeholders = memberIds.map(() => "?").join(",");
        const sqlMembers = `
      SELECT id, full_name
      FROM members
      WHERE id IN (${placeholders})
    `;
        const { results: members } = await env.DB.prepare(sqlMembers).bind(...memberIds).all();
        for (const m2 of members ?? []) {
          memberMap.set(m2.id, { full_name: m2.full_name });
        }
      }
      const flat = [];
      for (const r2 of pageItems) {
        let payload = {};
        try {
          payload = JSON.parse(r2.payload_json ?? "{}");
        } catch {
          payload = {};
        }
        const membersArr = Array.isArray(payload.members) ? payload.members : [];
        const email3 = r2.contact_email ?? payload?.contact?.email ?? "";
        const phone = r2.contact_phone ?? "";
        const emailRem = Boolean(r2.reminder_opt_in ?? payload?.reminderOptIn);
        if (membersArr.length === 0) {
          flat.push({
            submission_id: r2.id,
            submitted_at: r2.submitted_at,
            party_id: r2.party_id,
            party_name: r2.party_name ?? null,
            member_id: null,
            member_name: null,
            phone: String(phone ?? ""),
            email: email3,
            email_reminders: emailRem,
            attending_ceremony: "",
            attending_reception: "",
            dietary: "",
            notes: String(payload?.notes ?? "")
          });
        } else {
          for (const m2 of membersArr) {
            const memberId = m2?.memberId ?? null;
            const name = memberId ? memberMap.get(memberId)?.full_name ?? memberId : null;
            flat.push({
              submission_id: r2.id,
              submitted_at: r2.submitted_at,
              party_id: r2.party_id,
              party_name: r2.party_name ?? null,
              member_id: memberId,
              member_name: name,
              phone: String(phone ?? ""),
              email: email3,
              email_reminders: emailRem,
              attending_ceremony: !!m2?.attending?.ceremony,
              attending_reception: !!m2?.attending?.reception,
              dietary: String(m2?.dietary ?? ""),
              notes: String(m2?.notes ?? "")
            });
          }
        }
      }
      return json3({
        items: flat,
        nextCursor
      });
    }, "onRequestGet");
  }
});
function escapeHtml2(s2) {
  return String(s2 ?? "").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
}
__name(escapeHtml2, "escapeHtml2");
function fmtBytes(n2) {
  if (!n2 || n2 <= 0) return "";
  const u2 = ["B", "KB", "MB", "GB", "TB"];
  let i2 = 0, v2 = n2;
  while (v2 >= 1024 && i2 < u2.length - 1) {
    v2 /= 1024;
    i2++;
  }
  return `${v2.toFixed(v2 < 10 && i2 > 0 ? 1 : 0)} ${u2[i2]}`;
}
__name(fmtBytes, "fmtBytes");
function nowNY() {
  return (/* @__PURE__ */ new Date()).toLocaleString("en-US", { timeZone: "America/New_York", hour12: true });
}
__name(nowNY, "nowNY");
function renderUploadEmailHTML(photos, adminUrl) {
  const count = photos.length;
  const maxList = 10;
  const more = Math.max(0, count - maxList);
  const byAlbum = {};
  for (const p2 of photos) {
    const a2 = p2.album_id || "default";
    byAlbum[a2] = (byAlbum[a2] ?? 0) + 1;
  }
  const albumLines = Object.entries(byAlbum).map(([a2, c2]) => `<li><b>${escapeHtml2(a2)}</b>: ${c2}</li>`).join("");
  const rows = photos.slice(0, maxList).map((p2) => {
    const name = escapeHtml2(p2.display_name || p2.imageId);
    const cap = p2.caption ? `&nbsp;\u2014&nbsp;<span style="color:#666;">${escapeHtml2(p2.caption)}</span>` : "";
    const dims = p2.width && p2.height ? `${p2.width}\xD7${p2.height}` : "";
    const size = fmtBytes(p2.size);
    const meta = [dims, size].filter(Boolean).join(" \u2022 ");
    return `
      <tr>
        <td style="padding:8px 0;border-bottom:1px solid #eee;">
          <div style="font-size:14px;line-height:1.3;">
            <b>${name}</b>${cap}
            ${meta ? `<div style="color:#666;font-size:12px;margin-top:2px;">${meta}</div>` : ""}
            ${p2.album_id ? `<div style="color:#666;font-size:12px;margin-top:2px;">Album: ${escapeHtml2(
      p2.album_id
    )}</div>` : ""}
          </div>
        </td>
      </tr>
    `;
  }).join("");
  const moreLine = more ? `<tr><td style="padding:10px 0;color:#666;font-size:13px;">+${more} more \u2026</td></tr>` : "";
  const button = adminUrl ? `
      <a href="${escapeHtml2(adminUrl)}"
         style="display:inline-block;background:#111;color:#fff;text-decoration:none;
                padding:12px 18px;border-radius:10px;font-weight:600;">
        Review in Admin
      </a>` : "";
  return `
  <div style="background:#f6f5ef;padding:24px 0;">
    <table role="presentation" cellpadding="0" cellspacing="0" border="0" width="100%">
      <tr>
        <td align="center">
          <table role="presentation" cellpadding="0" cellspacing="0" border="0" width="600" style="max-width:600px;background:#ffffff;border-radius:14px;padding:24px;border:1px solid #e7e4d8;">
            <tr>
              <td>
                <h2 style="margin:0 0 8px 0;font:600 20px ui-sans-serif,system-ui,Segoe UI,Roboto,Helvetica,Arial;">New Images Uploaded</h2>
                <div style="color:#666;font-size:12px;margin-bottom:16px;">${nowNY()} (ET)</div>

                <div style="font-size:16px;margin-bottom:12px;">
                  <b>${count}</b> photo${count === 1 ? "" : "s"} uploaded.
                </div>

                <div style="margin:12px 0 8px 0;">
                  <div style="font-size:14px;font-weight:600;margin-bottom:6px;">By album</div>
                  <ul style="margin:0;padding-left:18px;color:#333;font-size:14px;line-height:1.4;">
                    ${albumLines || "<li>Uncategorized</li>"}
                  </ul>
                </div>

                <div style="height:1px;background:#eee;margin:16px 0;"></div>

                <table role="presentation" cellpadding="0" cellspacing="0" border="0" width="100%">
                  ${rows}
                  ${moreLine}
                </table>

                ${button ? `<div style="margin-top:20px;">${button}</div>` : ""}

                <div style="color:#999;font-size:12px;margin-top:18px;">
                  This is an automated notification from thehoffmans.wedding
                </div>
              </td>
            </tr>
          </table>

          <div style="color:#999;font-size:11px;margin-top:10px;">Email ID: ${escapeHtml2(
    crypto.randomUUID?.() ?? ""
  )}</div>
        </td>
      </tr>
    </table>
  </div>`;
}
__name(renderUploadEmailHTML, "renderUploadEmailHTML");
var json4;
var onRequestPost7;
var init_confirm = __esm({
  "api/gallery/confirm.ts"() {
    init_functionsRoutes_0_09879299104094341();
    init_email();
    json4 = /* @__PURE__ */ __name2((d2, init = {}) => new Response(JSON.stringify(d2), {
      ...init,
      headers: { "content-type": "application/json; charset=UTF-8", ...init.headers || {} }
    }), "json");
    __name2(escapeHtml2, "escapeHtml");
    __name2(fmtBytes, "fmtBytes");
    __name2(nowNY, "nowNY");
    __name2(renderUploadEmailHTML, "renderUploadEmailHTML");
    onRequestPost7 = /* @__PURE__ */ __name2(async ({ request, env }) => {
      try {
        let basenameFromKey = /* @__PURE__ */ __name(function(k2) {
          const s2 = k2.split("/");
          return s2[s2.length - 1] || "photo.jpg";
        }, "basenameFromKey");
        __name2(basenameFromKey, "basenameFromKey");
        if (!(request.headers.get("content-type") || "").includes("application/json")) {
          return json4({ ok: false, message: "Expected application/json" }, { status: 400 });
        }
        const body = await request.json().catch(() => null);
        if (!body || typeof body !== "object") {
          return json4({ ok: false, message: "Invalid JSON body" }, { status: 400 });
        }
        let photos = Array.isArray(body.photos) ? body.photos : body.key ? [{ imageId: body.key, size: body.size ?? null }] : [];
        photos = photos.map((p2) => ({
          imageId: typeof p2.imageId === "string" ? p2.imageId : void 0,
          size: p2.size == null ? null : Number(p2.size),
          caption: p2.caption ?? null,
          display_name: p2.display_name ?? null,
          width: p2.width == null ? null : Number(p2.width),
          height: p2.height == null ? null : Number(p2.height),
          download_name: p2.download_name ?? null,
          album_id: p2.album_id ?? "album_general"
        })).filter((p2) => !!p2.imageId);
        if (photos.length === 0)
          return json4({ ok: false, message: "No photos to confirm" }, { status: 400 });
        for (const p2 of photos) {
          const key = p2.imageId;
          const head = await env.R2.head(key);
          if (!head) {
            return json4({ ok: false, message: "Object not found in R2", key }, { status: 404 });
          }
          if (Number.isFinite(p2.size) && p2.size != null && head.size !== Number(p2.size)) {
            return json4(
              {
                ok: false,
                message: "Size mismatch",
                key,
                expected: p2.size,
                actual: head.size
              },
              { status: 409 }
            );
          }
          const rawBase = p2.download_name || decodeURIComponent(key.split("/").pop() || "photo.jpg");
          const dot = rawBase.lastIndexOf(".");
          const base = dot > 0 ? rawBase.slice(0, dot) : rawBase;
          const ext = dot > 0 ? rawBase.slice(dot) : ".jpg";
          const desiredContentType = head.httpMetadata?.contentType || (/\.(png)$/i.test(ext) ? "image/png" : /\.(webp)$/i.test(ext) ? "image/webp" : /\.(gif)$/i.test(ext) ? "image/gif" : "image/jpeg");
          const desired = {
            contentType: desiredContentType,
            cacheControl: head.httpMetadata?.cacheControl || "public, max-age=31536000, immutable"
          };
          const current = {
            contentType: head.httpMetadata?.contentType,
            contentDisposition: head.httpMetadata?.contentDisposition,
            cacheControl: head.httpMetadata?.cacheControl
          };
          const needsRewrite = current.contentType !== desired.contentType || current.cacheControl !== desired.cacheControl;
          if (needsRewrite) {
            const obj = await env.R2.get(key);
            if (!obj || !obj.body) {
              return json4(
                { ok: false, message: "Failed to read object body", key },
                { status: 500 }
              );
            }
            try {
              await env.R2.put(key, obj.body, {
                httpMetadata: desired,
                customMetadata: head.customMetadata
              });
            } catch (e2) {
              console.warn("R2.put rewrite failed for", key, e2);
            }
          }
        }
        const row = await env.DB.prepare(
          `SELECT value FROM settings WHERE key='auto_publish_uploads' LIMIT 1`
        ).first();
        const auto = row?.value === "1";
        if (auto) {
          for (const p2 of photos) {
            const tmpKey = p2.imageId;
            const albumId = (p2.album_id || "album_general").trim();
            const finalKey = `gallery/${albumId}/${basenameFromKey(tmpKey)}`;
            const head = await env.R2.head(tmpKey);
            const obj = await env.R2.get(tmpKey);
            if (!obj || !obj.body) {
              return json4(
                { ok: false, message: "Failed to read R2 object", key: tmpKey },
                { status: 500 }
              );
            }
            await env.R2.put(finalKey, obj.body, {
              httpMetadata: {
                contentType: head?.httpMetadata?.contentType || (/\.(png)$/i.test(finalKey) ? "image/png" : /\.(webp)$/i.test(finalKey) ? "image/webp" : /\.(gif)$/i.test(finalKey) ? "image/gif" : "image/jpeg"),
                cacheControl: head?.httpMetadata?.cacheControl || "public, max-age=31536000, immutable"
              },
              customMetadata: head?.customMetadata
            });
            await env.R2.delete(tmpKey);
            await env.DB.prepare(
              `INSERT INTO photos
         (id, album_id, caption, display_name, width, height, taken_at, status, is_public, created_at)
       VALUES
         (?, ?, ?, ?, ?, ?, NULL, 'approved', 1, CURRENT_TIMESTAMP)`
            ).bind(finalKey, albumId, p2.caption, p2.display_name, p2.width, p2.height).run();
          }
          const adminUrl = "https://thehoffmans.wedding/admin";
          const result = await sendEmail(env, {
            to: env.EMAIL_ADMIN_TO,
            subject: `New Images Uploaded: ${photos.length} photo(s)`,
            html: renderUploadEmailHTML(photos, adminUrl)
          });
          if (!result.ok && result.status === 402) {
            console.log("Email not sent: free-tier quota likely exceeded.");
          }
          return json4({ ok: true, inserted: photos.length, status: "approved" });
        } else {
          const stmts = photos.map(
            (p2) => env.DB.prepare(
              `INSERT INTO photos
         (id, album_id, caption, display_name, width, height, taken_at, status, is_public, created_at)
       VALUES
         (?, ?, ?, ?, ?, ?, NULL, 'pending', 0, CURRENT_TIMESTAMP)`
            ).bind(
              p2.imageId,
              (p2.album_id || "album_general").trim(),
              p2.caption,
              p2.display_name,
              p2.width,
              p2.height
            )
          );
          await env.DB.batch(stmts);
          const adminUrl = "https://thehoffmans.wedding/admin";
          const result = await sendEmail(env, {
            to: env.EMAIL_ADMIN_TO,
            subject: `New Images Waiting For Approval: ${photos.length} photo(s)`,
            html: renderUploadEmailHTML(photos, adminUrl)
          });
          if (!result.ok && result.status === 402) {
            console.log("Email not sent: free-tier quota likely exceeded.");
          }
          return json4({ ok: true, inserted: photos.length, status: "pending" });
        }
      } catch (err) {
        console.error("confirm batch error:", err);
        return json4({ ok: false, message: String(err?.message || err) }, { status: 500 });
      }
    }, "onRequestPost");
  }
});
var getHttpHandlerExtensionConfiguration;
var resolveHttpHandlerRuntimeConfig;
var init_httpExtensionConfiguration = __esm({
  "../node_modules/@smithy/protocol-http/dist-es/extensions/httpExtensionConfiguration.js"() {
    init_functionsRoutes_0_09879299104094341();
    getHttpHandlerExtensionConfiguration = /* @__PURE__ */ __name2((runtimeConfig) => {
      return {
        setHttpHandler(handler) {
          runtimeConfig.httpHandler = handler;
        },
        httpHandler() {
          return runtimeConfig.httpHandler;
        },
        updateHttpClientConfig(key, value) {
          runtimeConfig.httpHandler?.updateHttpClientConfig(key, value);
        },
        httpHandlerConfigs() {
          return runtimeConfig.httpHandler.httpHandlerConfigs();
        }
      };
    }, "getHttpHandlerExtensionConfiguration");
    resolveHttpHandlerRuntimeConfig = /* @__PURE__ */ __name2((httpHandlerExtensionConfiguration) => {
      return {
        httpHandler: httpHandlerExtensionConfiguration.httpHandler()
      };
    }, "resolveHttpHandlerRuntimeConfig");
  }
});
var init_extensions = __esm({
  "../node_modules/@smithy/protocol-http/dist-es/extensions/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_httpExtensionConfiguration();
  }
});
var init_abort = __esm({
  "../node_modules/@smithy/types/dist-es/abort.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var HttpAuthLocation;
var init_auth = __esm({
  "../node_modules/@smithy/types/dist-es/auth/auth.js"() {
    init_functionsRoutes_0_09879299104094341();
    (function(HttpAuthLocation2) {
      HttpAuthLocation2["HEADER"] = "header";
      HttpAuthLocation2["QUERY"] = "query";
    })(HttpAuthLocation || (HttpAuthLocation = {}));
  }
});
var HttpApiKeyAuthLocation;
var init_HttpApiKeyAuth = __esm({
  "../node_modules/@smithy/types/dist-es/auth/HttpApiKeyAuth.js"() {
    init_functionsRoutes_0_09879299104094341();
    (function(HttpApiKeyAuthLocation2) {
      HttpApiKeyAuthLocation2["HEADER"] = "header";
      HttpApiKeyAuthLocation2["QUERY"] = "query";
    })(HttpApiKeyAuthLocation || (HttpApiKeyAuthLocation = {}));
  }
});
var init_HttpAuthScheme = __esm({
  "../node_modules/@smithy/types/dist-es/auth/HttpAuthScheme.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_HttpAuthSchemeProvider = __esm({
  "../node_modules/@smithy/types/dist-es/auth/HttpAuthSchemeProvider.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_HttpSigner = __esm({
  "../node_modules/@smithy/types/dist-es/auth/HttpSigner.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_IdentityProviderConfig = __esm({
  "../node_modules/@smithy/types/dist-es/auth/IdentityProviderConfig.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_auth2 = __esm({
  "../node_modules/@smithy/types/dist-es/auth/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_auth();
    init_HttpApiKeyAuth();
    init_HttpAuthScheme();
    init_HttpAuthSchemeProvider();
    init_HttpSigner();
    init_IdentityProviderConfig();
  }
});
var init_blob_payload_input_types = __esm({
  "../node_modules/@smithy/types/dist-es/blob/blob-payload-input-types.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_checksum = __esm({
  "../node_modules/@smithy/types/dist-es/checksum.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_client = __esm({
  "../node_modules/@smithy/types/dist-es/client.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_command = __esm({
  "../node_modules/@smithy/types/dist-es/command.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_config = __esm({
  "../node_modules/@smithy/types/dist-es/connection/config.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_manager = __esm({
  "../node_modules/@smithy/types/dist-es/connection/manager.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_pool = __esm({
  "../node_modules/@smithy/types/dist-es/connection/pool.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_connection = __esm({
  "../node_modules/@smithy/types/dist-es/connection/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_config();
    init_manager();
    init_pool();
  }
});
var init_crypto = __esm({
  "../node_modules/@smithy/types/dist-es/crypto.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_encode = __esm({
  "../node_modules/@smithy/types/dist-es/encode.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var EndpointURLScheme;
var init_endpoint = __esm({
  "../node_modules/@smithy/types/dist-es/endpoint.js"() {
    init_functionsRoutes_0_09879299104094341();
    (function(EndpointURLScheme2) {
      EndpointURLScheme2["HTTP"] = "http";
      EndpointURLScheme2["HTTPS"] = "https";
    })(EndpointURLScheme || (EndpointURLScheme = {}));
  }
});
var init_EndpointRuleObject = __esm({
  "../node_modules/@smithy/types/dist-es/endpoints/EndpointRuleObject.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_ErrorRuleObject = __esm({
  "../node_modules/@smithy/types/dist-es/endpoints/ErrorRuleObject.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_RuleSetObject = __esm({
  "../node_modules/@smithy/types/dist-es/endpoints/RuleSetObject.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_shared = __esm({
  "../node_modules/@smithy/types/dist-es/endpoints/shared.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_TreeRuleObject = __esm({
  "../node_modules/@smithy/types/dist-es/endpoints/TreeRuleObject.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_endpoints = __esm({
  "../node_modules/@smithy/types/dist-es/endpoints/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_EndpointRuleObject();
    init_ErrorRuleObject();
    init_RuleSetObject();
    init_shared();
    init_TreeRuleObject();
  }
});
var init_eventStream = __esm({
  "../node_modules/@smithy/types/dist-es/eventStream.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var AlgorithmId;
var init_checksum2 = __esm({
  "../node_modules/@smithy/types/dist-es/extensions/checksum.js"() {
    init_functionsRoutes_0_09879299104094341();
    (function(AlgorithmId2) {
      AlgorithmId2["MD5"] = "md5";
      AlgorithmId2["CRC32"] = "crc32";
      AlgorithmId2["CRC32C"] = "crc32c";
      AlgorithmId2["SHA1"] = "sha1";
      AlgorithmId2["SHA256"] = "sha256";
    })(AlgorithmId || (AlgorithmId = {}));
  }
});
var init_defaultClientConfiguration = __esm({
  "../node_modules/@smithy/types/dist-es/extensions/defaultClientConfiguration.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_defaultExtensionConfiguration = __esm({
  "../node_modules/@smithy/types/dist-es/extensions/defaultExtensionConfiguration.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_extensions2 = __esm({
  "../node_modules/@smithy/types/dist-es/extensions/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_defaultClientConfiguration();
    init_defaultExtensionConfiguration();
    init_checksum2();
  }
});
var init_feature_ids = __esm({
  "../node_modules/@smithy/types/dist-es/feature-ids.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var FieldPosition;
var init_http = __esm({
  "../node_modules/@smithy/types/dist-es/http.js"() {
    init_functionsRoutes_0_09879299104094341();
    (function(FieldPosition2) {
      FieldPosition2[FieldPosition2["HEADER"] = 0] = "HEADER";
      FieldPosition2[FieldPosition2["TRAILER"] = 1] = "TRAILER";
    })(FieldPosition || (FieldPosition = {}));
  }
});
var init_httpHandlerInitialization = __esm({
  "../node_modules/@smithy/types/dist-es/http/httpHandlerInitialization.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_apiKeyIdentity = __esm({
  "../node_modules/@smithy/types/dist-es/identity/apiKeyIdentity.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_awsCredentialIdentity = __esm({
  "../node_modules/@smithy/types/dist-es/identity/awsCredentialIdentity.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_identity = __esm({
  "../node_modules/@smithy/types/dist-es/identity/identity.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_tokenIdentity = __esm({
  "../node_modules/@smithy/types/dist-es/identity/tokenIdentity.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_identity2 = __esm({
  "../node_modules/@smithy/types/dist-es/identity/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_apiKeyIdentity();
    init_awsCredentialIdentity();
    init_identity();
    init_tokenIdentity();
  }
});
var init_logger = __esm({
  "../node_modules/@smithy/types/dist-es/logger.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var SMITHY_CONTEXT_KEY;
var init_middleware = __esm({
  "../node_modules/@smithy/types/dist-es/middleware.js"() {
    init_functionsRoutes_0_09879299104094341();
    SMITHY_CONTEXT_KEY = "__smithy_context";
  }
});
var init_pagination = __esm({
  "../node_modules/@smithy/types/dist-es/pagination.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var IniSectionType;
var init_profile = __esm({
  "../node_modules/@smithy/types/dist-es/profile.js"() {
    init_functionsRoutes_0_09879299104094341();
    (function(IniSectionType2) {
      IniSectionType2["PROFILE"] = "profile";
      IniSectionType2["SSO_SESSION"] = "sso-session";
      IniSectionType2["SERVICES"] = "services";
    })(IniSectionType || (IniSectionType = {}));
  }
});
var init_response = __esm({
  "../node_modules/@smithy/types/dist-es/response.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_retry = __esm({
  "../node_modules/@smithy/types/dist-es/retry.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_schema = __esm({
  "../node_modules/@smithy/types/dist-es/schema/schema.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_sentinels = __esm({
  "../node_modules/@smithy/types/dist-es/schema/sentinels.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_serde = __esm({
  "../node_modules/@smithy/types/dist-es/serde.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_shapes = __esm({
  "../node_modules/@smithy/types/dist-es/shapes.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_signature = __esm({
  "../node_modules/@smithy/types/dist-es/signature.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_stream = __esm({
  "../node_modules/@smithy/types/dist-es/stream.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_streaming_blob_common_types = __esm({
  "../node_modules/@smithy/types/dist-es/streaming-payload/streaming-blob-common-types.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_streaming_blob_payload_input_types = __esm({
  "../node_modules/@smithy/types/dist-es/streaming-payload/streaming-blob-payload-input-types.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_streaming_blob_payload_output_types = __esm({
  "../node_modules/@smithy/types/dist-es/streaming-payload/streaming-blob-payload-output-types.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var RequestHandlerProtocol;
var init_transfer = __esm({
  "../node_modules/@smithy/types/dist-es/transfer.js"() {
    init_functionsRoutes_0_09879299104094341();
    (function(RequestHandlerProtocol2) {
      RequestHandlerProtocol2["HTTP_0_9"] = "http/0.9";
      RequestHandlerProtocol2["HTTP_1_0"] = "http/1.0";
      RequestHandlerProtocol2["TDS_8_0"] = "tds/8.0";
    })(RequestHandlerProtocol || (RequestHandlerProtocol = {}));
  }
});
var init_client_payload_blob_type_narrow = __esm({
  "../node_modules/@smithy/types/dist-es/transform/client-payload-blob-type-narrow.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_mutable = __esm({
  "../node_modules/@smithy/types/dist-es/transform/mutable.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_no_undefined = __esm({
  "../node_modules/@smithy/types/dist-es/transform/no-undefined.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_type_transform = __esm({
  "../node_modules/@smithy/types/dist-es/transform/type-transform.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_uri = __esm({
  "../node_modules/@smithy/types/dist-es/uri.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_util3 = __esm({
  "../node_modules/@smithy/types/dist-es/util.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_waiter = __esm({
  "../node_modules/@smithy/types/dist-es/waiter.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_dist_es = __esm({
  "../node_modules/@smithy/types/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_abort();
    init_auth2();
    init_blob_payload_input_types();
    init_checksum();
    init_client();
    init_command();
    init_connection();
    init_crypto();
    init_encode();
    init_endpoint();
    init_endpoints();
    init_eventStream();
    init_extensions2();
    init_feature_ids();
    init_http();
    init_httpHandlerInitialization();
    init_identity2();
    init_logger();
    init_middleware();
    init_pagination();
    init_profile();
    init_response();
    init_retry();
    init_schema();
    init_sentinels();
    init_serde();
    init_shapes();
    init_signature();
    init_stream();
    init_streaming_blob_common_types();
    init_streaming_blob_payload_input_types();
    init_streaming_blob_payload_output_types();
    init_transfer();
    init_client_payload_blob_type_narrow();
    init_mutable();
    init_no_undefined();
    init_type_transform();
    init_uri();
    init_util3();
    init_waiter();
  }
});
var init_Field = __esm({
  "../node_modules/@smithy/protocol-http/dist-es/Field.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_Fields = __esm({
  "../node_modules/@smithy/protocol-http/dist-es/Fields.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_httpHandler = __esm({
  "../node_modules/@smithy/protocol-http/dist-es/httpHandler.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
function cloneQuery(query) {
  return Object.keys(query).reduce((carry, paramName) => {
    const param = query[paramName];
    return {
      ...carry,
      [paramName]: Array.isArray(param) ? [...param] : param
    };
  }, {});
}
__name(cloneQuery, "cloneQuery");
var HttpRequest;
var init_httpRequest = __esm({
  "../node_modules/@smithy/protocol-http/dist-es/httpRequest.js"() {
    init_functionsRoutes_0_09879299104094341();
    HttpRequest = class _HttpRequest {
      static {
        __name(this, "_HttpRequest");
      }
      static {
        __name2(this, "HttpRequest");
      }
      constructor(options) {
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol ? options.protocol.slice(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
        this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
        this.username = options.username;
        this.password = options.password;
        this.fragment = options.fragment;
      }
      static clone(request) {
        const cloned = new _HttpRequest({
          ...request,
          headers: { ...request.headers }
        });
        if (cloned.query) {
          cloned.query = cloneQuery(cloned.query);
        }
        return cloned;
      }
      static isInstance(request) {
        if (!request) {
          return false;
        }
        const req = request;
        return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
      }
      clone() {
        return _HttpRequest.clone(this);
      }
    };
    __name2(cloneQuery, "cloneQuery");
  }
});
var HttpResponse;
var init_httpResponse = __esm({
  "../node_modules/@smithy/protocol-http/dist-es/httpResponse.js"() {
    init_functionsRoutes_0_09879299104094341();
    HttpResponse = class {
      static {
        __name(this, "HttpResponse");
      }
      static {
        __name2(this, "HttpResponse");
      }
      constructor(options) {
        this.statusCode = options.statusCode;
        this.reason = options.reason;
        this.headers = options.headers || {};
        this.body = options.body;
      }
      static isInstance(response) {
        if (!response)
          return false;
        const resp = response;
        return typeof resp.statusCode === "number" && typeof resp.headers === "object";
      }
    };
  }
});
function isValidHostname(hostname3) {
  const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
  return hostPattern.test(hostname3);
}
__name(isValidHostname, "isValidHostname");
var init_isValidHostname = __esm({
  "../node_modules/@smithy/protocol-http/dist-es/isValidHostname.js"() {
    init_functionsRoutes_0_09879299104094341();
    __name2(isValidHostname, "isValidHostname");
  }
});
var init_types = __esm({
  "../node_modules/@smithy/protocol-http/dist-es/types.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_dist_es2 = __esm({
  "../node_modules/@smithy/protocol-http/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_extensions();
    init_Field();
    init_Fields();
    init_httpHandler();
    init_httpRequest();
    init_httpResponse();
    init_isValidHostname();
    init_types();
  }
});
function addExpectContinueMiddleware(options) {
  return (next) => async (args) => {
    const { request } = args;
    if (HttpRequest.isInstance(request) && request.body && options.runtime === "node") {
      if (options.requestHandler?.constructor?.name !== "FetchHttpHandler") {
        request.headers = {
          ...request.headers,
          Expect: "100-continue"
        };
      }
    }
    return next({
      ...args,
      request
    });
  };
}
__name(addExpectContinueMiddleware, "addExpectContinueMiddleware");
var addExpectContinueMiddlewareOptions;
var getAddExpectContinuePlugin;
var init_dist_es3 = __esm({
  "../node_modules/@aws-sdk/middleware-expect-continue/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es2();
    __name2(addExpectContinueMiddleware, "addExpectContinueMiddleware");
    addExpectContinueMiddlewareOptions = {
      step: "build",
      tags: ["SET_EXPECT_HEADER", "EXPECT_HEADER"],
      name: "addExpectContinueMiddleware",
      override: true
    };
    getAddExpectContinuePlugin = /* @__PURE__ */ __name2((options) => ({
      applyToStack: /* @__PURE__ */ __name2((clientStack) => {
        clientStack.add(addExpectContinueMiddleware(options), addExpectContinueMiddlewareOptions);
      }, "applyToStack")
    }), "getAddExpectContinuePlugin");
  }
});
var RequestChecksumCalculation;
var DEFAULT_REQUEST_CHECKSUM_CALCULATION;
var ResponseChecksumValidation;
var DEFAULT_RESPONSE_CHECKSUM_VALIDATION;
var ChecksumAlgorithm;
var ChecksumLocation;
var DEFAULT_CHECKSUM_ALGORITHM;
var init_constants = __esm({
  "../node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/constants.js"() {
    init_functionsRoutes_0_09879299104094341();
    RequestChecksumCalculation = {
      WHEN_SUPPORTED: "WHEN_SUPPORTED",
      WHEN_REQUIRED: "WHEN_REQUIRED"
    };
    DEFAULT_REQUEST_CHECKSUM_CALCULATION = RequestChecksumCalculation.WHEN_SUPPORTED;
    ResponseChecksumValidation = {
      WHEN_SUPPORTED: "WHEN_SUPPORTED",
      WHEN_REQUIRED: "WHEN_REQUIRED"
    };
    DEFAULT_RESPONSE_CHECKSUM_VALIDATION = RequestChecksumCalculation.WHEN_SUPPORTED;
    (function(ChecksumAlgorithm2) {
      ChecksumAlgorithm2["MD5"] = "MD5";
      ChecksumAlgorithm2["CRC32"] = "CRC32";
      ChecksumAlgorithm2["CRC32C"] = "CRC32C";
      ChecksumAlgorithm2["CRC64NVME"] = "CRC64NVME";
      ChecksumAlgorithm2["SHA1"] = "SHA1";
      ChecksumAlgorithm2["SHA256"] = "SHA256";
    })(ChecksumAlgorithm || (ChecksumAlgorithm = {}));
    (function(ChecksumLocation2) {
      ChecksumLocation2["HEADER"] = "header";
      ChecksumLocation2["TRAILER"] = "trailer";
    })(ChecksumLocation || (ChecksumLocation = {}));
    DEFAULT_CHECKSUM_ALGORITHM = ChecksumAlgorithm.CRC32;
  }
});
var init_NODE_REQUEST_CHECKSUM_CALCULATION_CONFIG_OPTIONS = __esm({
  "../node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/NODE_REQUEST_CHECKSUM_CALCULATION_CONFIG_OPTIONS.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_NODE_RESPONSE_CHECKSUM_VALIDATION_CONFIG_OPTIONS = __esm({
  "../node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/NODE_RESPONSE_CHECKSUM_VALIDATION_CONFIG_OPTIONS.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var crc64NvmeCrtContainer;
var init_crc64_nvme_crt_container = __esm({
  "../node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/crc64-nvme-crt-container.js"() {
    init_functionsRoutes_0_09879299104094341();
    crc64NvmeCrtContainer = {
      CrtCrc64Nvme: null
    };
  }
});
var init_emitWarningIfUnsupportedVersion = __esm({
  "../node_modules/@aws-sdk/core/dist-es/submodules/client/emitWarningIfUnsupportedVersion.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
function setCredentialFeature(credentials, feature, value) {
  if (!credentials.$source) {
    credentials.$source = {};
  }
  credentials.$source[feature] = value;
  return credentials;
}
__name(setCredentialFeature, "setCredentialFeature");
var init_setCredentialFeature = __esm({
  "../node_modules/@aws-sdk/core/dist-es/submodules/client/setCredentialFeature.js"() {
    init_functionsRoutes_0_09879299104094341();
    __name2(setCredentialFeature, "setCredentialFeature");
  }
});
function setFeature(context, feature, value) {
  if (!context.__aws_sdk_context) {
    context.__aws_sdk_context = {
      features: {}
    };
  } else if (!context.__aws_sdk_context.features) {
    context.__aws_sdk_context.features = {};
  }
  context.__aws_sdk_context.features[feature] = value;
}
__name(setFeature, "setFeature");
var init_setFeature = __esm({
  "../node_modules/@aws-sdk/core/dist-es/submodules/client/setFeature.js"() {
    init_functionsRoutes_0_09879299104094341();
    __name2(setFeature, "setFeature");
  }
});
var init_setTokenFeature = __esm({
  "../node_modules/@aws-sdk/core/dist-es/submodules/client/setTokenFeature.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_client2 = __esm({
  "../node_modules/@aws-sdk/core/dist-es/submodules/client/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_emitWarningIfUnsupportedVersion();
    init_setCredentialFeature();
    init_setFeature();
    init_setTokenFeature();
  }
});
var getDateHeader;
var init_getDateHeader = __esm({
  "../node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getDateHeader.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es2();
    getDateHeader = /* @__PURE__ */ __name2((response) => HttpResponse.isInstance(response) ? response.headers?.date ?? response.headers?.Date : void 0, "getDateHeader");
  }
});
var getSkewCorrectedDate;
var init_getSkewCorrectedDate = __esm({
  "../node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getSkewCorrectedDate.js"() {
    init_functionsRoutes_0_09879299104094341();
    getSkewCorrectedDate = /* @__PURE__ */ __name2((systemClockOffset) => new Date(Date.now() + systemClockOffset), "getSkewCorrectedDate");
  }
});
var isClockSkewed;
var init_isClockSkewed = __esm({
  "../node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/isClockSkewed.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_getSkewCorrectedDate();
    isClockSkewed = /* @__PURE__ */ __name2((clockTime, systemClockOffset) => Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - clockTime) >= 3e5, "isClockSkewed");
  }
});
var getUpdatedSystemClockOffset;
var init_getUpdatedSystemClockOffset = __esm({
  "../node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getUpdatedSystemClockOffset.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_isClockSkewed();
    getUpdatedSystemClockOffset = /* @__PURE__ */ __name2((clockTime, currentSystemClockOffset) => {
      const clockTimeInMs = Date.parse(clockTime);
      if (isClockSkewed(clockTimeInMs, currentSystemClockOffset)) {
        return clockTimeInMs - Date.now();
      }
      return currentSystemClockOffset;
    }, "getUpdatedSystemClockOffset");
  }
});
var init_utils2 = __esm({
  "../node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_getDateHeader();
    init_getSkewCorrectedDate();
    init_getUpdatedSystemClockOffset();
  }
});
var throwSigningPropertyError;
var validateSigningProperties;
var AwsSdkSigV4Signer;
var init_AwsSdkSigV4Signer = __esm({
  "../node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/AwsSdkSigV4Signer.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es2();
    init_utils2();
    throwSigningPropertyError = /* @__PURE__ */ __name2((name, property) => {
      if (!property) {
        throw new Error(`Property \`${name}\` is not resolved for AWS SDK SigV4Auth`);
      }
      return property;
    }, "throwSigningPropertyError");
    validateSigningProperties = /* @__PURE__ */ __name2(async (signingProperties) => {
      const context = throwSigningPropertyError("context", signingProperties.context);
      const config2 = throwSigningPropertyError("config", signingProperties.config);
      const authScheme = context.endpointV2?.properties?.authSchemes?.[0];
      const signerFunction = throwSigningPropertyError("signer", config2.signer);
      const signer = await signerFunction(authScheme);
      const signingRegion = signingProperties?.signingRegion;
      const signingRegionSet = signingProperties?.signingRegionSet;
      const signingName = signingProperties?.signingName;
      return {
        config: config2,
        signer,
        signingRegion,
        signingRegionSet,
        signingName
      };
    }, "validateSigningProperties");
    AwsSdkSigV4Signer = class {
      static {
        __name(this, "AwsSdkSigV4Signer");
      }
      static {
        __name2(this, "AwsSdkSigV4Signer");
      }
      async sign(httpRequest, identity, signingProperties) {
        if (!HttpRequest.isInstance(httpRequest)) {
          throw new Error("The request is not an instance of `HttpRequest` and cannot be signed");
        }
        const validatedProps = await validateSigningProperties(signingProperties);
        const { config: config2, signer } = validatedProps;
        let { signingRegion, signingName } = validatedProps;
        const handlerExecutionContext = signingProperties.context;
        if (handlerExecutionContext?.authSchemes?.length ?? 0 > 1) {
          const [first, second] = handlerExecutionContext.authSchemes;
          if (first?.name === "sigv4a" && second?.name === "sigv4") {
            signingRegion = second?.signingRegion ?? signingRegion;
            signingName = second?.signingName ?? signingName;
          }
        }
        const signedRequest = await signer.sign(httpRequest, {
          signingDate: getSkewCorrectedDate(config2.systemClockOffset),
          signingRegion,
          signingService: signingName
        });
        return signedRequest;
      }
      errorHandler(signingProperties) {
        return (error45) => {
          const serverTime = error45.ServerTime ?? getDateHeader(error45.$response);
          if (serverTime) {
            const config2 = throwSigningPropertyError("config", signingProperties.config);
            const initialSystemClockOffset = config2.systemClockOffset;
            config2.systemClockOffset = getUpdatedSystemClockOffset(serverTime, config2.systemClockOffset);
            const clockSkewCorrected = config2.systemClockOffset !== initialSystemClockOffset;
            if (clockSkewCorrected && error45.$metadata) {
              error45.$metadata.clockSkewCorrected = true;
            }
          }
          throw error45;
        };
      }
      successHandler(httpResponse, signingProperties) {
        const dateHeader = getDateHeader(httpResponse);
        if (dateHeader) {
          const config2 = throwSigningPropertyError("config", signingProperties.config);
          config2.systemClockOffset = getUpdatedSystemClockOffset(dateHeader, config2.systemClockOffset);
        }
      }
    };
  }
});
var AwsSdkSigV4ASigner;
var init_AwsSdkSigV4ASigner = __esm({
  "../node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/AwsSdkSigV4ASigner.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es2();
    init_utils2();
    init_AwsSdkSigV4Signer();
    AwsSdkSigV4ASigner = class extends AwsSdkSigV4Signer {
      static {
        __name(this, "AwsSdkSigV4ASigner");
      }
      static {
        __name2(this, "AwsSdkSigV4ASigner");
      }
      async sign(httpRequest, identity, signingProperties) {
        if (!HttpRequest.isInstance(httpRequest)) {
          throw new Error("The request is not an instance of `HttpRequest` and cannot be signed");
        }
        const { config: config2, signer, signingRegion, signingRegionSet, signingName } = await validateSigningProperties(signingProperties);
        const configResolvedSigningRegionSet = await config2.sigv4aSigningRegionSet?.();
        const multiRegionOverride = (configResolvedSigningRegionSet ?? signingRegionSet ?? [signingRegion]).join(",");
        const signedRequest = await signer.sign(httpRequest, {
          signingDate: getSkewCorrectedDate(config2.systemClockOffset),
          signingRegion: multiRegionOverride,
          signingService: signingName
        });
        return signedRequest;
      }
    };
  }
});
var init_getBearerTokenEnvKey = __esm({
  "../node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getBearerTokenEnvKey.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_NODE_AUTH_SCHEME_PREFERENCE_OPTIONS = __esm({
  "../node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/NODE_AUTH_SCHEME_PREFERENCE_OPTIONS.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_getSmithyContext = __esm({
  "../node_modules/@smithy/core/dist-es/getSmithyContext.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var getSmithyContext;
var init_getSmithyContext2 = __esm({
  "../node_modules/@smithy/util-middleware/dist-es/getSmithyContext.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es();
    getSmithyContext = /* @__PURE__ */ __name2((context) => context[SMITHY_CONTEXT_KEY] || (context[SMITHY_CONTEXT_KEY] = {}), "getSmithyContext");
  }
});
var normalizeProvider;
var init_normalizeProvider = __esm({
  "../node_modules/@smithy/util-middleware/dist-es/normalizeProvider.js"() {
    init_functionsRoutes_0_09879299104094341();
    normalizeProvider = /* @__PURE__ */ __name2((input) => {
      if (typeof input === "function")
        return input;
      const promisified = Promise.resolve(input);
      return () => promisified;
    }, "normalizeProvider");
  }
});
var init_dist_es4 = __esm({
  "../node_modules/@smithy/util-middleware/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_getSmithyContext2();
    init_normalizeProvider();
  }
});
var resolveAuthOptions;
var init_resolveAuthOptions = __esm({
  "../node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/resolveAuthOptions.js"() {
    init_functionsRoutes_0_09879299104094341();
    resolveAuthOptions = /* @__PURE__ */ __name2((candidateAuthOptions, authSchemePreference) => {
      if (!authSchemePreference || authSchemePreference.length === 0) {
        return candidateAuthOptions;
      }
      const preferredAuthOptions = [];
      for (const preferredSchemeName of authSchemePreference) {
        for (const candidateAuthOption of candidateAuthOptions) {
          const candidateAuthSchemeName = candidateAuthOption.schemeId.split("#")[1];
          if (candidateAuthSchemeName === preferredSchemeName) {
            preferredAuthOptions.push(candidateAuthOption);
          }
        }
      }
      for (const candidateAuthOption of candidateAuthOptions) {
        if (!preferredAuthOptions.find(({ schemeId }) => schemeId === candidateAuthOption.schemeId)) {
          preferredAuthOptions.push(candidateAuthOption);
        }
      }
      return preferredAuthOptions;
    }, "resolveAuthOptions");
  }
});
function convertHttpAuthSchemesToMap(httpAuthSchemes) {
  const map3 = /* @__PURE__ */ new Map();
  for (const scheme of httpAuthSchemes) {
    map3.set(scheme.schemeId, scheme);
  }
  return map3;
}
__name(convertHttpAuthSchemesToMap, "convertHttpAuthSchemesToMap");
var httpAuthSchemeMiddleware;
var init_httpAuthSchemeMiddleware = __esm({
  "../node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/httpAuthSchemeMiddleware.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es4();
    init_resolveAuthOptions();
    __name2(convertHttpAuthSchemesToMap, "convertHttpAuthSchemesToMap");
    httpAuthSchemeMiddleware = /* @__PURE__ */ __name2((config2, mwOptions) => (next, context) => async (args) => {
      const options = config2.httpAuthSchemeProvider(await mwOptions.httpAuthSchemeParametersProvider(config2, context, args.input));
      const authSchemePreference = config2.authSchemePreference ? await config2.authSchemePreference() : [];
      const resolvedOptions = resolveAuthOptions(options, authSchemePreference);
      const authSchemes = convertHttpAuthSchemesToMap(config2.httpAuthSchemes);
      const smithyContext = getSmithyContext(context);
      const failureReasons = [];
      for (const option of resolvedOptions) {
        const scheme = authSchemes.get(option.schemeId);
        if (!scheme) {
          failureReasons.push(`HttpAuthScheme \`${option.schemeId}\` was not enabled for this service.`);
          continue;
        }
        const identityProvider = scheme.identityProvider(await mwOptions.identityProviderConfigProvider(config2));
        if (!identityProvider) {
          failureReasons.push(`HttpAuthScheme \`${option.schemeId}\` did not have an IdentityProvider configured.`);
          continue;
        }
        const { identityProperties = {}, signingProperties = {} } = option.propertiesExtractor?.(config2, context) || {};
        option.identityProperties = Object.assign(option.identityProperties || {}, identityProperties);
        option.signingProperties = Object.assign(option.signingProperties || {}, signingProperties);
        smithyContext.selectedHttpAuthScheme = {
          httpAuthOption: option,
          identity: await identityProvider(option.identityProperties),
          signer: scheme.signer
        };
        break;
      }
      if (!smithyContext.selectedHttpAuthScheme) {
        throw new Error(failureReasons.join("\n"));
      }
      return next(args);
    }, "httpAuthSchemeMiddleware");
  }
});
var httpAuthSchemeEndpointRuleSetMiddlewareOptions;
var getHttpAuthSchemeEndpointRuleSetPlugin;
var init_getHttpAuthSchemeEndpointRuleSetPlugin = __esm({
  "../node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemeEndpointRuleSetPlugin.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_httpAuthSchemeMiddleware();
    httpAuthSchemeEndpointRuleSetMiddlewareOptions = {
      step: "serialize",
      tags: ["HTTP_AUTH_SCHEME"],
      name: "httpAuthSchemeMiddleware",
      override: true,
      relation: "before",
      toMiddleware: "endpointV2Middleware"
    };
    getHttpAuthSchemeEndpointRuleSetPlugin = /* @__PURE__ */ __name2((config2, { httpAuthSchemeParametersProvider, identityProviderConfigProvider }) => ({
      applyToStack: /* @__PURE__ */ __name2((clientStack) => {
        clientStack.addRelativeTo(httpAuthSchemeMiddleware(config2, {
          httpAuthSchemeParametersProvider,
          identityProviderConfigProvider
        }), httpAuthSchemeEndpointRuleSetMiddlewareOptions);
      }, "applyToStack")
    }), "getHttpAuthSchemeEndpointRuleSetPlugin");
  }
});
var deserializerMiddleware;
var findHeader;
var init_deserializerMiddleware = __esm({
  "../node_modules/@smithy/middleware-serde/dist-es/deserializerMiddleware.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es2();
    deserializerMiddleware = /* @__PURE__ */ __name2((options, deserializer) => (next, context) => async (args) => {
      const { response } = await next(args);
      try {
        const parsed = await deserializer(response, options);
        return {
          response,
          output: parsed
        };
      } catch (error45) {
        Object.defineProperty(error45, "$response", {
          value: response
        });
        if (!("$metadata" in error45)) {
          const hint = `Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.`;
          try {
            error45.message += "\n  " + hint;
          } catch (e2) {
            if (!context.logger || context.logger?.constructor?.name === "NoOpLogger") {
              console.warn(hint);
            } else {
              context.logger?.warn?.(hint);
            }
          }
          if (typeof error45.$responseBodyText !== "undefined") {
            if (error45.$response) {
              error45.$response.body = error45.$responseBodyText;
            }
          }
          try {
            if (HttpResponse.isInstance(response)) {
              const { headers = {} } = response;
              const headerEntries = Object.entries(headers);
              error45.$metadata = {
                httpStatusCode: response.statusCode,
                requestId: findHeader(/^x-[\w-]+-request-?id$/, headerEntries),
                extendedRequestId: findHeader(/^x-[\w-]+-id-2$/, headerEntries),
                cfId: findHeader(/^x-[\w-]+-cf-id$/, headerEntries)
              };
            }
          } catch (e2) {
          }
        }
        throw error45;
      }
    }, "deserializerMiddleware");
    findHeader = /* @__PURE__ */ __name2((pattern, headers) => {
      return (headers.find(([k2]) => {
        return k2.match(pattern);
      }) || [void 0, void 0])[1];
    }, "findHeader");
  }
});
var serializerMiddleware;
var init_serializerMiddleware = __esm({
  "../node_modules/@smithy/middleware-serde/dist-es/serializerMiddleware.js"() {
    init_functionsRoutes_0_09879299104094341();
    serializerMiddleware = /* @__PURE__ */ __name2((options, serializer) => (next, context) => async (args) => {
      const endpointConfig = options;
      const endpoint = context.endpointV2?.url && endpointConfig.urlParser ? async () => endpointConfig.urlParser(context.endpointV2.url) : endpointConfig.endpoint;
      if (!endpoint) {
        throw new Error("No valid endpoint provider available.");
      }
      const request = await serializer(args.input, { ...options, endpoint });
      return next({
        ...args,
        request
      });
    }, "serializerMiddleware");
  }
});
function getSerdePlugin(config2, serializer, deserializer) {
  return {
    applyToStack: /* @__PURE__ */ __name2((commandStack) => {
      commandStack.add(deserializerMiddleware(config2, deserializer), deserializerMiddlewareOption);
      commandStack.add(serializerMiddleware(config2, serializer), serializerMiddlewareOption);
    }, "applyToStack")
  };
}
__name(getSerdePlugin, "getSerdePlugin");
var deserializerMiddlewareOption;
var serializerMiddlewareOption;
var init_serdePlugin = __esm({
  "../node_modules/@smithy/middleware-serde/dist-es/serdePlugin.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_deserializerMiddleware();
    init_serializerMiddleware();
    deserializerMiddlewareOption = {
      name: "deserializerMiddleware",
      step: "deserialize",
      tags: ["DESERIALIZER"],
      override: true
    };
    serializerMiddlewareOption = {
      name: "serializerMiddleware",
      step: "serialize",
      tags: ["SERIALIZER"],
      override: true
    };
    __name2(getSerdePlugin, "getSerdePlugin");
  }
});
var init_dist_es5 = __esm({
  "../node_modules/@smithy/middleware-serde/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_deserializerMiddleware();
    init_serdePlugin();
    init_serializerMiddleware();
  }
});
var httpAuthSchemeMiddlewareOptions;
var init_getHttpAuthSchemePlugin = __esm({
  "../node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemePlugin.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es5();
    httpAuthSchemeMiddlewareOptions = {
      step: "serialize",
      tags: ["HTTP_AUTH_SCHEME"],
      name: "httpAuthSchemeMiddleware",
      override: true,
      relation: "before",
      toMiddleware: serializerMiddlewareOption.name
    };
  }
});
var init_middleware_http_auth_scheme = __esm({
  "../node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_httpAuthSchemeMiddleware();
    init_getHttpAuthSchemeEndpointRuleSetPlugin();
    init_getHttpAuthSchemePlugin();
  }
});
var defaultErrorHandler;
var defaultSuccessHandler;
var httpSigningMiddleware;
var init_httpSigningMiddleware = __esm({
  "../node_modules/@smithy/core/dist-es/middleware-http-signing/httpSigningMiddleware.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es2();
    init_dist_es4();
    defaultErrorHandler = /* @__PURE__ */ __name2((signingProperties) => (error45) => {
      throw error45;
    }, "defaultErrorHandler");
    defaultSuccessHandler = /* @__PURE__ */ __name2((httpResponse, signingProperties) => {
    }, "defaultSuccessHandler");
    httpSigningMiddleware = /* @__PURE__ */ __name2((config2) => (next, context) => async (args) => {
      if (!HttpRequest.isInstance(args.request)) {
        return next(args);
      }
      const smithyContext = getSmithyContext(context);
      const scheme = smithyContext.selectedHttpAuthScheme;
      if (!scheme) {
        throw new Error(`No HttpAuthScheme was selected: unable to sign request`);
      }
      const { httpAuthOption: { signingProperties = {} }, identity, signer } = scheme;
      const output = await next({
        ...args,
        request: await signer.sign(args.request, identity, signingProperties)
      }).catch((signer.errorHandler || defaultErrorHandler)(signingProperties));
      (signer.successHandler || defaultSuccessHandler)(output.response, signingProperties);
      return output;
    }, "httpSigningMiddleware");
  }
});
var httpSigningMiddlewareOptions;
var getHttpSigningPlugin;
var init_getHttpSigningMiddleware = __esm({
  "../node_modules/@smithy/core/dist-es/middleware-http-signing/getHttpSigningMiddleware.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_httpSigningMiddleware();
    httpSigningMiddlewareOptions = {
      step: "finalizeRequest",
      tags: ["HTTP_SIGNING"],
      name: "httpSigningMiddleware",
      aliases: ["apiKeyMiddleware", "tokenMiddleware", "awsAuthMiddleware"],
      override: true,
      relation: "after",
      toMiddleware: "retryMiddleware"
    };
    getHttpSigningPlugin = /* @__PURE__ */ __name2((config2) => ({
      applyToStack: /* @__PURE__ */ __name2((clientStack) => {
        clientStack.addRelativeTo(httpSigningMiddleware(config2), httpSigningMiddlewareOptions);
      }, "applyToStack")
    }), "getHttpSigningPlugin");
  }
});
var init_middleware_http_signing = __esm({
  "../node_modules/@smithy/core/dist-es/middleware-http-signing/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_httpSigningMiddleware();
    init_getHttpSigningMiddleware();
  }
});
var normalizeProvider2;
var init_normalizeProvider2 = __esm({
  "../node_modules/@smithy/core/dist-es/normalizeProvider.js"() {
    init_functionsRoutes_0_09879299104094341();
    normalizeProvider2 = /* @__PURE__ */ __name2((input) => {
      if (typeof input === "function")
        return input;
      const promisified = Promise.resolve(input);
      return () => promisified;
    }, "normalizeProvider");
  }
});
function createPaginator(ClientCtor, CommandCtor, inputTokenName, outputTokenName, pageSizeTokenName) {
  return /* @__PURE__ */ __name2(/* @__PURE__ */ __name(async function* paginateOperation(config2, input, ...additionalArguments) {
    const _input = input;
    let token = config2.startingToken ?? _input[inputTokenName];
    let hasNext = true;
    let page;
    while (hasNext) {
      _input[inputTokenName] = token;
      if (pageSizeTokenName) {
        _input[pageSizeTokenName] = _input[pageSizeTokenName] ?? config2.pageSize;
      }
      if (config2.client instanceof ClientCtor) {
        page = await makePagedClientRequest(CommandCtor, config2.client, input, config2.withCommand, ...additionalArguments);
      } else {
        throw new Error(`Invalid client, expected instance of ${ClientCtor.name}`);
      }
      yield page;
      const prevToken = token;
      token = get(page, outputTokenName);
      hasNext = !!(token && (!config2.stopOnSameToken || token !== prevToken));
    }
    return void 0;
  }, "paginateOperation"), "paginateOperation");
}
__name(createPaginator, "createPaginator");
var makePagedClientRequest;
var get;
var init_createPaginator = __esm({
  "../node_modules/@smithy/core/dist-es/pagination/createPaginator.js"() {
    init_functionsRoutes_0_09879299104094341();
    makePagedClientRequest = /* @__PURE__ */ __name2(async (CommandCtor, client, input, withCommand = (_) => _, ...args) => {
      let command = new CommandCtor(input);
      command = withCommand(command) ?? command;
      return await client.send(command, ...args);
    }, "makePagedClientRequest");
    __name2(createPaginator, "createPaginator");
    get = /* @__PURE__ */ __name2((fromObject, path) => {
      let cursor = fromObject;
      const pathComponents = path.split(".");
      for (const step of pathComponents) {
        if (!cursor || typeof cursor !== "object") {
          return void 0;
        }
        cursor = cursor[step];
      }
      return cursor;
    }, "get");
  }
});
var alphabetByEncoding;
var alphabetByValue;
var bitsPerLetter;
var bitsPerByte;
var maxLetterValue;
var init_constants_browser = __esm({
  "../node_modules/@smithy/util-base64/dist-es/constants.browser.js"() {
    init_functionsRoutes_0_09879299104094341();
    alphabetByEncoding = {};
    alphabetByValue = new Array(64);
    for (let i2 = 0, start = "A".charCodeAt(0), limit = "Z".charCodeAt(0); i2 + start <= limit; i2++) {
      const char = String.fromCharCode(i2 + start);
      alphabetByEncoding[char] = i2;
      alphabetByValue[i2] = char;
    }
    for (let i2 = 0, start = "a".charCodeAt(0), limit = "z".charCodeAt(0); i2 + start <= limit; i2++) {
      const char = String.fromCharCode(i2 + start);
      const index = i2 + 26;
      alphabetByEncoding[char] = index;
      alphabetByValue[index] = char;
    }
    for (let i2 = 0; i2 < 10; i2++) {
      alphabetByEncoding[i2.toString(10)] = i2 + 52;
      const char = i2.toString(10);
      const index = i2 + 52;
      alphabetByEncoding[char] = index;
      alphabetByValue[index] = char;
    }
    alphabetByEncoding["+"] = 62;
    alphabetByValue[62] = "+";
    alphabetByEncoding["/"] = 63;
    alphabetByValue[63] = "/";
    bitsPerLetter = 6;
    bitsPerByte = 8;
    maxLetterValue = 63;
  }
});
var fromBase64;
var init_fromBase64_browser = __esm({
  "../node_modules/@smithy/util-base64/dist-es/fromBase64.browser.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_constants_browser();
    fromBase64 = /* @__PURE__ */ __name2((input) => {
      let totalByteLength = input.length / 4 * 3;
      if (input.slice(-2) === "==") {
        totalByteLength -= 2;
      } else if (input.slice(-1) === "=") {
        totalByteLength--;
      }
      const out = new ArrayBuffer(totalByteLength);
      const dataView = new DataView(out);
      for (let i2 = 0; i2 < input.length; i2 += 4) {
        let bits = 0;
        let bitLength = 0;
        for (let j2 = i2, limit = i2 + 3; j2 <= limit; j2++) {
          if (input[j2] !== "=") {
            if (!(input[j2] in alphabetByEncoding)) {
              throw new TypeError(`Invalid character ${input[j2]} in base64 string.`);
            }
            bits |= alphabetByEncoding[input[j2]] << (limit - j2) * bitsPerLetter;
            bitLength += bitsPerLetter;
          } else {
            bits >>= bitsPerLetter;
          }
        }
        const chunkOffset = i2 / 4 * 3;
        bits >>= bitLength % bitsPerByte;
        const byteLength = Math.floor(bitLength / bitsPerByte);
        for (let k2 = 0; k2 < byteLength; k2++) {
          const offset = (byteLength - k2 - 1) * bitsPerByte;
          dataView.setUint8(chunkOffset + k2, (bits & 255 << offset) >> offset);
        }
      }
      return new Uint8Array(out);
    }, "fromBase64");
  }
});
var fromUtf8;
var init_fromUtf8_browser = __esm({
  "../node_modules/@smithy/util-utf8/dist-es/fromUtf8.browser.js"() {
    init_functionsRoutes_0_09879299104094341();
    fromUtf8 = /* @__PURE__ */ __name2((input) => new TextEncoder().encode(input), "fromUtf8");
  }
});
var toUint8Array;
var init_toUint8Array = __esm({
  "../node_modules/@smithy/util-utf8/dist-es/toUint8Array.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_fromUtf8_browser();
    toUint8Array = /* @__PURE__ */ __name2((data) => {
      if (typeof data === "string") {
        return fromUtf8(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }, "toUint8Array");
  }
});
var toUtf8;
var init_toUtf8_browser = __esm({
  "../node_modules/@smithy/util-utf8/dist-es/toUtf8.browser.js"() {
    init_functionsRoutes_0_09879299104094341();
    toUtf8 = /* @__PURE__ */ __name2((input) => {
      if (typeof input === "string") {
        return input;
      }
      if (typeof input !== "object" || typeof input.byteOffset !== "number" || typeof input.byteLength !== "number") {
        throw new Error("@smithy/util-utf8: toUtf8 encoder function only accepts string | Uint8Array.");
      }
      return new TextDecoder("utf-8").decode(input);
    }, "toUtf8");
  }
});
var init_dist_es6 = __esm({
  "../node_modules/@smithy/util-utf8/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_fromUtf8_browser();
    init_toUint8Array();
    init_toUtf8_browser();
  }
});
function toBase64(_input) {
  let input;
  if (typeof _input === "string") {
    input = fromUtf8(_input);
  } else {
    input = _input;
  }
  const isArrayLike = typeof input === "object" && typeof input.length === "number";
  const isUint8Array = typeof input === "object" && typeof input.byteOffset === "number" && typeof input.byteLength === "number";
  if (!isArrayLike && !isUint8Array) {
    throw new Error("@smithy/util-base64: toBase64 encoder function only accepts string | Uint8Array.");
  }
  let str = "";
  for (let i2 = 0; i2 < input.length; i2 += 3) {
    let bits = 0;
    let bitLength = 0;
    for (let j2 = i2, limit = Math.min(i2 + 3, input.length); j2 < limit; j2++) {
      bits |= input[j2] << (limit - j2 - 1) * bitsPerByte;
      bitLength += bitsPerByte;
    }
    const bitClusterCount = Math.ceil(bitLength / bitsPerLetter);
    bits <<= bitClusterCount * bitsPerLetter - bitLength;
    for (let k2 = 1; k2 <= bitClusterCount; k2++) {
      const offset = (bitClusterCount - k2) * bitsPerLetter;
      str += alphabetByValue[(bits & maxLetterValue << offset) >> offset];
    }
    str += "==".slice(0, 4 - bitClusterCount);
  }
  return str;
}
__name(toBase64, "toBase64");
var init_toBase64_browser = __esm({
  "../node_modules/@smithy/util-base64/dist-es/toBase64.browser.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es6();
    init_constants_browser();
    __name2(toBase64, "toBase64");
  }
});
var init_dist_es7 = __esm({
  "../node_modules/@smithy/util-base64/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_fromBase64_browser();
    init_toBase64_browser();
  }
});
function transformToString(payload, encoding = "utf-8") {
  if (encoding === "base64") {
    return toBase64(payload);
  }
  return toUtf8(payload);
}
__name(transformToString, "transformToString");
function transformFromString(str, encoding) {
  if (encoding === "base64") {
    return Uint8ArrayBlobAdapter.mutate(fromBase64(str));
  }
  return Uint8ArrayBlobAdapter.mutate(fromUtf8(str));
}
__name(transformFromString, "transformFromString");
var init_transforms = __esm({
  "../node_modules/@smithy/util-stream/dist-es/blob/transforms.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es7();
    init_dist_es6();
    init_Uint8ArrayBlobAdapter();
    __name2(transformToString, "transformToString");
    __name2(transformFromString, "transformFromString");
  }
});
var Uint8ArrayBlobAdapter;
var init_Uint8ArrayBlobAdapter = __esm({
  "../node_modules/@smithy/util-stream/dist-es/blob/Uint8ArrayBlobAdapter.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_transforms();
    Uint8ArrayBlobAdapter = class _Uint8ArrayBlobAdapter extends Uint8Array {
      static {
        __name(this, "_Uint8ArrayBlobAdapter");
      }
      static {
        __name2(this, "Uint8ArrayBlobAdapter");
      }
      static fromString(source, encoding = "utf-8") {
        switch (typeof source) {
          case "string":
            return transformFromString(source, encoding);
          default:
            throw new Error(`Unsupported conversion from ${typeof source} to Uint8ArrayBlobAdapter.`);
        }
      }
      static mutate(source) {
        Object.setPrototypeOf(source, _Uint8ArrayBlobAdapter.prototype);
        return source;
      }
      transformToString(encoding = "utf-8") {
        return transformToString(this, encoding);
      }
    };
  }
});
var ReadableStreamRef;
var ChecksumStream;
var init_ChecksumStream_browser = __esm({
  "../node_modules/@smithy/util-stream/dist-es/checksum/ChecksumStream.browser.js"() {
    init_functionsRoutes_0_09879299104094341();
    ReadableStreamRef = typeof ReadableStream === "function" ? ReadableStream : function() {
    };
    ChecksumStream = class extends ReadableStreamRef {
      static {
        __name(this, "ChecksumStream");
      }
      static {
        __name2(this, "ChecksumStream");
      }
    };
  }
});
var isReadableStream;
var init_stream_type_check = __esm({
  "../node_modules/@smithy/util-stream/dist-es/stream-type-check.js"() {
    init_functionsRoutes_0_09879299104094341();
    isReadableStream = /* @__PURE__ */ __name2((stream) => typeof ReadableStream === "function" && (stream?.constructor?.name === ReadableStream.name || stream instanceof ReadableStream), "isReadableStream");
  }
});
var createChecksumStream;
var init_createChecksumStream_browser = __esm({
  "../node_modules/@smithy/util-stream/dist-es/checksum/createChecksumStream.browser.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es7();
    init_stream_type_check();
    init_ChecksumStream_browser();
    createChecksumStream = /* @__PURE__ */ __name2(({ expectedChecksum, checksum, source, checksumSourceLocation, base64Encoder }) => {
      if (!isReadableStream(source)) {
        throw new Error(`@smithy/util-stream: unsupported source type ${source?.constructor?.name ?? source} in ChecksumStream.`);
      }
      const encoder = base64Encoder ?? toBase64;
      if (typeof TransformStream !== "function") {
        throw new Error("@smithy/util-stream: unable to instantiate ChecksumStream because API unavailable: ReadableStream/TransformStream.");
      }
      const transform2 = new TransformStream({
        start() {
        },
        async transform(chunk, controller) {
          checksum.update(chunk);
          controller.enqueue(chunk);
        },
        async flush(controller) {
          const digest = await checksum.digest();
          const received = encoder(digest);
          if (expectedChecksum !== received) {
            const error45 = new Error(`Checksum mismatch: expected "${expectedChecksum}" but received "${received}" in response header "${checksumSourceLocation}".`);
            controller.error(error45);
          } else {
            controller.terminate();
          }
        }
      });
      source.pipeThrough(transform2);
      const readable = transform2.readable;
      Object.setPrototypeOf(readable, ChecksumStream.prototype);
      return readable;
    }, "createChecksumStream");
  }
});
var ByteArrayCollector;
var init_ByteArrayCollector = __esm({
  "../node_modules/@smithy/util-stream/dist-es/ByteArrayCollector.js"() {
    init_functionsRoutes_0_09879299104094341();
    ByteArrayCollector = class {
      static {
        __name(this, "ByteArrayCollector");
      }
      static {
        __name2(this, "ByteArrayCollector");
      }
      constructor(allocByteArray) {
        this.allocByteArray = allocByteArray;
        this.byteLength = 0;
        this.byteArrays = [];
      }
      push(byteArray) {
        this.byteArrays.push(byteArray);
        this.byteLength += byteArray.byteLength;
      }
      flush() {
        if (this.byteArrays.length === 1) {
          const bytes = this.byteArrays[0];
          this.reset();
          return bytes;
        }
        const aggregation = this.allocByteArray(this.byteLength);
        let cursor = 0;
        for (let i2 = 0; i2 < this.byteArrays.length; ++i2) {
          const bytes = this.byteArrays[i2];
          aggregation.set(bytes, cursor);
          cursor += bytes.byteLength;
        }
        this.reset();
        return aggregation;
      }
      reset() {
        this.byteArrays = [];
        this.byteLength = 0;
      }
    };
  }
});
function createBufferedReadableStream(upstream, size, logger2) {
  const reader = upstream.getReader();
  let streamBufferingLoggedWarning = false;
  let bytesSeen = 0;
  const buffers = ["", new ByteArrayCollector((size2) => new Uint8Array(size2))];
  let mode = -1;
  const pull = /* @__PURE__ */ __name2(async (controller) => {
    const { value, done } = await reader.read();
    const chunk = value;
    if (done) {
      if (mode !== -1) {
        const remainder = flush(buffers, mode);
        if (sizeOf(remainder) > 0) {
          controller.enqueue(remainder);
        }
      }
      controller.close();
    } else {
      const chunkMode = modeOf(chunk, false);
      if (mode !== chunkMode) {
        if (mode >= 0) {
          controller.enqueue(flush(buffers, mode));
        }
        mode = chunkMode;
      }
      if (mode === -1) {
        controller.enqueue(chunk);
        return;
      }
      const chunkSize = sizeOf(chunk);
      bytesSeen += chunkSize;
      const bufferSize = sizeOf(buffers[mode]);
      if (chunkSize >= size && bufferSize === 0) {
        controller.enqueue(chunk);
      } else {
        const newSize = merge2(buffers, mode, chunk);
        if (!streamBufferingLoggedWarning && bytesSeen > size * 2) {
          streamBufferingLoggedWarning = true;
          logger2?.warn(`@smithy/util-stream - stream chunk size ${chunkSize} is below threshold of ${size}, automatically buffering.`);
        }
        if (newSize >= size) {
          controller.enqueue(flush(buffers, mode));
        } else {
          await pull(controller);
        }
      }
    }
  }, "pull");
  return new ReadableStream({
    pull
  });
}
__name(createBufferedReadableStream, "createBufferedReadableStream");
function merge2(buffers, mode, chunk) {
  switch (mode) {
    case 0:
      buffers[0] += chunk;
      return sizeOf(buffers[0]);
    case 1:
    case 2:
      buffers[mode].push(chunk);
      return sizeOf(buffers[mode]);
  }
}
__name(merge2, "merge2");
function flush(buffers, mode) {
  switch (mode) {
    case 0:
      const s2 = buffers[0];
      buffers[0] = "";
      return s2;
    case 1:
    case 2:
      return buffers[mode].flush();
  }
  throw new Error(`@smithy/util-stream - invalid index ${mode} given to flush()`);
}
__name(flush, "flush");
function sizeOf(chunk) {
  return chunk?.byteLength ?? chunk?.length ?? 0;
}
__name(sizeOf, "sizeOf");
function modeOf(chunk, allowBuffer = true) {
  if (allowBuffer && typeof Buffer !== "undefined" && chunk instanceof Buffer) {
    return 2;
  }
  if (chunk instanceof Uint8Array) {
    return 1;
  }
  if (typeof chunk === "string") {
    return 0;
  }
  return -1;
}
__name(modeOf, "modeOf");
var createBufferedReadable;
var init_createBufferedReadableStream = __esm({
  "../node_modules/@smithy/util-stream/dist-es/createBufferedReadableStream.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_ByteArrayCollector();
    __name2(createBufferedReadableStream, "createBufferedReadableStream");
    createBufferedReadable = createBufferedReadableStream;
    __name2(merge2, "merge");
    __name2(flush, "flush");
    __name2(sizeOf, "sizeOf");
    __name2(modeOf, "modeOf");
  }
});
var getAwsChunkedEncodingStream;
var init_getAwsChunkedEncodingStream_browser = __esm({
  "../node_modules/@smithy/util-stream/dist-es/getAwsChunkedEncodingStream.browser.js"() {
    init_functionsRoutes_0_09879299104094341();
    getAwsChunkedEncodingStream = /* @__PURE__ */ __name2((readableStream, options) => {
      const { base64Encoder, bodyLengthChecker, checksumAlgorithmFn, checksumLocationName, streamHasher } = options;
      const checksumRequired = base64Encoder !== void 0 && bodyLengthChecker !== void 0 && checksumAlgorithmFn !== void 0 && checksumLocationName !== void 0 && streamHasher !== void 0;
      const digest = checksumRequired ? streamHasher(checksumAlgorithmFn, readableStream) : void 0;
      const reader = readableStream.getReader();
      return new ReadableStream({
        async pull(controller) {
          const { value, done } = await reader.read();
          if (done) {
            controller.enqueue(`0\r
`);
            if (checksumRequired) {
              const checksum = base64Encoder(await digest);
              controller.enqueue(`${checksumLocationName}:${checksum}\r
`);
              controller.enqueue(`\r
`);
            }
            controller.close();
          } else {
            controller.enqueue(`${(bodyLengthChecker(value) || 0).toString(16)}\r
${value}\r
`);
          }
        }
      });
    }, "getAwsChunkedEncodingStream");
  }
});
async function headStream(stream, bytes) {
  let byteLengthCounter = 0;
  const chunks = [];
  const reader = stream.getReader();
  let isDone = false;
  while (!isDone) {
    const { done, value } = await reader.read();
    if (value) {
      chunks.push(value);
      byteLengthCounter += value?.byteLength ?? 0;
    }
    if (byteLengthCounter >= bytes) {
      break;
    }
    isDone = done;
  }
  reader.releaseLock();
  const collected = new Uint8Array(Math.min(bytes, byteLengthCounter));
  let offset = 0;
  for (const chunk of chunks) {
    if (chunk.byteLength > collected.byteLength - offset) {
      collected.set(chunk.subarray(0, collected.byteLength - offset), offset);
      break;
    } else {
      collected.set(chunk, offset);
    }
    offset += chunk.length;
  }
  return collected;
}
__name(headStream, "headStream");
var init_headStream_browser = __esm({
  "../node_modules/@smithy/util-stream/dist-es/headStream.browser.js"() {
    init_functionsRoutes_0_09879299104094341();
    __name2(headStream, "headStream");
  }
});
var escapeUri;
var hexEncode;
var init_escape_uri = __esm({
  "../node_modules/@smithy/util-uri-escape/dist-es/escape-uri.js"() {
    init_functionsRoutes_0_09879299104094341();
    escapeUri = /* @__PURE__ */ __name2((uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode), "escapeUri");
    hexEncode = /* @__PURE__ */ __name2((c2) => `%${c2.charCodeAt(0).toString(16).toUpperCase()}`, "hexEncode");
  }
});
var init_escape_uri_path = __esm({
  "../node_modules/@smithy/util-uri-escape/dist-es/escape-uri-path.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_dist_es8 = __esm({
  "../node_modules/@smithy/util-uri-escape/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_escape_uri();
    init_escape_uri_path();
  }
});
function buildQueryString(query) {
  const parts = [];
  for (let key of Object.keys(query).sort()) {
    const value = query[key];
    key = escapeUri(key);
    if (Array.isArray(value)) {
      for (let i2 = 0, iLen = value.length; i2 < iLen; i2++) {
        parts.push(`${key}=${escapeUri(value[i2])}`);
      }
    } else {
      let qsEntry = key;
      if (value || typeof value === "string") {
        qsEntry += `=${escapeUri(value)}`;
      }
      parts.push(qsEntry);
    }
  }
  return parts.join("&");
}
__name(buildQueryString, "buildQueryString");
var init_dist_es9 = __esm({
  "../node_modules/@smithy/querystring-builder/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es8();
    __name2(buildQueryString, "buildQueryString");
  }
});
function createRequest(url2, requestOptions) {
  return new Request(url2, requestOptions);
}
__name(createRequest, "createRequest");
var init_create_request = __esm({
  "../node_modules/@smithy/fetch-http-handler/dist-es/create-request.js"() {
    init_functionsRoutes_0_09879299104094341();
    __name2(createRequest, "createRequest");
  }
});
function requestTimeout(timeoutInMs = 0) {
  return new Promise((resolve, reject) => {
    if (timeoutInMs) {
      setTimeout(() => {
        const timeoutError = new Error(`Request did not complete within ${timeoutInMs} ms`);
        timeoutError.name = "TimeoutError";
        reject(timeoutError);
      }, timeoutInMs);
    }
  });
}
__name(requestTimeout, "requestTimeout");
var init_request_timeout = __esm({
  "../node_modules/@smithy/fetch-http-handler/dist-es/request-timeout.js"() {
    init_functionsRoutes_0_09879299104094341();
    __name2(requestTimeout, "requestTimeout");
  }
});
var keepAliveSupport;
var FetchHttpHandler;
var init_fetch_http_handler = __esm({
  "../node_modules/@smithy/fetch-http-handler/dist-es/fetch-http-handler.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es2();
    init_dist_es9();
    init_create_request();
    init_request_timeout();
    keepAliveSupport = {
      supported: void 0
    };
    FetchHttpHandler = class _FetchHttpHandler {
      static {
        __name(this, "_FetchHttpHandler");
      }
      static {
        __name2(this, "FetchHttpHandler");
      }
      static create(instanceOrOptions) {
        if (typeof instanceOrOptions?.handle === "function") {
          return instanceOrOptions;
        }
        return new _FetchHttpHandler(instanceOrOptions);
      }
      constructor(options) {
        if (typeof options === "function") {
          this.configProvider = options().then((opts) => opts || {});
        } else {
          this.config = options ?? {};
          this.configProvider = Promise.resolve(this.config);
        }
        if (keepAliveSupport.supported === void 0) {
          keepAliveSupport.supported = Boolean(typeof Request !== "undefined" && "keepalive" in createRequest("https://[::1]"));
        }
      }
      destroy() {
      }
      async handle(request, { abortSignal, requestTimeout: requestTimeout2 } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        const requestTimeoutInMs = requestTimeout2 ?? this.config.requestTimeout;
        const keepAlive = this.config.keepAlive === true;
        const credentials = this.config.credentials;
        if (abortSignal?.aborted) {
          const abortError = new Error("Request aborted");
          abortError.name = "AbortError";
          return Promise.reject(abortError);
        }
        let path = request.path;
        const queryString = buildQueryString(request.query || {});
        if (queryString) {
          path += `?${queryString}`;
        }
        if (request.fragment) {
          path += `#${request.fragment}`;
        }
        let auth = "";
        if (request.username != null || request.password != null) {
          const username = request.username ?? "";
          const password = request.password ?? "";
          auth = `${username}:${password}@`;
        }
        const { port, method } = request;
        const url2 = `${request.protocol}//${auth}${request.hostname}${port ? `:${port}` : ""}${path}`;
        const body = method === "GET" || method === "HEAD" ? void 0 : request.body;
        const requestOptions = {
          body,
          headers: new Headers(request.headers),
          method,
          credentials
        };
        if (this.config?.cache) {
          requestOptions.cache = this.config.cache;
        }
        if (body) {
          requestOptions.duplex = "half";
        }
        if (typeof AbortController !== "undefined") {
          requestOptions.signal = abortSignal;
        }
        if (keepAliveSupport.supported) {
          requestOptions.keepalive = keepAlive;
        }
        if (typeof this.config.requestInit === "function") {
          Object.assign(requestOptions, this.config.requestInit(request));
        }
        let removeSignalEventListener = /* @__PURE__ */ __name2(() => {
        }, "removeSignalEventListener");
        const fetchRequest = createRequest(url2, requestOptions);
        const raceOfPromises = [
          fetch(fetchRequest).then((response) => {
            const fetchHeaders = response.headers;
            const transformedHeaders = {};
            for (const pair of fetchHeaders.entries()) {
              transformedHeaders[pair[0]] = pair[1];
            }
            const hasReadableStream = response.body != void 0;
            if (!hasReadableStream) {
              return response.blob().then((body2) => ({
                response: new HttpResponse({
                  headers: transformedHeaders,
                  reason: response.statusText,
                  statusCode: response.status,
                  body: body2
                })
              }));
            }
            return {
              response: new HttpResponse({
                headers: transformedHeaders,
                reason: response.statusText,
                statusCode: response.status,
                body: response.body
              })
            };
          }),
          requestTimeout(requestTimeoutInMs)
        ];
        if (abortSignal) {
          raceOfPromises.push(new Promise((resolve, reject) => {
            const onAbort = /* @__PURE__ */ __name2(() => {
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              reject(abortError);
            }, "onAbort");
            if (typeof abortSignal.addEventListener === "function") {
              const signal = abortSignal;
              signal.addEventListener("abort", onAbort, { once: true });
              removeSignalEventListener = /* @__PURE__ */ __name2(() => signal.removeEventListener("abort", onAbort), "removeSignalEventListener");
            } else {
              abortSignal.onabort = onAbort;
            }
          }));
        }
        return Promise.race(raceOfPromises).finally(removeSignalEventListener);
      }
      updateHttpClientConfig(key, value) {
        this.config = void 0;
        this.configProvider = this.configProvider.then((config2) => {
          config2[key] = value;
          return config2;
        });
      }
      httpHandlerConfigs() {
        return this.config ?? {};
      }
    };
  }
});
async function collectBlob(blob) {
  const base643 = await readToBase64(blob);
  const arrayBuffer = fromBase64(base643);
  return new Uint8Array(arrayBuffer);
}
__name(collectBlob, "collectBlob");
async function collectStream(stream) {
  const chunks = [];
  const reader = stream.getReader();
  let isDone = false;
  let length = 0;
  while (!isDone) {
    const { done, value } = await reader.read();
    if (value) {
      chunks.push(value);
      length += value.length;
    }
    isDone = done;
  }
  const collected = new Uint8Array(length);
  let offset = 0;
  for (const chunk of chunks) {
    collected.set(chunk, offset);
    offset += chunk.length;
  }
  return collected;
}
__name(collectStream, "collectStream");
function readToBase64(blob) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onloadend = () => {
      if (reader.readyState !== 2) {
        return reject(new Error("Reader aborted too early"));
      }
      const result = reader.result ?? "";
      const commaIndex = result.indexOf(",");
      const dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;
      resolve(result.substring(dataOffset));
    };
    reader.onabort = () => reject(new Error("Read aborted"));
    reader.onerror = () => reject(reader.error);
    reader.readAsDataURL(blob);
  });
}
__name(readToBase64, "readToBase64");
var streamCollector;
var init_stream_collector = __esm({
  "../node_modules/@smithy/fetch-http-handler/dist-es/stream-collector.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es7();
    streamCollector = /* @__PURE__ */ __name2(async (stream) => {
      if (typeof Blob === "function" && stream instanceof Blob || stream.constructor?.name === "Blob") {
        if (Blob.prototype.arrayBuffer !== void 0) {
          return new Uint8Array(await stream.arrayBuffer());
        }
        return collectBlob(stream);
      }
      return collectStream(stream);
    }, "streamCollector");
    __name2(collectBlob, "collectBlob");
    __name2(collectStream, "collectStream");
    __name2(readToBase64, "readToBase64");
  }
});
var init_dist_es10 = __esm({
  "../node_modules/@smithy/fetch-http-handler/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_fetch_http_handler();
    init_stream_collector();
  }
});
function fromHex(encoded) {
  if (encoded.length % 2 !== 0) {
    throw new Error("Hex encoded strings must have an even number length");
  }
  const out = new Uint8Array(encoded.length / 2);
  for (let i2 = 0; i2 < encoded.length; i2 += 2) {
    const encodedByte = encoded.slice(i2, i2 + 2).toLowerCase();
    if (encodedByte in HEX_TO_SHORT) {
      out[i2 / 2] = HEX_TO_SHORT[encodedByte];
    } else {
      throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
    }
  }
  return out;
}
__name(fromHex, "fromHex");
function toHex(bytes) {
  let out = "";
  for (let i2 = 0; i2 < bytes.byteLength; i2++) {
    out += SHORT_TO_HEX[bytes[i2]];
  }
  return out;
}
__name(toHex, "toHex");
var SHORT_TO_HEX;
var HEX_TO_SHORT;
var init_dist_es11 = __esm({
  "../node_modules/@smithy/util-hex-encoding/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    SHORT_TO_HEX = {};
    HEX_TO_SHORT = {};
    for (let i2 = 0; i2 < 256; i2++) {
      let encodedByte = i2.toString(16).toLowerCase();
      if (encodedByte.length === 1) {
        encodedByte = `0${encodedByte}`;
      }
      SHORT_TO_HEX[i2] = encodedByte;
      HEX_TO_SHORT[encodedByte] = i2;
    }
    __name2(fromHex, "fromHex");
    __name2(toHex, "toHex");
  }
});
var ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED;
var sdkStreamMixin;
var isBlobInstance;
var init_sdk_stream_mixin_browser = __esm({
  "../node_modules/@smithy/util-stream/dist-es/sdk-stream-mixin.browser.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es10();
    init_dist_es7();
    init_dist_es11();
    init_dist_es6();
    init_stream_type_check();
    ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = "The stream has already been transformed.";
    sdkStreamMixin = /* @__PURE__ */ __name2((stream) => {
      if (!isBlobInstance(stream) && !isReadableStream(stream)) {
        const name = stream?.__proto__?.constructor?.name || stream;
        throw new Error(`Unexpected stream implementation, expect Blob or ReadableStream, got ${name}`);
      }
      let transformed = false;
      const transformToByteArray = /* @__PURE__ */ __name2(async () => {
        if (transformed) {
          throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
        }
        transformed = true;
        return await streamCollector(stream);
      }, "transformToByteArray");
      const blobToWebStream = /* @__PURE__ */ __name2((blob) => {
        if (typeof blob.stream !== "function") {
          throw new Error("Cannot transform payload Blob to web stream. Please make sure the Blob.stream() is polyfilled.\nIf you are using React Native, this API is not yet supported, see: https://react-native.canny.io/feature-requests/p/fetch-streaming-body");
        }
        return blob.stream();
      }, "blobToWebStream");
      return Object.assign(stream, {
        transformToByteArray,
        transformToString: /* @__PURE__ */ __name2(async (encoding) => {
          const buf = await transformToByteArray();
          if (encoding === "base64") {
            return toBase64(buf);
          } else if (encoding === "hex") {
            return toHex(buf);
          } else if (encoding === void 0 || encoding === "utf8" || encoding === "utf-8") {
            return toUtf8(buf);
          } else if (typeof TextDecoder === "function") {
            return new TextDecoder(encoding).decode(buf);
          } else {
            throw new Error("TextDecoder is not available, please make sure polyfill is provided.");
          }
        }, "transformToString"),
        transformToWebStream: /* @__PURE__ */ __name2(() => {
          if (transformed) {
            throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
          }
          transformed = true;
          if (isBlobInstance(stream)) {
            return blobToWebStream(stream);
          } else if (isReadableStream(stream)) {
            return stream;
          } else {
            throw new Error(`Cannot transform payload to web stream, got ${stream}`);
          }
        }, "transformToWebStream")
      });
    }, "sdkStreamMixin");
    isBlobInstance = /* @__PURE__ */ __name2((stream) => typeof Blob === "function" && stream instanceof Blob, "isBlobInstance");
  }
});
async function splitStream(stream) {
  if (typeof stream.stream === "function") {
    stream = stream.stream();
  }
  const readableStream = stream;
  return readableStream.tee();
}
__name(splitStream, "splitStream");
var init_splitStream_browser = __esm({
  "../node_modules/@smithy/util-stream/dist-es/splitStream.browser.js"() {
    init_functionsRoutes_0_09879299104094341();
    __name2(splitStream, "splitStream");
  }
});
var init_dist_es12 = __esm({
  "../node_modules/@smithy/util-stream/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_Uint8ArrayBlobAdapter();
    init_ChecksumStream_browser();
    init_createChecksumStream_browser();
    init_createBufferedReadableStream();
    init_getAwsChunkedEncodingStream_browser();
    init_headStream_browser();
    init_sdk_stream_mixin_browser();
    init_splitStream_browser();
    init_stream_type_check();
  }
});
var collectBody;
var init_collect_stream_body = __esm({
  "../node_modules/@smithy/core/dist-es/submodules/protocols/collect-stream-body.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es12();
    collectBody = /* @__PURE__ */ __name2(async (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Uint8ArrayBlobAdapter.mutate(streamBody);
      }
      if (!streamBody) {
        return Uint8ArrayBlobAdapter.mutate(new Uint8Array());
      }
      const fromContext = context.streamCollector(streamBody);
      return Uint8ArrayBlobAdapter.mutate(await fromContext);
    }, "collectBody");
  }
});
function extendedEncodeURIComponent(str) {
  return encodeURIComponent(str).replace(/[!'()*]/g, function(c2) {
    return "%" + c2.charCodeAt(0).toString(16).toUpperCase();
  });
}
__name(extendedEncodeURIComponent, "extendedEncodeURIComponent");
var init_extended_encode_uri_component = __esm({
  "../node_modules/@smithy/core/dist-es/submodules/protocols/extended-encode-uri-component.js"() {
    init_functionsRoutes_0_09879299104094341();
    __name2(extendedEncodeURIComponent, "extendedEncodeURIComponent");
  }
});
var deref;
var init_deref = __esm({
  "../node_modules/@smithy/core/dist-es/submodules/schema/deref.js"() {
    init_functionsRoutes_0_09879299104094341();
    deref = /* @__PURE__ */ __name2((schemaRef) => {
      if (typeof schemaRef === "function") {
        return schemaRef();
      }
      return schemaRef;
    }, "deref");
  }
});
var init_getSchemaSerdePlugin = __esm({
  "../node_modules/@smithy/core/dist-es/submodules/schema/middleware/getSchemaSerdePlugin.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var TypeRegistry;
var init_TypeRegistry = __esm({
  "../node_modules/@smithy/core/dist-es/submodules/schema/TypeRegistry.js"() {
    init_functionsRoutes_0_09879299104094341();
    TypeRegistry = class _TypeRegistry {
      static {
        __name(this, "_TypeRegistry");
      }
      static {
        __name2(this, "TypeRegistry");
      }
      constructor(namespace, schemas = /* @__PURE__ */ new Map()) {
        this.namespace = namespace;
        this.schemas = schemas;
      }
      static for(namespace) {
        if (!_TypeRegistry.registries.has(namespace)) {
          _TypeRegistry.registries.set(namespace, new _TypeRegistry(namespace));
        }
        return _TypeRegistry.registries.get(namespace);
      }
      register(shapeId, schema) {
        const qualifiedName = this.normalizeShapeId(shapeId);
        const registry2 = _TypeRegistry.for(this.getNamespace(shapeId));
        registry2.schemas.set(qualifiedName, schema);
      }
      getSchema(shapeId) {
        const id = this.normalizeShapeId(shapeId);
        if (!this.schemas.has(id)) {
          throw new Error(`@smithy/core/schema - schema not found for ${id}`);
        }
        return this.schemas.get(id);
      }
      getBaseException() {
        for (const [id, schema] of this.schemas.entries()) {
          if (id.startsWith("smithy.ts.sdk.synthetic.") && id.endsWith("ServiceException")) {
            return schema;
          }
        }
        return void 0;
      }
      find(predicate) {
        return [...this.schemas.values()].find(predicate);
      }
      destroy() {
        _TypeRegistry.registries.delete(this.namespace);
        this.schemas.clear();
      }
      normalizeShapeId(shapeId) {
        if (shapeId.includes("#")) {
          return shapeId;
        }
        return this.namespace + "#" + shapeId;
      }
      getNamespace(shapeId) {
        return this.normalizeShapeId(shapeId).split("#")[0];
      }
    };
    TypeRegistry.registries = /* @__PURE__ */ new Map();
  }
});
var Schema;
var init_Schema = __esm({
  "../node_modules/@smithy/core/dist-es/submodules/schema/schemas/Schema.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_TypeRegistry();
    Schema = class {
      static {
        __name(this, "Schema");
      }
      static {
        __name2(this, "Schema");
      }
      static assign(instance, values) {
        const schema = Object.assign(instance, values);
        TypeRegistry.for(schema.namespace).register(schema.name, schema);
        return schema;
      }
      static [Symbol.hasInstance](lhs) {
        const isPrototype = this.prototype.isPrototypeOf(lhs);
        if (!isPrototype && typeof lhs === "object" && lhs !== null) {
          const list = lhs;
          return list.symbol === this.symbol;
        }
        return isPrototype;
      }
      getName() {
        return this.namespace + "#" + this.name;
      }
    };
  }
});
var ListSchema;
var init_ListSchema = __esm({
  "../node_modules/@smithy/core/dist-es/submodules/schema/schemas/ListSchema.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_Schema();
    ListSchema = class _ListSchema extends Schema {
      static {
        __name(this, "_ListSchema");
      }
      static {
        __name2(this, "ListSchema");
      }
      constructor() {
        super(...arguments);
        this.symbol = _ListSchema.symbol;
      }
    };
    ListSchema.symbol = Symbol.for("@smithy/lis");
  }
});
var MapSchema;
var init_MapSchema = __esm({
  "../node_modules/@smithy/core/dist-es/submodules/schema/schemas/MapSchema.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_Schema();
    MapSchema = class _MapSchema extends Schema {
      static {
        __name(this, "_MapSchema");
      }
      static {
        __name2(this, "MapSchema");
      }
      constructor() {
        super(...arguments);
        this.symbol = _MapSchema.symbol;
      }
    };
    MapSchema.symbol = Symbol.for("@smithy/map");
  }
});
var OperationSchema;
var init_OperationSchema = __esm({
  "../node_modules/@smithy/core/dist-es/submodules/schema/schemas/OperationSchema.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_Schema();
    OperationSchema = class _OperationSchema extends Schema {
      static {
        __name(this, "_OperationSchema");
      }
      static {
        __name2(this, "OperationSchema");
      }
      constructor() {
        super(...arguments);
        this.symbol = _OperationSchema.symbol;
      }
    };
    OperationSchema.symbol = Symbol.for("@smithy/ope");
  }
});
var StructureSchema;
var init_StructureSchema = __esm({
  "../node_modules/@smithy/core/dist-es/submodules/schema/schemas/StructureSchema.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_Schema();
    StructureSchema = class _StructureSchema extends Schema {
      static {
        __name(this, "_StructureSchema");
      }
      static {
        __name2(this, "StructureSchema");
      }
      constructor() {
        super(...arguments);
        this.symbol = _StructureSchema.symbol;
      }
    };
    StructureSchema.symbol = Symbol.for("@smithy/str");
  }
});
var ErrorSchema;
var init_ErrorSchema = __esm({
  "../node_modules/@smithy/core/dist-es/submodules/schema/schemas/ErrorSchema.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_StructureSchema();
    ErrorSchema = class _ErrorSchema extends StructureSchema {
      static {
        __name(this, "_ErrorSchema");
      }
      static {
        __name2(this, "ErrorSchema");
      }
      constructor() {
        super(...arguments);
        this.symbol = _ErrorSchema.symbol;
      }
    };
    ErrorSchema.symbol = Symbol.for("@smithy/err");
  }
});
var SCHEMA;
var init_sentinels2 = __esm({
  "../node_modules/@smithy/core/dist-es/submodules/schema/schemas/sentinels.js"() {
    init_functionsRoutes_0_09879299104094341();
    SCHEMA = {
      BLOB: 21,
      STREAMING_BLOB: 42,
      BOOLEAN: 2,
      STRING: 0,
      NUMERIC: 1,
      BIG_INTEGER: 17,
      BIG_DECIMAL: 19,
      DOCUMENT: 15,
      TIMESTAMP_DEFAULT: 4,
      TIMESTAMP_DATE_TIME: 5,
      TIMESTAMP_HTTP_DATE: 6,
      TIMESTAMP_EPOCH_SECONDS: 7,
      LIST_MODIFIER: 64,
      MAP_MODIFIER: 128
    };
  }
});
var SimpleSchema;
var init_SimpleSchema = __esm({
  "../node_modules/@smithy/core/dist-es/submodules/schema/schemas/SimpleSchema.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_Schema();
    SimpleSchema = class _SimpleSchema extends Schema {
      static {
        __name(this, "_SimpleSchema");
      }
      static {
        __name2(this, "SimpleSchema");
      }
      constructor() {
        super(...arguments);
        this.symbol = _SimpleSchema.symbol;
      }
    };
    SimpleSchema.symbol = Symbol.for("@smithy/sim");
  }
});
var NormalizedSchema;
var init_NormalizedSchema = __esm({
  "../node_modules/@smithy/core/dist-es/submodules/schema/schemas/NormalizedSchema.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_deref();
    init_ListSchema();
    init_MapSchema();
    init_Schema();
    init_sentinels2();
    init_SimpleSchema();
    init_StructureSchema();
    NormalizedSchema = class _NormalizedSchema {
      static {
        __name(this, "_NormalizedSchema");
      }
      static {
        __name2(this, "NormalizedSchema");
      }
      constructor(ref, memberName) {
        this.ref = ref;
        this.memberName = memberName;
        this.symbol = _NormalizedSchema.symbol;
        const traitStack = [];
        let _ref = ref;
        let schema = ref;
        this._isMemberSchema = false;
        while (Array.isArray(_ref)) {
          traitStack.push(_ref[1]);
          _ref = _ref[0];
          schema = deref(_ref);
          this._isMemberSchema = true;
        }
        if (traitStack.length > 0) {
          this.memberTraits = {};
          for (let i2 = traitStack.length - 1; i2 >= 0; --i2) {
            const traitSet = traitStack[i2];
            Object.assign(this.memberTraits, _NormalizedSchema.translateTraits(traitSet));
          }
        } else {
          this.memberTraits = 0;
        }
        if (schema instanceof _NormalizedSchema) {
          Object.assign(this, schema);
          this.memberTraits = Object.assign({}, schema.getMemberTraits(), this.getMemberTraits());
          this.normalizedTraits = void 0;
          this.memberName = memberName ?? schema.memberName;
          return;
        }
        this.schema = deref(schema);
        if (this.schema && typeof this.schema === "object") {
          this.traits = this.schema?.traits ?? {};
        } else {
          this.traits = 0;
        }
        this.name = (this.schema instanceof Schema ? this.schema.getName?.() : void 0) ?? this.memberName ?? this.getSchemaName();
        if (this._isMemberSchema && !memberName) {
          throw new Error(`@smithy/core/schema - NormalizedSchema member init ${this.getName(true)} missing member name.`);
        }
      }
      static [Symbol.hasInstance](lhs) {
        return Schema[Symbol.hasInstance].bind(this)(lhs);
      }
      static of(ref) {
        if (ref instanceof _NormalizedSchema) {
          return ref;
        }
        if (Array.isArray(ref)) {
          const [ns, traits] = ref;
          if (ns instanceof _NormalizedSchema) {
            Object.assign(ns.getMergedTraits(), _NormalizedSchema.translateTraits(traits));
            return ns;
          }
          throw new Error(`@smithy/core/schema - may not init unwrapped member schema=${JSON.stringify(ref, null, 2)}.`);
        }
        return new _NormalizedSchema(ref);
      }
      static translateTraits(indicator) {
        if (typeof indicator === "object") {
          return indicator;
        }
        indicator = indicator | 0;
        const traits = {};
        let i2 = 0;
        for (const trait of [
          "httpLabel",
          "idempotent",
          "idempotencyToken",
          "sensitive",
          "httpPayload",
          "httpResponseCode",
          "httpQueryParams"
        ]) {
          if ((indicator >> i2++ & 1) === 1) {
            traits[trait] = 1;
          }
        }
        return traits;
      }
      getSchema() {
        if (this.schema instanceof _NormalizedSchema) {
          Object.assign(this, { schema: this.schema.getSchema() });
          return this.schema;
        }
        if (this.schema instanceof SimpleSchema) {
          return deref(this.schema.schemaRef);
        }
        return deref(this.schema);
      }
      getName(withNamespace = false) {
        if (!withNamespace) {
          if (this.name && this.name.includes("#")) {
            return this.name.split("#")[1];
          }
        }
        return this.name || void 0;
      }
      getMemberName() {
        if (!this.isMemberSchema()) {
          throw new Error(`@smithy/core/schema - non-member schema: ${this.getName(true)}`);
        }
        return this.memberName;
      }
      isMemberSchema() {
        return this._isMemberSchema;
      }
      isUnitSchema() {
        return this.getSchema() === "unit";
      }
      isListSchema() {
        const inner = this.getSchema();
        if (typeof inner === "number") {
          return inner >= SCHEMA.LIST_MODIFIER && inner < SCHEMA.MAP_MODIFIER;
        }
        return inner instanceof ListSchema;
      }
      isMapSchema() {
        const inner = this.getSchema();
        if (typeof inner === "number") {
          return inner >= SCHEMA.MAP_MODIFIER && inner <= 255;
        }
        return inner instanceof MapSchema;
      }
      isStructSchema() {
        const inner = this.getSchema();
        return inner !== null && typeof inner === "object" && "members" in inner || inner instanceof StructureSchema;
      }
      isBlobSchema() {
        return this.getSchema() === SCHEMA.BLOB || this.getSchema() === SCHEMA.STREAMING_BLOB;
      }
      isTimestampSchema() {
        const schema = this.getSchema();
        return typeof schema === "number" && schema >= SCHEMA.TIMESTAMP_DEFAULT && schema <= SCHEMA.TIMESTAMP_EPOCH_SECONDS;
      }
      isDocumentSchema() {
        return this.getSchema() === SCHEMA.DOCUMENT;
      }
      isStringSchema() {
        return this.getSchema() === SCHEMA.STRING;
      }
      isBooleanSchema() {
        return this.getSchema() === SCHEMA.BOOLEAN;
      }
      isNumericSchema() {
        return this.getSchema() === SCHEMA.NUMERIC;
      }
      isBigIntegerSchema() {
        return this.getSchema() === SCHEMA.BIG_INTEGER;
      }
      isBigDecimalSchema() {
        return this.getSchema() === SCHEMA.BIG_DECIMAL;
      }
      isStreaming() {
        const streaming = !!this.getMergedTraits().streaming;
        if (streaming) {
          return true;
        }
        return this.getSchema() === SCHEMA.STREAMING_BLOB;
      }
      isIdempotencyToken() {
        if (typeof this.traits === "number") {
          return (this.traits & 4) === 4;
        } else if (typeof this.traits === "object") {
          return !!this.traits.idempotencyToken;
        }
        return false;
      }
      getMergedTraits() {
        return this.normalizedTraits ?? (this.normalizedTraits = {
          ...this.getOwnTraits(),
          ...this.getMemberTraits()
        });
      }
      getMemberTraits() {
        return _NormalizedSchema.translateTraits(this.memberTraits);
      }
      getOwnTraits() {
        return _NormalizedSchema.translateTraits(this.traits);
      }
      getKeySchema() {
        if (this.isDocumentSchema()) {
          return this.memberFrom([SCHEMA.DOCUMENT, 0], "key");
        }
        if (!this.isMapSchema()) {
          throw new Error(`@smithy/core/schema - cannot get key for non-map: ${this.getName(true)}`);
        }
        const schema = this.getSchema();
        if (typeof schema === "number") {
          return this.memberFrom([63 & schema, 0], "key");
        }
        return this.memberFrom([schema.keySchema, 0], "key");
      }
      getValueSchema() {
        const schema = this.getSchema();
        if (typeof schema === "number") {
          if (this.isMapSchema()) {
            return this.memberFrom([63 & schema, 0], "value");
          } else if (this.isListSchema()) {
            return this.memberFrom([63 & schema, 0], "member");
          }
        }
        if (schema && typeof schema === "object") {
          if (this.isStructSchema()) {
            throw new Error(`may not getValueSchema() on structure ${this.getName(true)}`);
          }
          const collection = schema;
          if ("valueSchema" in collection) {
            if (this.isMapSchema()) {
              return this.memberFrom([collection.valueSchema, 0], "value");
            } else if (this.isListSchema()) {
              return this.memberFrom([collection.valueSchema, 0], "member");
            }
          }
        }
        if (this.isDocumentSchema()) {
          return this.memberFrom([SCHEMA.DOCUMENT, 0], "value");
        }
        throw new Error(`@smithy/core/schema - ${this.getName(true)} has no value member.`);
      }
      hasMemberSchema(member) {
        if (this.isStructSchema()) {
          const struct = this.getSchema();
          return struct.memberNames.includes(member);
        }
        return false;
      }
      getMemberSchema(member) {
        if (this.isStructSchema()) {
          const struct = this.getSchema();
          if (!struct.memberNames.includes(member)) {
            throw new Error(`@smithy/core/schema - ${this.getName(true)} has no member=${member}.`);
          }
          const i2 = struct.memberNames.indexOf(member);
          const memberSchema = struct.memberList[i2];
          return this.memberFrom(Array.isArray(memberSchema) ? memberSchema : [memberSchema, 0], member);
        }
        if (this.isDocumentSchema()) {
          return this.memberFrom([SCHEMA.DOCUMENT, 0], member);
        }
        throw new Error(`@smithy/core/schema - ${this.getName(true)} has no members.`);
      }
      getMemberSchemas() {
        const buffer = {};
        try {
          for (const [k2, v2] of this.structIterator()) {
            buffer[k2] = v2;
          }
        } catch (ignored) {
        }
        return buffer;
      }
      getEventStreamMember() {
        if (this.isStructSchema()) {
          for (const [memberName, memberSchema] of this.structIterator()) {
            if (memberSchema.isStreaming() && memberSchema.isStructSchema()) {
              return memberName;
            }
          }
        }
        return "";
      }
      *structIterator() {
        if (this.isUnitSchema()) {
          return;
        }
        if (!this.isStructSchema()) {
          throw new Error("@smithy/core/schema - cannot iterate non-struct schema.");
        }
        const struct = this.getSchema();
        for (let i2 = 0; i2 < struct.memberNames.length; ++i2) {
          yield [struct.memberNames[i2], this.memberFrom([struct.memberList[i2], 0], struct.memberNames[i2])];
        }
      }
      memberFrom(memberSchema, memberName) {
        if (memberSchema instanceof _NormalizedSchema) {
          return Object.assign(memberSchema, {
            memberName,
            _isMemberSchema: true
          });
        }
        return new _NormalizedSchema(memberSchema, memberName);
      }
      getSchemaName() {
        const schema = this.getSchema();
        if (typeof schema === "number") {
          const _schema = 63 & schema;
          const container = 192 & schema;
          const type = Object.entries(SCHEMA).find(([, value]) => {
            return value === _schema;
          })?.[0] ?? "Unknown";
          switch (container) {
            case SCHEMA.MAP_MODIFIER:
              return `${type}Map`;
            case SCHEMA.LIST_MODIFIER:
              return `${type}List`;
            case 0:
              return type;
          }
        }
        return "Unknown";
      }
    };
    NormalizedSchema.symbol = Symbol.for("@smithy/nor");
  }
});
var init_schema2 = __esm({
  "../node_modules/@smithy/core/dist-es/submodules/schema/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_deref();
    init_getSchemaSerdePlugin();
    init_ListSchema();
    init_MapSchema();
    init_OperationSchema();
    init_ErrorSchema();
    init_NormalizedSchema();
    init_Schema();
    init_SimpleSchema();
    init_StructureSchema();
    init_sentinels2();
    init_TypeRegistry();
  }
});
var init_copyDocumentWithTransform = __esm({
  "../node_modules/@smithy/core/dist-es/submodules/serde/copyDocumentWithTransform.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var parseBoolean;
var expectNumber;
var MAX_FLOAT;
var expectFloat32;
var expectLong;
var expectInt32;
var expectShort;
var expectByte;
var expectSizedInt;
var castInt;
var expectNonNull;
var expectObject;
var expectString;
var expectUnion;
var strictParseFloat32;
var NUMBER_REGEX;
var parseNumber;
var strictParseLong;
var strictParseInt32;
var strictParseShort;
var strictParseByte;
var stackTraceWarning;
var logger;
var init_parse_utils = __esm({
  "../node_modules/@smithy/core/dist-es/submodules/serde/parse-utils.js"() {
    init_functionsRoutes_0_09879299104094341();
    parseBoolean = /* @__PURE__ */ __name2((value) => {
      switch (value) {
        case "true":
          return true;
        case "false":
          return false;
        default:
          throw new Error(`Unable to parse boolean value "${value}"`);
      }
    }, "parseBoolean");
    expectNumber = /* @__PURE__ */ __name2((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "string") {
        const parsed = parseFloat(value);
        if (!Number.isNaN(parsed)) {
          if (String(parsed) !== String(value)) {
            logger.warn(stackTraceWarning(`Expected number but observed string: ${value}`));
          }
          return parsed;
        }
      }
      if (typeof value === "number") {
        return value;
      }
      throw new TypeError(`Expected number, got ${typeof value}: ${value}`);
    }, "expectNumber");
    MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));
    expectFloat32 = /* @__PURE__ */ __name2((value) => {
      const expected = expectNumber(value);
      if (expected !== void 0 && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {
        if (Math.abs(expected) > MAX_FLOAT) {
          throw new TypeError(`Expected 32-bit float, got ${value}`);
        }
      }
      return expected;
    }, "expectFloat32");
    expectLong = /* @__PURE__ */ __name2((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (Number.isInteger(value) && !Number.isNaN(value)) {
        return value;
      }
      throw new TypeError(`Expected integer, got ${typeof value}: ${value}`);
    }, "expectLong");
    expectInt32 = /* @__PURE__ */ __name2((value) => expectSizedInt(value, 32), "expectInt32");
    expectShort = /* @__PURE__ */ __name2((value) => expectSizedInt(value, 16), "expectShort");
    expectByte = /* @__PURE__ */ __name2((value) => expectSizedInt(value, 8), "expectByte");
    expectSizedInt = /* @__PURE__ */ __name2((value, size) => {
      const expected = expectLong(value);
      if (expected !== void 0 && castInt(expected, size) !== expected) {
        throw new TypeError(`Expected ${size}-bit integer, got ${value}`);
      }
      return expected;
    }, "expectSizedInt");
    castInt = /* @__PURE__ */ __name2((value, size) => {
      switch (size) {
        case 32:
          return Int32Array.of(value)[0];
        case 16:
          return Int16Array.of(value)[0];
        case 8:
          return Int8Array.of(value)[0];
      }
    }, "castInt");
    expectNonNull = /* @__PURE__ */ __name2((value, location) => {
      if (value === null || value === void 0) {
        if (location) {
          throw new TypeError(`Expected a non-null value for ${location}`);
        }
        throw new TypeError("Expected a non-null value");
      }
      return value;
    }, "expectNonNull");
    expectObject = /* @__PURE__ */ __name2((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "object" && !Array.isArray(value)) {
        return value;
      }
      const receivedType = Array.isArray(value) ? "array" : typeof value;
      throw new TypeError(`Expected object, got ${receivedType}: ${value}`);
    }, "expectObject");
    expectString = /* @__PURE__ */ __name2((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "string") {
        return value;
      }
      if (["boolean", "number", "bigint"].includes(typeof value)) {
        logger.warn(stackTraceWarning(`Expected string, got ${typeof value}: ${value}`));
        return String(value);
      }
      throw new TypeError(`Expected string, got ${typeof value}: ${value}`);
    }, "expectString");
    expectUnion = /* @__PURE__ */ __name2((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      const asObject = expectObject(value);
      const setKeys = Object.entries(asObject).filter(([, v2]) => v2 != null).map(([k2]) => k2);
      if (setKeys.length === 0) {
        throw new TypeError(`Unions must have exactly one non-null member. None were found.`);
      }
      if (setKeys.length > 1) {
        throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);
      }
      return asObject;
    }, "expectUnion");
    strictParseFloat32 = /* @__PURE__ */ __name2((value) => {
      if (typeof value == "string") {
        return expectFloat32(parseNumber(value));
      }
      return expectFloat32(value);
    }, "strictParseFloat32");
    NUMBER_REGEX = /(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g;
    parseNumber = /* @__PURE__ */ __name2((value) => {
      const matches = value.match(NUMBER_REGEX);
      if (matches === null || matches[0].length !== value.length) {
        throw new TypeError(`Expected real number, got implicit NaN`);
      }
      return parseFloat(value);
    }, "parseNumber");
    strictParseLong = /* @__PURE__ */ __name2((value) => {
      if (typeof value === "string") {
        return expectLong(parseNumber(value));
      }
      return expectLong(value);
    }, "strictParseLong");
    strictParseInt32 = /* @__PURE__ */ __name2((value) => {
      if (typeof value === "string") {
        return expectInt32(parseNumber(value));
      }
      return expectInt32(value);
    }, "strictParseInt32");
    strictParseShort = /* @__PURE__ */ __name2((value) => {
      if (typeof value === "string") {
        return expectShort(parseNumber(value));
      }
      return expectShort(value);
    }, "strictParseShort");
    strictParseByte = /* @__PURE__ */ __name2((value) => {
      if (typeof value === "string") {
        return expectByte(parseNumber(value));
      }
      return expectByte(value);
    }, "strictParseByte");
    stackTraceWarning = /* @__PURE__ */ __name2((message) => {
      return String(new TypeError(message).stack || message).split("\n").slice(0, 5).filter((s2) => !s2.includes("stackTraceWarning")).join("\n");
    }, "stackTraceWarning");
    logger = {
      warn: console.warn
    };
  }
});
function dateToUtcString(date5) {
  const year = date5.getUTCFullYear();
  const month = date5.getUTCMonth();
  const dayOfWeek = date5.getUTCDay();
  const dayOfMonthInt = date5.getUTCDate();
  const hoursInt = date5.getUTCHours();
  const minutesInt = date5.getUTCMinutes();
  const secondsInt = date5.getUTCSeconds();
  const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;
  const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;
  const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;
  const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;
  return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;
}
__name(dateToUtcString, "dateToUtcString");
var DAYS;
var MONTHS;
var RFC3339;
var RFC3339_WITH_OFFSET;
var parseRfc3339DateTimeWithOffset;
var IMF_FIXDATE;
var RFC_850_DATE;
var ASC_TIME;
var parseRfc7231DateTime;
var buildDate;
var parseTwoDigitYear;
var FIFTY_YEARS_IN_MILLIS;
var adjustRfc850Year;
var parseMonthByShortName;
var DAYS_IN_MONTH;
var validateDayOfMonth;
var isLeapYear;
var parseDateValue;
var parseMilliseconds;
var parseOffsetToMilliseconds;
var stripLeadingZeroes;
var init_date_utils = __esm({
  "../node_modules/@smithy/core/dist-es/submodules/serde/date-utils.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_parse_utils();
    DAYS = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    MONTHS = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    __name2(dateToUtcString, "dateToUtcString");
    RFC3339 = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/);
    RFC3339_WITH_OFFSET = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?(([-+]\d{2}\:\d{2})|[zZ])$/);
    parseRfc3339DateTimeWithOffset = /* @__PURE__ */ __name2((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
      }
      const match2 = RFC3339_WITH_OFFSET.exec(value);
      if (!match2) {
        throw new TypeError("Invalid RFC-3339 date-time value");
      }
      const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, offsetStr] = match2;
      const year = strictParseShort(stripLeadingZeroes(yearStr));
      const month = parseDateValue(monthStr, "month", 1, 12);
      const day = parseDateValue(dayStr, "day", 1, 31);
      const date5 = buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
      if (offsetStr.toUpperCase() != "Z") {
        date5.setTime(date5.getTime() - parseOffsetToMilliseconds(offsetStr));
      }
      return date5;
    }, "parseRfc3339DateTimeWithOffset");
    IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
    RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
    ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? (\d{4})$/);
    parseRfc7231DateTime = /* @__PURE__ */ __name2((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-7231 date-times must be expressed as strings");
      }
      let match2 = IMF_FIXDATE.exec(value);
      if (match2) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match2;
        return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
      }
      match2 = RFC_850_DATE.exec(value);
      if (match2) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match2;
        return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), {
          hours,
          minutes,
          seconds,
          fractionalMilliseconds
        }));
      }
      match2 = ASC_TIME.exec(value);
      if (match2) {
        const [_, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match2;
        return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
      }
      throw new TypeError("Invalid RFC-7231 date-time value");
    }, "parseRfc7231DateTime");
    buildDate = /* @__PURE__ */ __name2((year, month, day, time3) => {
      const adjustedMonth = month - 1;
      validateDayOfMonth(year, adjustedMonth, day);
      return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time3.hours, "hour", 0, 23), parseDateValue(time3.minutes, "minute", 0, 59), parseDateValue(time3.seconds, "seconds", 0, 60), parseMilliseconds(time3.fractionalMilliseconds)));
    }, "buildDate");
    parseTwoDigitYear = /* @__PURE__ */ __name2((value) => {
      const thisYear = (/* @__PURE__ */ new Date()).getUTCFullYear();
      const valueInThisCentury = Math.floor(thisYear / 100) * 100 + strictParseShort(stripLeadingZeroes(value));
      if (valueInThisCentury < thisYear) {
        return valueInThisCentury + 100;
      }
      return valueInThisCentury;
    }, "parseTwoDigitYear");
    FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1e3;
    adjustRfc850Year = /* @__PURE__ */ __name2((input) => {
      if (input.getTime() - (/* @__PURE__ */ new Date()).getTime() > FIFTY_YEARS_IN_MILLIS) {
        return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));
      }
      return input;
    }, "adjustRfc850Year");
    parseMonthByShortName = /* @__PURE__ */ __name2((value) => {
      const monthIdx = MONTHS.indexOf(value);
      if (monthIdx < 0) {
        throw new TypeError(`Invalid month: ${value}`);
      }
      return monthIdx + 1;
    }, "parseMonthByShortName");
    DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    validateDayOfMonth = /* @__PURE__ */ __name2((year, month, day) => {
      let maxDays = DAYS_IN_MONTH[month];
      if (month === 1 && isLeapYear(year)) {
        maxDays = 29;
      }
      if (day > maxDays) {
        throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);
      }
    }, "validateDayOfMonth");
    isLeapYear = /* @__PURE__ */ __name2((year) => {
      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    }, "isLeapYear");
    parseDateValue = /* @__PURE__ */ __name2((value, type, lower, upper) => {
      const dateVal = strictParseByte(stripLeadingZeroes(value));
      if (dateVal < lower || dateVal > upper) {
        throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);
      }
      return dateVal;
    }, "parseDateValue");
    parseMilliseconds = /* @__PURE__ */ __name2((value) => {
      if (value === null || value === void 0) {
        return 0;
      }
      return strictParseFloat32("0." + value) * 1e3;
    }, "parseMilliseconds");
    parseOffsetToMilliseconds = /* @__PURE__ */ __name2((value) => {
      const directionStr = value[0];
      let direction = 1;
      if (directionStr == "+") {
        direction = 1;
      } else if (directionStr == "-") {
        direction = -1;
      } else {
        throw new TypeError(`Offset direction, ${directionStr}, must be "+" or "-"`);
      }
      const hour = Number(value.substring(1, 3));
      const minute = Number(value.substring(4, 6));
      return direction * (hour * 60 + minute) * 60 * 1e3;
    }, "parseOffsetToMilliseconds");
    stripLeadingZeroes = /* @__PURE__ */ __name2((value) => {
      let idx = 0;
      while (idx < value.length - 1 && value.charAt(idx) === "0") {
        idx++;
      }
      if (idx === 0) {
        return value;
      }
      return value.slice(idx);
    }, "stripLeadingZeroes");
  }
});
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}
__name(rng, "rng");
var getRandomValues;
var rnds8;
var init_rng = __esm({
  "../node_modules/uuid/dist/esm-browser/rng.js"() {
    init_functionsRoutes_0_09879299104094341();
    rnds8 = new Uint8Array(16);
    __name2(rng, "rng");
  }
});
function unsafeStringify(arr, offset = 0) {
  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
}
__name(unsafeStringify, "unsafeStringify");
var byteToHex;
var init_stringify = __esm({
  "../node_modules/uuid/dist/esm-browser/stringify.js"() {
    init_functionsRoutes_0_09879299104094341();
    byteToHex = [];
    for (let i2 = 0; i2 < 256; ++i2) {
      byteToHex.push((i2 + 256).toString(16).slice(1));
    }
    __name2(unsafeStringify, "unsafeStringify");
  }
});
var randomUUID;
var native_default;
var init_native = __esm({
  "../node_modules/uuid/dist/esm-browser/native.js"() {
    init_functionsRoutes_0_09879299104094341();
    randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
    native_default = {
      randomUUID
    };
  }
});
function v4(options, buf, offset) {
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i2 = 0; i2 < 16; ++i2) {
      buf[offset + i2] = rnds[i2];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
__name(v4, "v4");
var v4_default;
var init_v4 = __esm({
  "../node_modules/uuid/dist/esm-browser/v4.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_native();
    init_rng();
    init_stringify();
    __name2(v4, "v4");
    v4_default = v4;
  }
});
var init_esm_browser = __esm({
  "../node_modules/uuid/dist/esm-browser/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_v4();
  }
});
var init_generateIdempotencyToken = __esm({
  "../node_modules/@smithy/core/dist-es/submodules/serde/generateIdempotencyToken.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var LazyJsonString;
var init_lazy_json = __esm({
  "../node_modules/@smithy/core/dist-es/submodules/serde/lazy-json.js"() {
    init_functionsRoutes_0_09879299104094341();
    LazyJsonString = /* @__PURE__ */ __name2(/* @__PURE__ */ __name(function LazyJsonString2(val) {
      const str = Object.assign(new String(val), {
        deserializeJSON() {
          return JSON.parse(String(val));
        },
        toString() {
          return String(val);
        },
        toJSON() {
          return String(val);
        }
      });
      return str;
    }, "LazyJsonString2"), "LazyJsonString");
    LazyJsonString.from = (object2) => {
      if (object2 && typeof object2 === "object" && (object2 instanceof LazyJsonString || "deserializeJSON" in object2)) {
        return object2;
      } else if (typeof object2 === "string" || Object.getPrototypeOf(object2) === String.prototype) {
        return LazyJsonString(String(object2));
      }
      return LazyJsonString(JSON.stringify(object2));
    };
    LazyJsonString.fromObject = LazyJsonString.from;
  }
});
function quoteHeader(part) {
  if (part.includes(",") || part.includes('"')) {
    part = `"${part.replace(/"/g, '\\"')}"`;
  }
  return part;
}
__name(quoteHeader, "quoteHeader");
var init_quote_header = __esm({
  "../node_modules/@smithy/core/dist-es/submodules/serde/quote-header.js"() {
    init_functionsRoutes_0_09879299104094341();
    __name2(quoteHeader, "quoteHeader");
  }
});
var init_split_every = __esm({
  "../node_modules/@smithy/core/dist-es/submodules/serde/split-every.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_split_header = __esm({
  "../node_modules/@smithy/core/dist-es/submodules/serde/split-header.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_NumericValue = __esm({
  "../node_modules/@smithy/core/dist-es/submodules/serde/value/NumericValue.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_serde2 = __esm({
  "../node_modules/@smithy/core/dist-es/submodules/serde/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_copyDocumentWithTransform();
    init_date_utils();
    init_generateIdempotencyToken();
    init_lazy_json();
    init_parse_utils();
    init_quote_header();
    init_split_every();
    init_split_header();
    init_NumericValue();
  }
});
var init_HttpProtocol = __esm({
  "../node_modules/@smithy/core/dist-es/submodules/protocols/HttpProtocol.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_HttpBindingProtocol = __esm({
  "../node_modules/@smithy/core/dist-es/submodules/protocols/HttpBindingProtocol.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_RpcProtocol = __esm({
  "../node_modules/@smithy/core/dist-es/submodules/protocols/RpcProtocol.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var resolvedPath;
var init_resolve_path = __esm({
  "../node_modules/@smithy/core/dist-es/submodules/protocols/resolve-path.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_extended_encode_uri_component();
    resolvedPath = /* @__PURE__ */ __name2((resolvedPath2, input, memberName, labelValueProvider, uriLabel, isGreedyLabel) => {
      if (input != null && input[memberName] !== void 0) {
        const labelValue = labelValueProvider();
        if (labelValue.length <= 0) {
          throw new Error("Empty value provided for input HTTP label: " + memberName + ".");
        }
        resolvedPath2 = resolvedPath2.replace(uriLabel, isGreedyLabel ? labelValue.split("/").map((segment) => extendedEncodeURIComponent(segment)).join("/") : extendedEncodeURIComponent(labelValue));
      } else {
        throw new Error("No value provided for input HTTP label: " + memberName + ".");
      }
      return resolvedPath2;
    }, "resolvedPath");
  }
});
function requestBuilder(input, context) {
  return new RequestBuilder(input, context);
}
__name(requestBuilder, "requestBuilder");
var RequestBuilder;
var init_requestBuilder = __esm({
  "../node_modules/@smithy/core/dist-es/submodules/protocols/requestBuilder.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es2();
    init_resolve_path();
    __name2(requestBuilder, "requestBuilder");
    RequestBuilder = class {
      static {
        __name(this, "RequestBuilder");
      }
      static {
        __name2(this, "RequestBuilder");
      }
      constructor(input, context) {
        this.input = input;
        this.context = context;
        this.query = {};
        this.method = "";
        this.headers = {};
        this.path = "";
        this.body = null;
        this.hostname = "";
        this.resolvePathStack = [];
      }
      async build() {
        const { hostname: hostname3, protocol = "https", port, path: basePath } = await this.context.endpoint();
        this.path = basePath;
        for (const resolvePath of this.resolvePathStack) {
          resolvePath(this.path);
        }
        return new HttpRequest({
          protocol,
          hostname: this.hostname || hostname3,
          port,
          method: this.method,
          path: this.path,
          query: this.query,
          body: this.body,
          headers: this.headers
        });
      }
      hn(hostname3) {
        this.hostname = hostname3;
        return this;
      }
      bp(uriLabel) {
        this.resolvePathStack.push((basePath) => {
          this.path = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + uriLabel;
        });
        return this;
      }
      p(memberName, labelValueProvider, uriLabel, isGreedyLabel) {
        this.resolvePathStack.push((path) => {
          this.path = resolvedPath(path, this.input, memberName, labelValueProvider, uriLabel, isGreedyLabel);
        });
        return this;
      }
      h(headers) {
        this.headers = headers;
        return this;
      }
      q(query) {
        this.query = query;
        return this;
      }
      b(body) {
        this.body = body;
        return this;
      }
      m(method) {
        this.method = method;
        return this;
      }
    };
  }
});
var init_determineTimestampFormat = __esm({
  "../node_modules/@smithy/core/dist-es/submodules/protocols/serde/determineTimestampFormat.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_FromStringShapeDeserializer = __esm({
  "../node_modules/@smithy/core/dist-es/submodules/protocols/serde/FromStringShapeDeserializer.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_HttpInterceptingShapeDeserializer = __esm({
  "../node_modules/@smithy/core/dist-es/submodules/protocols/serde/HttpInterceptingShapeDeserializer.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_ToStringShapeSerializer = __esm({
  "../node_modules/@smithy/core/dist-es/submodules/protocols/serde/ToStringShapeSerializer.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_HttpInterceptingShapeSerializer = __esm({
  "../node_modules/@smithy/core/dist-es/submodules/protocols/serde/HttpInterceptingShapeSerializer.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_protocols = __esm({
  "../node_modules/@smithy/core/dist-es/submodules/protocols/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_collect_stream_body();
    init_extended_encode_uri_component();
    init_HttpBindingProtocol();
    init_HttpProtocol();
    init_RpcProtocol();
    init_requestBuilder();
    init_resolve_path();
    init_FromStringShapeDeserializer();
    init_HttpInterceptingShapeDeserializer();
    init_HttpInterceptingShapeSerializer();
    init_ToStringShapeSerializer();
    init_determineTimestampFormat();
  }
});
var init_requestBuilder2 = __esm({
  "../node_modules/@smithy/core/dist-es/protocols/requestBuilder.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_protocols();
  }
});
function setFeature2(context, feature, value) {
  if (!context.__smithy_context) {
    context.__smithy_context = {
      features: {}
    };
  } else if (!context.__smithy_context.features) {
    context.__smithy_context.features = {};
  }
  context.__smithy_context.features[feature] = value;
}
__name(setFeature2, "setFeature2");
var init_setFeature2 = __esm({
  "../node_modules/@smithy/core/dist-es/setFeature.js"() {
    init_functionsRoutes_0_09879299104094341();
    __name2(setFeature2, "setFeature");
  }
});
var DefaultIdentityProviderConfig;
var init_DefaultIdentityProviderConfig = __esm({
  "../node_modules/@smithy/core/dist-es/util-identity-and-auth/DefaultIdentityProviderConfig.js"() {
    init_functionsRoutes_0_09879299104094341();
    DefaultIdentityProviderConfig = class {
      static {
        __name(this, "DefaultIdentityProviderConfig");
      }
      static {
        __name2(this, "DefaultIdentityProviderConfig");
      }
      constructor(config2) {
        this.authSchemes = /* @__PURE__ */ new Map();
        for (const [key, value] of Object.entries(config2)) {
          if (value !== void 0) {
            this.authSchemes.set(key, value);
          }
        }
      }
      getIdentityProvider(schemeId) {
        return this.authSchemes.get(schemeId);
      }
    };
  }
});
var init_httpApiKeyAuth = __esm({
  "../node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/httpApiKeyAuth.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_httpBearerAuth = __esm({
  "../node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/httpBearerAuth.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_noAuth = __esm({
  "../node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/noAuth.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_httpAuthSchemes = __esm({
  "../node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_httpApiKeyAuth();
    init_httpBearerAuth();
    init_noAuth();
  }
});
var createIsIdentityExpiredFunction;
var EXPIRATION_MS;
var isIdentityExpired;
var doesIdentityRequireRefresh;
var memoizeIdentityProvider;
var init_memoizeIdentityProvider = __esm({
  "../node_modules/@smithy/core/dist-es/util-identity-and-auth/memoizeIdentityProvider.js"() {
    init_functionsRoutes_0_09879299104094341();
    createIsIdentityExpiredFunction = /* @__PURE__ */ __name2((expirationMs) => (identity) => doesIdentityRequireRefresh(identity) && identity.expiration.getTime() - Date.now() < expirationMs, "createIsIdentityExpiredFunction");
    EXPIRATION_MS = 3e5;
    isIdentityExpired = createIsIdentityExpiredFunction(EXPIRATION_MS);
    doesIdentityRequireRefresh = /* @__PURE__ */ __name2((identity) => identity.expiration !== void 0, "doesIdentityRequireRefresh");
    memoizeIdentityProvider = /* @__PURE__ */ __name2((provider, isExpired, requiresRefresh) => {
      if (provider === void 0) {
        return void 0;
      }
      const normalizedProvider = typeof provider !== "function" ? async () => Promise.resolve(provider) : provider;
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = /* @__PURE__ */ __name2(async (options) => {
        if (!pending) {
          pending = normalizedProvider(options);
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      }, "coalesceProvider");
      if (isExpired === void 0) {
        return async (options) => {
          if (!hasResult || options?.forceRefresh) {
            resolved = await coalesceProvider(options);
          }
          return resolved;
        };
      }
      return async (options) => {
        if (!hasResult || options?.forceRefresh) {
          resolved = await coalesceProvider(options);
        }
        if (isConstant) {
          return resolved;
        }
        if (!requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider(options);
          return resolved;
        }
        return resolved;
      };
    }, "memoizeIdentityProvider");
  }
});
var init_util_identity_and_auth = __esm({
  "../node_modules/@smithy/core/dist-es/util-identity-and-auth/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_DefaultIdentityProviderConfig();
    init_httpAuthSchemes();
    init_memoizeIdentityProvider();
  }
});
var init_dist_es13 = __esm({
  "../node_modules/@smithy/core/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_getSmithyContext();
    init_middleware_http_auth_scheme();
    init_middleware_http_signing();
    init_normalizeProvider2();
    init_createPaginator();
    init_requestBuilder2();
    init_setFeature2();
    init_util_identity_and_auth();
  }
});
var init_ProviderError = __esm({
  "../node_modules/@smithy/property-provider/dist-es/ProviderError.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_CredentialsProviderError = __esm({
  "../node_modules/@smithy/property-provider/dist-es/CredentialsProviderError.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_TokenProviderError = __esm({
  "../node_modules/@smithy/property-provider/dist-es/TokenProviderError.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_chain = __esm({
  "../node_modules/@smithy/property-provider/dist-es/chain.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_fromStatic = __esm({
  "../node_modules/@smithy/property-provider/dist-es/fromStatic.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var memoize;
var init_memoize = __esm({
  "../node_modules/@smithy/property-provider/dist-es/memoize.js"() {
    init_functionsRoutes_0_09879299104094341();
    memoize = /* @__PURE__ */ __name2((provider, isExpired, requiresRefresh) => {
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = /* @__PURE__ */ __name2(async () => {
        if (!pending) {
          pending = provider();
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      }, "coalesceProvider");
      if (isExpired === void 0) {
        return async (options) => {
          if (!hasResult || options?.forceRefresh) {
            resolved = await coalesceProvider();
          }
          return resolved;
        };
      }
      return async (options) => {
        if (!hasResult || options?.forceRefresh) {
          resolved = await coalesceProvider();
        }
        if (isConstant) {
          return resolved;
        }
        if (requiresRefresh && !requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider();
          return resolved;
        }
        return resolved;
      };
    }, "memoize");
  }
});
var init_dist_es14 = __esm({
  "../node_modules/@smithy/property-provider/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_CredentialsProviderError();
    init_ProviderError();
    init_TokenProviderError();
    init_chain();
    init_fromStatic();
    init_memoize();
  }
});
var resolveAwsSdkSigV4AConfig;
var init_resolveAwsSdkSigV4AConfig = __esm({
  "../node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4AConfig.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es13();
    resolveAwsSdkSigV4AConfig = /* @__PURE__ */ __name2((config2) => {
      config2.sigv4aSigningRegionSet = normalizeProvider2(config2.sigv4aSigningRegionSet);
      return config2;
    }, "resolveAwsSdkSigV4AConfig");
  }
});
var ALGORITHM_QUERY_PARAM;
var CREDENTIAL_QUERY_PARAM;
var AMZ_DATE_QUERY_PARAM;
var SIGNED_HEADERS_QUERY_PARAM;
var EXPIRES_QUERY_PARAM;
var SIGNATURE_QUERY_PARAM;
var TOKEN_QUERY_PARAM;
var AUTH_HEADER;
var AMZ_DATE_HEADER;
var DATE_HEADER;
var GENERATED_HEADERS;
var SIGNATURE_HEADER;
var SHA256_HEADER;
var TOKEN_HEADER;
var ALWAYS_UNSIGNABLE_HEADERS;
var PROXY_HEADER_PATTERN;
var SEC_HEADER_PATTERN;
var ALGORITHM_IDENTIFIER;
var EVENT_ALGORITHM_IDENTIFIER;
var UNSIGNED_PAYLOAD;
var MAX_CACHE_SIZE;
var KEY_TYPE_IDENTIFIER;
var MAX_PRESIGNED_TTL;
var init_constants2 = __esm({
  "../node_modules/@smithy/signature-v4/dist-es/constants.js"() {
    init_functionsRoutes_0_09879299104094341();
    ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
    CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
    AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
    SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
    EXPIRES_QUERY_PARAM = "X-Amz-Expires";
    SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
    TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
    AUTH_HEADER = "authorization";
    AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase();
    DATE_HEADER = "date";
    GENERATED_HEADERS = [AUTH_HEADER, AMZ_DATE_HEADER, DATE_HEADER];
    SIGNATURE_HEADER = SIGNATURE_QUERY_PARAM.toLowerCase();
    SHA256_HEADER = "x-amz-content-sha256";
    TOKEN_HEADER = TOKEN_QUERY_PARAM.toLowerCase();
    ALWAYS_UNSIGNABLE_HEADERS = {
      authorization: true,
      "cache-control": true,
      connection: true,
      expect: true,
      from: true,
      "keep-alive": true,
      "max-forwards": true,
      pragma: true,
      referer: true,
      te: true,
      trailer: true,
      "transfer-encoding": true,
      upgrade: true,
      "user-agent": true,
      "x-amzn-trace-id": true
    };
    PROXY_HEADER_PATTERN = /^proxy-/;
    SEC_HEADER_PATTERN = /^sec-/;
    ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
    EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
    UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
    MAX_CACHE_SIZE = 50;
    KEY_TYPE_IDENTIFIER = "aws4_request";
    MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;
  }
});
var signingKeyCache;
var cacheQueue;
var createScope;
var getSigningKey;
var hmac;
var init_credentialDerivation = __esm({
  "../node_modules/@smithy/signature-v4/dist-es/credentialDerivation.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es11();
    init_dist_es6();
    init_constants2();
    signingKeyCache = {};
    cacheQueue = [];
    createScope = /* @__PURE__ */ __name2((shortDate, region, service) => `${shortDate}/${region}/${service}/${KEY_TYPE_IDENTIFIER}`, "createScope");
    getSigningKey = /* @__PURE__ */ __name2(async (sha256Constructor, credentials, shortDate, region, service) => {
      const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);
      const cacheKey = `${shortDate}:${region}:${service}:${toHex(credsHash)}:${credentials.sessionToken}`;
      if (cacheKey in signingKeyCache) {
        return signingKeyCache[cacheKey];
      }
      cacheQueue.push(cacheKey);
      while (cacheQueue.length > MAX_CACHE_SIZE) {
        delete signingKeyCache[cacheQueue.shift()];
      }
      let key = `AWS4${credentials.secretAccessKey}`;
      for (const signable of [shortDate, region, service, KEY_TYPE_IDENTIFIER]) {
        key = await hmac(sha256Constructor, key, signable);
      }
      return signingKeyCache[cacheKey] = key;
    }, "getSigningKey");
    hmac = /* @__PURE__ */ __name2((ctor, secret, data) => {
      const hash2 = new ctor(secret);
      hash2.update(toUint8Array(data));
      return hash2.digest();
    }, "hmac");
  }
});
var getCanonicalHeaders;
var init_getCanonicalHeaders = __esm({
  "../node_modules/@smithy/signature-v4/dist-es/getCanonicalHeaders.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_constants2();
    getCanonicalHeaders = /* @__PURE__ */ __name2(({ headers }, unsignableHeaders, signableHeaders) => {
      const canonical = {};
      for (const headerName of Object.keys(headers).sort()) {
        if (headers[headerName] == void 0) {
          continue;
        }
        const canonicalHeaderName = headerName.toLowerCase();
        if (canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS || unsignableHeaders?.has(canonicalHeaderName) || PROXY_HEADER_PATTERN.test(canonicalHeaderName) || SEC_HEADER_PATTERN.test(canonicalHeaderName)) {
          if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {
            continue;
          }
        }
        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
      }
      return canonical;
    }, "getCanonicalHeaders");
  }
});
var isArrayBuffer;
var init_dist_es15 = __esm({
  "../node_modules/@smithy/is-array-buffer/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    isArrayBuffer = /* @__PURE__ */ __name2((arg) => typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]", "isArrayBuffer");
  }
});
var getPayloadHash;
var init_getPayloadHash = __esm({
  "../node_modules/@smithy/signature-v4/dist-es/getPayloadHash.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es15();
    init_dist_es11();
    init_dist_es6();
    init_constants2();
    getPayloadHash = /* @__PURE__ */ __name2(async ({ headers, body }, hashConstructor) => {
      for (const headerName of Object.keys(headers)) {
        if (headerName.toLowerCase() === SHA256_HEADER) {
          return headers[headerName];
        }
      }
      if (body == void 0) {
        return "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
      } else if (typeof body === "string" || ArrayBuffer.isView(body) || isArrayBuffer(body)) {
        const hashCtor = new hashConstructor();
        hashCtor.update(toUint8Array(body));
        return toHex(await hashCtor.digest());
      }
      return UNSIGNED_PAYLOAD;
    }, "getPayloadHash");
  }
});
function negate(bytes) {
  for (let i2 = 0; i2 < 8; i2++) {
    bytes[i2] ^= 255;
  }
  for (let i2 = 7; i2 > -1; i2--) {
    bytes[i2]++;
    if (bytes[i2] !== 0)
      break;
  }
}
__name(negate, "negate");
var HeaderFormatter;
var HEADER_VALUE_TYPE;
var UUID_PATTERN;
var Int64;
var init_HeaderFormatter = __esm({
  "../node_modules/@smithy/signature-v4/dist-es/HeaderFormatter.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es11();
    init_dist_es6();
    HeaderFormatter = class {
      static {
        __name(this, "HeaderFormatter");
      }
      static {
        __name2(this, "HeaderFormatter");
      }
      format(headers) {
        const chunks = [];
        for (const headerName of Object.keys(headers)) {
          const bytes = fromUtf8(headerName);
          chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));
        }
        const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));
        let position = 0;
        for (const chunk of chunks) {
          out.set(chunk, position);
          position += chunk.byteLength;
        }
        return out;
      }
      formatHeaderValue(header) {
        switch (header.type) {
          case "boolean":
            return Uint8Array.from([header.value ? 0 : 1]);
          case "byte":
            return Uint8Array.from([2, header.value]);
          case "short":
            const shortView = new DataView(new ArrayBuffer(3));
            shortView.setUint8(0, 3);
            shortView.setInt16(1, header.value, false);
            return new Uint8Array(shortView.buffer);
          case "integer":
            const intView = new DataView(new ArrayBuffer(5));
            intView.setUint8(0, 4);
            intView.setInt32(1, header.value, false);
            return new Uint8Array(intView.buffer);
          case "long":
            const longBytes = new Uint8Array(9);
            longBytes[0] = 5;
            longBytes.set(header.value.bytes, 1);
            return longBytes;
          case "binary":
            const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));
            binView.setUint8(0, 6);
            binView.setUint16(1, header.value.byteLength, false);
            const binBytes = new Uint8Array(binView.buffer);
            binBytes.set(header.value, 3);
            return binBytes;
          case "string":
            const utf8Bytes = fromUtf8(header.value);
            const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));
            strView.setUint8(0, 7);
            strView.setUint16(1, utf8Bytes.byteLength, false);
            const strBytes = new Uint8Array(strView.buffer);
            strBytes.set(utf8Bytes, 3);
            return strBytes;
          case "timestamp":
            const tsBytes = new Uint8Array(9);
            tsBytes[0] = 8;
            tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);
            return tsBytes;
          case "uuid":
            if (!UUID_PATTERN.test(header.value)) {
              throw new Error(`Invalid UUID received: ${header.value}`);
            }
            const uuidBytes = new Uint8Array(17);
            uuidBytes[0] = 9;
            uuidBytes.set(fromHex(header.value.replace(/\-/g, "")), 1);
            return uuidBytes;
        }
      }
    };
    (function(HEADER_VALUE_TYPE3) {
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["boolTrue"] = 0] = "boolTrue";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["boolFalse"] = 1] = "boolFalse";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["byte"] = 2] = "byte";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["short"] = 3] = "short";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["integer"] = 4] = "integer";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["long"] = 5] = "long";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["byteArray"] = 6] = "byteArray";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["string"] = 7] = "string";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["timestamp"] = 8] = "timestamp";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["uuid"] = 9] = "uuid";
    })(HEADER_VALUE_TYPE || (HEADER_VALUE_TYPE = {}));
    UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
    Int64 = class _Int64 {
      static {
        __name(this, "_Int64");
      }
      static {
        __name2(this, "Int64");
      }
      constructor(bytes) {
        this.bytes = bytes;
        if (bytes.byteLength !== 8) {
          throw new Error("Int64 buffers must be exactly 8 bytes");
        }
      }
      static fromNumber(number4) {
        if (number4 > 9223372036854776e3 || number4 < -9223372036854776e3) {
          throw new Error(`${number4} is too large (or, if negative, too small) to represent as an Int64`);
        }
        const bytes = new Uint8Array(8);
        for (let i2 = 7, remaining = Math.abs(Math.round(number4)); i2 > -1 && remaining > 0; i2--, remaining /= 256) {
          bytes[i2] = remaining;
        }
        if (number4 < 0) {
          negate(bytes);
        }
        return new _Int64(bytes);
      }
      valueOf() {
        const bytes = this.bytes.slice(0);
        const negative = bytes[0] & 128;
        if (negative) {
          negate(bytes);
        }
        return parseInt(toHex(bytes), 16) * (negative ? -1 : 1);
      }
      toString() {
        return String(this.valueOf());
      }
    };
    __name2(negate, "negate");
  }
});
var hasHeader;
var init_headerUtil = __esm({
  "../node_modules/@smithy/signature-v4/dist-es/headerUtil.js"() {
    init_functionsRoutes_0_09879299104094341();
    hasHeader = /* @__PURE__ */ __name2((soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return true;
        }
      }
      return false;
    }, "hasHeader");
  }
});
var moveHeadersToQuery;
var init_moveHeadersToQuery = __esm({
  "../node_modules/@smithy/signature-v4/dist-es/moveHeadersToQuery.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es2();
    moveHeadersToQuery = /* @__PURE__ */ __name2((request, options = {}) => {
      const { headers, query = {} } = HttpRequest.clone(request);
      for (const name of Object.keys(headers)) {
        const lname = name.toLowerCase();
        if (lname.slice(0, 6) === "x-amz-" && !options.unhoistableHeaders?.has(lname) || options.hoistableHeaders?.has(lname)) {
          query[name] = headers[name];
          delete headers[name];
        }
      }
      return {
        ...request,
        headers,
        query
      };
    }, "moveHeadersToQuery");
  }
});
var prepareRequest;
var init_prepareRequest = __esm({
  "../node_modules/@smithy/signature-v4/dist-es/prepareRequest.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es2();
    init_constants2();
    prepareRequest = /* @__PURE__ */ __name2((request) => {
      request = HttpRequest.clone(request);
      for (const headerName of Object.keys(request.headers)) {
        if (GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
          delete request.headers[headerName];
        }
      }
      return request;
    }, "prepareRequest");
  }
});
var getCanonicalQuery;
var init_getCanonicalQuery = __esm({
  "../node_modules/@smithy/signature-v4/dist-es/getCanonicalQuery.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es8();
    init_constants2();
    getCanonicalQuery = /* @__PURE__ */ __name2(({ query = {} }) => {
      const keys = [];
      const serialized = {};
      for (const key of Object.keys(query)) {
        if (key.toLowerCase() === SIGNATURE_HEADER) {
          continue;
        }
        const encodedKey = escapeUri(key);
        keys.push(encodedKey);
        const value = query[key];
        if (typeof value === "string") {
          serialized[encodedKey] = `${encodedKey}=${escapeUri(value)}`;
        } else if (Array.isArray(value)) {
          serialized[encodedKey] = value.slice(0).reduce((encoded, value2) => encoded.concat([`${encodedKey}=${escapeUri(value2)}`]), []).sort().join("&");
        }
      }
      return keys.sort().map((key) => serialized[key]).filter((serialized2) => serialized2).join("&");
    }, "getCanonicalQuery");
  }
});
var iso8601;
var toDate;
var init_utilDate = __esm({
  "../node_modules/@smithy/signature-v4/dist-es/utilDate.js"() {
    init_functionsRoutes_0_09879299104094341();
    iso8601 = /* @__PURE__ */ __name2((time3) => toDate(time3).toISOString().replace(/\.\d{3}Z$/, "Z"), "iso8601");
    toDate = /* @__PURE__ */ __name2((time3) => {
      if (typeof time3 === "number") {
        return new Date(time3 * 1e3);
      }
      if (typeof time3 === "string") {
        if (Number(time3)) {
          return new Date(Number(time3) * 1e3);
        }
        return new Date(time3);
      }
      return time3;
    }, "toDate");
  }
});
var SignatureV4Base;
var init_SignatureV4Base = __esm({
  "../node_modules/@smithy/signature-v4/dist-es/SignatureV4Base.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es11();
    init_dist_es4();
    init_dist_es8();
    init_dist_es6();
    init_getCanonicalQuery();
    init_utilDate();
    SignatureV4Base = class {
      static {
        __name(this, "SignatureV4Base");
      }
      static {
        __name2(this, "SignatureV4Base");
      }
      constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true }) {
        this.service = service;
        this.sha256 = sha256;
        this.uriEscapePath = uriEscapePath;
        this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
        this.regionProvider = normalizeProvider(region);
        this.credentialProvider = normalizeProvider(credentials);
      }
      createCanonicalRequest(request, canonicalHeaders, payloadHash) {
        const sortedHeaders = Object.keys(canonicalHeaders).sort();
        return `${request.method}
${this.getCanonicalPath(request)}
${getCanonicalQuery(request)}
${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join("\n")}

${sortedHeaders.join(";")}
${payloadHash}`;
      }
      async createStringToSign(longDate, credentialScope, canonicalRequest, algorithmIdentifier) {
        const hash2 = new this.sha256();
        hash2.update(toUint8Array(canonicalRequest));
        const hashedRequest = await hash2.digest();
        return `${algorithmIdentifier}
${longDate}
${credentialScope}
${toHex(hashedRequest)}`;
      }
      getCanonicalPath({ path }) {
        if (this.uriEscapePath) {
          const normalizedPathSegments = [];
          for (const pathSegment of path.split("/")) {
            if (pathSegment?.length === 0)
              continue;
            if (pathSegment === ".")
              continue;
            if (pathSegment === "..") {
              normalizedPathSegments.pop();
            } else {
              normalizedPathSegments.push(pathSegment);
            }
          }
          const normalizedPath = `${path?.startsWith("/") ? "/" : ""}${normalizedPathSegments.join("/")}${normalizedPathSegments.length > 0 && path?.endsWith("/") ? "/" : ""}`;
          const doubleEncoded = escapeUri(normalizedPath);
          return doubleEncoded.replace(/%2F/g, "/");
        }
        return path;
      }
      validateResolvedCredentials(credentials) {
        if (typeof credentials !== "object" || typeof credentials.accessKeyId !== "string" || typeof credentials.secretAccessKey !== "string") {
          throw new Error("Resolved credential object is not valid");
        }
      }
      formatDate(now) {
        const longDate = iso8601(now).replace(/[\-:]/g, "");
        return {
          longDate,
          shortDate: longDate.slice(0, 8)
        };
      }
      getCanonicalHeaderList(headers) {
        return Object.keys(headers).sort().join(";");
      }
    };
  }
});
var SignatureV4;
var init_SignatureV4 = __esm({
  "../node_modules/@smithy/signature-v4/dist-es/SignatureV4.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es11();
    init_dist_es6();
    init_constants2();
    init_credentialDerivation();
    init_getCanonicalHeaders();
    init_getPayloadHash();
    init_HeaderFormatter();
    init_headerUtil();
    init_moveHeadersToQuery();
    init_prepareRequest();
    init_SignatureV4Base();
    SignatureV4 = class extends SignatureV4Base {
      static {
        __name(this, "SignatureV4");
      }
      static {
        __name2(this, "SignatureV4");
      }
      constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true }) {
        super({
          applyChecksum,
          credentials,
          region,
          service,
          sha256,
          uriEscapePath
        });
        this.headerFormatter = new HeaderFormatter();
      }
      async presign(originalRequest, options = {}) {
        const { signingDate = /* @__PURE__ */ new Date(), expiresIn = 3600, unsignableHeaders, unhoistableHeaders, signableHeaders, hoistableHeaders, signingRegion, signingService } = options;
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? await this.regionProvider();
        const { longDate, shortDate } = this.formatDate(signingDate);
        if (expiresIn > MAX_PRESIGNED_TTL) {
          return Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future");
        }
        const scope = createScope(shortDate, region, signingService ?? this.service);
        const request = moveHeadersToQuery(prepareRequest(originalRequest), { unhoistableHeaders, hoistableHeaders });
        if (credentials.sessionToken) {
          request.query[TOKEN_QUERY_PARAM] = credentials.sessionToken;
        }
        request.query[ALGORITHM_QUERY_PARAM] = ALGORITHM_IDENTIFIER;
        request.query[CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;
        request.query[AMZ_DATE_QUERY_PARAM] = longDate;
        request.query[EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
        const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);
        request.query[SIGNED_HEADERS_QUERY_PARAM] = this.getCanonicalHeaderList(canonicalHeaders);
        request.query[SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await getPayloadHash(originalRequest, this.sha256)));
        return request;
      }
      async sign(toSign, options) {
        if (typeof toSign === "string") {
          return this.signString(toSign, options);
        } else if (toSign.headers && toSign.payload) {
          return this.signEvent(toSign, options);
        } else if (toSign.message) {
          return this.signMessage(toSign, options);
        } else {
          return this.signRequest(toSign, options);
        }
      }
      async signEvent({ headers, payload }, { signingDate = /* @__PURE__ */ new Date(), priorSignature, signingRegion, signingService }) {
        const region = signingRegion ?? await this.regionProvider();
        const { shortDate, longDate } = this.formatDate(signingDate);
        const scope = createScope(shortDate, region, signingService ?? this.service);
        const hashedPayload = await getPayloadHash({ headers: {}, body: payload }, this.sha256);
        const hash2 = new this.sha256();
        hash2.update(headers);
        const hashedHeaders = toHex(await hash2.digest());
        const stringToSign = [
          EVENT_ALGORITHM_IDENTIFIER,
          longDate,
          scope,
          priorSignature,
          hashedHeaders,
          hashedPayload
        ].join("\n");
        return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });
      }
      async signMessage(signableMessage, { signingDate = /* @__PURE__ */ new Date(), signingRegion, signingService }) {
        const promise2 = this.signEvent({
          headers: this.headerFormatter.format(signableMessage.message.headers),
          payload: signableMessage.message.body
        }, {
          signingDate,
          signingRegion,
          signingService,
          priorSignature: signableMessage.priorSignature
        });
        return promise2.then((signature) => {
          return { message: signableMessage.message, signature };
        });
      }
      async signString(stringToSign, { signingDate = /* @__PURE__ */ new Date(), signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? await this.regionProvider();
        const { shortDate } = this.formatDate(signingDate);
        const hash2 = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));
        hash2.update(toUint8Array(stringToSign));
        return toHex(await hash2.digest());
      }
      async signRequest(requestToSign, { signingDate = /* @__PURE__ */ new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? await this.regionProvider();
        const request = prepareRequest(requestToSign);
        const { longDate, shortDate } = this.formatDate(signingDate);
        const scope = createScope(shortDate, region, signingService ?? this.service);
        request.headers[AMZ_DATE_HEADER] = longDate;
        if (credentials.sessionToken) {
          request.headers[TOKEN_HEADER] = credentials.sessionToken;
        }
        const payloadHash = await getPayloadHash(request, this.sha256);
        if (!hasHeader(SHA256_HEADER, request.headers) && this.applyChecksum) {
          request.headers[SHA256_HEADER] = payloadHash;
        }
        const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);
        const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));
        request.headers[AUTH_HEADER] = `${ALGORITHM_IDENTIFIER} Credential=${credentials.accessKeyId}/${scope}, SignedHeaders=${this.getCanonicalHeaderList(canonicalHeaders)}, Signature=${signature}`;
        return request;
      }
      async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {
        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest, ALGORITHM_IDENTIFIER);
        const hash2 = new this.sha256(await keyPromise);
        hash2.update(toUint8Array(stringToSign));
        return toHex(await hash2.digest());
      }
      getSigningKey(credentials, region, shortDate, service) {
        return getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);
      }
    };
  }
});
var signatureV4aContainer;
var init_signature_v4a_container = __esm({
  "../node_modules/@smithy/signature-v4/dist-es/signature-v4a-container.js"() {
    init_functionsRoutes_0_09879299104094341();
    signatureV4aContainer = {
      SignatureV4a: null
    };
  }
});
var init_dist_es16 = __esm({
  "../node_modules/@smithy/signature-v4/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_SignatureV4();
    init_constants2();
    init_credentialDerivation();
    init_signature_v4a_container();
  }
});
function normalizeCredentialProvider(config2, { credentials, credentialDefaultProvider }) {
  let credentialsProvider;
  if (credentials) {
    if (!credentials?.memoized) {
      credentialsProvider = memoizeIdentityProvider(credentials, isIdentityExpired, doesIdentityRequireRefresh);
    } else {
      credentialsProvider = credentials;
    }
  } else {
    if (credentialDefaultProvider) {
      credentialsProvider = normalizeProvider2(credentialDefaultProvider(Object.assign({}, config2, {
        parentClientConfig: config2
      })));
    } else {
      credentialsProvider = /* @__PURE__ */ __name2(async () => {
        throw new Error("@aws-sdk/core::resolveAwsSdkSigV4Config - `credentials` not provided and no credentialDefaultProvider was configured.");
      }, "credentialsProvider");
    }
  }
  credentialsProvider.memoized = true;
  return credentialsProvider;
}
__name(normalizeCredentialProvider, "normalizeCredentialProvider");
function bindCallerConfig(config2, credentialsProvider) {
  if (credentialsProvider.configBound) {
    return credentialsProvider;
  }
  const fn = /* @__PURE__ */ __name2(async (options) => credentialsProvider({ ...options, callerClientConfig: config2 }), "fn");
  fn.memoized = credentialsProvider.memoized;
  fn.configBound = true;
  return fn;
}
__name(bindCallerConfig, "bindCallerConfig");
var resolveAwsSdkSigV4Config;
var init_resolveAwsSdkSigV4Config = __esm({
  "../node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4Config.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_client2();
    init_dist_es13();
    init_dist_es16();
    resolveAwsSdkSigV4Config = /* @__PURE__ */ __name2((config2) => {
      let inputCredentials = config2.credentials;
      let isUserSupplied = !!config2.credentials;
      let resolvedCredentials = void 0;
      Object.defineProperty(config2, "credentials", {
        set(credentials) {
          if (credentials && credentials !== inputCredentials && credentials !== resolvedCredentials) {
            isUserSupplied = true;
          }
          inputCredentials = credentials;
          const memoizedProvider = normalizeCredentialProvider(config2, {
            credentials: inputCredentials,
            credentialDefaultProvider: config2.credentialDefaultProvider
          });
          const boundProvider = bindCallerConfig(config2, memoizedProvider);
          if (isUserSupplied && !boundProvider.attributed) {
            resolvedCredentials = /* @__PURE__ */ __name2(async (options) => boundProvider(options).then((creds) => setCredentialFeature(creds, "CREDENTIALS_CODE", "e")), "resolvedCredentials");
            resolvedCredentials.memoized = boundProvider.memoized;
            resolvedCredentials.configBound = boundProvider.configBound;
            resolvedCredentials.attributed = true;
          } else {
            resolvedCredentials = boundProvider;
          }
        },
        get() {
          return resolvedCredentials;
        },
        enumerable: true,
        configurable: true
      });
      config2.credentials = inputCredentials;
      const { signingEscapePath = true, systemClockOffset = config2.systemClockOffset || 0, sha256 } = config2;
      let signer;
      if (config2.signer) {
        signer = normalizeProvider2(config2.signer);
      } else if (config2.regionInfoProvider) {
        signer = /* @__PURE__ */ __name2(() => normalizeProvider2(config2.region)().then(async (region) => [
          await config2.regionInfoProvider(region, {
            useFipsEndpoint: await config2.useFipsEndpoint(),
            useDualstackEndpoint: await config2.useDualstackEndpoint()
          }) || {},
          region
        ]).then(([regionInfo, region]) => {
          const { signingRegion, signingService } = regionInfo;
          config2.signingRegion = config2.signingRegion || signingRegion || region;
          config2.signingName = config2.signingName || signingService || config2.serviceId;
          const params = {
            ...config2,
            credentials: config2.credentials,
            region: config2.signingRegion,
            service: config2.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          };
          const SignerCtor = config2.signerConstructor || SignatureV4;
          return new SignerCtor(params);
        }), "signer");
      } else {
        signer = /* @__PURE__ */ __name2(async (authScheme) => {
          authScheme = Object.assign({}, {
            name: "sigv4",
            signingName: config2.signingName || config2.defaultSigningName,
            signingRegion: await normalizeProvider2(config2.region)(),
            properties: {}
          }, authScheme);
          const signingRegion = authScheme.signingRegion;
          const signingService = authScheme.signingName;
          config2.signingRegion = config2.signingRegion || signingRegion;
          config2.signingName = config2.signingName || signingService || config2.serviceId;
          const params = {
            ...config2,
            credentials: config2.credentials,
            region: config2.signingRegion,
            service: config2.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          };
          const SignerCtor = config2.signerConstructor || SignatureV4;
          return new SignerCtor(params);
        }, "signer");
      }
      const resolvedConfig = Object.assign(config2, {
        systemClockOffset,
        signingEscapePath,
        signer
      });
      return resolvedConfig;
    }, "resolveAwsSdkSigV4Config");
    __name2(normalizeCredentialProvider, "normalizeCredentialProvider");
    __name2(bindCallerConfig, "bindCallerConfig");
  }
});
var init_aws_sdk = __esm({
  "../node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_AwsSdkSigV4Signer();
    init_AwsSdkSigV4ASigner();
    init_NODE_AUTH_SCHEME_PREFERENCE_OPTIONS();
    init_resolveAwsSdkSigV4AConfig();
    init_resolveAwsSdkSigV4Config();
  }
});
var init_httpAuthSchemes2 = __esm({
  "../node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_aws_sdk();
    init_getBearerTokenEnvKey();
  }
});
var TEXT_ENCODER;
var calculateBodyLength;
var init_calculateBodyLength = __esm({
  "../node_modules/@smithy/util-body-length-browser/dist-es/calculateBodyLength.js"() {
    init_functionsRoutes_0_09879299104094341();
    TEXT_ENCODER = typeof TextEncoder == "function" ? new TextEncoder() : null;
    calculateBodyLength = /* @__PURE__ */ __name2((body) => {
      if (typeof body === "string") {
        if (TEXT_ENCODER) {
          return TEXT_ENCODER.encode(body).byteLength;
        }
        let len = body.length;
        for (let i2 = len - 1; i2 >= 0; i2--) {
          const code = body.charCodeAt(i2);
          if (code > 127 && code <= 2047)
            len++;
          else if (code > 2047 && code <= 65535)
            len += 2;
          if (code >= 56320 && code <= 57343)
            i2--;
        }
        return len;
      } else if (typeof body.byteLength === "number") {
        return body.byteLength;
      } else if (typeof body.size === "number") {
        return body.size;
      }
      throw new Error(`Body Length computation failed for ${body}`);
    }, "calculateBodyLength");
  }
});
var init_dist_es17 = __esm({
  "../node_modules/@smithy/util-body-length-browser/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_calculateBodyLength();
  }
});
var init_AwsSmithyRpcV2CborProtocol = __esm({
  "../node_modules/@aws-sdk/core/dist-es/submodules/protocols/cbor/AwsSmithyRpcV2CborProtocol.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_coercing_serializers = __esm({
  "../node_modules/@aws-sdk/core/dist-es/submodules/protocols/coercing-serializers.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var getAllAliases;
var getMiddlewareNameWithAliases;
var constructStack;
var stepWeights;
var priorityWeights;
var init_MiddlewareStack = __esm({
  "../node_modules/@smithy/middleware-stack/dist-es/MiddlewareStack.js"() {
    init_functionsRoutes_0_09879299104094341();
    getAllAliases = /* @__PURE__ */ __name2((name, aliases) => {
      const _aliases = [];
      if (name) {
        _aliases.push(name);
      }
      if (aliases) {
        for (const alias of aliases) {
          _aliases.push(alias);
        }
      }
      return _aliases;
    }, "getAllAliases");
    getMiddlewareNameWithAliases = /* @__PURE__ */ __name2((name, aliases) => {
      return `${name || "anonymous"}${aliases && aliases.length > 0 ? ` (a.k.a. ${aliases.join(",")})` : ""}`;
    }, "getMiddlewareNameWithAliases");
    constructStack = /* @__PURE__ */ __name2(() => {
      let absoluteEntries = [];
      let relativeEntries = [];
      let identifyOnResolve = false;
      const entriesNameSet = /* @__PURE__ */ new Set();
      const sort = /* @__PURE__ */ __name2((entries) => entries.sort((a2, b2) => stepWeights[b2.step] - stepWeights[a2.step] || priorityWeights[b2.priority || "normal"] - priorityWeights[a2.priority || "normal"]), "sort");
      const removeByName = /* @__PURE__ */ __name2((toRemove) => {
        let isRemoved = false;
        const filterCb = /* @__PURE__ */ __name2((entry) => {
          const aliases = getAllAliases(entry.name, entry.aliases);
          if (aliases.includes(toRemove)) {
            isRemoved = true;
            for (const alias of aliases) {
              entriesNameSet.delete(alias);
            }
            return false;
          }
          return true;
        }, "filterCb");
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      }, "removeByName");
      const removeByReference = /* @__PURE__ */ __name2((toRemove) => {
        let isRemoved = false;
        const filterCb = /* @__PURE__ */ __name2((entry) => {
          if (entry.middleware === toRemove) {
            isRemoved = true;
            for (const alias of getAllAliases(entry.name, entry.aliases)) {
              entriesNameSet.delete(alias);
            }
            return false;
          }
          return true;
        }, "filterCb");
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      }, "removeByReference");
      const cloneTo = /* @__PURE__ */ __name2((toStack) => {
        absoluteEntries.forEach((entry) => {
          toStack.add(entry.middleware, { ...entry });
        });
        relativeEntries.forEach((entry) => {
          toStack.addRelativeTo(entry.middleware, { ...entry });
        });
        toStack.identifyOnResolve?.(stack.identifyOnResolve());
        return toStack;
      }, "cloneTo");
      const expandRelativeMiddlewareList = /* @__PURE__ */ __name2((from) => {
        const expandedMiddlewareList = [];
        from.before.forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        expandedMiddlewareList.push(from);
        from.after.reverse().forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        return expandedMiddlewareList;
      }, "expandRelativeMiddlewareList");
      const getMiddlewareList = /* @__PURE__ */ __name2((debug = false) => {
        const normalizedAbsoluteEntries = [];
        const normalizedRelativeEntries = [];
        const normalizedEntriesNameMap = {};
        absoluteEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: []
          };
          for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases)) {
            normalizedEntriesNameMap[alias] = normalizedEntry;
          }
          normalizedAbsoluteEntries.push(normalizedEntry);
        });
        relativeEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: []
          };
          for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases)) {
            normalizedEntriesNameMap[alias] = normalizedEntry;
          }
          normalizedRelativeEntries.push(normalizedEntry);
        });
        normalizedRelativeEntries.forEach((entry) => {
          if (entry.toMiddleware) {
            const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
            if (toMiddleware === void 0) {
              if (debug) {
                return;
              }
              throw new Error(`${entry.toMiddleware} is not found when adding ${getMiddlewareNameWithAliases(entry.name, entry.aliases)} middleware ${entry.relation} ${entry.toMiddleware}`);
            }
            if (entry.relation === "after") {
              toMiddleware.after.push(entry);
            }
            if (entry.relation === "before") {
              toMiddleware.before.push(entry);
            }
          }
        });
        const mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce((wholeList, expandedMiddlewareList) => {
          wholeList.push(...expandedMiddlewareList);
          return wholeList;
        }, []);
        return mainChain;
      }, "getMiddlewareList");
      const stack = {
        add: /* @__PURE__ */ __name2((middleware, options = {}) => {
          const { name, override, aliases: _aliases } = options;
          const entry = {
            step: "initialize",
            priority: "normal",
            middleware,
            ...options
          };
          const aliases = getAllAliases(name, _aliases);
          if (aliases.length > 0) {
            if (aliases.some((alias) => entriesNameSet.has(alias))) {
              if (!override)
                throw new Error(`Duplicate middleware name '${getMiddlewareNameWithAliases(name, _aliases)}'`);
              for (const alias of aliases) {
                const toOverrideIndex = absoluteEntries.findIndex((entry2) => entry2.name === alias || entry2.aliases?.some((a2) => a2 === alias));
                if (toOverrideIndex === -1) {
                  continue;
                }
                const toOverride = absoluteEntries[toOverrideIndex];
                if (toOverride.step !== entry.step || entry.priority !== toOverride.priority) {
                  throw new Error(`"${getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases)}" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be overridden by "${getMiddlewareNameWithAliases(name, _aliases)}" middleware with ${entry.priority} priority in ${entry.step} step.`);
                }
                absoluteEntries.splice(toOverrideIndex, 1);
              }
            }
            for (const alias of aliases) {
              entriesNameSet.add(alias);
            }
          }
          absoluteEntries.push(entry);
        }, "add"),
        addRelativeTo: /* @__PURE__ */ __name2((middleware, options) => {
          const { name, override, aliases: _aliases } = options;
          const entry = {
            middleware,
            ...options
          };
          const aliases = getAllAliases(name, _aliases);
          if (aliases.length > 0) {
            if (aliases.some((alias) => entriesNameSet.has(alias))) {
              if (!override)
                throw new Error(`Duplicate middleware name '${getMiddlewareNameWithAliases(name, _aliases)}'`);
              for (const alias of aliases) {
                const toOverrideIndex = relativeEntries.findIndex((entry2) => entry2.name === alias || entry2.aliases?.some((a2) => a2 === alias));
                if (toOverrideIndex === -1) {
                  continue;
                }
                const toOverride = relativeEntries[toOverrideIndex];
                if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
                  throw new Error(`"${getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases)}" middleware ${toOverride.relation} "${toOverride.toMiddleware}" middleware cannot be overridden by "${getMiddlewareNameWithAliases(name, _aliases)}" middleware ${entry.relation} "${entry.toMiddleware}" middleware.`);
                }
                relativeEntries.splice(toOverrideIndex, 1);
              }
            }
            for (const alias of aliases) {
              entriesNameSet.add(alias);
            }
          }
          relativeEntries.push(entry);
        }, "addRelativeTo"),
        clone: /* @__PURE__ */ __name2(() => cloneTo(constructStack()), "clone"),
        use: /* @__PURE__ */ __name2((plugin) => {
          plugin.applyToStack(stack);
        }, "use"),
        remove: /* @__PURE__ */ __name2((toRemove) => {
          if (typeof toRemove === "string")
            return removeByName(toRemove);
          else
            return removeByReference(toRemove);
        }, "remove"),
        removeByTag: /* @__PURE__ */ __name2((toRemove) => {
          let isRemoved = false;
          const filterCb = /* @__PURE__ */ __name2((entry) => {
            const { tags, name, aliases: _aliases } = entry;
            if (tags && tags.includes(toRemove)) {
              const aliases = getAllAliases(name, _aliases);
              for (const alias of aliases) {
                entriesNameSet.delete(alias);
              }
              isRemoved = true;
              return false;
            }
            return true;
          }, "filterCb");
          absoluteEntries = absoluteEntries.filter(filterCb);
          relativeEntries = relativeEntries.filter(filterCb);
          return isRemoved;
        }, "removeByTag"),
        concat: /* @__PURE__ */ __name2((from) => {
          const cloned = cloneTo(constructStack());
          cloned.use(from);
          cloned.identifyOnResolve(identifyOnResolve || cloned.identifyOnResolve() || (from.identifyOnResolve?.() ?? false));
          return cloned;
        }, "concat"),
        applyToStack: cloneTo,
        identify: /* @__PURE__ */ __name2(() => {
          return getMiddlewareList(true).map((mw) => {
            const step = mw.step ?? mw.relation + " " + mw.toMiddleware;
            return getMiddlewareNameWithAliases(mw.name, mw.aliases) + " - " + step;
          });
        }, "identify"),
        identifyOnResolve(toggle) {
          if (typeof toggle === "boolean")
            identifyOnResolve = toggle;
          return identifyOnResolve;
        },
        resolve: /* @__PURE__ */ __name2((handler, context) => {
          for (const middleware of getMiddlewareList().map((entry) => entry.middleware).reverse()) {
            handler = middleware(handler, context);
          }
          if (identifyOnResolve) {
            console.log(stack.identify());
          }
          return handler;
        }, "resolve")
      };
      return stack;
    }, "constructStack");
    stepWeights = {
      initialize: 5,
      serialize: 4,
      build: 3,
      finalizeRequest: 2,
      deserialize: 1
    };
    priorityWeights = {
      high: 3,
      normal: 2,
      low: 1
    };
  }
});
var init_dist_es18 = __esm({
  "../node_modules/@smithy/middleware-stack/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_MiddlewareStack();
  }
});
var Client;
var init_client3 = __esm({
  "../node_modules/@smithy/smithy-client/dist-es/client.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es18();
    Client = class {
      static {
        __name(this, "Client");
      }
      static {
        __name2(this, "Client");
      }
      constructor(config2) {
        this.config = config2;
        this.middlewareStack = constructStack();
      }
      send(command, optionsOrCb, cb2) {
        const options = typeof optionsOrCb !== "function" ? optionsOrCb : void 0;
        const callback = typeof optionsOrCb === "function" ? optionsOrCb : cb2;
        const useHandlerCache = options === void 0 && this.config.cacheMiddleware === true;
        let handler;
        if (useHandlerCache) {
          if (!this.handlers) {
            this.handlers = /* @__PURE__ */ new WeakMap();
          }
          const handlers = this.handlers;
          if (handlers.has(command.constructor)) {
            handler = handlers.get(command.constructor);
          } else {
            handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
            handlers.set(command.constructor, handler);
          }
        } else {
          delete this.handlers;
          handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
        }
        if (callback) {
          handler(command).then((result) => callback(null, result.output), (err) => callback(err)).catch(() => {
          });
        } else {
          return handler(command).then((result) => result.output);
        }
      }
      destroy() {
        this.config?.requestHandler?.destroy?.();
        delete this.handlers;
      }
    };
  }
});
var init_collect_stream_body2 = __esm({
  "../node_modules/@smithy/smithy-client/dist-es/collect-stream-body.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_protocols();
  }
});
function schemaLogFilter(schema, data) {
  if (data == null) {
    return data;
  }
  const ns = NormalizedSchema.of(schema);
  if (ns.getMergedTraits().sensitive) {
    return SENSITIVE_STRING;
  }
  if (ns.isListSchema()) {
    const isSensitive = !!ns.getValueSchema().getMergedTraits().sensitive;
    if (isSensitive) {
      return SENSITIVE_STRING;
    }
  } else if (ns.isMapSchema()) {
    const isSensitive = !!ns.getKeySchema().getMergedTraits().sensitive || !!ns.getValueSchema().getMergedTraits().sensitive;
    if (isSensitive) {
      return SENSITIVE_STRING;
    }
  } else if (ns.isStructSchema() && typeof data === "object") {
    const object2 = data;
    const newObject = {};
    for (const [member, memberNs] of ns.structIterator()) {
      if (object2[member] != null) {
        newObject[member] = schemaLogFilter(memberNs, object2[member]);
      }
    }
    return newObject;
  }
  return data;
}
__name(schemaLogFilter, "schemaLogFilter");
var SENSITIVE_STRING;
var init_schemaLogFilter = __esm({
  "../node_modules/@smithy/smithy-client/dist-es/schemaLogFilter.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_schema2();
    SENSITIVE_STRING = "***SensitiveInformation***";
    __name2(schemaLogFilter, "schemaLogFilter");
  }
});
var Command;
var ClassBuilder;
var init_command2 = __esm({
  "../node_modules/@smithy/smithy-client/dist-es/command.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es18();
    init_dist_es();
    init_schemaLogFilter();
    Command = class {
      static {
        __name(this, "Command");
      }
      static {
        __name2(this, "Command");
      }
      constructor() {
        this.middlewareStack = constructStack();
      }
      static classBuilder() {
        return new ClassBuilder();
      }
      resolveMiddlewareWithContext(clientStack, configuration, options, { middlewareFn, clientName, commandName, inputFilterSensitiveLog, outputFilterSensitiveLog, smithyContext, additionalContext, CommandCtor }) {
        for (const mw of middlewareFn.bind(this)(CommandCtor, clientStack, configuration, options)) {
          this.middlewareStack.use(mw);
        }
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog,
          outputFilterSensitiveLog,
          [SMITHY_CONTEXT_KEY]: {
            commandInstance: this,
            ...smithyContext
          },
          ...additionalContext
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
    };
    ClassBuilder = class {
      static {
        __name(this, "ClassBuilder");
      }
      static {
        __name2(this, "ClassBuilder");
      }
      constructor() {
        this._init = () => {
        };
        this._ep = {};
        this._middlewareFn = () => [];
        this._commandName = "";
        this._clientName = "";
        this._additionalContext = {};
        this._smithyContext = {};
        this._inputFilterSensitiveLog = void 0;
        this._outputFilterSensitiveLog = void 0;
        this._serializer = null;
        this._deserializer = null;
      }
      init(cb2) {
        this._init = cb2;
      }
      ep(endpointParameterInstructions) {
        this._ep = endpointParameterInstructions;
        return this;
      }
      m(middlewareSupplier) {
        this._middlewareFn = middlewareSupplier;
        return this;
      }
      s(service, operation, smithyContext = {}) {
        this._smithyContext = {
          service,
          operation,
          ...smithyContext
        };
        return this;
      }
      c(additionalContext = {}) {
        this._additionalContext = additionalContext;
        return this;
      }
      n(clientName, commandName) {
        this._clientName = clientName;
        this._commandName = commandName;
        return this;
      }
      f(inputFilter = (_) => _, outputFilter = (_) => _) {
        this._inputFilterSensitiveLog = inputFilter;
        this._outputFilterSensitiveLog = outputFilter;
        return this;
      }
      ser(serializer) {
        this._serializer = serializer;
        return this;
      }
      de(deserializer) {
        this._deserializer = deserializer;
        return this;
      }
      sc(operation) {
        this._operationSchema = operation;
        this._smithyContext.operationSchema = operation;
        return this;
      }
      build() {
        const closure = this;
        let CommandRef;
        return CommandRef = class extends Command {
          static {
            __name(this, "CommandRef");
          }
          static {
            __name2(this, "CommandRef");
          }
          static getEndpointParameterInstructions() {
            return closure._ep;
          }
          constructor(...[input]) {
            super();
            this.serialize = closure._serializer;
            this.deserialize = closure._deserializer;
            this.input = input ?? {};
            closure._init(this);
            this.schema = closure._operationSchema;
          }
          resolveMiddleware(stack, configuration, options) {
            return this.resolveMiddlewareWithContext(stack, configuration, options, {
              CommandCtor: CommandRef,
              middlewareFn: closure._middlewareFn,
              clientName: closure._clientName,
              commandName: closure._commandName,
              inputFilterSensitiveLog: closure._inputFilterSensitiveLog ?? (closure._operationSchema ? schemaLogFilter.bind(null, closure._operationSchema.input) : (_) => _),
              outputFilterSensitiveLog: closure._outputFilterSensitiveLog ?? (closure._operationSchema ? schemaLogFilter.bind(null, closure._operationSchema.output) : (_) => _),
              smithyContext: closure._smithyContext,
              additionalContext: closure._additionalContext
            });
          }
        };
      }
    };
  }
});
var SENSITIVE_STRING2;
var init_constants3 = __esm({
  "../node_modules/@smithy/smithy-client/dist-es/constants.js"() {
    init_functionsRoutes_0_09879299104094341();
    SENSITIVE_STRING2 = "***SensitiveInformation***";
  }
});
var createAggregatedClient;
var init_create_aggregated_client = __esm({
  "../node_modules/@smithy/smithy-client/dist-es/create-aggregated-client.js"() {
    init_functionsRoutes_0_09879299104094341();
    createAggregatedClient = /* @__PURE__ */ __name2((commands2, Client2) => {
      for (const command of Object.keys(commands2)) {
        const CommandCtor = commands2[command];
        const methodImpl = /* @__PURE__ */ __name2(async function(args, optionsOrCb, cb2) {
          const command2 = new CommandCtor(args);
          if (typeof optionsOrCb === "function") {
            this.send(command2, optionsOrCb);
          } else if (typeof cb2 === "function") {
            if (typeof optionsOrCb !== "object")
              throw new Error(`Expected http options but got ${typeof optionsOrCb}`);
            this.send(command2, optionsOrCb || {}, cb2);
          } else {
            return this.send(command2, optionsOrCb);
          }
        }, "methodImpl");
        const methodName = (command[0].toLowerCase() + command.slice(1)).replace(/Command$/, "");
        Client2.prototype[methodName] = methodImpl;
      }
    }, "createAggregatedClient");
  }
});
var ServiceException;
var decorateServiceException;
var init_exceptions = __esm({
  "../node_modules/@smithy/smithy-client/dist-es/exceptions.js"() {
    init_functionsRoutes_0_09879299104094341();
    ServiceException = class _ServiceException extends Error {
      static {
        __name(this, "_ServiceException");
      }
      static {
        __name2(this, "ServiceException");
      }
      constructor(options) {
        super(options.message);
        Object.setPrototypeOf(this, Object.getPrototypeOf(this).constructor.prototype);
        this.name = options.name;
        this.$fault = options.$fault;
        this.$metadata = options.$metadata;
      }
      static isInstance(value) {
        if (!value)
          return false;
        const candidate = value;
        return _ServiceException.prototype.isPrototypeOf(candidate) || Boolean(candidate.$fault) && Boolean(candidate.$metadata) && (candidate.$fault === "client" || candidate.$fault === "server");
      }
      static [Symbol.hasInstance](instance) {
        if (!instance)
          return false;
        const candidate = instance;
        if (this === _ServiceException) {
          return _ServiceException.isInstance(instance);
        }
        if (_ServiceException.isInstance(instance)) {
          if (candidate.name && this.name) {
            return this.prototype.isPrototypeOf(instance) || candidate.name === this.name;
          }
          return this.prototype.isPrototypeOf(instance);
        }
        return false;
      }
    };
    decorateServiceException = /* @__PURE__ */ __name2((exception, additions = {}) => {
      Object.entries(additions).filter(([, v2]) => v2 !== void 0).forEach(([k2, v2]) => {
        if (exception[k2] == void 0 || exception[k2] === "") {
          exception[k2] = v2;
        }
      });
      const message = exception.message || exception.Message || "UnknownError";
      exception.message = message;
      delete exception.Message;
      return exception;
    }, "decorateServiceException");
  }
});
var throwDefaultError;
var withBaseException;
var deserializeMetadata;
var init_default_error_handler = __esm({
  "../node_modules/@smithy/smithy-client/dist-es/default-error-handler.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_exceptions();
    throwDefaultError = /* @__PURE__ */ __name2(({ output, parsedBody, exceptionCtor, errorCode }) => {
      const $metadata = deserializeMetadata(output);
      const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
      const response = new exceptionCtor({
        name: parsedBody?.code || parsedBody?.Code || errorCode || statusCode || "UnknownError",
        $fault: "client",
        $metadata
      });
      throw decorateServiceException(response, parsedBody);
    }, "throwDefaultError");
    withBaseException = /* @__PURE__ */ __name2((ExceptionCtor) => {
      return ({ output, parsedBody, errorCode }) => {
        throwDefaultError({ output, parsedBody, exceptionCtor: ExceptionCtor, errorCode });
      };
    }, "withBaseException");
    deserializeMetadata = /* @__PURE__ */ __name2((output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    }), "deserializeMetadata");
  }
});
var loadConfigsForDefaultMode;
var init_defaults_mode = __esm({
  "../node_modules/@smithy/smithy-client/dist-es/defaults-mode.js"() {
    init_functionsRoutes_0_09879299104094341();
    loadConfigsForDefaultMode = /* @__PURE__ */ __name2((mode) => {
      switch (mode) {
        case "standard":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "in-region":
          return {
            retryMode: "standard",
            connectionTimeout: 1100
          };
        case "cross-region":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "mobile":
          return {
            retryMode: "standard",
            connectionTimeout: 3e4
          };
        default:
          return {};
      }
    }, "loadConfigsForDefaultMode");
  }
});
var init_emitWarningIfUnsupportedVersion2 = __esm({
  "../node_modules/@smithy/smithy-client/dist-es/emitWarningIfUnsupportedVersion.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_extended_encode_uri_component2 = __esm({
  "../node_modules/@smithy/smithy-client/dist-es/extended-encode-uri-component.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var getChecksumConfiguration;
var resolveChecksumRuntimeConfig;
var init_checksum3 = __esm({
  "../node_modules/@smithy/smithy-client/dist-es/extensions/checksum.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es();
    getChecksumConfiguration = /* @__PURE__ */ __name2((runtimeConfig) => {
      const checksumAlgorithms = [];
      for (const id in AlgorithmId) {
        const algorithmId = AlgorithmId[id];
        if (runtimeConfig[algorithmId] === void 0) {
          continue;
        }
        checksumAlgorithms.push({
          algorithmId: /* @__PURE__ */ __name2(() => algorithmId, "algorithmId"),
          checksumConstructor: /* @__PURE__ */ __name2(() => runtimeConfig[algorithmId], "checksumConstructor")
        });
      }
      return {
        addChecksumAlgorithm(algo) {
          checksumAlgorithms.push(algo);
        },
        checksumAlgorithms() {
          return checksumAlgorithms;
        }
      };
    }, "getChecksumConfiguration");
    resolveChecksumRuntimeConfig = /* @__PURE__ */ __name2((clientConfig) => {
      const runtimeConfig = {};
      clientConfig.checksumAlgorithms().forEach((checksumAlgorithm) => {
        runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();
      });
      return runtimeConfig;
    }, "resolveChecksumRuntimeConfig");
  }
});
var getRetryConfiguration;
var resolveRetryRuntimeConfig;
var init_retry2 = __esm({
  "../node_modules/@smithy/smithy-client/dist-es/extensions/retry.js"() {
    init_functionsRoutes_0_09879299104094341();
    getRetryConfiguration = /* @__PURE__ */ __name2((runtimeConfig) => {
      return {
        setRetryStrategy(retryStrategy) {
          runtimeConfig.retryStrategy = retryStrategy;
        },
        retryStrategy() {
          return runtimeConfig.retryStrategy;
        }
      };
    }, "getRetryConfiguration");
    resolveRetryRuntimeConfig = /* @__PURE__ */ __name2((retryStrategyConfiguration) => {
      const runtimeConfig = {};
      runtimeConfig.retryStrategy = retryStrategyConfiguration.retryStrategy();
      return runtimeConfig;
    }, "resolveRetryRuntimeConfig");
  }
});
var getDefaultExtensionConfiguration;
var resolveDefaultRuntimeConfig;
var init_defaultExtensionConfiguration2 = __esm({
  "../node_modules/@smithy/smithy-client/dist-es/extensions/defaultExtensionConfiguration.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_checksum3();
    init_retry2();
    getDefaultExtensionConfiguration = /* @__PURE__ */ __name2((runtimeConfig) => {
      return Object.assign(getChecksumConfiguration(runtimeConfig), getRetryConfiguration(runtimeConfig));
    }, "getDefaultExtensionConfiguration");
    resolveDefaultRuntimeConfig = /* @__PURE__ */ __name2((config2) => {
      return Object.assign(resolveChecksumRuntimeConfig(config2), resolveRetryRuntimeConfig(config2));
    }, "resolveDefaultRuntimeConfig");
  }
});
var init_extensions3 = __esm({
  "../node_modules/@smithy/smithy-client/dist-es/extensions/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_defaultExtensionConfiguration2();
  }
});
var getArrayIfSingleItem;
var init_get_array_if_single_item = __esm({
  "../node_modules/@smithy/smithy-client/dist-es/get-array-if-single-item.js"() {
    init_functionsRoutes_0_09879299104094341();
    getArrayIfSingleItem = /* @__PURE__ */ __name2((mayBeArray) => Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray], "getArrayIfSingleItem");
  }
});
var getValueFromTextNode;
var init_get_value_from_text_node = __esm({
  "../node_modules/@smithy/smithy-client/dist-es/get-value-from-text-node.js"() {
    init_functionsRoutes_0_09879299104094341();
    getValueFromTextNode = /* @__PURE__ */ __name2((obj) => {
      const textNodeName = "#text";
      for (const key in obj) {
        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== void 0) {
          obj[key] = obj[key][textNodeName];
        } else if (typeof obj[key] === "object" && obj[key] !== null) {
          obj[key] = getValueFromTextNode(obj[key]);
        }
      }
      return obj;
    }, "getValueFromTextNode");
  }
});
var isSerializableHeaderValue;
var init_is_serializable_header_value = __esm({
  "../node_modules/@smithy/smithy-client/dist-es/is-serializable-header-value.js"() {
    init_functionsRoutes_0_09879299104094341();
    isSerializableHeaderValue = /* @__PURE__ */ __name2((value) => {
      return value != null;
    }, "isSerializableHeaderValue");
  }
});
var NoOpLogger;
var init_NoOpLogger = __esm({
  "../node_modules/@smithy/smithy-client/dist-es/NoOpLogger.js"() {
    init_functionsRoutes_0_09879299104094341();
    NoOpLogger = class {
      static {
        __name(this, "NoOpLogger");
      }
      static {
        __name2(this, "NoOpLogger");
      }
      trace() {
      }
      debug() {
      }
      info() {
      }
      warn() {
      }
      error() {
      }
    };
  }
});
function map2(arg0, arg1, arg2) {
  let target;
  let filter;
  let instructions;
  if (typeof arg1 === "undefined" && typeof arg2 === "undefined") {
    target = {};
    instructions = arg0;
  } else {
    target = arg0;
    if (typeof arg1 === "function") {
      filter = arg1;
      instructions = arg2;
      return mapWithFilter(target, filter, instructions);
    } else {
      instructions = arg1;
    }
  }
  for (const key of Object.keys(instructions)) {
    if (!Array.isArray(instructions[key])) {
      target[key] = instructions[key];
      continue;
    }
    applyInstruction(target, null, instructions, key);
  }
  return target;
}
__name(map2, "map2");
var mapWithFilter;
var applyInstruction;
var nonNullish;
var pass;
var init_object_mapping = __esm({
  "../node_modules/@smithy/smithy-client/dist-es/object-mapping.js"() {
    init_functionsRoutes_0_09879299104094341();
    __name2(map2, "map");
    mapWithFilter = /* @__PURE__ */ __name2((target, filter, instructions) => {
      return map2(target, Object.entries(instructions).reduce((_instructions, [key, value]) => {
        if (Array.isArray(value)) {
          _instructions[key] = value;
        } else {
          if (typeof value === "function") {
            _instructions[key] = [filter, value()];
          } else {
            _instructions[key] = [filter, value];
          }
        }
        return _instructions;
      }, {}));
    }, "mapWithFilter");
    applyInstruction = /* @__PURE__ */ __name2((target, source, instructions, targetKey) => {
      if (source !== null) {
        let instruction = instructions[targetKey];
        if (typeof instruction === "function") {
          instruction = [, instruction];
        }
        const [filter2 = nonNullish, valueFn = pass, sourceKey = targetKey] = instruction;
        if (typeof filter2 === "function" && filter2(source[sourceKey]) || typeof filter2 !== "function" && !!filter2) {
          target[targetKey] = valueFn(source[sourceKey]);
        }
        return;
      }
      let [filter, value] = instructions[targetKey];
      if (typeof value === "function") {
        let _value;
        const defaultFilterPassed = filter === void 0 && (_value = value()) != null;
        const customFilterPassed = typeof filter === "function" && !!filter(void 0) || typeof filter !== "function" && !!filter;
        if (defaultFilterPassed) {
          target[targetKey] = _value;
        } else if (customFilterPassed) {
          target[targetKey] = value();
        }
      } else {
        const defaultFilterPassed = filter === void 0 && value != null;
        const customFilterPassed = typeof filter === "function" && !!filter(value) || typeof filter !== "function" && !!filter;
        if (defaultFilterPassed || customFilterPassed) {
          target[targetKey] = value;
        }
      }
    }, "applyInstruction");
    nonNullish = /* @__PURE__ */ __name2((_) => _ != null, "nonNullish");
    pass = /* @__PURE__ */ __name2((_) => _, "pass");
  }
});
var init_resolve_path2 = __esm({
  "../node_modules/@smithy/smithy-client/dist-es/resolve-path.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var serializeDateTime;
var init_ser_utils = __esm({
  "../node_modules/@smithy/smithy-client/dist-es/ser-utils.js"() {
    init_functionsRoutes_0_09879299104094341();
    serializeDateTime = /* @__PURE__ */ __name2((date5) => date5.toISOString().replace(".000Z", "Z"), "serializeDateTime");
  }
});
var init_serde_json = __esm({
  "../node_modules/@smithy/smithy-client/dist-es/serde-json.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_dist_es19 = __esm({
  "../node_modules/@smithy/smithy-client/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_client3();
    init_collect_stream_body2();
    init_command2();
    init_constants3();
    init_create_aggregated_client();
    init_default_error_handler();
    init_defaults_mode();
    init_emitWarningIfUnsupportedVersion2();
    init_exceptions();
    init_extended_encode_uri_component2();
    init_extensions3();
    init_get_array_if_single_item();
    init_get_value_from_text_node();
    init_is_serializable_header_value();
    init_NoOpLogger();
    init_object_mapping();
    init_resolve_path2();
    init_ser_utils();
    init_serde_json();
    init_serde2();
  }
});
var collectBodyString;
var init_common = __esm({
  "../node_modules/@aws-sdk/core/dist-es/submodules/protocols/common.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es19();
    init_dist_es6();
    collectBodyString = /* @__PURE__ */ __name2((streamBody, context) => collectBody(streamBody, context).then((body) => (context?.utf8Encoder ?? toUtf8)(body)), "collectBodyString");
  }
});
var init_parseJsonBody = __esm({
  "../node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/parseJsonBody.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_JsonShapeDeserializer = __esm({
  "../node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/JsonShapeDeserializer.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_JsonShapeSerializer = __esm({
  "../node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/JsonShapeSerializer.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_JsonCodec = __esm({
  "../node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/JsonCodec.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_AwsJsonRpcProtocol = __esm({
  "../node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/AwsJsonRpcProtocol.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_AwsJson1_0Protocol = __esm({
  "../node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/AwsJson1_0Protocol.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_AwsJson1_1Protocol = __esm({
  "../node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/AwsJson1_1Protocol.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_AwsRestJsonProtocol = __esm({
  "../node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/AwsRestJsonProtocol.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_awsExpectUnion = __esm({
  "../node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/awsExpectUnion.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
function getAllMatches(string5, regex) {
  const matches = [];
  let match2 = regex.exec(string5);
  while (match2) {
    const allmatches = [];
    allmatches.startIndex = regex.lastIndex - match2[0].length;
    const len = match2.length;
    for (let index = 0; index < len; index++) {
      allmatches.push(match2[index]);
    }
    matches.push(allmatches);
    match2 = regex.exec(string5);
  }
  return matches;
}
__name(getAllMatches, "getAllMatches");
function isExist(v2) {
  return typeof v2 !== "undefined";
}
__name(isExist, "isExist");
var nameStartChar;
var nameChar;
var nameRegexp;
var regexName;
var isName;
var init_util4 = __esm({
  "../node_modules/fast-xml-parser/src/util.js"() {
    "use strict";
    init_functionsRoutes_0_09879299104094341();
    nameStartChar = ":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    nameChar = nameStartChar + "\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    nameRegexp = "[" + nameStartChar + "][" + nameChar + "]*";
    regexName = new RegExp("^" + nameRegexp + "$");
    __name2(getAllMatches, "getAllMatches");
    isName = /* @__PURE__ */ __name2(function(string5) {
      const match2 = regexName.exec(string5);
      return !(match2 === null || typeof match2 === "undefined");
    }, "isName");
    __name2(isExist, "isExist");
  }
});
function validate(xmlData, options) {
  options = Object.assign({}, defaultOptions, options);
  const tags = [];
  let tagFound = false;
  let reachedRoot = false;
  if (xmlData[0] === "\uFEFF") {
    xmlData = xmlData.substr(1);
  }
  for (let i2 = 0; i2 < xmlData.length; i2++) {
    if (xmlData[i2] === "<" && xmlData[i2 + 1] === "?") {
      i2 += 2;
      i2 = readPI(xmlData, i2);
      if (i2.err) return i2;
    } else if (xmlData[i2] === "<") {
      let tagStartPos = i2;
      i2++;
      if (xmlData[i2] === "!") {
        i2 = readCommentAndCDATA(xmlData, i2);
        continue;
      } else {
        let closingTag = false;
        if (xmlData[i2] === "/") {
          closingTag = true;
          i2++;
        }
        let tagName = "";
        for (; i2 < xmlData.length && xmlData[i2] !== ">" && xmlData[i2] !== " " && xmlData[i2] !== "	" && xmlData[i2] !== "\n" && xmlData[i2] !== "\r"; i2++) {
          tagName += xmlData[i2];
        }
        tagName = tagName.trim();
        if (tagName[tagName.length - 1] === "/") {
          tagName = tagName.substring(0, tagName.length - 1);
          i2--;
        }
        if (!validateTagName(tagName)) {
          let msg;
          if (tagName.trim().length === 0) {
            msg = "Invalid space after '<'.";
          } else {
            msg = "Tag '" + tagName + "' is an invalid name.";
          }
          return getErrorObject("InvalidTag", msg, getLineNumberForPosition(xmlData, i2));
        }
        const result = readAttributeStr(xmlData, i2);
        if (result === false) {
          return getErrorObject("InvalidAttr", "Attributes for '" + tagName + "' have open quote.", getLineNumberForPosition(xmlData, i2));
        }
        let attrStr = result.value;
        i2 = result.index;
        if (attrStr[attrStr.length - 1] === "/") {
          const attrStrStart = i2 - attrStr.length;
          attrStr = attrStr.substring(0, attrStr.length - 1);
          const isValid = validateAttributeString(attrStr, options);
          if (isValid === true) {
            tagFound = true;
          } else {
            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));
          }
        } else if (closingTag) {
          if (!result.tagClosed) {
            return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' doesn't have proper closing.", getLineNumberForPosition(xmlData, i2));
          } else if (attrStr.trim().length > 0) {
            return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, tagStartPos));
          } else if (tags.length === 0) {
            return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' has not been opened.", getLineNumberForPosition(xmlData, tagStartPos));
          } else {
            const otg = tags.pop();
            if (tagName !== otg.tagName) {
              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);
              return getErrorObject(
                "InvalidTag",
                "Expected closing tag '" + otg.tagName + "' (opened in line " + openPos.line + ", col " + openPos.col + ") instead of closing tag '" + tagName + "'.",
                getLineNumberForPosition(xmlData, tagStartPos)
              );
            }
            if (tags.length == 0) {
              reachedRoot = true;
            }
          }
        } else {
          const isValid = validateAttributeString(attrStr, options);
          if (isValid !== true) {
            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i2 - attrStr.length + isValid.err.line));
          }
          if (reachedRoot === true) {
            return getErrorObject("InvalidXml", "Multiple possible root nodes found.", getLineNumberForPosition(xmlData, i2));
          } else if (options.unpairedTags.indexOf(tagName) !== -1) {
          } else {
            tags.push({ tagName, tagStartPos });
          }
          tagFound = true;
        }
        for (i2++; i2 < xmlData.length; i2++) {
          if (xmlData[i2] === "<") {
            if (xmlData[i2 + 1] === "!") {
              i2++;
              i2 = readCommentAndCDATA(xmlData, i2);
              continue;
            } else if (xmlData[i2 + 1] === "?") {
              i2 = readPI(xmlData, ++i2);
              if (i2.err) return i2;
            } else {
              break;
            }
          } else if (xmlData[i2] === "&") {
            const afterAmp = validateAmpersand(xmlData, i2);
            if (afterAmp == -1)
              return getErrorObject("InvalidChar", "char '&' is not expected.", getLineNumberForPosition(xmlData, i2));
            i2 = afterAmp;
          } else {
            if (reachedRoot === true && !isWhiteSpace(xmlData[i2])) {
              return getErrorObject("InvalidXml", "Extra text at the end", getLineNumberForPosition(xmlData, i2));
            }
          }
        }
        if (xmlData[i2] === "<") {
          i2--;
        }
      }
    } else {
      if (isWhiteSpace(xmlData[i2])) {
        continue;
      }
      return getErrorObject("InvalidChar", "char '" + xmlData[i2] + "' is not expected.", getLineNumberForPosition(xmlData, i2));
    }
  }
  if (!tagFound) {
    return getErrorObject("InvalidXml", "Start tag expected.", 1);
  } else if (tags.length == 1) {
    return getErrorObject("InvalidTag", "Unclosed tag '" + tags[0].tagName + "'.", getLineNumberForPosition(xmlData, tags[0].tagStartPos));
  } else if (tags.length > 0) {
    return getErrorObject("InvalidXml", "Invalid '" + JSON.stringify(tags.map((t2) => t2.tagName), null, 4).replace(/\r?\n/g, "") + "' found.", { line: 1, col: 1 });
  }
  return true;
}
__name(validate, "validate");
function isWhiteSpace(char) {
  return char === " " || char === "	" || char === "\n" || char === "\r";
}
__name(isWhiteSpace, "isWhiteSpace");
function readPI(xmlData, i2) {
  const start = i2;
  for (; i2 < xmlData.length; i2++) {
    if (xmlData[i2] == "?" || xmlData[i2] == " ") {
      const tagname = xmlData.substr(start, i2 - start);
      if (i2 > 5 && tagname === "xml") {
        return getErrorObject("InvalidXml", "XML declaration allowed only at the start of the document.", getLineNumberForPosition(xmlData, i2));
      } else if (xmlData[i2] == "?" && xmlData[i2 + 1] == ">") {
        i2++;
        break;
      } else {
        continue;
      }
    }
  }
  return i2;
}
__name(readPI, "readPI");
function readCommentAndCDATA(xmlData, i2) {
  if (xmlData.length > i2 + 5 && xmlData[i2 + 1] === "-" && xmlData[i2 + 2] === "-") {
    for (i2 += 3; i2 < xmlData.length; i2++) {
      if (xmlData[i2] === "-" && xmlData[i2 + 1] === "-" && xmlData[i2 + 2] === ">") {
        i2 += 2;
        break;
      }
    }
  } else if (xmlData.length > i2 + 8 && xmlData[i2 + 1] === "D" && xmlData[i2 + 2] === "O" && xmlData[i2 + 3] === "C" && xmlData[i2 + 4] === "T" && xmlData[i2 + 5] === "Y" && xmlData[i2 + 6] === "P" && xmlData[i2 + 7] === "E") {
    let angleBracketsCount = 1;
    for (i2 += 8; i2 < xmlData.length; i2++) {
      if (xmlData[i2] === "<") {
        angleBracketsCount++;
      } else if (xmlData[i2] === ">") {
        angleBracketsCount--;
        if (angleBracketsCount === 0) {
          break;
        }
      }
    }
  } else if (xmlData.length > i2 + 9 && xmlData[i2 + 1] === "[" && xmlData[i2 + 2] === "C" && xmlData[i2 + 3] === "D" && xmlData[i2 + 4] === "A" && xmlData[i2 + 5] === "T" && xmlData[i2 + 6] === "A" && xmlData[i2 + 7] === "[") {
    for (i2 += 8; i2 < xmlData.length; i2++) {
      if (xmlData[i2] === "]" && xmlData[i2 + 1] === "]" && xmlData[i2 + 2] === ">") {
        i2 += 2;
        break;
      }
    }
  }
  return i2;
}
__name(readCommentAndCDATA, "readCommentAndCDATA");
function readAttributeStr(xmlData, i2) {
  let attrStr = "";
  let startChar = "";
  let tagClosed = false;
  for (; i2 < xmlData.length; i2++) {
    if (xmlData[i2] === doubleQuote || xmlData[i2] === singleQuote) {
      if (startChar === "") {
        startChar = xmlData[i2];
      } else if (startChar !== xmlData[i2]) {
      } else {
        startChar = "";
      }
    } else if (xmlData[i2] === ">") {
      if (startChar === "") {
        tagClosed = true;
        break;
      }
    }
    attrStr += xmlData[i2];
  }
  if (startChar !== "") {
    return false;
  }
  return {
    value: attrStr,
    index: i2,
    tagClosed
  };
}
__name(readAttributeStr, "readAttributeStr");
function validateAttributeString(attrStr, options) {
  const matches = getAllMatches(attrStr, validAttrStrRegxp);
  const attrNames = {};
  for (let i2 = 0; i2 < matches.length; i2++) {
    if (matches[i2][1].length === 0) {
      return getErrorObject("InvalidAttr", "Attribute '" + matches[i2][2] + "' has no space in starting.", getPositionFromMatch(matches[i2]));
    } else if (matches[i2][3] !== void 0 && matches[i2][4] === void 0) {
      return getErrorObject("InvalidAttr", "Attribute '" + matches[i2][2] + "' is without value.", getPositionFromMatch(matches[i2]));
    } else if (matches[i2][3] === void 0 && !options.allowBooleanAttributes) {
      return getErrorObject("InvalidAttr", "boolean attribute '" + matches[i2][2] + "' is not allowed.", getPositionFromMatch(matches[i2]));
    }
    const attrName = matches[i2][2];
    if (!validateAttrName(attrName)) {
      return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is an invalid name.", getPositionFromMatch(matches[i2]));
    }
    if (!attrNames.hasOwnProperty(attrName)) {
      attrNames[attrName] = 1;
    } else {
      return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is repeated.", getPositionFromMatch(matches[i2]));
    }
  }
  return true;
}
__name(validateAttributeString, "validateAttributeString");
function validateNumberAmpersand(xmlData, i2) {
  let re = /\d/;
  if (xmlData[i2] === "x") {
    i2++;
    re = /[\da-fA-F]/;
  }
  for (; i2 < xmlData.length; i2++) {
    if (xmlData[i2] === ";")
      return i2;
    if (!xmlData[i2].match(re))
      break;
  }
  return -1;
}
__name(validateNumberAmpersand, "validateNumberAmpersand");
function validateAmpersand(xmlData, i2) {
  i2++;
  if (xmlData[i2] === ";")
    return -1;
  if (xmlData[i2] === "#") {
    i2++;
    return validateNumberAmpersand(xmlData, i2);
  }
  let count = 0;
  for (; i2 < xmlData.length; i2++, count++) {
    if (xmlData[i2].match(/\w/) && count < 20)
      continue;
    if (xmlData[i2] === ";")
      break;
    return -1;
  }
  return i2;
}
__name(validateAmpersand, "validateAmpersand");
function getErrorObject(code, message, lineNumber) {
  return {
    err: {
      code,
      msg: message,
      line: lineNumber.line || lineNumber,
      col: lineNumber.col
    }
  };
}
__name(getErrorObject, "getErrorObject");
function validateAttrName(attrName) {
  return isName(attrName);
}
__name(validateAttrName, "validateAttrName");
function validateTagName(tagname) {
  return isName(tagname);
}
__name(validateTagName, "validateTagName");
function getLineNumberForPosition(xmlData, index) {
  const lines = xmlData.substring(0, index).split(/\r?\n/);
  return {
    line: lines.length,
    // column number is last line's length + 1, because column numbering starts at 1:
    col: lines[lines.length - 1].length + 1
  };
}
__name(getLineNumberForPosition, "getLineNumberForPosition");
function getPositionFromMatch(match2) {
  return match2.startIndex + match2[1].length;
}
__name(getPositionFromMatch, "getPositionFromMatch");
var defaultOptions;
var doubleQuote;
var singleQuote;
var validAttrStrRegxp;
var init_validator = __esm({
  "../node_modules/fast-xml-parser/src/validator.js"() {
    "use strict";
    init_functionsRoutes_0_09879299104094341();
    init_util4();
    defaultOptions = {
      allowBooleanAttributes: false,
      //A tag can have attributes without any value
      unpairedTags: []
    };
    __name2(validate, "validate");
    __name2(isWhiteSpace, "isWhiteSpace");
    __name2(readPI, "readPI");
    __name2(readCommentAndCDATA, "readCommentAndCDATA");
    doubleQuote = '"';
    singleQuote = "'";
    __name2(readAttributeStr, "readAttributeStr");
    validAttrStrRegxp = new RegExp(`(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['"])(([\\s\\S])*?)\\5)?`, "g");
    __name2(validateAttributeString, "validateAttributeString");
    __name2(validateNumberAmpersand, "validateNumberAmpersand");
    __name2(validateAmpersand, "validateAmpersand");
    __name2(getErrorObject, "getErrorObject");
    __name2(validateAttrName, "validateAttrName");
    __name2(validateTagName, "validateTagName");
    __name2(getLineNumberForPosition, "getLineNumberForPosition");
    __name2(getPositionFromMatch, "getPositionFromMatch");
  }
});
var defaultOptions2;
var buildOptions;
var init_OptionsBuilder = __esm({
  "../node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js"() {
    init_functionsRoutes_0_09879299104094341();
    defaultOptions2 = {
      preserveOrder: false,
      attributeNamePrefix: "@_",
      attributesGroupName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      removeNSPrefix: false,
      // remove NS from tag name or attribute name if true
      allowBooleanAttributes: false,
      //a tag can have attributes without any value
      //ignoreRootElement : false,
      parseTagValue: true,
      parseAttributeValue: false,
      trimValues: true,
      //Trim string values of tag and attributes
      cdataPropName: false,
      numberParseOptions: {
        hex: true,
        leadingZeros: true,
        eNotation: true
      },
      tagValueProcessor: /* @__PURE__ */ __name2(function(tagName, val) {
        return val;
      }, "tagValueProcessor"),
      attributeValueProcessor: /* @__PURE__ */ __name2(function(attrName, val) {
        return val;
      }, "attributeValueProcessor"),
      stopNodes: [],
      //nested tags will not be parsed even for errors
      alwaysCreateTextNode: false,
      isArray: /* @__PURE__ */ __name2(() => false, "isArray"),
      commentPropName: false,
      unpairedTags: [],
      processEntities: true,
      htmlEntities: false,
      ignoreDeclaration: false,
      ignorePiTags: false,
      transformTagName: false,
      transformAttributeName: false,
      updateTag: /* @__PURE__ */ __name2(function(tagName, jPath, attrs) {
        return tagName;
      }, "updateTag"),
      // skipEmptyListItem: false
      captureMetaData: false
    };
    buildOptions = /* @__PURE__ */ __name2(function(options) {
      return Object.assign({}, defaultOptions2, options);
    }, "buildOptions");
  }
});
var METADATA_SYMBOL;
var XmlNode;
var init_xmlNode = __esm({
  "../node_modules/fast-xml-parser/src/xmlparser/xmlNode.js"() {
    "use strict";
    init_functionsRoutes_0_09879299104094341();
    if (typeof Symbol !== "function") {
      METADATA_SYMBOL = "@@xmlMetadata";
    } else {
      METADATA_SYMBOL = Symbol("XML Node Metadata");
    }
    XmlNode = class {
      static {
        __name(this, "XmlNode");
      }
      static {
        __name2(this, "XmlNode");
      }
      constructor(tagname) {
        this.tagname = tagname;
        this.child = [];
        this[":@"] = {};
      }
      add(key, val) {
        if (key === "__proto__") key = "#__proto__";
        this.child.push({ [key]: val });
      }
      addChild(node, startIndex) {
        if (node.tagname === "__proto__") node.tagname = "#__proto__";
        if (node[":@"] && Object.keys(node[":@"]).length > 0) {
          this.child.push({ [node.tagname]: node.child, [":@"]: node[":@"] });
        } else {
          this.child.push({ [node.tagname]: node.child });
        }
        if (startIndex !== void 0) {
          this.child[this.child.length - 1][METADATA_SYMBOL] = { startIndex };
        }
      }
      /** symbol used for metadata */
      static getMetaDataSymbol() {
        return METADATA_SYMBOL;
      }
    };
  }
});
function readDocType(xmlData, i2) {
  const entities = {};
  if (xmlData[i2 + 3] === "O" && xmlData[i2 + 4] === "C" && xmlData[i2 + 5] === "T" && xmlData[i2 + 6] === "Y" && xmlData[i2 + 7] === "P" && xmlData[i2 + 8] === "E") {
    i2 = i2 + 9;
    let angleBracketsCount = 1;
    let hasBody = false, comment = false;
    let exp = "";
    for (; i2 < xmlData.length; i2++) {
      if (xmlData[i2] === "<" && !comment) {
        if (hasBody && hasSeq(xmlData, "!ENTITY", i2)) {
          i2 += 7;
          let entityName, val;
          [entityName, val, i2] = readEntityExp(xmlData, i2 + 1);
          if (val.indexOf("&") === -1)
            entities[entityName] = {
              regx: RegExp(`&${entityName};`, "g"),
              val
            };
        } else if (hasBody && hasSeq(xmlData, "!ELEMENT", i2)) {
          i2 += 8;
          const { index } = readElementExp(xmlData, i2 + 1);
          i2 = index;
        } else if (hasBody && hasSeq(xmlData, "!ATTLIST", i2)) {
          i2 += 8;
        } else if (hasBody && hasSeq(xmlData, "!NOTATION", i2)) {
          i2 += 9;
          const { index } = readNotationExp(xmlData, i2 + 1);
          i2 = index;
        } else if (hasSeq(xmlData, "!--", i2)) comment = true;
        else throw new Error(`Invalid DOCTYPE`);
        angleBracketsCount++;
        exp = "";
      } else if (xmlData[i2] === ">") {
        if (comment) {
          if (xmlData[i2 - 1] === "-" && xmlData[i2 - 2] === "-") {
            comment = false;
            angleBracketsCount--;
          }
        } else {
          angleBracketsCount--;
        }
        if (angleBracketsCount === 0) {
          break;
        }
      } else if (xmlData[i2] === "[") {
        hasBody = true;
      } else {
        exp += xmlData[i2];
      }
    }
    if (angleBracketsCount !== 0) {
      throw new Error(`Unclosed DOCTYPE`);
    }
  } else {
    throw new Error(`Invalid Tag instead of DOCTYPE`);
  }
  return { entities, i: i2 };
}
__name(readDocType, "readDocType");
function readEntityExp(xmlData, i2) {
  i2 = skipWhitespace(xmlData, i2);
  let entityName = "";
  while (i2 < xmlData.length && !/\s/.test(xmlData[i2]) && xmlData[i2] !== '"' && xmlData[i2] !== "'") {
    entityName += xmlData[i2];
    i2++;
  }
  validateEntityName(entityName);
  i2 = skipWhitespace(xmlData, i2);
  if (xmlData.substring(i2, i2 + 6).toUpperCase() === "SYSTEM") {
    throw new Error("External entities are not supported");
  } else if (xmlData[i2] === "%") {
    throw new Error("Parameter entities are not supported");
  }
  let entityValue = "";
  [i2, entityValue] = readIdentifierVal(xmlData, i2, "entity");
  i2--;
  return [entityName, entityValue, i2];
}
__name(readEntityExp, "readEntityExp");
function readNotationExp(xmlData, i2) {
  i2 = skipWhitespace(xmlData, i2);
  let notationName = "";
  while (i2 < xmlData.length && !/\s/.test(xmlData[i2])) {
    notationName += xmlData[i2];
    i2++;
  }
  validateEntityName(notationName);
  i2 = skipWhitespace(xmlData, i2);
  const identifierType = xmlData.substring(i2, i2 + 6).toUpperCase();
  if (identifierType !== "SYSTEM" && identifierType !== "PUBLIC") {
    throw new Error(`Expected SYSTEM or PUBLIC, found "${identifierType}"`);
  }
  i2 += identifierType.length;
  i2 = skipWhitespace(xmlData, i2);
  let publicIdentifier = null;
  let systemIdentifier = null;
  if (identifierType === "PUBLIC") {
    [i2, publicIdentifier] = readIdentifierVal(xmlData, i2, "publicIdentifier");
    i2 = skipWhitespace(xmlData, i2);
    if (xmlData[i2] === '"' || xmlData[i2] === "'") {
      [i2, systemIdentifier] = readIdentifierVal(xmlData, i2, "systemIdentifier");
    }
  } else if (identifierType === "SYSTEM") {
    [i2, systemIdentifier] = readIdentifierVal(xmlData, i2, "systemIdentifier");
    if (!systemIdentifier) {
      throw new Error("Missing mandatory system identifier for SYSTEM notation");
    }
  }
  return { notationName, publicIdentifier, systemIdentifier, index: --i2 };
}
__name(readNotationExp, "readNotationExp");
function readIdentifierVal(xmlData, i2, type) {
  let identifierVal = "";
  const startChar = xmlData[i2];
  if (startChar !== '"' && startChar !== "'") {
    throw new Error(`Expected quoted string, found "${startChar}"`);
  }
  i2++;
  while (i2 < xmlData.length && xmlData[i2] !== startChar) {
    identifierVal += xmlData[i2];
    i2++;
  }
  if (xmlData[i2] !== startChar) {
    throw new Error(`Unterminated ${type} value`);
  }
  i2++;
  return [i2, identifierVal];
}
__name(readIdentifierVal, "readIdentifierVal");
function readElementExp(xmlData, i2) {
  i2 = skipWhitespace(xmlData, i2);
  let elementName = "";
  while (i2 < xmlData.length && !/\s/.test(xmlData[i2])) {
    elementName += xmlData[i2];
    i2++;
  }
  if (!validateEntityName(elementName)) {
    throw new Error(`Invalid element name: "${elementName}"`);
  }
  i2 = skipWhitespace(xmlData, i2);
  let contentModel = "";
  if (xmlData[i2] === "E" && hasSeq(xmlData, "MPTY", i2)) i2 += 4;
  else if (xmlData[i2] === "A" && hasSeq(xmlData, "NY", i2)) i2 += 2;
  else if (xmlData[i2] === "(") {
    i2++;
    while (i2 < xmlData.length && xmlData[i2] !== ")") {
      contentModel += xmlData[i2];
      i2++;
    }
    if (xmlData[i2] !== ")") {
      throw new Error("Unterminated content model");
    }
  } else {
    throw new Error(`Invalid Element Expression, found "${xmlData[i2]}"`);
  }
  return {
    elementName,
    contentModel: contentModel.trim(),
    index: i2
  };
}
__name(readElementExp, "readElementExp");
function hasSeq(data, seq, i2) {
  for (let j2 = 0; j2 < seq.length; j2++) {
    if (seq[j2] !== data[i2 + j2 + 1]) return false;
  }
  return true;
}
__name(hasSeq, "hasSeq");
function validateEntityName(name) {
  if (isName(name))
    return name;
  else
    throw new Error(`Invalid entity name ${name}`);
}
__name(validateEntityName, "validateEntityName");
var skipWhitespace;
var init_DocTypeReader = __esm({
  "../node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_util4();
    __name2(readDocType, "readDocType");
    skipWhitespace = /* @__PURE__ */ __name2((data, index) => {
      while (index < data.length && /\s/.test(data[index])) {
        index++;
      }
      return index;
    }, "skipWhitespace");
    __name2(readEntityExp, "readEntityExp");
    __name2(readNotationExp, "readNotationExp");
    __name2(readIdentifierVal, "readIdentifierVal");
    __name2(readElementExp, "readElementExp");
    __name2(hasSeq, "hasSeq");
    __name2(validateEntityName, "validateEntityName");
  }
});
function toNumber(str, options = {}) {
  options = Object.assign({}, consider, options);
  if (!str || typeof str !== "string") return str;
  let trimmedStr = str.trim();
  if (options.skipLike !== void 0 && options.skipLike.test(trimmedStr)) return str;
  else if (str === "0") return 0;
  else if (options.hex && hexRegex.test(trimmedStr)) {
    return parse_int(trimmedStr, 16);
  } else if (trimmedStr.search(/.+[eE].+/) !== -1) {
    return resolveEnotation(str, trimmedStr, options);
  } else {
    const match2 = numRegex.exec(trimmedStr);
    if (match2) {
      const sign = match2[1] || "";
      const leadingZeros = match2[2];
      let numTrimmedByZeros = trimZeros(match2[3]);
      const decimalAdjacentToLeadingZeros = sign ? (
        // 0., -00., 000.
        str[leadingZeros.length + 1] === "."
      ) : str[leadingZeros.length] === ".";
      if (!options.leadingZeros && (leadingZeros.length > 1 || leadingZeros.length === 1 && !decimalAdjacentToLeadingZeros)) {
        return str;
      } else {
        const num = Number(trimmedStr);
        const parsedStr = String(num);
        if (num === 0) return num;
        if (parsedStr.search(/[eE]/) !== -1) {
          if (options.eNotation) return num;
          else return str;
        } else if (trimmedStr.indexOf(".") !== -1) {
          if (parsedStr === "0") return num;
          else if (parsedStr === numTrimmedByZeros) return num;
          else if (parsedStr === `${sign}${numTrimmedByZeros}`) return num;
          else return str;
        }
        let n2 = leadingZeros ? numTrimmedByZeros : trimmedStr;
        if (leadingZeros) {
          return n2 === parsedStr || sign + n2 === parsedStr ? num : str;
        } else {
          return n2 === parsedStr || n2 === sign + parsedStr ? num : str;
        }
      }
    } else {
      return str;
    }
  }
}
__name(toNumber, "toNumber");
function resolveEnotation(str, trimmedStr, options) {
  if (!options.eNotation) return str;
  const notation = trimmedStr.match(eNotationRegx);
  if (notation) {
    let sign = notation[1] || "";
    const eChar = notation[3].indexOf("e") === -1 ? "E" : "e";
    const leadingZeros = notation[2];
    const eAdjacentToLeadingZeros = sign ? (
      // 0E.
      str[leadingZeros.length + 1] === eChar
    ) : str[leadingZeros.length] === eChar;
    if (leadingZeros.length > 1 && eAdjacentToLeadingZeros) return str;
    else if (leadingZeros.length === 1 && (notation[3].startsWith(`.${eChar}`) || notation[3][0] === eChar)) {
      return Number(trimmedStr);
    } else if (options.leadingZeros && !eAdjacentToLeadingZeros) {
      trimmedStr = (notation[1] || "") + notation[3];
      return Number(trimmedStr);
    } else return str;
  } else {
    return str;
  }
}
__name(resolveEnotation, "resolveEnotation");
function trimZeros(numStr) {
  if (numStr && numStr.indexOf(".") !== -1) {
    numStr = numStr.replace(/0+$/, "");
    if (numStr === ".") numStr = "0";
    else if (numStr[0] === ".") numStr = "0" + numStr;
    else if (numStr[numStr.length - 1] === ".") numStr = numStr.substring(0, numStr.length - 1);
    return numStr;
  }
  return numStr;
}
__name(trimZeros, "trimZeros");
function parse_int(numStr, base) {
  if (parseInt) return parseInt(numStr, base);
  else if (Number.parseInt) return Number.parseInt(numStr, base);
  else if (window && window.parseInt) return window.parseInt(numStr, base);
  else throw new Error("parseInt, Number.parseInt, window.parseInt are not supported");
}
__name(parse_int, "parse_int");
var hexRegex;
var numRegex;
var consider;
var eNotationRegx;
var init_strnum = __esm({
  "../node_modules/strnum/strnum.js"() {
    init_functionsRoutes_0_09879299104094341();
    hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;
    numRegex = /^([\-\+])?(0*)([0-9]*(\.[0-9]*)?)$/;
    consider = {
      hex: true,
      // oct: false,
      leadingZeros: true,
      decimalPoint: ".",
      eNotation: true
      //skipLike: /regex/
    };
    __name2(toNumber, "toNumber");
    eNotationRegx = /^([-+])?(0*)(\d*(\.\d*)?[eE][-\+]?\d+)$/;
    __name2(resolveEnotation, "resolveEnotation");
    __name2(trimZeros, "trimZeros");
    __name2(parse_int, "parse_int");
  }
});
function getIgnoreAttributesFn(ignoreAttributes) {
  if (typeof ignoreAttributes === "function") {
    return ignoreAttributes;
  }
  if (Array.isArray(ignoreAttributes)) {
    return (attrName) => {
      for (const pattern of ignoreAttributes) {
        if (typeof pattern === "string" && attrName === pattern) {
          return true;
        }
        if (pattern instanceof RegExp && pattern.test(attrName)) {
          return true;
        }
      }
    };
  }
  return () => false;
}
__name(getIgnoreAttributesFn, "getIgnoreAttributesFn");
var init_ignoreAttributes = __esm({
  "../node_modules/fast-xml-parser/src/ignoreAttributes.js"() {
    init_functionsRoutes_0_09879299104094341();
    __name2(getIgnoreAttributesFn, "getIgnoreAttributesFn");
  }
});
function addExternalEntities(externalEntities) {
  const entKeys = Object.keys(externalEntities);
  for (let i2 = 0; i2 < entKeys.length; i2++) {
    const ent = entKeys[i2];
    this.lastEntities[ent] = {
      regex: new RegExp("&" + ent + ";", "g"),
      val: externalEntities[ent]
    };
  }
}
__name(addExternalEntities, "addExternalEntities");
function parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {
  if (val !== void 0) {
    if (this.options.trimValues && !dontTrim) {
      val = val.trim();
    }
    if (val.length > 0) {
      if (!escapeEntities) val = this.replaceEntitiesValue(val);
      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);
      if (newval === null || newval === void 0) {
        return val;
      } else if (typeof newval !== typeof val || newval !== val) {
        return newval;
      } else if (this.options.trimValues) {
        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);
      } else {
        const trimmedVal = val.trim();
        if (trimmedVal === val) {
          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);
        } else {
          return val;
        }
      }
    }
  }
}
__name(parseTextData, "parseTextData");
function resolveNameSpace(tagname) {
  if (this.options.removeNSPrefix) {
    const tags = tagname.split(":");
    const prefix = tagname.charAt(0) === "/" ? "/" : "";
    if (tags[0] === "xmlns") {
      return "";
    }
    if (tags.length === 2) {
      tagname = prefix + tags[1];
    }
  }
  return tagname;
}
__name(resolveNameSpace, "resolveNameSpace");
function buildAttributesMap(attrStr, jPath, tagName) {
  if (this.options.ignoreAttributes !== true && typeof attrStr === "string") {
    const matches = getAllMatches(attrStr, attrsRegx);
    const len = matches.length;
    const attrs = {};
    for (let i2 = 0; i2 < len; i2++) {
      const attrName = this.resolveNameSpace(matches[i2][1]);
      if (this.ignoreAttributesFn(attrName, jPath)) {
        continue;
      }
      let oldVal = matches[i2][4];
      let aName = this.options.attributeNamePrefix + attrName;
      if (attrName.length) {
        if (this.options.transformAttributeName) {
          aName = this.options.transformAttributeName(aName);
        }
        if (aName === "__proto__") aName = "#__proto__";
        if (oldVal !== void 0) {
          if (this.options.trimValues) {
            oldVal = oldVal.trim();
          }
          oldVal = this.replaceEntitiesValue(oldVal);
          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);
          if (newVal === null || newVal === void 0) {
            attrs[aName] = oldVal;
          } else if (typeof newVal !== typeof oldVal || newVal !== oldVal) {
            attrs[aName] = newVal;
          } else {
            attrs[aName] = parseValue(
              oldVal,
              this.options.parseAttributeValue,
              this.options.numberParseOptions
            );
          }
        } else if (this.options.allowBooleanAttributes) {
          attrs[aName] = true;
        }
      }
    }
    if (!Object.keys(attrs).length) {
      return;
    }
    if (this.options.attributesGroupName) {
      const attrCollection = {};
      attrCollection[this.options.attributesGroupName] = attrs;
      return attrCollection;
    }
    return attrs;
  }
}
__name(buildAttributesMap, "buildAttributesMap");
function addChild(currentNode, childNode, jPath, startIndex) {
  if (!this.options.captureMetaData) startIndex = void 0;
  const result = this.options.updateTag(childNode.tagname, jPath, childNode[":@"]);
  if (result === false) {
  } else if (typeof result === "string") {
    childNode.tagname = result;
    currentNode.addChild(childNode, startIndex);
  } else {
    currentNode.addChild(childNode, startIndex);
  }
}
__name(addChild, "addChild");
function saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {
  if (textData) {
    if (isLeafNode === void 0) isLeafNode = currentNode.child.length === 0;
    textData = this.parseTextData(
      textData,
      currentNode.tagname,
      jPath,
      false,
      currentNode[":@"] ? Object.keys(currentNode[":@"]).length !== 0 : false,
      isLeafNode
    );
    if (textData !== void 0 && textData !== "")
      currentNode.add(this.options.textNodeName, textData);
    textData = "";
  }
  return textData;
}
__name(saveTextToParentTag, "saveTextToParentTag");
function isItStopNode(stopNodes, jPath, currentTagName) {
  const allNodesExp = "*." + currentTagName;
  for (const stopNodePath in stopNodes) {
    const stopNodeExp = stopNodes[stopNodePath];
    if (allNodesExp === stopNodeExp || jPath === stopNodeExp) return true;
  }
  return false;
}
__name(isItStopNode, "isItStopNode");
function tagExpWithClosingIndex(xmlData, i2, closingChar = ">") {
  let attrBoundary;
  let tagExp = "";
  for (let index = i2; index < xmlData.length; index++) {
    let ch2 = xmlData[index];
    if (attrBoundary) {
      if (ch2 === attrBoundary) attrBoundary = "";
    } else if (ch2 === '"' || ch2 === "'") {
      attrBoundary = ch2;
    } else if (ch2 === closingChar[0]) {
      if (closingChar[1]) {
        if (xmlData[index + 1] === closingChar[1]) {
          return {
            data: tagExp,
            index
          };
        }
      } else {
        return {
          data: tagExp,
          index
        };
      }
    } else if (ch2 === "	") {
      ch2 = " ";
    }
    tagExp += ch2;
  }
}
__name(tagExpWithClosingIndex, "tagExpWithClosingIndex");
function findClosingIndex(xmlData, str, i2, errMsg) {
  const closingIndex = xmlData.indexOf(str, i2);
  if (closingIndex === -1) {
    throw new Error(errMsg);
  } else {
    return closingIndex + str.length - 1;
  }
}
__name(findClosingIndex, "findClosingIndex");
function readTagExp(xmlData, i2, removeNSPrefix, closingChar = ">") {
  const result = tagExpWithClosingIndex(xmlData, i2 + 1, closingChar);
  if (!result) return;
  let tagExp = result.data;
  const closeIndex = result.index;
  const separatorIndex = tagExp.search(/\s/);
  let tagName = tagExp;
  let attrExpPresent = true;
  if (separatorIndex !== -1) {
    tagName = tagExp.substring(0, separatorIndex);
    tagExp = tagExp.substring(separatorIndex + 1).trimStart();
  }
  const rawTagName = tagName;
  if (removeNSPrefix) {
    const colonIndex = tagName.indexOf(":");
    if (colonIndex !== -1) {
      tagName = tagName.substr(colonIndex + 1);
      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);
    }
  }
  return {
    tagName,
    tagExp,
    closeIndex,
    attrExpPresent,
    rawTagName
  };
}
__name(readTagExp, "readTagExp");
function readStopNodeData(xmlData, tagName, i2) {
  const startIndex = i2;
  let openTagCount = 1;
  for (; i2 < xmlData.length; i2++) {
    if (xmlData[i2] === "<") {
      if (xmlData[i2 + 1] === "/") {
        const closeIndex = findClosingIndex(xmlData, ">", i2, `${tagName} is not closed`);
        let closeTagName = xmlData.substring(i2 + 2, closeIndex).trim();
        if (closeTagName === tagName) {
          openTagCount--;
          if (openTagCount === 0) {
            return {
              tagContent: xmlData.substring(startIndex, i2),
              i: closeIndex
            };
          }
        }
        i2 = closeIndex;
      } else if (xmlData[i2 + 1] === "?") {
        const closeIndex = findClosingIndex(xmlData, "?>", i2 + 1, "StopNode is not closed.");
        i2 = closeIndex;
      } else if (xmlData.substr(i2 + 1, 3) === "!--") {
        const closeIndex = findClosingIndex(xmlData, "-->", i2 + 3, "StopNode is not closed.");
        i2 = closeIndex;
      } else if (xmlData.substr(i2 + 1, 2) === "![") {
        const closeIndex = findClosingIndex(xmlData, "]]>", i2, "StopNode is not closed.") - 2;
        i2 = closeIndex;
      } else {
        const tagData = readTagExp(xmlData, i2, ">");
        if (tagData) {
          const openTagName = tagData && tagData.tagName;
          if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length - 1] !== "/") {
            openTagCount++;
          }
          i2 = tagData.closeIndex;
        }
      }
    }
  }
}
__name(readStopNodeData, "readStopNodeData");
function parseValue(val, shouldParse, options) {
  if (shouldParse && typeof val === "string") {
    const newval = val.trim();
    if (newval === "true") return true;
    else if (newval === "false") return false;
    else return toNumber(val, options);
  } else {
    if (isExist(val)) {
      return val;
    } else {
      return "";
    }
  }
}
__name(parseValue, "parseValue");
var OrderedObjParser;
var attrsRegx;
var parseXml;
var replaceEntitiesValue;
var init_OrderedObjParser = __esm({
  "../node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js"() {
    "use strict";
    init_functionsRoutes_0_09879299104094341();
    init_util4();
    init_xmlNode();
    init_DocTypeReader();
    init_strnum();
    init_ignoreAttributes();
    OrderedObjParser = class {
      static {
        __name(this, "OrderedObjParser");
      }
      static {
        __name2(this, "OrderedObjParser");
      }
      constructor(options) {
        this.options = options;
        this.currentNode = null;
        this.tagsNodeStack = [];
        this.docTypeEntities = {};
        this.lastEntities = {
          "apos": { regex: /&(apos|#39|#x27);/g, val: "'" },
          "gt": { regex: /&(gt|#62|#x3E);/g, val: ">" },
          "lt": { regex: /&(lt|#60|#x3C);/g, val: "<" },
          "quot": { regex: /&(quot|#34|#x22);/g, val: '"' }
        };
        this.ampEntity = { regex: /&(amp|#38|#x26);/g, val: "&" };
        this.htmlEntities = {
          "space": { regex: /&(nbsp|#160);/g, val: " " },
          // "lt" : { regex: /&(lt|#60);/g, val: "<" },
          // "gt" : { regex: /&(gt|#62);/g, val: ">" },
          // "amp" : { regex: /&(amp|#38);/g, val: "&" },
          // "quot" : { regex: /&(quot|#34);/g, val: "\"" },
          // "apos" : { regex: /&(apos|#39);/g, val: "'" },
          "cent": { regex: /&(cent|#162);/g, val: "\xA2" },
          "pound": { regex: /&(pound|#163);/g, val: "\xA3" },
          "yen": { regex: /&(yen|#165);/g, val: "\xA5" },
          "euro": { regex: /&(euro|#8364);/g, val: "\u20AC" },
          "copyright": { regex: /&(copy|#169);/g, val: "\xA9" },
          "reg": { regex: /&(reg|#174);/g, val: "\xAE" },
          "inr": { regex: /&(inr|#8377);/g, val: "\u20B9" },
          "num_dec": { regex: /&#([0-9]{1,7});/g, val: /* @__PURE__ */ __name2((_, str) => String.fromCodePoint(Number.parseInt(str, 10)), "val") },
          "num_hex": { regex: /&#x([0-9a-fA-F]{1,6});/g, val: /* @__PURE__ */ __name2((_, str) => String.fromCodePoint(Number.parseInt(str, 16)), "val") }
        };
        this.addExternalEntities = addExternalEntities;
        this.parseXml = parseXml;
        this.parseTextData = parseTextData;
        this.resolveNameSpace = resolveNameSpace;
        this.buildAttributesMap = buildAttributesMap;
        this.isItStopNode = isItStopNode;
        this.replaceEntitiesValue = replaceEntitiesValue;
        this.readStopNodeData = readStopNodeData;
        this.saveTextToParentTag = saveTextToParentTag;
        this.addChild = addChild;
        this.ignoreAttributesFn = getIgnoreAttributesFn(this.options.ignoreAttributes);
      }
    };
    __name2(addExternalEntities, "addExternalEntities");
    __name2(parseTextData, "parseTextData");
    __name2(resolveNameSpace, "resolveNameSpace");
    attrsRegx = new RegExp(`([^\\s=]+)\\s*(=\\s*(['"])([\\s\\S]*?)\\3)?`, "gm");
    __name2(buildAttributesMap, "buildAttributesMap");
    parseXml = /* @__PURE__ */ __name2(function(xmlData) {
      xmlData = xmlData.replace(/\r\n?/g, "\n");
      const xmlObj = new XmlNode("!xml");
      let currentNode = xmlObj;
      let textData = "";
      let jPath = "";
      for (let i2 = 0; i2 < xmlData.length; i2++) {
        const ch2 = xmlData[i2];
        if (ch2 === "<") {
          if (xmlData[i2 + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i2, "Closing Tag is not closed.");
            let tagName = xmlData.substring(i2 + 2, closeIndex).trim();
            if (this.options.removeNSPrefix) {
              const colonIndex = tagName.indexOf(":");
              if (colonIndex !== -1) {
                tagName = tagName.substr(colonIndex + 1);
              }
            }
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode) {
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
            }
            const lastTagName = jPath.substring(jPath.lastIndexOf(".") + 1);
            if (tagName && this.options.unpairedTags.indexOf(tagName) !== -1) {
              throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);
            }
            let propIndex = 0;
            if (lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1) {
              propIndex = jPath.lastIndexOf(".", jPath.lastIndexOf(".") - 1);
              this.tagsNodeStack.pop();
            } else {
              propIndex = jPath.lastIndexOf(".");
            }
            jPath = jPath.substring(0, propIndex);
            currentNode = this.tagsNodeStack.pop();
            textData = "";
            i2 = closeIndex;
          } else if (xmlData[i2 + 1] === "?") {
            let tagData = readTagExp(xmlData, i2, false, "?>");
            if (!tagData) throw new Error("Pi Tag is not closed.");
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            if (this.options.ignoreDeclaration && tagData.tagName === "?xml" || this.options.ignorePiTags) {
            } else {
              const childNode = new XmlNode(tagData.tagName);
              childNode.add(this.options.textNodeName, "");
              if (tagData.tagName !== tagData.tagExp && tagData.attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);
              }
              this.addChild(currentNode, childNode, jPath, i2);
            }
            i2 = tagData.closeIndex + 1;
          } else if (xmlData.substr(i2 + 1, 3) === "!--") {
            const endIndex = findClosingIndex(xmlData, "-->", i2 + 4, "Comment is not closed.");
            if (this.options.commentPropName) {
              const comment = xmlData.substring(i2 + 4, endIndex - 2);
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
              currentNode.add(this.options.commentPropName, [{ [this.options.textNodeName]: comment }]);
            }
            i2 = endIndex;
          } else if (xmlData.substr(i2 + 1, 2) === "!D") {
            const result = readDocType(xmlData, i2);
            this.docTypeEntities = result.entities;
            i2 = result.i;
          } else if (xmlData.substr(i2 + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i2, "CDATA is not closed.") - 2;
            const tagExp = xmlData.substring(i2 + 9, closeIndex);
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true, true);
            if (val == void 0) val = "";
            if (this.options.cdataPropName) {
              currentNode.add(this.options.cdataPropName, [{ [this.options.textNodeName]: tagExp }]);
            } else {
              currentNode.add(this.options.textNodeName, val);
            }
            i2 = closeIndex + 2;
          } else {
            let result = readTagExp(xmlData, i2, this.options.removeNSPrefix);
            let tagName = result.tagName;
            const rawTagName = result.rawTagName;
            let tagExp = result.tagExp;
            let attrExpPresent = result.attrExpPresent;
            let closeIndex = result.closeIndex;
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode && textData) {
              if (currentNode.tagname !== "!xml") {
                textData = this.saveTextToParentTag(textData, currentNode, jPath, false);
              }
            }
            const lastTag = currentNode;
            if (lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1) {
              currentNode = this.tagsNodeStack.pop();
              jPath = jPath.substring(0, jPath.lastIndexOf("."));
            }
            if (tagName !== xmlObj.tagname) {
              jPath += jPath ? "." + tagName : tagName;
            }
            const startIndex = i2;
            if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {
              let tagContent = "";
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                if (tagName[tagName.length - 1] === "/") {
                  tagName = tagName.substr(0, tagName.length - 1);
                  jPath = jPath.substr(0, jPath.length - 1);
                  tagExp = tagName;
                } else {
                  tagExp = tagExp.substr(0, tagExp.length - 1);
                }
                i2 = result.closeIndex;
              } else if (this.options.unpairedTags.indexOf(tagName) !== -1) {
                i2 = result.closeIndex;
              } else {
                const result2 = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);
                if (!result2) throw new Error(`Unexpected end of ${rawTagName}`);
                i2 = result2.i;
                tagContent = result2.tagContent;
              }
              const childNode = new XmlNode(tagName);
              if (tagName !== tagExp && attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
              }
              if (tagContent) {
                tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);
              }
              jPath = jPath.substr(0, jPath.lastIndexOf("."));
              childNode.add(this.options.textNodeName, tagContent);
              this.addChild(currentNode, childNode, jPath, startIndex);
            } else {
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                if (tagName[tagName.length - 1] === "/") {
                  tagName = tagName.substr(0, tagName.length - 1);
                  jPath = jPath.substr(0, jPath.length - 1);
                  tagExp = tagName;
                } else {
                  tagExp = tagExp.substr(0, tagExp.length - 1);
                }
                if (this.options.transformTagName) {
                  tagName = this.options.transformTagName(tagName);
                }
                const childNode = new XmlNode(tagName);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
                }
                this.addChild(currentNode, childNode, jPath, startIndex);
                jPath = jPath.substr(0, jPath.lastIndexOf("."));
              } else {
                const childNode = new XmlNode(tagName);
                this.tagsNodeStack.push(currentNode);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
                }
                this.addChild(currentNode, childNode, jPath, startIndex);
                currentNode = childNode;
              }
              textData = "";
              i2 = closeIndex;
            }
          }
        } else {
          textData += xmlData[i2];
        }
      }
      return xmlObj.child;
    }, "parseXml");
    __name2(addChild, "addChild");
    replaceEntitiesValue = /* @__PURE__ */ __name2(function(val) {
      if (this.options.processEntities) {
        for (let entityName in this.docTypeEntities) {
          const entity = this.docTypeEntities[entityName];
          val = val.replace(entity.regx, entity.val);
        }
        for (let entityName in this.lastEntities) {
          const entity = this.lastEntities[entityName];
          val = val.replace(entity.regex, entity.val);
        }
        if (this.options.htmlEntities) {
          for (let entityName in this.htmlEntities) {
            const entity = this.htmlEntities[entityName];
            val = val.replace(entity.regex, entity.val);
          }
        }
        val = val.replace(this.ampEntity.regex, this.ampEntity.val);
      }
      return val;
    }, "replaceEntitiesValue");
    __name2(saveTextToParentTag, "saveTextToParentTag");
    __name2(isItStopNode, "isItStopNode");
    __name2(tagExpWithClosingIndex, "tagExpWithClosingIndex");
    __name2(findClosingIndex, "findClosingIndex");
    __name2(readTagExp, "readTagExp");
    __name2(readStopNodeData, "readStopNodeData");
    __name2(parseValue, "parseValue");
  }
});
function prettify(node, options) {
  return compress(node, options);
}
__name(prettify, "prettify");
function compress(arr, options, jPath) {
  let text;
  const compressedObj = {};
  for (let i2 = 0; i2 < arr.length; i2++) {
    const tagObj = arr[i2];
    const property = propName(tagObj);
    let newJpath = "";
    if (jPath === void 0) newJpath = property;
    else newJpath = jPath + "." + property;
    if (property === options.textNodeName) {
      if (text === void 0) text = tagObj[property];
      else text += "" + tagObj[property];
    } else if (property === void 0) {
      continue;
    } else if (tagObj[property]) {
      let val = compress(tagObj[property], options, newJpath);
      const isLeaf = isLeafTag(val, options);
      if (tagObj[METADATA_SYMBOL2] !== void 0) {
        val[METADATA_SYMBOL2] = tagObj[METADATA_SYMBOL2];
      }
      if (tagObj[":@"]) {
        assignAttributes(val, tagObj[":@"], newJpath, options);
      } else if (Object.keys(val).length === 1 && val[options.textNodeName] !== void 0 && !options.alwaysCreateTextNode) {
        val = val[options.textNodeName];
      } else if (Object.keys(val).length === 0) {
        if (options.alwaysCreateTextNode) val[options.textNodeName] = "";
        else val = "";
      }
      if (compressedObj[property] !== void 0 && compressedObj.hasOwnProperty(property)) {
        if (!Array.isArray(compressedObj[property])) {
          compressedObj[property] = [compressedObj[property]];
        }
        compressedObj[property].push(val);
      } else {
        if (options.isArray(property, newJpath, isLeaf)) {
          compressedObj[property] = [val];
        } else {
          compressedObj[property] = val;
        }
      }
    }
  }
  if (typeof text === "string") {
    if (text.length > 0) compressedObj[options.textNodeName] = text;
  } else if (text !== void 0) compressedObj[options.textNodeName] = text;
  return compressedObj;
}
__name(compress, "compress");
function propName(obj) {
  const keys = Object.keys(obj);
  for (let i2 = 0; i2 < keys.length; i2++) {
    const key = keys[i2];
    if (key !== ":@") return key;
  }
}
__name(propName, "propName");
function assignAttributes(obj, attrMap, jpath, options) {
  if (attrMap) {
    const keys = Object.keys(attrMap);
    const len = keys.length;
    for (let i2 = 0; i2 < len; i2++) {
      const atrrName = keys[i2];
      if (options.isArray(atrrName, jpath + "." + atrrName, true, true)) {
        obj[atrrName] = [attrMap[atrrName]];
      } else {
        obj[atrrName] = attrMap[atrrName];
      }
    }
  }
}
__name(assignAttributes, "assignAttributes");
function isLeafTag(obj, options) {
  const { textNodeName } = options;
  const propCount = Object.keys(obj).length;
  if (propCount === 0) {
    return true;
  }
  if (propCount === 1 && (obj[textNodeName] || typeof obj[textNodeName] === "boolean" || obj[textNodeName] === 0)) {
    return true;
  }
  return false;
}
__name(isLeafTag, "isLeafTag");
var METADATA_SYMBOL2;
var init_node2json = __esm({
  "../node_modules/fast-xml-parser/src/xmlparser/node2json.js"() {
    "use strict";
    init_functionsRoutes_0_09879299104094341();
    init_xmlNode();
    METADATA_SYMBOL2 = XmlNode.getMetaDataSymbol();
    __name2(prettify, "prettify");
    __name2(compress, "compress");
    __name2(propName, "propName");
    __name2(assignAttributes, "assignAttributes");
    __name2(isLeafTag, "isLeafTag");
  }
});
var XMLParser;
var init_XMLParser = __esm({
  "../node_modules/fast-xml-parser/src/xmlparser/XMLParser.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_OptionsBuilder();
    init_OrderedObjParser();
    init_node2json();
    init_validator();
    init_xmlNode();
    XMLParser = class {
      static {
        __name(this, "XMLParser");
      }
      static {
        __name2(this, "XMLParser");
      }
      constructor(options) {
        this.externalEntities = {};
        this.options = buildOptions(options);
      }
      /**
       * Parse XML dats to JS object 
       * @param {string|Buffer} xmlData 
       * @param {boolean|Object} validationOption 
       */
      parse(xmlData, validationOption) {
        if (typeof xmlData === "string") {
        } else if (xmlData.toString) {
          xmlData = xmlData.toString();
        } else {
          throw new Error("XML data is accepted in String or Bytes[] form.");
        }
        if (validationOption) {
          if (validationOption === true) validationOption = {};
          const result = validate(xmlData, validationOption);
          if (result !== true) {
            throw Error(`${result.err.msg}:${result.err.line}:${result.err.col}`);
          }
        }
        const orderedObjParser = new OrderedObjParser(this.options);
        orderedObjParser.addExternalEntities(this.externalEntities);
        const orderedResult = orderedObjParser.parseXml(xmlData);
        if (this.options.preserveOrder || orderedResult === void 0) return orderedResult;
        else return prettify(orderedResult, this.options);
      }
      /**
       * Add Entity which is not by default supported by this library
       * @param {string} key 
       * @param {string} value 
       */
      addEntity(key, value) {
        if (value.indexOf("&") !== -1) {
          throw new Error("Entity value can't have '&'");
        } else if (key.indexOf("&") !== -1 || key.indexOf(";") !== -1) {
          throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");
        } else if (value === "&") {
          throw new Error("An entity with value '&' is not permitted");
        } else {
          this.externalEntities[key] = value;
        }
      }
      /**
       * Returns a Symbol that can be used to access the metadata
       * property on a node.
       * 
       * If Symbol is not available in the environment, an ordinary property is used
       * and the name of the property is here returned.
       * 
       * The XMLMetaData property is only present when `captureMetaData`
       * is true in the options.
       */
      static getMetaDataSymbol() {
        return XmlNode.getMetaDataSymbol();
      }
    };
  }
});
var init_fxp = __esm({
  "../node_modules/fast-xml-parser/src/fxp.js"() {
    "use strict";
    init_functionsRoutes_0_09879299104094341();
    init_XMLParser();
  }
});
var init_XmlShapeDeserializer = __esm({
  "../node_modules/@aws-sdk/core/dist-es/submodules/protocols/xml/XmlShapeDeserializer.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_AwsQueryProtocol = __esm({
  "../node_modules/@aws-sdk/core/dist-es/submodules/protocols/query/AwsQueryProtocol.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_AwsEc2QueryProtocol = __esm({
  "../node_modules/@aws-sdk/core/dist-es/submodules/protocols/query/AwsEc2QueryProtocol.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var parseXmlBody;
var parseXmlErrorBody;
var loadRestXmlErrorCode;
var init_parseXmlBody = __esm({
  "../node_modules/@aws-sdk/core/dist-es/submodules/protocols/xml/parseXmlBody.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es19();
    init_fxp();
    init_common();
    parseXmlBody = /* @__PURE__ */ __name2((streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        const parser = new XMLParser({
          attributeNamePrefix: "",
          htmlEntities: true,
          ignoreAttributes: false,
          ignoreDeclaration: true,
          parseTagValue: false,
          trimValues: false,
          tagValueProcessor: /* @__PURE__ */ __name2((_, val) => val.trim() === "" && val.includes("\n") ? "" : void 0, "tagValueProcessor")
        });
        parser.addEntity("#xD", "\r");
        parser.addEntity("#10", "\n");
        let parsedObj;
        try {
          parsedObj = parser.parse(encoded, true);
        } catch (e2) {
          if (e2 && typeof e2 === "object") {
            Object.defineProperty(e2, "$responseBodyText", {
              value: encoded
            });
          }
          throw e2;
        }
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
          parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
          delete parsedObjToReturn[textNodeName];
        }
        return getValueFromTextNode(parsedObjToReturn);
      }
      return {};
    }), "parseXmlBody");
    parseXmlErrorBody = /* @__PURE__ */ __name2(async (errorBody, context) => {
      const value = await parseXmlBody(errorBody, context);
      if (value.Error) {
        value.Error.message = value.Error.message ?? value.Error.Message;
      }
      return value;
    }, "parseXmlErrorBody");
    loadRestXmlErrorCode = /* @__PURE__ */ __name2((output, data) => {
      if (data?.Error?.Code !== void 0) {
        return data.Error.Code;
      }
      if (data?.Code !== void 0) {
        return data.Code;
      }
      if (output.statusCode == 404) {
        return "NotFound";
      }
    }, "loadRestXmlErrorCode");
  }
});
function escapeAttribute(value) {
  return value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
}
__name(escapeAttribute, "escapeAttribute");
var init_escape_attribute = __esm({
  "../node_modules/@aws-sdk/xml-builder/dist-es/escape-attribute.js"() {
    init_functionsRoutes_0_09879299104094341();
    __name2(escapeAttribute, "escapeAttribute");
  }
});
function escapeElement(value) {
  return value.replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&apos;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\r/g, "&#x0D;").replace(/\n/g, "&#x0A;").replace(/\u0085/g, "&#x85;").replace(/\u2028/, "&#x2028;");
}
__name(escapeElement, "escapeElement");
var init_escape_element = __esm({
  "../node_modules/@aws-sdk/xml-builder/dist-es/escape-element.js"() {
    init_functionsRoutes_0_09879299104094341();
    __name2(escapeElement, "escapeElement");
  }
});
var XmlText;
var init_XmlText = __esm({
  "../node_modules/@aws-sdk/xml-builder/dist-es/XmlText.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_escape_element();
    XmlText = class {
      static {
        __name(this, "XmlText");
      }
      static {
        __name2(this, "XmlText");
      }
      value;
      constructor(value) {
        this.value = value;
      }
      toString() {
        return escapeElement("" + this.value);
      }
    };
  }
});
var XmlNode2;
var init_XmlNode = __esm({
  "../node_modules/@aws-sdk/xml-builder/dist-es/XmlNode.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_escape_attribute();
    init_XmlText();
    XmlNode2 = class _XmlNode {
      static {
        __name(this, "_XmlNode");
      }
      static {
        __name2(this, "XmlNode");
      }
      name;
      children;
      attributes = {};
      static of(name, childText, withName) {
        const node = new _XmlNode(name);
        if (childText !== void 0) {
          node.addChildNode(new XmlText(childText));
        }
        if (withName !== void 0) {
          node.withName(withName);
        }
        return node;
      }
      constructor(name, children = []) {
        this.name = name;
        this.children = children;
      }
      withName(name) {
        this.name = name;
        return this;
      }
      addAttribute(name, value) {
        this.attributes[name] = value;
        return this;
      }
      addChildNode(child) {
        this.children.push(child);
        return this;
      }
      removeAttribute(name) {
        delete this.attributes[name];
        return this;
      }
      n(name) {
        this.name = name;
        return this;
      }
      c(child) {
        this.children.push(child);
        return this;
      }
      a(name, value) {
        if (value != null) {
          this.attributes[name] = value;
        }
        return this;
      }
      cc(input, field, withName = field) {
        if (input[field] != null) {
          const node = _XmlNode.of(field, input[field]).withName(withName);
          this.c(node);
        }
      }
      l(input, listName, memberName, valueProvider) {
        if (input[listName] != null) {
          const nodes = valueProvider();
          nodes.map((node) => {
            node.withName(memberName);
            this.c(node);
          });
        }
      }
      lc(input, listName, memberName, valueProvider) {
        if (input[listName] != null) {
          const nodes = valueProvider();
          const containerNode = new _XmlNode(memberName);
          nodes.map((node) => {
            containerNode.c(node);
          });
          this.c(containerNode);
        }
      }
      toString() {
        const hasChildren = Boolean(this.children.length);
        let xmlText = `<${this.name}`;
        const attributes = this.attributes;
        for (const attributeName of Object.keys(attributes)) {
          const attribute = attributes[attributeName];
          if (attribute != null) {
            xmlText += ` ${attributeName}="${escapeAttribute("" + attribute)}"`;
          }
        }
        return xmlText += !hasChildren ? "/>" : `>${this.children.map((c2) => c2.toString()).join("")}</${this.name}>`;
      }
    };
  }
});
var init_dist_es20 = __esm({
  "../node_modules/@aws-sdk/xml-builder/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_XmlNode();
    init_XmlText();
  }
});
var init_XmlShapeSerializer = __esm({
  "../node_modules/@aws-sdk/core/dist-es/submodules/protocols/xml/XmlShapeSerializer.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_XmlCodec = __esm({
  "../node_modules/@aws-sdk/core/dist-es/submodules/protocols/xml/XmlCodec.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_AwsRestXmlProtocol = __esm({
  "../node_modules/@aws-sdk/core/dist-es/submodules/protocols/xml/AwsRestXmlProtocol.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_protocols2 = __esm({
  "../node_modules/@aws-sdk/core/dist-es/submodules/protocols/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_AwsSmithyRpcV2CborProtocol();
    init_coercing_serializers();
    init_AwsJson1_0Protocol();
    init_AwsJson1_1Protocol();
    init_AwsJsonRpcProtocol();
    init_AwsRestJsonProtocol();
    init_JsonCodec();
    init_JsonShapeDeserializer();
    init_JsonShapeSerializer();
    init_awsExpectUnion();
    init_parseJsonBody();
    init_AwsEc2QueryProtocol();
    init_AwsQueryProtocol();
    init_AwsRestXmlProtocol();
    init_XmlCodec();
    init_XmlShapeDeserializer();
    init_XmlShapeSerializer();
    init_parseXmlBody();
  }
});
var init_dist_es21 = __esm({
  "../node_modules/@aws-sdk/core/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_client2();
    init_httpAuthSchemes2();
    init_protocols2();
  }
});
var CLIENT_SUPPORTED_ALGORITHMS;
var PRIORITY_ORDER_ALGORITHMS;
var init_types2 = __esm({
  "../node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/types.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_constants();
    CLIENT_SUPPORTED_ALGORITHMS = [
      ChecksumAlgorithm.CRC32,
      ChecksumAlgorithm.CRC32C,
      ChecksumAlgorithm.CRC64NVME,
      ChecksumAlgorithm.SHA1,
      ChecksumAlgorithm.SHA256
    ];
    PRIORITY_ORDER_ALGORITHMS = [
      ChecksumAlgorithm.SHA256,
      ChecksumAlgorithm.SHA1,
      ChecksumAlgorithm.CRC32,
      ChecksumAlgorithm.CRC32C,
      ChecksumAlgorithm.CRC64NVME
    ];
  }
});
var getChecksumAlgorithmForRequest;
var init_getChecksumAlgorithmForRequest = __esm({
  "../node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksumAlgorithmForRequest.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_constants();
    init_types2();
    getChecksumAlgorithmForRequest = /* @__PURE__ */ __name2((input, { requestChecksumRequired, requestAlgorithmMember, requestChecksumCalculation }) => {
      if (!requestAlgorithmMember) {
        return requestChecksumCalculation === RequestChecksumCalculation.WHEN_SUPPORTED || requestChecksumRequired ? DEFAULT_CHECKSUM_ALGORITHM : void 0;
      }
      if (!input[requestAlgorithmMember]) {
        return void 0;
      }
      const checksumAlgorithm = input[requestAlgorithmMember];
      if (!CLIENT_SUPPORTED_ALGORITHMS.includes(checksumAlgorithm)) {
        throw new Error(`The checksum algorithm "${checksumAlgorithm}" is not supported by the client. Select one of ${CLIENT_SUPPORTED_ALGORITHMS}.`);
      }
      return checksumAlgorithm;
    }, "getChecksumAlgorithmForRequest");
  }
});
var getChecksumLocationName;
var init_getChecksumLocationName = __esm({
  "../node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksumLocationName.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_constants();
    getChecksumLocationName = /* @__PURE__ */ __name2((algorithm) => algorithm === ChecksumAlgorithm.MD5 ? "content-md5" : `x-amz-checksum-${algorithm.toLowerCase()}`, "getChecksumLocationName");
  }
});
var hasHeader2;
var init_hasHeader = __esm({
  "../node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/hasHeader.js"() {
    init_functionsRoutes_0_09879299104094341();
    hasHeader2 = /* @__PURE__ */ __name2((header, headers) => {
      const soughtHeader = header.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return true;
        }
      }
      return false;
    }, "hasHeader");
  }
});
var hasHeaderWithPrefix;
var init_hasHeaderWithPrefix = __esm({
  "../node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/hasHeaderWithPrefix.js"() {
    init_functionsRoutes_0_09879299104094341();
    hasHeaderWithPrefix = /* @__PURE__ */ __name2((headerPrefix, headers) => {
      const soughtHeaderPrefix = headerPrefix.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (headerName.toLowerCase().startsWith(soughtHeaderPrefix)) {
          return true;
        }
      }
      return false;
    }, "hasHeaderWithPrefix");
  }
});
var isStreaming;
var init_isStreaming = __esm({
  "../node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/isStreaming.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es15();
    isStreaming = /* @__PURE__ */ __name2((body) => body !== void 0 && typeof body !== "string" && !ArrayBuffer.isView(body) && !isArrayBuffer(body), "isStreaming");
  }
});
function __awaiter(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  __name(adopt, "adopt");
  __name2(adopt, "adopt");
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e2) {
        reject(e2);
      }
    }
    __name(fulfilled, "fulfilled");
    __name2(fulfilled, "fulfilled");
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e2) {
        reject(e2);
      }
    }
    __name(rejected, "rejected");
    __name2(rejected, "rejected");
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    __name(step, "step");
    __name2(step, "step");
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
__name(__awaiter, "__awaiter");
function __generator(thisArg, body) {
  var _ = { label: 0, sent: /* @__PURE__ */ __name2(function() {
    if (t2[0] & 1) throw t2[1];
    return t2[1];
  }, "sent"), trys: [], ops: [] }, f2, y2, t2, g2 = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
  return g2.next = verb(0), g2["throw"] = verb(1), g2["return"] = verb(2), typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
    return this;
  }), g2;
  function verb(n2) {
    return function(v2) {
      return step([n2, v2]);
    };
  }
  __name(verb, "verb");
  __name2(verb, "verb");
  function step(op) {
    if (f2) throw new TypeError("Generator is already executing.");
    while (g2 && (g2 = 0, op[0] && (_ = 0)), _) try {
      if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done) return t2;
      if (y2 = 0, t2) op = [op[0] & 2, t2.value];
      switch (op[0]) {
        case 0:
        case 1:
          t2 = op;
          break;
        case 4:
          _.label++;
          return { value: op[1], done: false };
        case 5:
          _.label++;
          y2 = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t2[1]) {
            _.label = t2[1];
            t2 = op;
            break;
          }
          if (t2 && _.label < t2[2]) {
            _.label = t2[2];
            _.ops.push(op);
            break;
          }
          if (t2[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e2) {
      op = [6, e2];
      y2 = 0;
    } finally {
      f2 = t2 = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
  __name(step, "step");
  __name2(step, "step");
}
__name(__generator, "__generator");
function __values(o2) {
  var s2 = typeof Symbol === "function" && Symbol.iterator, m2 = s2 && o2[s2], i2 = 0;
  if (m2) return m2.call(o2);
  if (o2 && typeof o2.length === "number") return {
    next: /* @__PURE__ */ __name2(function() {
      if (o2 && i2 >= o2.length) o2 = void 0;
      return { value: o2 && o2[i2++], done: !o2 };
    }, "next")
  };
  throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
__name(__values, "__values");
var init_tslib_es6 = __esm({
  "../node_modules/tslib/tslib.es6.mjs"() {
    init_functionsRoutes_0_09879299104094341();
    __name2(__awaiter, "__awaiter");
    __name2(__generator, "__generator");
    __name2(__values, "__values");
  }
});
var fromUtf82;
var init_fromUtf8_browser2 = __esm({
  "../node_modules/@aws-crypto/util/node_modules/@smithy/util-utf8/dist-es/fromUtf8.browser.js"() {
    init_functionsRoutes_0_09879299104094341();
    fromUtf82 = /* @__PURE__ */ __name2((input) => new TextEncoder().encode(input), "fromUtf8");
  }
});
var init_toUint8Array2 = __esm({
  "../node_modules/@aws-crypto/util/node_modules/@smithy/util-utf8/dist-es/toUint8Array.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_fromUtf8_browser2();
  }
});
var init_toUtf8_browser2 = __esm({
  "../node_modules/@aws-crypto/util/node_modules/@smithy/util-utf8/dist-es/toUtf8.browser.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_dist_es22 = __esm({
  "../node_modules/@aws-crypto/util/node_modules/@smithy/util-utf8/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_fromUtf8_browser2();
    init_toUint8Array2();
    init_toUtf8_browser2();
  }
});
function convertToBuffer(data) {
  if (data instanceof Uint8Array)
    return data;
  if (typeof data === "string") {
    return fromUtf83(data);
  }
  if (ArrayBuffer.isView(data)) {
    return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
  }
  return new Uint8Array(data);
}
__name(convertToBuffer, "convertToBuffer");
var fromUtf83;
var init_convertToBuffer = __esm({
  "../node_modules/@aws-crypto/util/build/module/convertToBuffer.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es22();
    fromUtf83 = typeof Buffer !== "undefined" && Buffer.from ? function(input) {
      return Buffer.from(input, "utf8");
    } : fromUtf82;
    __name2(convertToBuffer, "convertToBuffer");
  }
});
function isEmptyData(data) {
  if (typeof data === "string") {
    return data.length === 0;
  }
  return data.byteLength === 0;
}
__name(isEmptyData, "isEmptyData");
var init_isEmptyData = __esm({
  "../node_modules/@aws-crypto/util/build/module/isEmptyData.js"() {
    init_functionsRoutes_0_09879299104094341();
    __name2(isEmptyData, "isEmptyData");
  }
});
function numToUint8(num) {
  return new Uint8Array([
    (num & 4278190080) >> 24,
    (num & 16711680) >> 16,
    (num & 65280) >> 8,
    num & 255
  ]);
}
__name(numToUint8, "numToUint8");
var init_numToUint8 = __esm({
  "../node_modules/@aws-crypto/util/build/module/numToUint8.js"() {
    init_functionsRoutes_0_09879299104094341();
    __name2(numToUint8, "numToUint8");
  }
});
function uint32ArrayFrom(a_lookUpTable2) {
  if (!Uint32Array.from) {
    var return_array = new Uint32Array(a_lookUpTable2.length);
    var a_index = 0;
    while (a_index < a_lookUpTable2.length) {
      return_array[a_index] = a_lookUpTable2[a_index];
      a_index += 1;
    }
    return return_array;
  }
  return Uint32Array.from(a_lookUpTable2);
}
__name(uint32ArrayFrom, "uint32ArrayFrom");
var init_uint32ArrayFrom = __esm({
  "../node_modules/@aws-crypto/util/build/module/uint32ArrayFrom.js"() {
    init_functionsRoutes_0_09879299104094341();
    __name2(uint32ArrayFrom, "uint32ArrayFrom");
  }
});
var init_module = __esm({
  "../node_modules/@aws-crypto/util/build/module/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_convertToBuffer();
    init_isEmptyData();
    init_numToUint8();
    init_uint32ArrayFrom();
  }
});
var AwsCrc32c;
var init_aws_crc32c = __esm({
  "../node_modules/@aws-crypto/crc32c/build/module/aws_crc32c.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_tslib_es6();
    init_module();
    init_module2();
    AwsCrc32c = /** @class */
    function() {
      function AwsCrc32c2() {
        this.crc32c = new Crc32c();
      }
      __name(AwsCrc32c2, "AwsCrc32c2");
      __name2(AwsCrc32c2, "AwsCrc32c");
      AwsCrc32c2.prototype.update = function(toHash) {
        if (isEmptyData(toHash))
          return;
        this.crc32c.update(convertToBuffer(toHash));
      };
      AwsCrc32c2.prototype.digest = function() {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(_a2) {
            return [2, numToUint8(this.crc32c.digest())];
          });
        });
      };
      AwsCrc32c2.prototype.reset = function() {
        this.crc32c = new Crc32c();
      };
      return AwsCrc32c2;
    }();
  }
});
var Crc32c;
var a_lookupTable;
var lookupTable;
var init_module2 = __esm({
  "../node_modules/@aws-crypto/crc32c/build/module/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_tslib_es6();
    init_module();
    init_aws_crc32c();
    Crc32c = /** @class */
    function() {
      function Crc32c2() {
        this.checksum = 4294967295;
      }
      __name(Crc32c2, "Crc32c2");
      __name2(Crc32c2, "Crc32c");
      Crc32c2.prototype.update = function(data) {
        var e_1, _a2;
        try {
          for (var data_1 = __values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
            var byte = data_1_1.value;
            this.checksum = this.checksum >>> 8 ^ lookupTable[(this.checksum ^ byte) & 255];
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (data_1_1 && !data_1_1.done && (_a2 = data_1.return)) _a2.call(data_1);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
        return this;
      };
      Crc32c2.prototype.digest = function() {
        return (this.checksum ^ 4294967295) >>> 0;
      };
      return Crc32c2;
    }();
    a_lookupTable = [
      0,
      4067132163,
      3778769143,
      324072436,
      3348797215,
      904991772,
      648144872,
      3570033899,
      2329499855,
      2024987596,
      1809983544,
      2575936315,
      1296289744,
      3207089363,
      2893594407,
      1578318884,
      274646895,
      3795141740,
      4049975192,
      51262619,
      3619967088,
      632279923,
      922689671,
      3298075524,
      2592579488,
      1760304291,
      2075979607,
      2312596564,
      1562183871,
      2943781820,
      3156637768,
      1313733451,
      549293790,
      3537243613,
      3246849577,
      871202090,
      3878099393,
      357341890,
      102525238,
      4101499445,
      2858735121,
      1477399826,
      1264559846,
      3107202533,
      1845379342,
      2677391885,
      2361733625,
      2125378298,
      820201905,
      3263744690,
      3520608582,
      598981189,
      4151959214,
      85089709,
      373468761,
      3827903834,
      3124367742,
      1213305469,
      1526817161,
      2842354314,
      2107672161,
      2412447074,
      2627466902,
      1861252501,
      1098587580,
      3004210879,
      2688576843,
      1378610760,
      2262928035,
      1955203488,
      1742404180,
      2511436119,
      3416409459,
      969524848,
      714683780,
      3639785095,
      205050476,
      4266873199,
      3976438427,
      526918040,
      1361435347,
      2739821008,
      2954799652,
      1114974503,
      2529119692,
      1691668175,
      2005155131,
      2247081528,
      3690758684,
      697762079,
      986182379,
      3366744552,
      476452099,
      3993867776,
      4250756596,
      255256311,
      1640403810,
      2477592673,
      2164122517,
      1922457750,
      2791048317,
      1412925310,
      1197962378,
      3037525897,
      3944729517,
      427051182,
      170179418,
      4165941337,
      746937522,
      3740196785,
      3451792453,
      1070968646,
      1905808397,
      2213795598,
      2426610938,
      1657317369,
      3053634322,
      1147748369,
      1463399397,
      2773627110,
      4215344322,
      153784257,
      444234805,
      3893493558,
      1021025245,
      3467647198,
      3722505002,
      797665321,
      2197175160,
      1889384571,
      1674398607,
      2443626636,
      1164749927,
      3070701412,
      2757221520,
      1446797203,
      137323447,
      4198817972,
      3910406976,
      461344835,
      3484808360,
      1037989803,
      781091935,
      3705997148,
      2460548119,
      1623424788,
      1939049696,
      2180517859,
      1429367560,
      2807687179,
      3020495871,
      1180866812,
      410100952,
      3927582683,
      4182430767,
      186734380,
      3756733383,
      763408580,
      1053836080,
      3434856499,
      2722870694,
      1344288421,
      1131464017,
      2971354706,
      1708204729,
      2545590714,
      2229949006,
      1988219213,
      680717673,
      3673779818,
      3383336350,
      1002577565,
      4010310262,
      493091189,
      238226049,
      4233660802,
      2987750089,
      1082061258,
      1395524158,
      2705686845,
      1972364758,
      2279892693,
      2494862625,
      1725896226,
      952904198,
      3399985413,
      3656866545,
      731699698,
      4283874585,
      222117402,
      510512622,
      3959836397,
      3280807620,
      837199303,
      582374963,
      3504198960,
      68661723,
      4135334616,
      3844915500,
      390545967,
      1230274059,
      3141532936,
      2825850620,
      1510247935,
      2395924756,
      2091215383,
      1878366691,
      2644384480,
      3553878443,
      565732008,
      854102364,
      3229815391,
      340358836,
      3861050807,
      4117890627,
      119113024,
      1493875044,
      2875275879,
      3090270611,
      1247431312,
      2660249211,
      1828433272,
      2141937292,
      2378227087,
      3811616794,
      291187481,
      34330861,
      4032846830,
      615137029,
      3603020806,
      3314634738,
      939183345,
      1776939221,
      2609017814,
      2295496738,
      2058945313,
      2926798794,
      1545135305,
      1330124605,
      3173225534,
      4084100981,
      17165430,
      307568514,
      3762199681,
      888469610,
      3332340585,
      3587147933,
      665062302,
      2042050490,
      2346497209,
      2559330125,
      1793573966,
      3190661285,
      1279665062,
      1595330642,
      2910671697
    ];
    lookupTable = uint32ArrayFrom(a_lookupTable);
  }
});
var AwsCrc32;
var init_aws_crc32 = __esm({
  "../node_modules/@aws-crypto/crc32/build/module/aws_crc32.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_tslib_es6();
    init_module();
    init_module3();
    AwsCrc32 = /** @class */
    function() {
      function AwsCrc322() {
        this.crc32 = new Crc32();
      }
      __name(AwsCrc322, "AwsCrc322");
      __name2(AwsCrc322, "AwsCrc32");
      AwsCrc322.prototype.update = function(toHash) {
        if (isEmptyData(toHash))
          return;
        this.crc32.update(convertToBuffer(toHash));
      };
      AwsCrc322.prototype.digest = function() {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(_a2) {
            return [2, numToUint8(this.crc32.digest())];
          });
        });
      };
      AwsCrc322.prototype.reset = function() {
        this.crc32 = new Crc32();
      };
      return AwsCrc322;
    }();
  }
});
var Crc32;
var a_lookUpTable;
var lookupTable2;
var init_module3 = __esm({
  "../node_modules/@aws-crypto/crc32/build/module/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_tslib_es6();
    init_module();
    init_aws_crc32();
    Crc32 = /** @class */
    function() {
      function Crc322() {
        this.checksum = 4294967295;
      }
      __name(Crc322, "Crc322");
      __name2(Crc322, "Crc32");
      Crc322.prototype.update = function(data) {
        var e_1, _a2;
        try {
          for (var data_1 = __values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
            var byte = data_1_1.value;
            this.checksum = this.checksum >>> 8 ^ lookupTable2[(this.checksum ^ byte) & 255];
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (data_1_1 && !data_1_1.done && (_a2 = data_1.return)) _a2.call(data_1);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
        return this;
      };
      Crc322.prototype.digest = function() {
        return (this.checksum ^ 4294967295) >>> 0;
      };
      return Crc322;
    }();
    a_lookUpTable = [
      0,
      1996959894,
      3993919788,
      2567524794,
      124634137,
      1886057615,
      3915621685,
      2657392035,
      249268274,
      2044508324,
      3772115230,
      2547177864,
      162941995,
      2125561021,
      3887607047,
      2428444049,
      498536548,
      1789927666,
      4089016648,
      2227061214,
      450548861,
      1843258603,
      4107580753,
      2211677639,
      325883990,
      1684777152,
      4251122042,
      2321926636,
      335633487,
      1661365465,
      4195302755,
      2366115317,
      997073096,
      1281953886,
      3579855332,
      2724688242,
      1006888145,
      1258607687,
      3524101629,
      2768942443,
      901097722,
      1119000684,
      3686517206,
      2898065728,
      853044451,
      1172266101,
      3705015759,
      2882616665,
      651767980,
      1373503546,
      3369554304,
      3218104598,
      565507253,
      1454621731,
      3485111705,
      3099436303,
      671266974,
      1594198024,
      3322730930,
      2970347812,
      795835527,
      1483230225,
      3244367275,
      3060149565,
      1994146192,
      31158534,
      2563907772,
      4023717930,
      1907459465,
      112637215,
      2680153253,
      3904427059,
      2013776290,
      251722036,
      2517215374,
      3775830040,
      2137656763,
      141376813,
      2439277719,
      3865271297,
      1802195444,
      476864866,
      2238001368,
      4066508878,
      1812370925,
      453092731,
      2181625025,
      4111451223,
      1706088902,
      314042704,
      2344532202,
      4240017532,
      1658658271,
      366619977,
      2362670323,
      4224994405,
      1303535960,
      984961486,
      2747007092,
      3569037538,
      1256170817,
      1037604311,
      2765210733,
      3554079995,
      1131014506,
      879679996,
      2909243462,
      3663771856,
      1141124467,
      855842277,
      2852801631,
      3708648649,
      1342533948,
      654459306,
      3188396048,
      3373015174,
      1466479909,
      544179635,
      3110523913,
      3462522015,
      1591671054,
      702138776,
      2966460450,
      3352799412,
      1504918807,
      783551873,
      3082640443,
      3233442989,
      3988292384,
      2596254646,
      62317068,
      1957810842,
      3939845945,
      2647816111,
      81470997,
      1943803523,
      3814918930,
      2489596804,
      225274430,
      2053790376,
      3826175755,
      2466906013,
      167816743,
      2097651377,
      4027552580,
      2265490386,
      503444072,
      1762050814,
      4150417245,
      2154129355,
      426522225,
      1852507879,
      4275313526,
      2312317920,
      282753626,
      1742555852,
      4189708143,
      2394877945,
      397917763,
      1622183637,
      3604390888,
      2714866558,
      953729732,
      1340076626,
      3518719985,
      2797360999,
      1068828381,
      1219638859,
      3624741850,
      2936675148,
      906185462,
      1090812512,
      3747672003,
      2825379669,
      829329135,
      1181335161,
      3412177804,
      3160834842,
      628085408,
      1382605366,
      3423369109,
      3138078467,
      570562233,
      1426400815,
      3317316542,
      2998733608,
      733239954,
      1555261956,
      3268935591,
      3050360625,
      752459403,
      1541320221,
      2607071920,
      3965973030,
      1969922972,
      40735498,
      2617837225,
      3943577151,
      1913087877,
      83908371,
      2512341634,
      3803740692,
      2075208622,
      213261112,
      2463272603,
      3855990285,
      2094854071,
      198958881,
      2262029012,
      4057260610,
      1759359992,
      534414190,
      2176718541,
      4139329115,
      1873836001,
      414664567,
      2282248934,
      4279200368,
      1711684554,
      285281116,
      2405801727,
      4167216745,
      1634467795,
      376229701,
      2685067896,
      3608007406,
      1308918612,
      956543938,
      2808555105,
      3495958263,
      1231636301,
      1047427035,
      2932959818,
      3654703836,
      1088359270,
      936918e3,
      2847714899,
      3736837829,
      1202900863,
      817233897,
      3183342108,
      3401237130,
      1404277552,
      615818150,
      3134207493,
      3453421203,
      1423857449,
      601450431,
      3009837614,
      3294710456,
      1567103746,
      711928724,
      3020668471,
      3272380065,
      1510334235,
      755167117
    ];
    lookupTable2 = uint32ArrayFrom(a_lookUpTable);
  }
});
var getCrc32ChecksumAlgorithmFunction;
var init_getCrc32ChecksumAlgorithmFunction_browser = __esm({
  "../node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getCrc32ChecksumAlgorithmFunction.browser.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_module3();
    getCrc32ChecksumAlgorithmFunction = /* @__PURE__ */ __name2(() => AwsCrc32, "getCrc32ChecksumAlgorithmFunction");
  }
});
var selectChecksumAlgorithmFunction;
var init_selectChecksumAlgorithmFunction = __esm({
  "../node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/selectChecksumAlgorithmFunction.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_module2();
    init_constants();
    init_crc64_nvme_crt_container();
    init_getCrc32ChecksumAlgorithmFunction_browser();
    selectChecksumAlgorithmFunction = /* @__PURE__ */ __name2((checksumAlgorithm, config2) => {
      switch (checksumAlgorithm) {
        case ChecksumAlgorithm.MD5:
          return config2.md5;
        case ChecksumAlgorithm.CRC32:
          return getCrc32ChecksumAlgorithmFunction();
        case ChecksumAlgorithm.CRC32C:
          return AwsCrc32c;
        case ChecksumAlgorithm.CRC64NVME:
          if (typeof crc64NvmeCrtContainer.CrtCrc64Nvme !== "function") {
            throw new Error(`Please check whether you have installed the "@aws-sdk/crc64-nvme-crt" package explicitly. 
You must also register the package by calling [require("@aws-sdk/crc64-nvme-crt");] or an ESM equivalent such as [import "@aws-sdk/crc64-nvme-crt";]. 
For more information please go to https://github.com/aws/aws-sdk-js-v3#functionality-requiring-aws-common-runtime-crt`);
          }
          return crc64NvmeCrtContainer.CrtCrc64Nvme;
        case ChecksumAlgorithm.SHA1:
          return config2.sha1;
        case ChecksumAlgorithm.SHA256:
          return config2.sha256;
        default:
          throw new Error(`Unsupported checksum algorithm: ${checksumAlgorithm}`);
      }
    }, "selectChecksumAlgorithmFunction");
  }
});
var stringHasher;
var init_stringHasher = __esm({
  "../node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/stringHasher.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es6();
    stringHasher = /* @__PURE__ */ __name2((checksumAlgorithmFn, body) => {
      const hash2 = new checksumAlgorithmFn();
      hash2.update(toUint8Array(body || ""));
      return hash2.digest();
    }, "stringHasher");
  }
});
var flexibleChecksumsMiddlewareOptions;
var flexibleChecksumsMiddleware;
var init_flexibleChecksumsMiddleware = __esm({
  "../node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/flexibleChecksumsMiddleware.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es21();
    init_dist_es2();
    init_dist_es12();
    init_constants();
    init_getChecksumAlgorithmForRequest();
    init_getChecksumLocationName();
    init_hasHeader();
    init_hasHeaderWithPrefix();
    init_isStreaming();
    init_selectChecksumAlgorithmFunction();
    init_stringHasher();
    flexibleChecksumsMiddlewareOptions = {
      name: "flexibleChecksumsMiddleware",
      step: "build",
      tags: ["BODY_CHECKSUM"],
      override: true
    };
    flexibleChecksumsMiddleware = /* @__PURE__ */ __name2((config2, middlewareConfig) => (next, context) => async (args) => {
      if (!HttpRequest.isInstance(args.request)) {
        return next(args);
      }
      if (hasHeaderWithPrefix("x-amz-checksum-", args.request.headers)) {
        return next(args);
      }
      const { request, input } = args;
      const { body: requestBody, headers } = request;
      const { base64Encoder, streamHasher } = config2;
      const { requestChecksumRequired, requestAlgorithmMember } = middlewareConfig;
      const requestChecksumCalculation = await config2.requestChecksumCalculation();
      const requestAlgorithmMemberName = requestAlgorithmMember?.name;
      const requestAlgorithmMemberHttpHeader = requestAlgorithmMember?.httpHeader;
      if (requestAlgorithmMemberName && !input[requestAlgorithmMemberName]) {
        if (requestChecksumCalculation === RequestChecksumCalculation.WHEN_SUPPORTED || requestChecksumRequired) {
          input[requestAlgorithmMemberName] = DEFAULT_CHECKSUM_ALGORITHM;
          if (requestAlgorithmMemberHttpHeader) {
            headers[requestAlgorithmMemberHttpHeader] = DEFAULT_CHECKSUM_ALGORITHM;
          }
        }
      }
      const checksumAlgorithm = getChecksumAlgorithmForRequest(input, {
        requestChecksumRequired,
        requestAlgorithmMember: requestAlgorithmMember?.name,
        requestChecksumCalculation
      });
      let updatedBody = requestBody;
      let updatedHeaders = headers;
      if (checksumAlgorithm) {
        switch (checksumAlgorithm) {
          case ChecksumAlgorithm.CRC32:
            setFeature(context, "FLEXIBLE_CHECKSUMS_REQ_CRC32", "U");
            break;
          case ChecksumAlgorithm.CRC32C:
            setFeature(context, "FLEXIBLE_CHECKSUMS_REQ_CRC32C", "V");
            break;
          case ChecksumAlgorithm.CRC64NVME:
            setFeature(context, "FLEXIBLE_CHECKSUMS_REQ_CRC64", "W");
            break;
          case ChecksumAlgorithm.SHA1:
            setFeature(context, "FLEXIBLE_CHECKSUMS_REQ_SHA1", "X");
            break;
          case ChecksumAlgorithm.SHA256:
            setFeature(context, "FLEXIBLE_CHECKSUMS_REQ_SHA256", "Y");
            break;
        }
        const checksumLocationName = getChecksumLocationName(checksumAlgorithm);
        const checksumAlgorithmFn = selectChecksumAlgorithmFunction(checksumAlgorithm, config2);
        if (isStreaming(requestBody)) {
          const { getAwsChunkedEncodingStream: getAwsChunkedEncodingStream2, bodyLengthChecker } = config2;
          updatedBody = getAwsChunkedEncodingStream2(typeof config2.requestStreamBufferSize === "number" && config2.requestStreamBufferSize >= 8 * 1024 ? createBufferedReadable(requestBody, config2.requestStreamBufferSize, context.logger) : requestBody, {
            base64Encoder,
            bodyLengthChecker,
            checksumLocationName,
            checksumAlgorithmFn,
            streamHasher
          });
          updatedHeaders = {
            ...headers,
            "content-encoding": headers["content-encoding"] ? `${headers["content-encoding"]},aws-chunked` : "aws-chunked",
            "transfer-encoding": "chunked",
            "x-amz-decoded-content-length": headers["content-length"],
            "x-amz-content-sha256": "STREAMING-UNSIGNED-PAYLOAD-TRAILER",
            "x-amz-trailer": checksumLocationName
          };
          delete updatedHeaders["content-length"];
        } else if (!hasHeader2(checksumLocationName, headers)) {
          const rawChecksum = await stringHasher(checksumAlgorithmFn, requestBody);
          updatedHeaders = {
            ...headers,
            [checksumLocationName]: base64Encoder(rawChecksum)
          };
        }
      }
      const result = await next({
        ...args,
        request: {
          ...request,
          headers: updatedHeaders,
          body: updatedBody
        }
      });
      return result;
    }, "flexibleChecksumsMiddleware");
  }
});
var flexibleChecksumsInputMiddlewareOptions;
var flexibleChecksumsInputMiddleware;
var init_flexibleChecksumsInputMiddleware = __esm({
  "../node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/flexibleChecksumsInputMiddleware.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es21();
    init_constants();
    flexibleChecksumsInputMiddlewareOptions = {
      name: "flexibleChecksumsInputMiddleware",
      toMiddleware: "serializerMiddleware",
      relation: "before",
      tags: ["BODY_CHECKSUM"],
      override: true
    };
    flexibleChecksumsInputMiddleware = /* @__PURE__ */ __name2((config2, middlewareConfig) => (next, context) => async (args) => {
      const input = args.input;
      const { requestValidationModeMember } = middlewareConfig;
      const requestChecksumCalculation = await config2.requestChecksumCalculation();
      const responseChecksumValidation = await config2.responseChecksumValidation();
      switch (requestChecksumCalculation) {
        case RequestChecksumCalculation.WHEN_REQUIRED:
          setFeature(context, "FLEXIBLE_CHECKSUMS_REQ_WHEN_REQUIRED", "a");
          break;
        case RequestChecksumCalculation.WHEN_SUPPORTED:
          setFeature(context, "FLEXIBLE_CHECKSUMS_REQ_WHEN_SUPPORTED", "Z");
          break;
      }
      switch (responseChecksumValidation) {
        case ResponseChecksumValidation.WHEN_REQUIRED:
          setFeature(context, "FLEXIBLE_CHECKSUMS_RES_WHEN_REQUIRED", "c");
          break;
        case ResponseChecksumValidation.WHEN_SUPPORTED:
          setFeature(context, "FLEXIBLE_CHECKSUMS_RES_WHEN_SUPPORTED", "b");
          break;
      }
      if (requestValidationModeMember && !input[requestValidationModeMember]) {
        if (responseChecksumValidation === ResponseChecksumValidation.WHEN_SUPPORTED) {
          input[requestValidationModeMember] = "ENABLED";
        }
      }
      return next(args);
    }, "flexibleChecksumsInputMiddleware");
  }
});
var getChecksumAlgorithmListForResponse;
var init_getChecksumAlgorithmListForResponse = __esm({
  "../node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksumAlgorithmListForResponse.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_types2();
    getChecksumAlgorithmListForResponse = /* @__PURE__ */ __name2((responseAlgorithms = []) => {
      const validChecksumAlgorithms = [];
      for (const algorithm of PRIORITY_ORDER_ALGORITHMS) {
        if (!responseAlgorithms.includes(algorithm) || !CLIENT_SUPPORTED_ALGORITHMS.includes(algorithm)) {
          continue;
        }
        validChecksumAlgorithms.push(algorithm);
      }
      return validChecksumAlgorithms;
    }, "getChecksumAlgorithmListForResponse");
  }
});
var isChecksumWithPartNumber;
var init_isChecksumWithPartNumber = __esm({
  "../node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/isChecksumWithPartNumber.js"() {
    init_functionsRoutes_0_09879299104094341();
    isChecksumWithPartNumber = /* @__PURE__ */ __name2((checksum) => {
      const lastHyphenIndex = checksum.lastIndexOf("-");
      if (lastHyphenIndex !== -1) {
        const numberPart = checksum.slice(lastHyphenIndex + 1);
        if (!numberPart.startsWith("0")) {
          const number4 = parseInt(numberPart, 10);
          if (!isNaN(number4) && number4 >= 1 && number4 <= 1e4) {
            return true;
          }
        }
      }
      return false;
    }, "isChecksumWithPartNumber");
  }
});
var getChecksum;
var init_getChecksum = __esm({
  "../node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksum.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_stringHasher();
    getChecksum = /* @__PURE__ */ __name2(async (body, { checksumAlgorithmFn, base64Encoder }) => base64Encoder(await stringHasher(checksumAlgorithmFn, body)), "getChecksum");
  }
});
var validateChecksumFromResponse;
var init_validateChecksumFromResponse = __esm({
  "../node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/validateChecksumFromResponse.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es12();
    init_constants();
    init_getChecksum();
    init_getChecksumAlgorithmListForResponse();
    init_getChecksumLocationName();
    init_isStreaming();
    init_selectChecksumAlgorithmFunction();
    validateChecksumFromResponse = /* @__PURE__ */ __name2(async (response, { config: config2, responseAlgorithms, logger: logger2 }) => {
      const checksumAlgorithms = getChecksumAlgorithmListForResponse(responseAlgorithms);
      const { body: responseBody, headers: responseHeaders } = response;
      for (const algorithm of checksumAlgorithms) {
        const responseHeader = getChecksumLocationName(algorithm);
        const checksumFromResponse = responseHeaders[responseHeader];
        if (checksumFromResponse) {
          let checksumAlgorithmFn;
          try {
            checksumAlgorithmFn = selectChecksumAlgorithmFunction(algorithm, config2);
          } catch (error45) {
            if (algorithm === ChecksumAlgorithm.CRC64NVME) {
              logger2?.warn(`Skipping ${ChecksumAlgorithm.CRC64NVME} checksum validation: ${error45.message}`);
              continue;
            }
            throw error45;
          }
          const { base64Encoder } = config2;
          if (isStreaming(responseBody)) {
            response.body = createChecksumStream({
              expectedChecksum: checksumFromResponse,
              checksumSourceLocation: responseHeader,
              checksum: new checksumAlgorithmFn(),
              source: responseBody,
              base64Encoder
            });
            return;
          }
          const checksum = await getChecksum(responseBody, { checksumAlgorithmFn, base64Encoder });
          if (checksum === checksumFromResponse) {
            break;
          }
          throw new Error(`Checksum mismatch: expected "${checksum}" but received "${checksumFromResponse}" in response header "${responseHeader}".`);
        }
      }
    }, "validateChecksumFromResponse");
  }
});
var flexibleChecksumsResponseMiddlewareOptions;
var flexibleChecksumsResponseMiddleware;
var init_flexibleChecksumsResponseMiddleware = __esm({
  "../node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/flexibleChecksumsResponseMiddleware.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es2();
    init_getChecksumAlgorithmListForResponse();
    init_getChecksumLocationName();
    init_isChecksumWithPartNumber();
    init_validateChecksumFromResponse();
    flexibleChecksumsResponseMiddlewareOptions = {
      name: "flexibleChecksumsResponseMiddleware",
      toMiddleware: "deserializerMiddleware",
      relation: "after",
      tags: ["BODY_CHECKSUM"],
      override: true
    };
    flexibleChecksumsResponseMiddleware = /* @__PURE__ */ __name2((config2, middlewareConfig) => (next, context) => async (args) => {
      if (!HttpRequest.isInstance(args.request)) {
        return next(args);
      }
      const input = args.input;
      const result = await next(args);
      const response = result.response;
      const { requestValidationModeMember, responseAlgorithms } = middlewareConfig;
      if (requestValidationModeMember && input[requestValidationModeMember] === "ENABLED") {
        const { clientName, commandName } = context;
        const isS3WholeObjectMultipartGetResponseChecksum = clientName === "S3Client" && commandName === "GetObjectCommand" && getChecksumAlgorithmListForResponse(responseAlgorithms).every((algorithm) => {
          const responseHeader = getChecksumLocationName(algorithm);
          const checksumFromResponse = response.headers[responseHeader];
          return !checksumFromResponse || isChecksumWithPartNumber(checksumFromResponse);
        });
        if (isS3WholeObjectMultipartGetResponseChecksum) {
          return result;
        }
        await validateChecksumFromResponse(response, {
          config: config2,
          responseAlgorithms,
          logger: context.logger
        });
      }
      return result;
    }, "flexibleChecksumsResponseMiddleware");
  }
});
var getFlexibleChecksumsPlugin;
var init_getFlexibleChecksumsPlugin = __esm({
  "../node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getFlexibleChecksumsPlugin.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_flexibleChecksumsInputMiddleware();
    init_flexibleChecksumsMiddleware();
    init_flexibleChecksumsResponseMiddleware();
    getFlexibleChecksumsPlugin = /* @__PURE__ */ __name2((config2, middlewareConfig) => ({
      applyToStack: /* @__PURE__ */ __name2((clientStack) => {
        clientStack.add(flexibleChecksumsMiddleware(config2, middlewareConfig), flexibleChecksumsMiddlewareOptions);
        clientStack.addRelativeTo(flexibleChecksumsInputMiddleware(config2, middlewareConfig), flexibleChecksumsInputMiddlewareOptions);
        clientStack.addRelativeTo(flexibleChecksumsResponseMiddleware(config2, middlewareConfig), flexibleChecksumsResponseMiddlewareOptions);
      }, "applyToStack")
    }), "getFlexibleChecksumsPlugin");
  }
});
var resolveFlexibleChecksumsConfig;
var init_resolveFlexibleChecksumsConfig = __esm({
  "../node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/resolveFlexibleChecksumsConfig.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es4();
    init_constants();
    resolveFlexibleChecksumsConfig = /* @__PURE__ */ __name2((input) => {
      const { requestChecksumCalculation, responseChecksumValidation, requestStreamBufferSize } = input;
      return Object.assign(input, {
        requestChecksumCalculation: normalizeProvider(requestChecksumCalculation ?? DEFAULT_REQUEST_CHECKSUM_CALCULATION),
        responseChecksumValidation: normalizeProvider(responseChecksumValidation ?? DEFAULT_RESPONSE_CHECKSUM_VALIDATION),
        requestStreamBufferSize: Number(requestStreamBufferSize ?? 0)
      });
    }, "resolveFlexibleChecksumsConfig");
  }
});
var init_dist_es23 = __esm({
  "../node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_NODE_REQUEST_CHECKSUM_CALCULATION_CONFIG_OPTIONS();
    init_NODE_RESPONSE_CHECKSUM_VALIDATION_CONFIG_OPTIONS();
    init_constants();
    init_crc64_nvme_crt_container();
    init_flexibleChecksumsMiddleware();
    init_getFlexibleChecksumsPlugin();
    init_resolveFlexibleChecksumsConfig();
  }
});
function resolveHostHeaderConfig(input) {
  return input;
}
__name(resolveHostHeaderConfig, "resolveHostHeaderConfig");
var hostHeaderMiddleware;
var hostHeaderMiddlewareOptions;
var getHostHeaderPlugin;
var init_dist_es24 = __esm({
  "../node_modules/@aws-sdk/middleware-host-header/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es2();
    __name2(resolveHostHeaderConfig, "resolveHostHeaderConfig");
    hostHeaderMiddleware = /* @__PURE__ */ __name2((options) => (next) => async (args) => {
      if (!HttpRequest.isInstance(args.request))
        return next(args);
      const { request } = args;
      const { handlerProtocol = "" } = options.requestHandler.metadata || {};
      if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
        delete request.headers["host"];
        request.headers[":authority"] = request.hostname + (request.port ? ":" + request.port : "");
      } else if (!request.headers["host"]) {
        let host = request.hostname;
        if (request.port != null)
          host += `:${request.port}`;
        request.headers["host"] = host;
      }
      return next(args);
    }, "hostHeaderMiddleware");
    hostHeaderMiddlewareOptions = {
      name: "hostHeaderMiddleware",
      step: "build",
      priority: "low",
      tags: ["HOST"],
      override: true
    };
    getHostHeaderPlugin = /* @__PURE__ */ __name2((options) => ({
      applyToStack: /* @__PURE__ */ __name2((clientStack) => {
        clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);
      }, "applyToStack")
    }), "getHostHeaderPlugin");
  }
});
var loggerMiddleware;
var loggerMiddlewareOptions;
var getLoggerPlugin;
var init_loggerMiddleware = __esm({
  "../node_modules/@aws-sdk/middleware-logger/dist-es/loggerMiddleware.js"() {
    init_functionsRoutes_0_09879299104094341();
    loggerMiddleware = /* @__PURE__ */ __name2(() => (next, context) => async (args) => {
      try {
        const response = await next(args);
        const { clientName, commandName, logger: logger2, dynamoDbDocumentClientOptions = {} } = context;
        const { overrideInputFilterSensitiveLog, overrideOutputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
        const outputFilterSensitiveLog = overrideOutputFilterSensitiveLog ?? context.outputFilterSensitiveLog;
        const { $metadata, ...outputWithoutMetadata } = response.output;
        logger2?.info?.({
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          output: outputFilterSensitiveLog(outputWithoutMetadata),
          metadata: $metadata
        });
        return response;
      } catch (error45) {
        const { clientName, commandName, logger: logger2, dynamoDbDocumentClientOptions = {} } = context;
        const { overrideInputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
        logger2?.error?.({
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          error: error45,
          metadata: error45.$metadata
        });
        throw error45;
      }
    }, "loggerMiddleware");
    loggerMiddlewareOptions = {
      name: "loggerMiddleware",
      tags: ["LOGGER"],
      step: "initialize",
      override: true
    };
    getLoggerPlugin = /* @__PURE__ */ __name2((options) => ({
      applyToStack: /* @__PURE__ */ __name2((clientStack) => {
        clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);
      }, "applyToStack")
    }), "getLoggerPlugin");
  }
});
var init_dist_es25 = __esm({
  "../node_modules/@aws-sdk/middleware-logger/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_loggerMiddleware();
  }
});
var recursionDetectionMiddlewareOptions;
var init_configuration = __esm({
  "../node_modules/@aws-sdk/middleware-recursion-detection/dist-es/configuration.js"() {
    init_functionsRoutes_0_09879299104094341();
    recursionDetectionMiddlewareOptions = {
      step: "build",
      tags: ["RECURSION_DETECTION"],
      name: "recursionDetectionMiddleware",
      override: true,
      priority: "low"
    };
  }
});
var recursionDetectionMiddleware;
var init_recursionDetectionMiddleware_browser = __esm({
  "../node_modules/@aws-sdk/middleware-recursion-detection/dist-es/recursionDetectionMiddleware.browser.js"() {
    init_functionsRoutes_0_09879299104094341();
    recursionDetectionMiddleware = /* @__PURE__ */ __name2(() => (next) => async (args) => next(args), "recursionDetectionMiddleware");
  }
});
var getRecursionDetectionPlugin;
var init_getRecursionDetectionPlugin = __esm({
  "../node_modules/@aws-sdk/middleware-recursion-detection/dist-es/getRecursionDetectionPlugin.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_configuration();
    init_recursionDetectionMiddleware_browser();
    getRecursionDetectionPlugin = /* @__PURE__ */ __name2((options) => ({
      applyToStack: /* @__PURE__ */ __name2((clientStack) => {
        clientStack.add(recursionDetectionMiddleware(), recursionDetectionMiddlewareOptions);
      }, "applyToStack")
    }), "getRecursionDetectionPlugin");
  }
});
var init_dist_es26 = __esm({
  "../node_modules/@aws-sdk/middleware-recursion-detection/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_getRecursionDetectionPlugin();
    init_recursionDetectionMiddleware_browser();
  }
});
function checkContentLengthHeader() {
  return (next, context) => async (args) => {
    const { request } = args;
    if (HttpRequest.isInstance(request)) {
      if (!(CONTENT_LENGTH_HEADER in request.headers) && !(DECODED_CONTENT_LENGTH_HEADER in request.headers)) {
        const message = `Are you using a Stream of unknown length as the Body of a PutObject request? Consider using Upload instead from @aws-sdk/lib-storage.`;
        if (typeof context?.logger?.warn === "function" && !(context.logger instanceof NoOpLogger)) {
          context.logger.warn(message);
        } else {
          console.warn(message);
        }
      }
    }
    return next({ ...args });
  };
}
__name(checkContentLengthHeader, "checkContentLengthHeader");
var CONTENT_LENGTH_HEADER;
var DECODED_CONTENT_LENGTH_HEADER;
var checkContentLengthHeaderMiddlewareOptions;
var getCheckContentLengthHeaderPlugin;
var init_check_content_length_header = __esm({
  "../node_modules/@aws-sdk/middleware-sdk-s3/dist-es/check-content-length-header.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es2();
    init_dist_es19();
    CONTENT_LENGTH_HEADER = "content-length";
    DECODED_CONTENT_LENGTH_HEADER = "x-amz-decoded-content-length";
    __name2(checkContentLengthHeader, "checkContentLengthHeader");
    checkContentLengthHeaderMiddlewareOptions = {
      step: "finalizeRequest",
      tags: ["CHECK_CONTENT_LENGTH_HEADER"],
      name: "getCheckContentLengthHeaderPlugin",
      override: true
    };
    getCheckContentLengthHeaderPlugin = /* @__PURE__ */ __name2((unused) => ({
      applyToStack: /* @__PURE__ */ __name2((clientStack) => {
        clientStack.add(checkContentLengthHeader(), checkContentLengthHeaderMiddlewareOptions);
      }, "applyToStack")
    }), "getCheckContentLengthHeaderPlugin");
  }
});
var regionRedirectEndpointMiddleware;
var regionRedirectEndpointMiddlewareOptions;
var init_region_redirect_endpoint_middleware = __esm({
  "../node_modules/@aws-sdk/middleware-sdk-s3/dist-es/region-redirect-endpoint-middleware.js"() {
    init_functionsRoutes_0_09879299104094341();
    regionRedirectEndpointMiddleware = /* @__PURE__ */ __name2((config2) => {
      return (next, context) => async (args) => {
        const originalRegion = await config2.region();
        const regionProviderRef = config2.region;
        let unlock = /* @__PURE__ */ __name2(() => {
        }, "unlock");
        if (context.__s3RegionRedirect) {
          Object.defineProperty(config2, "region", {
            writable: false,
            value: /* @__PURE__ */ __name2(async () => {
              return context.__s3RegionRedirect;
            }, "value")
          });
          unlock = /* @__PURE__ */ __name2(() => Object.defineProperty(config2, "region", {
            writable: true,
            value: regionProviderRef
          }), "unlock");
        }
        try {
          const result = await next(args);
          if (context.__s3RegionRedirect) {
            unlock();
            const region = await config2.region();
            if (originalRegion !== region) {
              throw new Error("Region was not restored following S3 region redirect.");
            }
          }
          return result;
        } catch (e2) {
          unlock();
          throw e2;
        }
      };
    }, "regionRedirectEndpointMiddleware");
    regionRedirectEndpointMiddlewareOptions = {
      tags: ["REGION_REDIRECT", "S3"],
      name: "regionRedirectEndpointMiddleware",
      override: true,
      relation: "before",
      toMiddleware: "endpointV2Middleware"
    };
  }
});
function regionRedirectMiddleware(clientConfig) {
  return (next, context) => async (args) => {
    try {
      return await next(args);
    } catch (err) {
      if (clientConfig.followRegionRedirects) {
        const statusCode = err?.$metadata?.httpStatusCode;
        const isHeadBucket = context.commandName === "HeadBucketCommand";
        const bucketRegionHeader = err?.$response?.headers?.["x-amz-bucket-region"];
        if (bucketRegionHeader) {
          if (statusCode === 301 || statusCode === 400 && (err?.name === "IllegalLocationConstraintException" || isHeadBucket)) {
            try {
              const actualRegion = bucketRegionHeader;
              context.logger?.debug(`Redirecting from ${await clientConfig.region()} to ${actualRegion}`);
              context.__s3RegionRedirect = actualRegion;
            } catch (e2) {
              throw new Error("Region redirect failed: " + e2);
            }
            return next(args);
          }
        }
      }
      throw err;
    }
  };
}
__name(regionRedirectMiddleware, "regionRedirectMiddleware");
var regionRedirectMiddlewareOptions;
var getRegionRedirectMiddlewarePlugin;
var init_region_redirect_middleware = __esm({
  "../node_modules/@aws-sdk/middleware-sdk-s3/dist-es/region-redirect-middleware.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_region_redirect_endpoint_middleware();
    __name2(regionRedirectMiddleware, "regionRedirectMiddleware");
    regionRedirectMiddlewareOptions = {
      step: "initialize",
      tags: ["REGION_REDIRECT", "S3"],
      name: "regionRedirectMiddleware",
      override: true
    };
    getRegionRedirectMiddlewarePlugin = /* @__PURE__ */ __name2((clientConfig) => ({
      applyToStack: /* @__PURE__ */ __name2((clientStack) => {
        clientStack.add(regionRedirectMiddleware(clientConfig), regionRedirectMiddlewareOptions);
        clientStack.addRelativeTo(regionRedirectEndpointMiddleware(clientConfig), regionRedirectEndpointMiddlewareOptions);
      }, "applyToStack")
    }), "getRegionRedirectMiddlewarePlugin");
  }
});
var s3ExpiresMiddleware;
var s3ExpiresMiddlewareOptions;
var getS3ExpiresMiddlewarePlugin;
var init_s3_expires_middleware = __esm({
  "../node_modules/@aws-sdk/middleware-sdk-s3/dist-es/s3-expires-middleware.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es2();
    init_dist_es19();
    s3ExpiresMiddleware = /* @__PURE__ */ __name2((config2) => {
      return (next, context) => async (args) => {
        const result = await next(args);
        const { response } = result;
        if (HttpResponse.isInstance(response)) {
          if (response.headers.expires) {
            response.headers.expiresstring = response.headers.expires;
            try {
              parseRfc7231DateTime(response.headers.expires);
            } catch (e2) {
              context.logger?.warn(`AWS SDK Warning for ${context.clientName}::${context.commandName} response parsing (${response.headers.expires}): ${e2}`);
              delete response.headers.expires;
            }
          }
        }
        return result;
      };
    }, "s3ExpiresMiddleware");
    s3ExpiresMiddlewareOptions = {
      tags: ["S3"],
      name: "s3ExpiresMiddleware",
      override: true,
      relation: "after",
      toMiddleware: "deserializerMiddleware"
    };
    getS3ExpiresMiddlewarePlugin = /* @__PURE__ */ __name2((clientConfig) => ({
      applyToStack: /* @__PURE__ */ __name2((clientStack) => {
        clientStack.addRelativeTo(s3ExpiresMiddleware(clientConfig), s3ExpiresMiddlewareOptions);
      }, "applyToStack")
    }), "getS3ExpiresMiddlewarePlugin");
  }
});
var S3ExpressIdentityCache;
var init_S3ExpressIdentityCache = __esm({
  "../node_modules/@aws-sdk/middleware-sdk-s3/dist-es/s3-express/classes/S3ExpressIdentityCache.js"() {
    init_functionsRoutes_0_09879299104094341();
    S3ExpressIdentityCache = class _S3ExpressIdentityCache {
      static {
        __name(this, "_S3ExpressIdentityCache");
      }
      static {
        __name2(this, "S3ExpressIdentityCache");
      }
      data;
      lastPurgeTime = Date.now();
      static EXPIRED_CREDENTIAL_PURGE_INTERVAL_MS = 3e4;
      constructor(data = {}) {
        this.data = data;
      }
      get(key) {
        const entry = this.data[key];
        if (!entry) {
          return;
        }
        return entry;
      }
      set(key, entry) {
        this.data[key] = entry;
        return entry;
      }
      delete(key) {
        delete this.data[key];
      }
      async purgeExpired() {
        const now = Date.now();
        if (this.lastPurgeTime + _S3ExpressIdentityCache.EXPIRED_CREDENTIAL_PURGE_INTERVAL_MS > now) {
          return;
        }
        for (const key in this.data) {
          const entry = this.data[key];
          if (!entry.isRefreshing) {
            const credential = await entry.identity;
            if (credential.expiration) {
              if (credential.expiration.getTime() < now) {
                delete this.data[key];
              }
            }
          }
        }
      }
    };
  }
});
var S3ExpressIdentityCacheEntry;
var init_S3ExpressIdentityCacheEntry = __esm({
  "../node_modules/@aws-sdk/middleware-sdk-s3/dist-es/s3-express/classes/S3ExpressIdentityCacheEntry.js"() {
    init_functionsRoutes_0_09879299104094341();
    S3ExpressIdentityCacheEntry = class {
      static {
        __name(this, "S3ExpressIdentityCacheEntry");
      }
      static {
        __name2(this, "S3ExpressIdentityCacheEntry");
      }
      _identity;
      isRefreshing;
      accessed;
      constructor(_identity, isRefreshing = false, accessed = Date.now()) {
        this._identity = _identity;
        this.isRefreshing = isRefreshing;
        this.accessed = accessed;
      }
      get identity() {
        this.accessed = Date.now();
        return this._identity;
      }
    };
  }
});
var S3ExpressIdentityProviderImpl;
var init_S3ExpressIdentityProviderImpl = __esm({
  "../node_modules/@aws-sdk/middleware-sdk-s3/dist-es/s3-express/classes/S3ExpressIdentityProviderImpl.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_S3ExpressIdentityCache();
    init_S3ExpressIdentityCacheEntry();
    S3ExpressIdentityProviderImpl = class _S3ExpressIdentityProviderImpl {
      static {
        __name(this, "_S3ExpressIdentityProviderImpl");
      }
      static {
        __name2(this, "S3ExpressIdentityProviderImpl");
      }
      createSessionFn;
      cache;
      static REFRESH_WINDOW_MS = 6e4;
      constructor(createSessionFn, cache2 = new S3ExpressIdentityCache()) {
        this.createSessionFn = createSessionFn;
        this.cache = cache2;
      }
      async getS3ExpressIdentity(awsIdentity, identityProperties) {
        const key = identityProperties.Bucket;
        const { cache: cache2 } = this;
        const entry = cache2.get(key);
        if (entry) {
          return entry.identity.then((identity) => {
            const isExpired = (identity.expiration?.getTime() ?? 0) < Date.now();
            if (isExpired) {
              return cache2.set(key, new S3ExpressIdentityCacheEntry(this.getIdentity(key))).identity;
            }
            const isExpiringSoon = (identity.expiration?.getTime() ?? 0) < Date.now() + _S3ExpressIdentityProviderImpl.REFRESH_WINDOW_MS;
            if (isExpiringSoon && !entry.isRefreshing) {
              entry.isRefreshing = true;
              this.getIdentity(key).then((id) => {
                cache2.set(key, new S3ExpressIdentityCacheEntry(Promise.resolve(id)));
              });
            }
            return identity;
          });
        }
        return cache2.set(key, new S3ExpressIdentityCacheEntry(this.getIdentity(key))).identity;
      }
      async getIdentity(key) {
        await this.cache.purgeExpired().catch((error45) => {
          console.warn("Error while clearing expired entries in S3ExpressIdentityCache: \n" + error45);
        });
        const session = await this.createSessionFn(key);
        if (!session.Credentials?.AccessKeyId || !session.Credentials?.SecretAccessKey) {
          throw new Error("s3#createSession response credential missing AccessKeyId or SecretAccessKey.");
        }
        const identity = {
          accessKeyId: session.Credentials.AccessKeyId,
          secretAccessKey: session.Credentials.SecretAccessKey,
          sessionToken: session.Credentials.SessionToken,
          expiration: session.Credentials.Expiration ? new Date(session.Credentials.Expiration) : void 0
        };
        return identity;
      }
    };
  }
});
var S3_EXPRESS_BUCKET_TYPE;
var S3_EXPRESS_BACKEND;
var S3_EXPRESS_AUTH_SCHEME;
var SESSION_TOKEN_QUERY_PARAM;
var SESSION_TOKEN_HEADER;
var init_constants4 = __esm({
  "../node_modules/@aws-sdk/middleware-sdk-s3/dist-es/s3-express/constants.js"() {
    init_functionsRoutes_0_09879299104094341();
    S3_EXPRESS_BUCKET_TYPE = "Directory";
    S3_EXPRESS_BACKEND = "S3Express";
    S3_EXPRESS_AUTH_SCHEME = "sigv4-s3express";
    SESSION_TOKEN_QUERY_PARAM = "X-Amz-S3session-Token";
    SESSION_TOKEN_HEADER = SESSION_TOKEN_QUERY_PARAM.toLowerCase();
  }
});
function getCredentialsWithoutSessionToken(credentials) {
  const credentialsWithoutSessionToken = {
    accessKeyId: credentials.accessKeyId,
    secretAccessKey: credentials.secretAccessKey,
    expiration: credentials.expiration
  };
  return credentialsWithoutSessionToken;
}
__name(getCredentialsWithoutSessionToken, "getCredentialsWithoutSessionToken");
function setSingleOverride(privateAccess, credentialsWithoutSessionToken) {
  const id = setTimeout(() => {
    throw new Error("SignatureV4S3Express credential override was created but not called.");
  }, 10);
  const currentCredentialProvider = privateAccess.credentialProvider;
  const overrideCredentialsProviderOnce = /* @__PURE__ */ __name2(() => {
    clearTimeout(id);
    privateAccess.credentialProvider = currentCredentialProvider;
    return Promise.resolve(credentialsWithoutSessionToken);
  }, "overrideCredentialsProviderOnce");
  privateAccess.credentialProvider = overrideCredentialsProviderOnce;
}
__name(setSingleOverride, "setSingleOverride");
var SignatureV4S3Express;
var init_SignatureV4S3Express = __esm({
  "../node_modules/@aws-sdk/middleware-sdk-s3/dist-es/s3-express/classes/SignatureV4S3Express.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es16();
    init_constants4();
    SignatureV4S3Express = class extends SignatureV4 {
      static {
        __name(this, "SignatureV4S3Express");
      }
      static {
        __name2(this, "SignatureV4S3Express");
      }
      async signWithCredentials(requestToSign, credentials, options) {
        const credentialsWithoutSessionToken = getCredentialsWithoutSessionToken(credentials);
        requestToSign.headers[SESSION_TOKEN_HEADER] = credentials.sessionToken;
        const privateAccess = this;
        setSingleOverride(privateAccess, credentialsWithoutSessionToken);
        return privateAccess.signRequest(requestToSign, options ?? {});
      }
      async presignWithCredentials(requestToSign, credentials, options) {
        const credentialsWithoutSessionToken = getCredentialsWithoutSessionToken(credentials);
        delete requestToSign.headers[SESSION_TOKEN_HEADER];
        requestToSign.headers[SESSION_TOKEN_QUERY_PARAM] = credentials.sessionToken;
        requestToSign.query = requestToSign.query ?? {};
        requestToSign.query[SESSION_TOKEN_QUERY_PARAM] = credentials.sessionToken;
        const privateAccess = this;
        setSingleOverride(privateAccess, credentialsWithoutSessionToken);
        return this.presign(requestToSign, options);
      }
    };
    __name2(getCredentialsWithoutSessionToken, "getCredentialsWithoutSessionToken");
    __name2(setSingleOverride, "setSingleOverride");
  }
});
var s3ExpressMiddleware;
var s3ExpressMiddlewareOptions;
var getS3ExpressPlugin;
var init_s3ExpressMiddleware = __esm({
  "../node_modules/@aws-sdk/middleware-sdk-s3/dist-es/s3-express/functions/s3ExpressMiddleware.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es21();
    init_dist_es2();
    init_constants4();
    s3ExpressMiddleware = /* @__PURE__ */ __name2((options) => {
      return (next, context) => async (args) => {
        if (context.endpointV2) {
          const endpoint = context.endpointV2;
          const isS3ExpressAuth = endpoint.properties?.authSchemes?.[0]?.name === S3_EXPRESS_AUTH_SCHEME;
          const isS3ExpressBucket = endpoint.properties?.backend === S3_EXPRESS_BACKEND || endpoint.properties?.bucketType === S3_EXPRESS_BUCKET_TYPE;
          if (isS3ExpressBucket) {
            setFeature(context, "S3_EXPRESS_BUCKET", "J");
            context.isS3ExpressBucket = true;
          }
          if (isS3ExpressAuth) {
            const requestBucket = args.input.Bucket;
            if (requestBucket) {
              const s3ExpressIdentity = await options.s3ExpressIdentityProvider.getS3ExpressIdentity(await options.credentials(), {
                Bucket: requestBucket
              });
              context.s3ExpressIdentity = s3ExpressIdentity;
              if (HttpRequest.isInstance(args.request) && s3ExpressIdentity.sessionToken) {
                args.request.headers[SESSION_TOKEN_HEADER] = s3ExpressIdentity.sessionToken;
              }
            }
          }
        }
        return next(args);
      };
    }, "s3ExpressMiddleware");
    s3ExpressMiddlewareOptions = {
      name: "s3ExpressMiddleware",
      step: "build",
      tags: ["S3", "S3_EXPRESS"],
      override: true
    };
    getS3ExpressPlugin = /* @__PURE__ */ __name2((options) => ({
      applyToStack: /* @__PURE__ */ __name2((clientStack) => {
        clientStack.add(s3ExpressMiddleware(options), s3ExpressMiddlewareOptions);
      }, "applyToStack")
    }), "getS3ExpressPlugin");
  }
});
var signS3Express;
var init_signS3Express = __esm({
  "../node_modules/@aws-sdk/middleware-sdk-s3/dist-es/s3-express/functions/signS3Express.js"() {
    init_functionsRoutes_0_09879299104094341();
    signS3Express = /* @__PURE__ */ __name2(async (s3ExpressIdentity, signingOptions, request, sigV4MultiRegionSigner) => {
      const signedRequest = await sigV4MultiRegionSigner.signWithCredentials(request, s3ExpressIdentity, {});
      if (signedRequest.headers["X-Amz-Security-Token"] || signedRequest.headers["x-amz-security-token"]) {
        throw new Error("X-Amz-Security-Token must not be set for s3-express requests.");
      }
      return signedRequest;
    }, "signS3Express");
  }
});
var defaultErrorHandler2;
var defaultSuccessHandler2;
var s3ExpressHttpSigningMiddleware;
var getS3ExpressHttpSigningPlugin;
var init_s3ExpressHttpSigningMiddleware = __esm({
  "../node_modules/@aws-sdk/middleware-sdk-s3/dist-es/s3-express/functions/s3ExpressHttpSigningMiddleware.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es13();
    init_dist_es2();
    init_dist_es4();
    init_signS3Express();
    defaultErrorHandler2 = /* @__PURE__ */ __name2((signingProperties) => (error45) => {
      throw error45;
    }, "defaultErrorHandler");
    defaultSuccessHandler2 = /* @__PURE__ */ __name2((httpResponse, signingProperties) => {
    }, "defaultSuccessHandler");
    s3ExpressHttpSigningMiddleware = /* @__PURE__ */ __name2((config2) => (next, context) => async (args) => {
      if (!HttpRequest.isInstance(args.request)) {
        return next(args);
      }
      const smithyContext = getSmithyContext(context);
      const scheme = smithyContext.selectedHttpAuthScheme;
      if (!scheme) {
        throw new Error(`No HttpAuthScheme was selected: unable to sign request`);
      }
      const { httpAuthOption: { signingProperties = {} }, identity, signer } = scheme;
      let request;
      if (context.s3ExpressIdentity) {
        request = await signS3Express(context.s3ExpressIdentity, signingProperties, args.request, await config2.signer());
      } else {
        request = await signer.sign(args.request, identity, signingProperties);
      }
      const output = await next({
        ...args,
        request
      }).catch((signer.errorHandler || defaultErrorHandler2)(signingProperties));
      (signer.successHandler || defaultSuccessHandler2)(output.response, signingProperties);
      return output;
    }, "s3ExpressHttpSigningMiddleware");
    getS3ExpressHttpSigningPlugin = /* @__PURE__ */ __name2((config2) => ({
      applyToStack: /* @__PURE__ */ __name2((clientStack) => {
        clientStack.addRelativeTo(s3ExpressHttpSigningMiddleware(config2), httpSigningMiddlewareOptions);
      }, "applyToStack")
    }), "getS3ExpressHttpSigningPlugin");
  }
});
var init_s3_express = __esm({
  "../node_modules/@aws-sdk/middleware-sdk-s3/dist-es/s3-express/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_S3ExpressIdentityProviderImpl();
    init_SignatureV4S3Express();
    init_s3ExpressMiddleware();
    init_s3ExpressHttpSigningMiddleware();
  }
});
var resolveS3Config;
var init_s3Configuration = __esm({
  "../node_modules/@aws-sdk/middleware-sdk-s3/dist-es/s3Configuration.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_s3_express();
    resolveS3Config = /* @__PURE__ */ __name2((input, { session }) => {
      const [s3ClientProvider, CreateSessionCommandCtor] = session;
      const { forcePathStyle, useAccelerateEndpoint, disableMultiregionAccessPoints, followRegionRedirects, s3ExpressIdentityProvider, bucketEndpoint } = input;
      return Object.assign(input, {
        forcePathStyle: forcePathStyle ?? false,
        useAccelerateEndpoint: useAccelerateEndpoint ?? false,
        disableMultiregionAccessPoints: disableMultiregionAccessPoints ?? false,
        followRegionRedirects: followRegionRedirects ?? false,
        s3ExpressIdentityProvider: s3ExpressIdentityProvider ?? new S3ExpressIdentityProviderImpl(async (key) => s3ClientProvider().send(new CreateSessionCommandCtor({
          Bucket: key
        }))),
        bucketEndpoint: bucketEndpoint ?? false
      });
    }, "resolveS3Config");
  }
});
var THROW_IF_EMPTY_BODY;
var MAX_BYTES_TO_INSPECT;
var throw200ExceptionsMiddleware;
var collectBody2;
var throw200ExceptionsMiddlewareOptions;
var getThrow200ExceptionsPlugin;
var init_throw_200_exceptions = __esm({
  "../node_modules/@aws-sdk/middleware-sdk-s3/dist-es/throw-200-exceptions.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es2();
    init_dist_es12();
    THROW_IF_EMPTY_BODY = {
      CopyObjectCommand: true,
      UploadPartCopyCommand: true,
      CompleteMultipartUploadCommand: true
    };
    MAX_BYTES_TO_INSPECT = 3e3;
    throw200ExceptionsMiddleware = /* @__PURE__ */ __name2((config2) => (next, context) => async (args) => {
      const result = await next(args);
      const { response } = result;
      if (!HttpResponse.isInstance(response)) {
        return result;
      }
      const { statusCode, body: sourceBody } = response;
      if (statusCode < 200 || statusCode >= 300) {
        return result;
      }
      const isSplittableStream = typeof sourceBody?.stream === "function" || typeof sourceBody?.pipe === "function" || typeof sourceBody?.tee === "function";
      if (!isSplittableStream) {
        return result;
      }
      let bodyCopy = sourceBody;
      let body = sourceBody;
      if (sourceBody && typeof sourceBody === "object" && !(sourceBody instanceof Uint8Array)) {
        [bodyCopy, body] = await splitStream(sourceBody);
      }
      response.body = body;
      const bodyBytes = await collectBody2(bodyCopy, {
        streamCollector: /* @__PURE__ */ __name2(async (stream) => {
          return headStream(stream, MAX_BYTES_TO_INSPECT);
        }, "streamCollector")
      });
      if (typeof bodyCopy?.destroy === "function") {
        bodyCopy.destroy();
      }
      const bodyStringTail = config2.utf8Encoder(bodyBytes.subarray(bodyBytes.length - 16));
      if (bodyBytes.length === 0 && THROW_IF_EMPTY_BODY[context.commandName]) {
        const err = new Error("S3 aborted request");
        err.name = "InternalError";
        throw err;
      }
      if (bodyStringTail && bodyStringTail.endsWith("</Error>")) {
        response.statusCode = 400;
      }
      return result;
    }, "throw200ExceptionsMiddleware");
    collectBody2 = /* @__PURE__ */ __name2((streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    }, "collectBody");
    throw200ExceptionsMiddlewareOptions = {
      relation: "after",
      toMiddleware: "deserializerMiddleware",
      tags: ["THROW_200_EXCEPTIONS", "S3"],
      name: "throw200ExceptionsMiddleware",
      override: true
    };
    getThrow200ExceptionsPlugin = /* @__PURE__ */ __name2((config2) => ({
      applyToStack: /* @__PURE__ */ __name2((clientStack) => {
        clientStack.addRelativeTo(throw200ExceptionsMiddleware(config2), throw200ExceptionsMiddlewareOptions);
      }, "applyToStack")
    }), "getThrow200ExceptionsPlugin");
  }
});
var validate2;
var init_dist_es27 = __esm({
  "../node_modules/@aws-sdk/util-arn-parser/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    validate2 = /* @__PURE__ */ __name2((str) => typeof str === "string" && str.indexOf("arn:") === 0 && str.split(":").length >= 6, "validate");
  }
});
function bucketEndpointMiddleware(options) {
  return (next, context) => async (args) => {
    if (options.bucketEndpoint) {
      const endpoint = context.endpointV2;
      if (endpoint) {
        const bucket = args.input.Bucket;
        if (typeof bucket === "string") {
          try {
            const bucketEndpointUrl = new URL(bucket);
            context.endpointV2 = {
              ...endpoint,
              url: bucketEndpointUrl
            };
          } catch (e2) {
            const warning = `@aws-sdk/middleware-sdk-s3: bucketEndpoint=true was set but Bucket=${bucket} could not be parsed as URL.`;
            if (context.logger?.constructor?.name === "NoOpLogger") {
              console.warn(warning);
            } else {
              context.logger?.warn?.(warning);
            }
            throw e2;
          }
        }
      }
    }
    return next(args);
  };
}
__name(bucketEndpointMiddleware, "bucketEndpointMiddleware");
var bucketEndpointMiddlewareOptions;
var init_bucket_endpoint_middleware = __esm({
  "../node_modules/@aws-sdk/middleware-sdk-s3/dist-es/bucket-endpoint-middleware.js"() {
    init_functionsRoutes_0_09879299104094341();
    __name2(bucketEndpointMiddleware, "bucketEndpointMiddleware");
    bucketEndpointMiddlewareOptions = {
      name: "bucketEndpointMiddleware",
      override: true,
      relation: "after",
      toMiddleware: "endpointV2Middleware"
    };
  }
});
function validateBucketNameMiddleware({ bucketEndpoint }) {
  return (next) => async (args) => {
    const { input: { Bucket } } = args;
    if (!bucketEndpoint && typeof Bucket === "string" && !validate2(Bucket) && Bucket.indexOf("/") >= 0) {
      const err = new Error(`Bucket name shouldn't contain '/', received '${Bucket}'`);
      err.name = "InvalidBucketName";
      throw err;
    }
    return next({ ...args });
  };
}
__name(validateBucketNameMiddleware, "validateBucketNameMiddleware");
var validateBucketNameMiddlewareOptions;
var getValidateBucketNamePlugin;
var init_validate_bucket_name = __esm({
  "../node_modules/@aws-sdk/middleware-sdk-s3/dist-es/validate-bucket-name.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es27();
    init_bucket_endpoint_middleware();
    __name2(validateBucketNameMiddleware, "validateBucketNameMiddleware");
    validateBucketNameMiddlewareOptions = {
      step: "initialize",
      tags: ["VALIDATE_BUCKET_NAME"],
      name: "validateBucketNameMiddleware",
      override: true
    };
    getValidateBucketNamePlugin = /* @__PURE__ */ __name2((options) => ({
      applyToStack: /* @__PURE__ */ __name2((clientStack) => {
        clientStack.add(validateBucketNameMiddleware(options), validateBucketNameMiddlewareOptions);
        clientStack.addRelativeTo(bucketEndpointMiddleware(options), bucketEndpointMiddlewareOptions);
      }, "applyToStack")
    }), "getValidateBucketNamePlugin");
  }
});
var init_dist_es28 = __esm({
  "../node_modules/@aws-sdk/middleware-sdk-s3/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_check_content_length_header();
    init_region_redirect_endpoint_middleware();
    init_region_redirect_middleware();
    init_s3_expires_middleware();
    init_s3_express();
    init_s3Configuration();
    init_throw_200_exceptions();
    init_validate_bucket_name();
  }
});
function isValidUserAgentAppId(appId) {
  if (appId === void 0) {
    return true;
  }
  return typeof appId === "string" && appId.length <= 50;
}
__name(isValidUserAgentAppId, "isValidUserAgentAppId");
function resolveUserAgentConfig(input) {
  const normalizedAppIdProvider = normalizeProvider2(input.userAgentAppId ?? DEFAULT_UA_APP_ID);
  const { customUserAgent } = input;
  return Object.assign(input, {
    customUserAgent: typeof customUserAgent === "string" ? [[customUserAgent]] : customUserAgent,
    userAgentAppId: /* @__PURE__ */ __name2(async () => {
      const appId = await normalizedAppIdProvider();
      if (!isValidUserAgentAppId(appId)) {
        const logger2 = input.logger?.constructor?.name === "NoOpLogger" || !input.logger ? console : input.logger;
        if (typeof appId !== "string") {
          logger2?.warn("userAgentAppId must be a string or undefined.");
        } else if (appId.length > 50) {
          logger2?.warn("The provided userAgentAppId exceeds the maximum length of 50 characters.");
        }
      }
      return appId;
    }, "userAgentAppId")
  });
}
__name(resolveUserAgentConfig, "resolveUserAgentConfig");
var DEFAULT_UA_APP_ID;
var init_configurations = __esm({
  "../node_modules/@aws-sdk/middleware-user-agent/dist-es/configurations.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es13();
    DEFAULT_UA_APP_ID = void 0;
    __name2(isValidUserAgentAppId, "isValidUserAgentAppId");
    __name2(resolveUserAgentConfig, "resolveUserAgentConfig");
  }
});
var EndpointCache;
var init_EndpointCache = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/cache/EndpointCache.js"() {
    init_functionsRoutes_0_09879299104094341();
    EndpointCache = class {
      static {
        __name(this, "EndpointCache");
      }
      static {
        __name2(this, "EndpointCache");
      }
      constructor({ size, params }) {
        this.data = /* @__PURE__ */ new Map();
        this.parameters = [];
        this.capacity = size ?? 50;
        if (params) {
          this.parameters = params;
        }
      }
      get(endpointParams, resolver) {
        const key = this.hash(endpointParams);
        if (key === false) {
          return resolver();
        }
        if (!this.data.has(key)) {
          if (this.data.size > this.capacity + 10) {
            const keys = this.data.keys();
            let i2 = 0;
            while (true) {
              const { value, done } = keys.next();
              this.data.delete(value);
              if (done || ++i2 > 10) {
                break;
              }
            }
          }
          this.data.set(key, resolver());
        }
        return this.data.get(key);
      }
      size() {
        return this.data.size;
      }
      hash(endpointParams) {
        let buffer = "";
        const { parameters } = this;
        if (parameters.length === 0) {
          return false;
        }
        for (const param of parameters) {
          const val = String(endpointParams[param] ?? "");
          if (val.includes("|;")) {
            return false;
          }
          buffer += val + "|;";
        }
        return buffer;
      }
    };
  }
});
var IP_V4_REGEX;
var isIpAddress;
var init_isIpAddress = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/lib/isIpAddress.js"() {
    init_functionsRoutes_0_09879299104094341();
    IP_V4_REGEX = new RegExp(`^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$`);
    isIpAddress = /* @__PURE__ */ __name2((value) => IP_V4_REGEX.test(value) || value.startsWith("[") && value.endsWith("]"), "isIpAddress");
  }
});
var VALID_HOST_LABEL_REGEX;
var isValidHostLabel;
var init_isValidHostLabel = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/lib/isValidHostLabel.js"() {
    init_functionsRoutes_0_09879299104094341();
    VALID_HOST_LABEL_REGEX = new RegExp(`^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$`);
    isValidHostLabel = /* @__PURE__ */ __name2((value, allowSubDomains = false) => {
      if (!allowSubDomains) {
        return VALID_HOST_LABEL_REGEX.test(value);
      }
      const labels = value.split(".");
      for (const label of labels) {
        if (!isValidHostLabel(label)) {
          return false;
        }
      }
      return true;
    }, "isValidHostLabel");
  }
});
var customEndpointFunctions;
var init_customEndpointFunctions = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/utils/customEndpointFunctions.js"() {
    init_functionsRoutes_0_09879299104094341();
    customEndpointFunctions = {};
  }
});
var debugId;
var init_debugId = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/debug/debugId.js"() {
    init_functionsRoutes_0_09879299104094341();
    debugId = "endpoints";
  }
});
function toDebugString(input) {
  if (typeof input !== "object" || input == null) {
    return input;
  }
  if ("ref" in input) {
    return `$${toDebugString(input.ref)}`;
  }
  if ("fn" in input) {
    return `${input.fn}(${(input.argv || []).map(toDebugString).join(", ")})`;
  }
  return JSON.stringify(input, null, 2);
}
__name(toDebugString, "toDebugString");
var init_toDebugString = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/debug/toDebugString.js"() {
    init_functionsRoutes_0_09879299104094341();
    __name2(toDebugString, "toDebugString");
  }
});
var init_debug = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/debug/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_debugId();
    init_toDebugString();
  }
});
var EndpointError;
var init_EndpointError = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/types/EndpointError.js"() {
    init_functionsRoutes_0_09879299104094341();
    EndpointError = class extends Error {
      static {
        __name(this, "EndpointError");
      }
      static {
        __name2(this, "EndpointError");
      }
      constructor(message) {
        super(message);
        this.name = "EndpointError";
      }
    };
  }
});
var init_EndpointFunctions = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/types/EndpointFunctions.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_EndpointRuleObject2 = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/types/EndpointRuleObject.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_ErrorRuleObject2 = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/types/ErrorRuleObject.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_RuleSetObject2 = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/types/RuleSetObject.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_TreeRuleObject2 = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/types/TreeRuleObject.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_shared2 = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/types/shared.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_types3 = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/types/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_EndpointError();
    init_EndpointFunctions();
    init_EndpointRuleObject2();
    init_ErrorRuleObject2();
    init_RuleSetObject2();
    init_TreeRuleObject2();
    init_shared2();
  }
});
var booleanEquals;
var init_booleanEquals = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/lib/booleanEquals.js"() {
    init_functionsRoutes_0_09879299104094341();
    booleanEquals = /* @__PURE__ */ __name2((value1, value2) => value1 === value2, "booleanEquals");
  }
});
var getAttrPathList;
var init_getAttrPathList = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/lib/getAttrPathList.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_types3();
    getAttrPathList = /* @__PURE__ */ __name2((path) => {
      const parts = path.split(".");
      const pathList = [];
      for (const part of parts) {
        const squareBracketIndex = part.indexOf("[");
        if (squareBracketIndex !== -1) {
          if (part.indexOf("]") !== part.length - 1) {
            throw new EndpointError(`Path: '${path}' does not end with ']'`);
          }
          const arrayIndex = part.slice(squareBracketIndex + 1, -1);
          if (Number.isNaN(parseInt(arrayIndex))) {
            throw new EndpointError(`Invalid array index: '${arrayIndex}' in path: '${path}'`);
          }
          if (squareBracketIndex !== 0) {
            pathList.push(part.slice(0, squareBracketIndex));
          }
          pathList.push(arrayIndex);
        } else {
          pathList.push(part);
        }
      }
      return pathList;
    }, "getAttrPathList");
  }
});
var getAttr;
var init_getAttr = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/lib/getAttr.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_types3();
    init_getAttrPathList();
    getAttr = /* @__PURE__ */ __name2((value, path) => getAttrPathList(path).reduce((acc, index) => {
      if (typeof acc !== "object") {
        throw new EndpointError(`Index '${index}' in '${path}' not found in '${JSON.stringify(value)}'`);
      } else if (Array.isArray(acc)) {
        return acc[parseInt(index)];
      }
      return acc[index];
    }, value), "getAttr");
  }
});
var isSet;
var init_isSet = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/lib/isSet.js"() {
    init_functionsRoutes_0_09879299104094341();
    isSet = /* @__PURE__ */ __name2((value) => value != null, "isSet");
  }
});
var not;
var init_not = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/lib/not.js"() {
    init_functionsRoutes_0_09879299104094341();
    not = /* @__PURE__ */ __name2((value) => !value, "not");
  }
});
var DEFAULT_PORTS;
var parseURL;
var init_parseURL = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/lib/parseURL.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es();
    init_isIpAddress();
    DEFAULT_PORTS = {
      [EndpointURLScheme.HTTP]: 80,
      [EndpointURLScheme.HTTPS]: 443
    };
    parseURL = /* @__PURE__ */ __name2((value) => {
      const whatwgURL = (() => {
        try {
          if (value instanceof URL) {
            return value;
          }
          if (typeof value === "object" && "hostname" in value) {
            const { hostname: hostname4, port, protocol: protocol2 = "", path = "", query = {} } = value;
            const url2 = new URL(`${protocol2}//${hostname4}${port ? `:${port}` : ""}${path}`);
            url2.search = Object.entries(query).map(([k2, v2]) => `${k2}=${v2}`).join("&");
            return url2;
          }
          return new URL(value);
        } catch (error45) {
          return null;
        }
      })();
      if (!whatwgURL) {
        console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);
        return null;
      }
      const urlString = whatwgURL.href;
      const { host, hostname: hostname3, pathname, protocol, search } = whatwgURL;
      if (search) {
        return null;
      }
      const scheme = protocol.slice(0, -1);
      if (!Object.values(EndpointURLScheme).includes(scheme)) {
        return null;
      }
      const isIp = isIpAddress(hostname3);
      const inputContainsDefaultPort = urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) || typeof value === "string" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`);
      const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;
      return {
        scheme,
        authority,
        path: pathname,
        normalizedPath: pathname.endsWith("/") ? pathname : `${pathname}/`,
        isIp
      };
    }, "parseURL");
  }
});
var stringEquals;
var init_stringEquals = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/lib/stringEquals.js"() {
    init_functionsRoutes_0_09879299104094341();
    stringEquals = /* @__PURE__ */ __name2((value1, value2) => value1 === value2, "stringEquals");
  }
});
var substring;
var init_substring = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/lib/substring.js"() {
    init_functionsRoutes_0_09879299104094341();
    substring = /* @__PURE__ */ __name2((input, start, stop, reverse) => {
      if (start >= stop || input.length < stop) {
        return null;
      }
      if (!reverse) {
        return input.substring(start, stop);
      }
      return input.substring(input.length - stop, input.length - start);
    }, "substring");
  }
});
var uriEncode;
var init_uriEncode = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/lib/uriEncode.js"() {
    init_functionsRoutes_0_09879299104094341();
    uriEncode = /* @__PURE__ */ __name2((value) => encodeURIComponent(value).replace(/[!*'()]/g, (c2) => `%${c2.charCodeAt(0).toString(16).toUpperCase()}`), "uriEncode");
  }
});
var init_lib = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/lib/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_booleanEquals();
    init_getAttr();
    init_isSet();
    init_isValidHostLabel();
    init_not();
    init_parseURL();
    init_stringEquals();
    init_substring();
    init_uriEncode();
  }
});
var endpointFunctions;
var init_endpointFunctions = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/utils/endpointFunctions.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_lib();
    endpointFunctions = {
      booleanEquals,
      getAttr,
      isSet,
      isValidHostLabel,
      not,
      parseURL,
      stringEquals,
      substring,
      uriEncode
    };
  }
});
var evaluateTemplate;
var init_evaluateTemplate = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/utils/evaluateTemplate.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_lib();
    evaluateTemplate = /* @__PURE__ */ __name2((template, options) => {
      const evaluatedTemplateArr = [];
      const templateContext = {
        ...options.endpointParams,
        ...options.referenceRecord
      };
      let currentIndex = 0;
      while (currentIndex < template.length) {
        const openingBraceIndex = template.indexOf("{", currentIndex);
        if (openingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(currentIndex));
          break;
        }
        evaluatedTemplateArr.push(template.slice(currentIndex, openingBraceIndex));
        const closingBraceIndex = template.indexOf("}", openingBraceIndex);
        if (closingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(openingBraceIndex));
          break;
        }
        if (template[openingBraceIndex + 1] === "{" && template[closingBraceIndex + 1] === "}") {
          evaluatedTemplateArr.push(template.slice(openingBraceIndex + 1, closingBraceIndex));
          currentIndex = closingBraceIndex + 2;
        }
        const parameterName = template.substring(openingBraceIndex + 1, closingBraceIndex);
        if (parameterName.includes("#")) {
          const [refName, attrName] = parameterName.split("#");
          evaluatedTemplateArr.push(getAttr(templateContext[refName], attrName));
        } else {
          evaluatedTemplateArr.push(templateContext[parameterName]);
        }
        currentIndex = closingBraceIndex + 1;
      }
      return evaluatedTemplateArr.join("");
    }, "evaluateTemplate");
  }
});
var getReferenceValue;
var init_getReferenceValue = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/utils/getReferenceValue.js"() {
    init_functionsRoutes_0_09879299104094341();
    getReferenceValue = /* @__PURE__ */ __name2(({ ref }, options) => {
      const referenceRecord = {
        ...options.endpointParams,
        ...options.referenceRecord
      };
      return referenceRecord[ref];
    }, "getReferenceValue");
  }
});
var evaluateExpression;
var init_evaluateExpression = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/utils/evaluateExpression.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_types3();
    init_callFunction();
    init_evaluateTemplate();
    init_getReferenceValue();
    evaluateExpression = /* @__PURE__ */ __name2((obj, keyName, options) => {
      if (typeof obj === "string") {
        return evaluateTemplate(obj, options);
      } else if (obj["fn"]) {
        return callFunction(obj, options);
      } else if (obj["ref"]) {
        return getReferenceValue(obj, options);
      }
      throw new EndpointError(`'${keyName}': ${String(obj)} is not a string, function or reference.`);
    }, "evaluateExpression");
  }
});
var callFunction;
var init_callFunction = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/utils/callFunction.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_customEndpointFunctions();
    init_endpointFunctions();
    init_evaluateExpression();
    callFunction = /* @__PURE__ */ __name2(({ fn, argv }, options) => {
      const evaluatedArgs = argv.map((arg) => ["boolean", "number"].includes(typeof arg) ? arg : evaluateExpression(arg, "arg", options));
      const fnSegments = fn.split(".");
      if (fnSegments[0] in customEndpointFunctions && fnSegments[1] != null) {
        return customEndpointFunctions[fnSegments[0]][fnSegments[1]](...evaluatedArgs);
      }
      return endpointFunctions[fn](...evaluatedArgs);
    }, "callFunction");
  }
});
var evaluateCondition;
var init_evaluateCondition = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/utils/evaluateCondition.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_debug();
    init_types3();
    init_callFunction();
    evaluateCondition = /* @__PURE__ */ __name2(({ assign, ...fnArgs }, options) => {
      if (assign && assign in options.referenceRecord) {
        throw new EndpointError(`'${assign}' is already defined in Reference Record.`);
      }
      const value = callFunction(fnArgs, options);
      options.logger?.debug?.(`${debugId} evaluateCondition: ${toDebugString(fnArgs)} = ${toDebugString(value)}`);
      return {
        result: value === "" ? true : !!value,
        ...assign != null && { toAssign: { name: assign, value } }
      };
    }, "evaluateCondition");
  }
});
var evaluateConditions;
var init_evaluateConditions = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/utils/evaluateConditions.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_debug();
    init_evaluateCondition();
    evaluateConditions = /* @__PURE__ */ __name2((conditions = [], options) => {
      const conditionsReferenceRecord = {};
      for (const condition of conditions) {
        const { result, toAssign } = evaluateCondition(condition, {
          ...options,
          referenceRecord: {
            ...options.referenceRecord,
            ...conditionsReferenceRecord
          }
        });
        if (!result) {
          return { result };
        }
        if (toAssign) {
          conditionsReferenceRecord[toAssign.name] = toAssign.value;
          options.logger?.debug?.(`${debugId} assign: ${toAssign.name} := ${toDebugString(toAssign.value)}`);
        }
      }
      return { result: true, referenceRecord: conditionsReferenceRecord };
    }, "evaluateConditions");
  }
});
var getEndpointHeaders;
var init_getEndpointHeaders = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/utils/getEndpointHeaders.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_types3();
    init_evaluateExpression();
    getEndpointHeaders = /* @__PURE__ */ __name2((headers, options) => Object.entries(headers).reduce((acc, [headerKey, headerVal]) => ({
      ...acc,
      [headerKey]: headerVal.map((headerValEntry) => {
        const processedExpr = evaluateExpression(headerValEntry, "Header value entry", options);
        if (typeof processedExpr !== "string") {
          throw new EndpointError(`Header '${headerKey}' value '${processedExpr}' is not a string`);
        }
        return processedExpr;
      })
    }), {}), "getEndpointHeaders");
  }
});
var getEndpointProperty;
var init_getEndpointProperty = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/utils/getEndpointProperty.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_types3();
    init_evaluateTemplate();
    init_getEndpointProperties();
    getEndpointProperty = /* @__PURE__ */ __name2((property, options) => {
      if (Array.isArray(property)) {
        return property.map((propertyEntry) => getEndpointProperty(propertyEntry, options));
      }
      switch (typeof property) {
        case "string":
          return evaluateTemplate(property, options);
        case "object":
          if (property === null) {
            throw new EndpointError(`Unexpected endpoint property: ${property}`);
          }
          return getEndpointProperties(property, options);
        case "boolean":
          return property;
        default:
          throw new EndpointError(`Unexpected endpoint property type: ${typeof property}`);
      }
    }, "getEndpointProperty");
  }
});
var getEndpointProperties;
var init_getEndpointProperties = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/utils/getEndpointProperties.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_getEndpointProperty();
    getEndpointProperties = /* @__PURE__ */ __name2((properties, options) => Object.entries(properties).reduce((acc, [propertyKey, propertyVal]) => ({
      ...acc,
      [propertyKey]: getEndpointProperty(propertyVal, options)
    }), {}), "getEndpointProperties");
  }
});
var getEndpointUrl;
var init_getEndpointUrl = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/utils/getEndpointUrl.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_types3();
    init_evaluateExpression();
    getEndpointUrl = /* @__PURE__ */ __name2((endpointUrl, options) => {
      const expression = evaluateExpression(endpointUrl, "Endpoint URL", options);
      if (typeof expression === "string") {
        try {
          return new URL(expression);
        } catch (error45) {
          console.error(`Failed to construct URL with ${expression}`, error45);
          throw error45;
        }
      }
      throw new EndpointError(`Endpoint URL must be a string, got ${typeof expression}`);
    }, "getEndpointUrl");
  }
});
var evaluateEndpointRule;
var init_evaluateEndpointRule = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/utils/evaluateEndpointRule.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_debug();
    init_evaluateConditions();
    init_getEndpointHeaders();
    init_getEndpointProperties();
    init_getEndpointUrl();
    evaluateEndpointRule = /* @__PURE__ */ __name2((endpointRule, options) => {
      const { conditions, endpoint } = endpointRule;
      const { result, referenceRecord } = evaluateConditions(conditions, options);
      if (!result) {
        return;
      }
      const endpointRuleOptions = {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      };
      const { url: url2, properties, headers } = endpoint;
      options.logger?.debug?.(`${debugId} Resolving endpoint from template: ${toDebugString(endpoint)}`);
      return {
        ...headers != void 0 && {
          headers: getEndpointHeaders(headers, endpointRuleOptions)
        },
        ...properties != void 0 && {
          properties: getEndpointProperties(properties, endpointRuleOptions)
        },
        url: getEndpointUrl(url2, endpointRuleOptions)
      };
    }, "evaluateEndpointRule");
  }
});
var evaluateErrorRule;
var init_evaluateErrorRule = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/utils/evaluateErrorRule.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_types3();
    init_evaluateConditions();
    init_evaluateExpression();
    evaluateErrorRule = /* @__PURE__ */ __name2((errorRule, options) => {
      const { conditions, error: error45 } = errorRule;
      const { result, referenceRecord } = evaluateConditions(conditions, options);
      if (!result) {
        return;
      }
      throw new EndpointError(evaluateExpression(error45, "Error", {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      }));
    }, "evaluateErrorRule");
  }
});
var evaluateTreeRule;
var init_evaluateTreeRule = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/utils/evaluateTreeRule.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_evaluateConditions();
    init_evaluateRules();
    evaluateTreeRule = /* @__PURE__ */ __name2((treeRule, options) => {
      const { conditions, rules } = treeRule;
      const { result, referenceRecord } = evaluateConditions(conditions, options);
      if (!result) {
        return;
      }
      return evaluateRules(rules, {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      });
    }, "evaluateTreeRule");
  }
});
var evaluateRules;
var init_evaluateRules = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/utils/evaluateRules.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_types3();
    init_evaluateEndpointRule();
    init_evaluateErrorRule();
    init_evaluateTreeRule();
    evaluateRules = /* @__PURE__ */ __name2((rules, options) => {
      for (const rule of rules) {
        if (rule.type === "endpoint") {
          const endpointOrUndefined = evaluateEndpointRule(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else if (rule.type === "error") {
          evaluateErrorRule(rule, options);
        } else if (rule.type === "tree") {
          const endpointOrUndefined = evaluateTreeRule(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else {
          throw new EndpointError(`Unknown endpoint rule: ${rule}`);
        }
      }
      throw new EndpointError(`Rules evaluation failed`);
    }, "evaluateRules");
  }
});
var init_utils3 = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/utils/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_customEndpointFunctions();
    init_evaluateRules();
  }
});
var resolveEndpoint;
var init_resolveEndpoint = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/resolveEndpoint.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_debug();
    init_types3();
    init_utils3();
    resolveEndpoint = /* @__PURE__ */ __name2((ruleSetObject, options) => {
      const { endpointParams, logger: logger2 } = options;
      const { parameters, rules } = ruleSetObject;
      options.logger?.debug?.(`${debugId} Initial EndpointParams: ${toDebugString(endpointParams)}`);
      const paramsWithDefault = Object.entries(parameters).filter(([, v2]) => v2.default != null).map(([k2, v2]) => [k2, v2.default]);
      if (paramsWithDefault.length > 0) {
        for (const [paramKey, paramDefaultValue] of paramsWithDefault) {
          endpointParams[paramKey] = endpointParams[paramKey] ?? paramDefaultValue;
        }
      }
      const requiredParams = Object.entries(parameters).filter(([, v2]) => v2.required).map(([k2]) => k2);
      for (const requiredParam of requiredParams) {
        if (endpointParams[requiredParam] == null) {
          throw new EndpointError(`Missing required parameter: '${requiredParam}'`);
        }
      }
      const endpoint = evaluateRules(rules, { endpointParams, logger: logger2, referenceRecord: {} });
      options.logger?.debug?.(`${debugId} Resolved endpoint: ${toDebugString(endpoint)}`);
      return endpoint;
    }, "resolveEndpoint");
  }
});
var init_dist_es29 = __esm({
  "../node_modules/@smithy/util-endpoints/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_EndpointCache();
    init_isIpAddress();
    init_isValidHostLabel();
    init_customEndpointFunctions();
    init_resolveEndpoint();
    init_types3();
  }
});
var init_isIpAddress2 = __esm({
  "../node_modules/@aws-sdk/util-endpoints/dist-es/lib/isIpAddress.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es29();
  }
});
var isVirtualHostableS3Bucket;
var init_isVirtualHostableS3Bucket = __esm({
  "../node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/isVirtualHostableS3Bucket.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es29();
    init_isIpAddress2();
    isVirtualHostableS3Bucket = /* @__PURE__ */ __name2((value, allowSubDomains = false) => {
      if (allowSubDomains) {
        for (const label of value.split(".")) {
          if (!isVirtualHostableS3Bucket(label)) {
            return false;
          }
        }
        return true;
      }
      if (!isValidHostLabel(value)) {
        return false;
      }
      if (value.length < 3 || value.length > 63) {
        return false;
      }
      if (value !== value.toLowerCase()) {
        return false;
      }
      if (isIpAddress(value)) {
        return false;
      }
      return true;
    }, "isVirtualHostableS3Bucket");
  }
});
var ARN_DELIMITER;
var RESOURCE_DELIMITER;
var parseArn;
var init_parseArn = __esm({
  "../node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/parseArn.js"() {
    init_functionsRoutes_0_09879299104094341();
    ARN_DELIMITER = ":";
    RESOURCE_DELIMITER = "/";
    parseArn = /* @__PURE__ */ __name2((value) => {
      const segments = value.split(ARN_DELIMITER);
      if (segments.length < 6)
        return null;
      const [arn, partition2, service, region, accountId, ...resourcePath] = segments;
      if (arn !== "arn" || partition2 === "" || service === "" || resourcePath.join(ARN_DELIMITER) === "")
        return null;
      const resourceId = resourcePath.map((resource) => resource.split(RESOURCE_DELIMITER)).flat();
      return {
        partition: partition2,
        service,
        region,
        accountId,
        resourceId
      };
    }, "parseArn");
  }
});
var partitions_default;
var init_partitions = __esm({
  "../node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partitions.json"() {
    partitions_default = {
      partitions: [{
        id: "aws",
        outputs: {
          dnsSuffix: "amazonaws.com",
          dualStackDnsSuffix: "api.aws",
          implicitGlobalRegion: "us-east-1",
          name: "aws",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^(us|eu|ap|sa|ca|me|af|il|mx)\\-\\w+\\-\\d+$",
        regions: {
          "af-south-1": {
            description: "Africa (Cape Town)"
          },
          "ap-east-1": {
            description: "Asia Pacific (Hong Kong)"
          },
          "ap-east-2": {
            description: "Asia Pacific (Taipei)"
          },
          "ap-northeast-1": {
            description: "Asia Pacific (Tokyo)"
          },
          "ap-northeast-2": {
            description: "Asia Pacific (Seoul)"
          },
          "ap-northeast-3": {
            description: "Asia Pacific (Osaka)"
          },
          "ap-south-1": {
            description: "Asia Pacific (Mumbai)"
          },
          "ap-south-2": {
            description: "Asia Pacific (Hyderabad)"
          },
          "ap-southeast-1": {
            description: "Asia Pacific (Singapore)"
          },
          "ap-southeast-2": {
            description: "Asia Pacific (Sydney)"
          },
          "ap-southeast-3": {
            description: "Asia Pacific (Jakarta)"
          },
          "ap-southeast-4": {
            description: "Asia Pacific (Melbourne)"
          },
          "ap-southeast-5": {
            description: "Asia Pacific (Malaysia)"
          },
          "ap-southeast-6": {
            description: "Asia Pacific (New Zealand)"
          },
          "ap-southeast-7": {
            description: "Asia Pacific (Thailand)"
          },
          "aws-global": {
            description: "aws global region"
          },
          "ca-central-1": {
            description: "Canada (Central)"
          },
          "ca-west-1": {
            description: "Canada West (Calgary)"
          },
          "eu-central-1": {
            description: "Europe (Frankfurt)"
          },
          "eu-central-2": {
            description: "Europe (Zurich)"
          },
          "eu-north-1": {
            description: "Europe (Stockholm)"
          },
          "eu-south-1": {
            description: "Europe (Milan)"
          },
          "eu-south-2": {
            description: "Europe (Spain)"
          },
          "eu-west-1": {
            description: "Europe (Ireland)"
          },
          "eu-west-2": {
            description: "Europe (London)"
          },
          "eu-west-3": {
            description: "Europe (Paris)"
          },
          "il-central-1": {
            description: "Israel (Tel Aviv)"
          },
          "me-central-1": {
            description: "Middle East (UAE)"
          },
          "me-south-1": {
            description: "Middle East (Bahrain)"
          },
          "mx-central-1": {
            description: "Mexico (Central)"
          },
          "sa-east-1": {
            description: "South America (Sao Paulo)"
          },
          "us-east-1": {
            description: "US East (N. Virginia)"
          },
          "us-east-2": {
            description: "US East (Ohio)"
          },
          "us-west-1": {
            description: "US West (N. California)"
          },
          "us-west-2": {
            description: "US West (Oregon)"
          }
        }
      }, {
        id: "aws-cn",
        outputs: {
          dnsSuffix: "amazonaws.com.cn",
          dualStackDnsSuffix: "api.amazonwebservices.com.cn",
          implicitGlobalRegion: "cn-northwest-1",
          name: "aws-cn",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^cn\\-\\w+\\-\\d+$",
        regions: {
          "aws-cn-global": {
            description: "aws-cn global region"
          },
          "cn-north-1": {
            description: "China (Beijing)"
          },
          "cn-northwest-1": {
            description: "China (Ningxia)"
          }
        }
      }, {
        id: "aws-eusc",
        outputs: {
          dnsSuffix: "amazonaws.eu",
          dualStackDnsSuffix: "api.amazonwebservices.eu",
          implicitGlobalRegion: "eusc-de-east-1",
          name: "aws-eusc",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^eusc\\-(de)\\-\\w+\\-\\d+$",
        regions: {
          "eusc-de-east-1": {
            description: "EU (Germany)"
          }
        }
      }, {
        id: "aws-iso",
        outputs: {
          dnsSuffix: "c2s.ic.gov",
          dualStackDnsSuffix: "api.aws.ic.gov",
          implicitGlobalRegion: "us-iso-east-1",
          name: "aws-iso",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-global": {
            description: "aws-iso global region"
          },
          "us-iso-east-1": {
            description: "US ISO East"
          },
          "us-iso-west-1": {
            description: "US ISO WEST"
          }
        }
      }, {
        id: "aws-iso-b",
        outputs: {
          dnsSuffix: "sc2s.sgov.gov",
          dualStackDnsSuffix: "api.aws.scloud",
          implicitGlobalRegion: "us-isob-east-1",
          name: "aws-iso-b",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-b-global": {
            description: "aws-iso-b global region"
          },
          "us-isob-east-1": {
            description: "US ISOB East (Ohio)"
          }
        }
      }, {
        id: "aws-iso-e",
        outputs: {
          dnsSuffix: "cloud.adc-e.uk",
          dualStackDnsSuffix: "api.cloud-aws.adc-e.uk",
          implicitGlobalRegion: "eu-isoe-west-1",
          name: "aws-iso-e",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^eu\\-isoe\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-e-global": {
            description: "aws-iso-e global region"
          },
          "eu-isoe-west-1": {
            description: "EU ISOE West"
          }
        }
      }, {
        id: "aws-iso-f",
        outputs: {
          dnsSuffix: "csp.hci.ic.gov",
          dualStackDnsSuffix: "api.aws.hci.ic.gov",
          implicitGlobalRegion: "us-isof-south-1",
          name: "aws-iso-f",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-isof\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-f-global": {
            description: "aws-iso-f global region"
          },
          "us-isof-east-1": {
            description: "US ISOF EAST"
          },
          "us-isof-south-1": {
            description: "US ISOF SOUTH"
          }
        }
      }, {
        id: "aws-us-gov",
        outputs: {
          dnsSuffix: "amazonaws.com",
          dualStackDnsSuffix: "api.aws",
          implicitGlobalRegion: "us-gov-west-1",
          name: "aws-us-gov",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
        regions: {
          "aws-us-gov-global": {
            description: "aws-us-gov global region"
          },
          "us-gov-east-1": {
            description: "AWS GovCloud (US-East)"
          },
          "us-gov-west-1": {
            description: "AWS GovCloud (US-West)"
          }
        }
      }],
      version: "1.1"
    };
  }
});
var selectedPartitionsInfo;
var selectedUserAgentPrefix;
var partition;
var getUserAgentPrefix;
var init_partition = __esm({
  "../node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partition.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_partitions();
    selectedPartitionsInfo = partitions_default;
    selectedUserAgentPrefix = "";
    partition = /* @__PURE__ */ __name2((value) => {
      const { partitions } = selectedPartitionsInfo;
      for (const partition2 of partitions) {
        const { regions, outputs } = partition2;
        for (const [region, regionData] of Object.entries(regions)) {
          if (region === value) {
            return {
              ...outputs,
              ...regionData
            };
          }
        }
      }
      for (const partition2 of partitions) {
        const { regionRegex, outputs } = partition2;
        if (new RegExp(regionRegex).test(value)) {
          return {
            ...outputs
          };
        }
      }
      const DEFAULT_PARTITION = partitions.find((partition2) => partition2.id === "aws");
      if (!DEFAULT_PARTITION) {
        throw new Error("Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist.");
      }
      return {
        ...DEFAULT_PARTITION.outputs
      };
    }, "partition");
    getUserAgentPrefix = /* @__PURE__ */ __name2(() => selectedUserAgentPrefix, "getUserAgentPrefix");
  }
});
var awsEndpointFunctions;
var init_aws = __esm({
  "../node_modules/@aws-sdk/util-endpoints/dist-es/aws.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es29();
    init_isVirtualHostableS3Bucket();
    init_parseArn();
    init_partition();
    awsEndpointFunctions = {
      isVirtualHostableS3Bucket,
      parseArn,
      partition
    };
    customEndpointFunctions.aws = awsEndpointFunctions;
  }
});
function parseQueryString(querystring) {
  const query = {};
  querystring = querystring.replace(/^\?/, "");
  if (querystring) {
    for (const pair of querystring.split("&")) {
      let [key, value = null] = pair.split("=");
      key = decodeURIComponent(key);
      if (value) {
        value = decodeURIComponent(value);
      }
      if (!(key in query)) {
        query[key] = value;
      } else if (Array.isArray(query[key])) {
        query[key].push(value);
      } else {
        query[key] = [query[key], value];
      }
    }
  }
  return query;
}
__name(parseQueryString, "parseQueryString");
var init_dist_es30 = __esm({
  "../node_modules/@smithy/querystring-parser/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    __name2(parseQueryString, "parseQueryString");
  }
});
var parseUrl;
var init_dist_es31 = __esm({
  "../node_modules/@smithy/url-parser/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es30();
    parseUrl = /* @__PURE__ */ __name2((url2) => {
      if (typeof url2 === "string") {
        return parseUrl(new URL(url2));
      }
      const { hostname: hostname3, pathname, port, protocol, search } = url2;
      let query;
      if (search) {
        query = parseQueryString(search);
      }
      return {
        hostname: hostname3,
        port: port ? parseInt(port) : void 0,
        protocol,
        path: pathname,
        query
      };
    }, "parseUrl");
  }
});
var init_resolveDefaultAwsRegionalEndpointsConfig = __esm({
  "../node_modules/@aws-sdk/util-endpoints/dist-es/resolveDefaultAwsRegionalEndpointsConfig.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_resolveEndpoint2 = __esm({
  "../node_modules/@aws-sdk/util-endpoints/dist-es/resolveEndpoint.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_EndpointError2 = __esm({
  "../node_modules/@aws-sdk/util-endpoints/dist-es/types/EndpointError.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_EndpointRuleObject3 = __esm({
  "../node_modules/@aws-sdk/util-endpoints/dist-es/types/EndpointRuleObject.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_ErrorRuleObject3 = __esm({
  "../node_modules/@aws-sdk/util-endpoints/dist-es/types/ErrorRuleObject.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_RuleSetObject3 = __esm({
  "../node_modules/@aws-sdk/util-endpoints/dist-es/types/RuleSetObject.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_TreeRuleObject3 = __esm({
  "../node_modules/@aws-sdk/util-endpoints/dist-es/types/TreeRuleObject.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_shared3 = __esm({
  "../node_modules/@aws-sdk/util-endpoints/dist-es/types/shared.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_types4 = __esm({
  "../node_modules/@aws-sdk/util-endpoints/dist-es/types/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_EndpointError2();
    init_EndpointRuleObject3();
    init_ErrorRuleObject3();
    init_RuleSetObject3();
    init_TreeRuleObject3();
    init_shared3();
  }
});
var init_dist_es32 = __esm({
  "../node_modules/@aws-sdk/util-endpoints/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_aws();
    init_partition();
    init_isIpAddress2();
    init_resolveDefaultAwsRegionalEndpointsConfig();
    init_resolveEndpoint2();
    init_types4();
  }
});
async function checkFeatures(context, config2, args) {
  const request = args.request;
  if (request?.headers?.["smithy-protocol"] === "rpc-v2-cbor") {
    setFeature(context, "PROTOCOL_RPC_V2_CBOR", "M");
  }
  if (typeof config2.retryStrategy === "function") {
    const retryStrategy = await config2.retryStrategy();
    if (typeof retryStrategy.acquireInitialRetryToken === "function") {
      if (retryStrategy.constructor?.name?.includes("Adaptive")) {
        setFeature(context, "RETRY_MODE_ADAPTIVE", "F");
      } else {
        setFeature(context, "RETRY_MODE_STANDARD", "E");
      }
    } else {
      setFeature(context, "RETRY_MODE_LEGACY", "D");
    }
  }
  if (typeof config2.accountIdEndpointMode === "function") {
    const endpointV2 = context.endpointV2;
    if (String(endpointV2?.url?.hostname).match(ACCOUNT_ID_ENDPOINT_REGEX)) {
      setFeature(context, "ACCOUNT_ID_ENDPOINT", "O");
    }
    switch (await config2.accountIdEndpointMode?.()) {
      case "disabled":
        setFeature(context, "ACCOUNT_ID_MODE_DISABLED", "Q");
        break;
      case "preferred":
        setFeature(context, "ACCOUNT_ID_MODE_PREFERRED", "P");
        break;
      case "required":
        setFeature(context, "ACCOUNT_ID_MODE_REQUIRED", "R");
        break;
    }
  }
  const identity = context.__smithy_context?.selectedHttpAuthScheme?.identity;
  if (identity?.$source) {
    const credentials = identity;
    if (credentials.accountId) {
      setFeature(context, "RESOLVED_ACCOUNT_ID", "T");
    }
    for (const [key, value] of Object.entries(credentials.$source ?? {})) {
      setFeature(context, key, value);
    }
  }
}
__name(checkFeatures, "checkFeatures");
var ACCOUNT_ID_ENDPOINT_REGEX;
var init_check_features = __esm({
  "../node_modules/@aws-sdk/middleware-user-agent/dist-es/check-features.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es21();
    ACCOUNT_ID_ENDPOINT_REGEX = /\d{12}\.ddb/;
    __name2(checkFeatures, "checkFeatures");
  }
});
var USER_AGENT;
var X_AMZ_USER_AGENT;
var SPACE;
var UA_NAME_SEPARATOR;
var UA_NAME_ESCAPE_REGEX;
var UA_VALUE_ESCAPE_REGEX;
var UA_ESCAPE_CHAR;
var init_constants5 = __esm({
  "../node_modules/@aws-sdk/middleware-user-agent/dist-es/constants.js"() {
    init_functionsRoutes_0_09879299104094341();
    USER_AGENT = "user-agent";
    X_AMZ_USER_AGENT = "x-amz-user-agent";
    SPACE = " ";
    UA_NAME_SEPARATOR = "/";
    UA_NAME_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
    UA_VALUE_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w\#]/g;
    UA_ESCAPE_CHAR = "-";
  }
});
function encodeFeatures(features) {
  let buffer = "";
  for (const key in features) {
    const val = features[key];
    if (buffer.length + val.length + 1 <= BYTE_LIMIT) {
      if (buffer.length) {
        buffer += "," + val;
      } else {
        buffer += val;
      }
      continue;
    }
    break;
  }
  return buffer;
}
__name(encodeFeatures, "encodeFeatures");
var BYTE_LIMIT;
var init_encode_features = __esm({
  "../node_modules/@aws-sdk/middleware-user-agent/dist-es/encode-features.js"() {
    init_functionsRoutes_0_09879299104094341();
    BYTE_LIMIT = 1024;
    __name2(encodeFeatures, "encodeFeatures");
  }
});
var userAgentMiddleware;
var escapeUserAgent;
var getUserAgentMiddlewareOptions;
var getUserAgentPlugin;
var init_user_agent_middleware = __esm({
  "../node_modules/@aws-sdk/middleware-user-agent/dist-es/user-agent-middleware.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es32();
    init_dist_es2();
    init_check_features();
    init_constants5();
    init_encode_features();
    userAgentMiddleware = /* @__PURE__ */ __name2((options) => (next, context) => async (args) => {
      const { request } = args;
      if (!HttpRequest.isInstance(request)) {
        return next(args);
      }
      const { headers } = request;
      const userAgent2 = context?.userAgent?.map(escapeUserAgent) || [];
      const defaultUserAgent2 = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
      await checkFeatures(context, options, args);
      const awsContext = context;
      defaultUserAgent2.push(`m/${encodeFeatures(Object.assign({}, context.__smithy_context?.features, awsContext.__aws_sdk_context?.features))}`);
      const customUserAgent = options?.customUserAgent?.map(escapeUserAgent) || [];
      const appId = await options.userAgentAppId();
      if (appId) {
        defaultUserAgent2.push(escapeUserAgent([`app/${appId}`]));
      }
      const prefix = getUserAgentPrefix();
      const sdkUserAgentValue = (prefix ? [prefix] : []).concat([...defaultUserAgent2, ...userAgent2, ...customUserAgent]).join(SPACE);
      const normalUAValue = [
        ...defaultUserAgent2.filter((section) => section.startsWith("aws-sdk-")),
        ...customUserAgent
      ].join(SPACE);
      if (options.runtime !== "browser") {
        if (normalUAValue) {
          headers[X_AMZ_USER_AGENT] = headers[X_AMZ_USER_AGENT] ? `${headers[USER_AGENT]} ${normalUAValue}` : normalUAValue;
        }
        headers[USER_AGENT] = sdkUserAgentValue;
      } else {
        headers[X_AMZ_USER_AGENT] = sdkUserAgentValue;
      }
      return next({
        ...args,
        request
      });
    }, "userAgentMiddleware");
    escapeUserAgent = /* @__PURE__ */ __name2((userAgentPair) => {
      const name = userAgentPair[0].split(UA_NAME_SEPARATOR).map((part) => part.replace(UA_NAME_ESCAPE_REGEX, UA_ESCAPE_CHAR)).join(UA_NAME_SEPARATOR);
      const version3 = userAgentPair[1]?.replace(UA_VALUE_ESCAPE_REGEX, UA_ESCAPE_CHAR);
      const prefixSeparatorIndex = name.indexOf(UA_NAME_SEPARATOR);
      const prefix = name.substring(0, prefixSeparatorIndex);
      let uaName = name.substring(prefixSeparatorIndex + 1);
      if (prefix === "api") {
        uaName = uaName.toLowerCase();
      }
      return [prefix, uaName, version3].filter((item) => item && item.length > 0).reduce((acc, item, index) => {
        switch (index) {
          case 0:
            return item;
          case 1:
            return `${acc}/${item}`;
          default:
            return `${acc}#${item}`;
        }
      }, "");
    }, "escapeUserAgent");
    getUserAgentMiddlewareOptions = {
      name: "getUserAgentMiddleware",
      step: "build",
      priority: "low",
      tags: ["SET_USER_AGENT", "USER_AGENT"],
      override: true
    };
    getUserAgentPlugin = /* @__PURE__ */ __name2((config2) => ({
      applyToStack: /* @__PURE__ */ __name2((clientStack) => {
        clientStack.add(userAgentMiddleware(config2), getUserAgentMiddlewareOptions);
      }, "applyToStack")
    }), "getUserAgentPlugin");
  }
});
var init_dist_es33 = __esm({
  "../node_modules/@aws-sdk/middleware-user-agent/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_configurations();
    init_user_agent_middleware();
  }
});
var DEFAULT_USE_DUALSTACK_ENDPOINT;
var init_NodeUseDualstackEndpointConfigOptions = __esm({
  "../node_modules/@smithy/config-resolver/dist-es/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js"() {
    init_functionsRoutes_0_09879299104094341();
    DEFAULT_USE_DUALSTACK_ENDPOINT = false;
  }
});
var DEFAULT_USE_FIPS_ENDPOINT;
var init_NodeUseFipsEndpointConfigOptions = __esm({
  "../node_modules/@smithy/config-resolver/dist-es/endpointsConfig/NodeUseFipsEndpointConfigOptions.js"() {
    init_functionsRoutes_0_09879299104094341();
    DEFAULT_USE_FIPS_ENDPOINT = false;
  }
});
var init_resolveCustomEndpointsConfig = __esm({
  "../node_modules/@smithy/config-resolver/dist-es/endpointsConfig/resolveCustomEndpointsConfig.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_resolveEndpointsConfig = __esm({
  "../node_modules/@smithy/config-resolver/dist-es/endpointsConfig/resolveEndpointsConfig.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_endpointsConfig = __esm({
  "../node_modules/@smithy/config-resolver/dist-es/endpointsConfig/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_NodeUseDualstackEndpointConfigOptions();
    init_NodeUseFipsEndpointConfigOptions();
    init_resolveCustomEndpointsConfig();
    init_resolveEndpointsConfig();
  }
});
var init_config2 = __esm({
  "../node_modules/@smithy/config-resolver/dist-es/regionConfig/config.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var isFipsRegion;
var init_isFipsRegion = __esm({
  "../node_modules/@smithy/config-resolver/dist-es/regionConfig/isFipsRegion.js"() {
    init_functionsRoutes_0_09879299104094341();
    isFipsRegion = /* @__PURE__ */ __name2((region) => typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips")), "isFipsRegion");
  }
});
var getRealRegion;
var init_getRealRegion = __esm({
  "../node_modules/@smithy/config-resolver/dist-es/regionConfig/getRealRegion.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_isFipsRegion();
    getRealRegion = /* @__PURE__ */ __name2((region) => isFipsRegion(region) ? ["fips-aws-global", "aws-fips"].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region, "getRealRegion");
  }
});
var resolveRegionConfig;
var init_resolveRegionConfig = __esm({
  "../node_modules/@smithy/config-resolver/dist-es/regionConfig/resolveRegionConfig.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_getRealRegion();
    init_isFipsRegion();
    resolveRegionConfig = /* @__PURE__ */ __name2((input) => {
      const { region, useFipsEndpoint } = input;
      if (!region) {
        throw new Error("Region is missing");
      }
      return Object.assign(input, {
        region: /* @__PURE__ */ __name2(async () => {
          if (typeof region === "string") {
            return getRealRegion(region);
          }
          const providedRegion = await region();
          return getRealRegion(providedRegion);
        }, "region"),
        useFipsEndpoint: /* @__PURE__ */ __name2(async () => {
          const providedRegion = typeof region === "string" ? region : await region();
          if (isFipsRegion(providedRegion)) {
            return true;
          }
          return typeof useFipsEndpoint !== "function" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();
        }, "useFipsEndpoint")
      });
    }, "resolveRegionConfig");
  }
});
var init_regionConfig = __esm({
  "../node_modules/@smithy/config-resolver/dist-es/regionConfig/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_config2();
    init_resolveRegionConfig();
  }
});
var init_PartitionHash = __esm({
  "../node_modules/@smithy/config-resolver/dist-es/regionInfo/PartitionHash.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_RegionHash = __esm({
  "../node_modules/@smithy/config-resolver/dist-es/regionInfo/RegionHash.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_getRegionInfo = __esm({
  "../node_modules/@smithy/config-resolver/dist-es/regionInfo/getRegionInfo.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_regionInfo = __esm({
  "../node_modules/@smithy/config-resolver/dist-es/regionInfo/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_PartitionHash();
    init_RegionHash();
    init_getRegionInfo();
  }
});
var init_dist_es34 = __esm({
  "../node_modules/@smithy/config-resolver/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_endpointsConfig();
    init_regionConfig();
    init_regionInfo();
  }
});
var resolveEventStreamSerdeConfig;
var init_EventStreamSerdeConfig = __esm({
  "../node_modules/@smithy/eventstream-serde-config-resolver/dist-es/EventStreamSerdeConfig.js"() {
    init_functionsRoutes_0_09879299104094341();
    resolveEventStreamSerdeConfig = /* @__PURE__ */ __name2((input) => Object.assign(input, {
      eventStreamMarshaller: input.eventStreamSerdeProvider(input)
    }), "resolveEventStreamSerdeConfig");
  }
});
var init_dist_es35 = __esm({
  "../node_modules/@smithy/eventstream-serde-config-resolver/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_EventStreamSerdeConfig();
  }
});
function contentLengthMiddleware(bodyLengthChecker) {
  return (next) => async (args) => {
    const request = args.request;
    if (HttpRequest.isInstance(request)) {
      const { body, headers } = request;
      if (body && Object.keys(headers).map((str) => str.toLowerCase()).indexOf(CONTENT_LENGTH_HEADER2) === -1) {
        try {
          const length = bodyLengthChecker(body);
          request.headers = {
            ...request.headers,
            [CONTENT_LENGTH_HEADER2]: String(length)
          };
        } catch (error45) {
        }
      }
    }
    return next({
      ...args,
      request
    });
  };
}
__name(contentLengthMiddleware, "contentLengthMiddleware");
var CONTENT_LENGTH_HEADER2;
var contentLengthMiddlewareOptions;
var getContentLengthPlugin;
var init_dist_es36 = __esm({
  "../node_modules/@smithy/middleware-content-length/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es2();
    CONTENT_LENGTH_HEADER2 = "content-length";
    __name2(contentLengthMiddleware, "contentLengthMiddleware");
    contentLengthMiddlewareOptions = {
      step: "build",
      tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
      name: "contentLengthMiddleware",
      override: true
    };
    getContentLengthPlugin = /* @__PURE__ */ __name2((options) => ({
      applyToStack: /* @__PURE__ */ __name2((clientStack) => {
        clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), contentLengthMiddlewareOptions);
      }, "applyToStack")
    }), "getContentLengthPlugin");
  }
});
var resolveParamsForS3;
var DOMAIN_PATTERN;
var IP_ADDRESS_PATTERN;
var DOTS_PATTERN;
var isDnsCompatibleBucketName;
var isArnBucketName;
var init_s3 = __esm({
  "../node_modules/@smithy/middleware-endpoint/dist-es/service-customizations/s3.js"() {
    init_functionsRoutes_0_09879299104094341();
    resolveParamsForS3 = /* @__PURE__ */ __name2(async (endpointParams) => {
      const bucket = endpointParams?.Bucket || "";
      if (typeof endpointParams.Bucket === "string") {
        endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent("#")).replace(/\?/g, encodeURIComponent("?"));
      }
      if (isArnBucketName(bucket)) {
        if (endpointParams.ForcePathStyle === true) {
          throw new Error("Path-style addressing cannot be used with ARN buckets");
        }
      } else if (!isDnsCompatibleBucketName(bucket) || bucket.indexOf(".") !== -1 && !String(endpointParams.Endpoint).startsWith("http:") || bucket.toLowerCase() !== bucket || bucket.length < 3) {
        endpointParams.ForcePathStyle = true;
      }
      if (endpointParams.DisableMultiRegionAccessPoints) {
        endpointParams.disableMultiRegionAccessPoints = true;
        endpointParams.DisableMRAP = true;
      }
      return endpointParams;
    }, "resolveParamsForS3");
    DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
    IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
    DOTS_PATTERN = /\.\./;
    isDnsCompatibleBucketName = /* @__PURE__ */ __name2((bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName), "isDnsCompatibleBucketName");
    isArnBucketName = /* @__PURE__ */ __name2((bucketName) => {
      const [arn, partition2, service, , , bucket] = bucketName.split(":");
      const isArn = arn === "arn" && bucketName.split(":").length >= 6;
      const isValidArn = Boolean(isArn && partition2 && service && bucket);
      if (isArn && !isValidArn) {
        throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);
      }
      return isValidArn;
    }, "isArnBucketName");
  }
});
var init_service_customizations = __esm({
  "../node_modules/@smithy/middleware-endpoint/dist-es/service-customizations/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_s3();
  }
});
var createConfigValueProvider;
var init_createConfigValueProvider = __esm({
  "../node_modules/@smithy/middleware-endpoint/dist-es/adaptors/createConfigValueProvider.js"() {
    init_functionsRoutes_0_09879299104094341();
    createConfigValueProvider = /* @__PURE__ */ __name2((configKey, canonicalEndpointParamKey, config2) => {
      const configProvider = /* @__PURE__ */ __name2(async () => {
        const configValue = config2[configKey] ?? config2[canonicalEndpointParamKey];
        if (typeof configValue === "function") {
          return configValue();
        }
        return configValue;
      }, "configProvider");
      if (configKey === "credentialScope" || canonicalEndpointParamKey === "CredentialScope") {
        return async () => {
          const credentials = typeof config2.credentials === "function" ? await config2.credentials() : config2.credentials;
          const configValue = credentials?.credentialScope ?? credentials?.CredentialScope;
          return configValue;
        };
      }
      if (configKey === "accountId" || canonicalEndpointParamKey === "AccountId") {
        return async () => {
          const credentials = typeof config2.credentials === "function" ? await config2.credentials() : config2.credentials;
          const configValue = credentials?.accountId ?? credentials?.AccountId;
          return configValue;
        };
      }
      if (configKey === "endpoint" || canonicalEndpointParamKey === "endpoint") {
        return async () => {
          if (config2.isCustomEndpoint === false) {
            return void 0;
          }
          const endpoint = await configProvider();
          if (endpoint && typeof endpoint === "object") {
            if ("url" in endpoint) {
              return endpoint.url.href;
            }
            if ("hostname" in endpoint) {
              const { protocol, hostname: hostname3, port, path } = endpoint;
              return `${protocol}//${hostname3}${port ? ":" + port : ""}${path}`;
            }
          }
          return endpoint;
        };
      }
      return configProvider;
    }, "createConfigValueProvider");
  }
});
var getEndpointFromConfig;
var init_getEndpointFromConfig_browser = __esm({
  "../node_modules/@smithy/middleware-endpoint/dist-es/adaptors/getEndpointFromConfig.browser.js"() {
    init_functionsRoutes_0_09879299104094341();
    getEndpointFromConfig = /* @__PURE__ */ __name2(async (serviceId) => void 0, "getEndpointFromConfig");
  }
});
var toEndpointV1;
var init_toEndpointV1 = __esm({
  "../node_modules/@smithy/middleware-endpoint/dist-es/adaptors/toEndpointV1.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es31();
    toEndpointV1 = /* @__PURE__ */ __name2((endpoint) => {
      if (typeof endpoint === "object") {
        if ("url" in endpoint) {
          return parseUrl(endpoint.url);
        }
        return endpoint;
      }
      return parseUrl(endpoint);
    }, "toEndpointV1");
  }
});
var getEndpointFromInstructions;
var resolveParams;
var init_getEndpointFromInstructions = __esm({
  "../node_modules/@smithy/middleware-endpoint/dist-es/adaptors/getEndpointFromInstructions.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_service_customizations();
    init_createConfigValueProvider();
    init_getEndpointFromConfig_browser();
    init_toEndpointV1();
    getEndpointFromInstructions = /* @__PURE__ */ __name2(async (commandInput, instructionsSupplier, clientConfig, context) => {
      if (!clientConfig.isCustomEndpoint) {
        let endpointFromConfig;
        if (clientConfig.serviceConfiguredEndpoint) {
          endpointFromConfig = await clientConfig.serviceConfiguredEndpoint();
        } else {
          endpointFromConfig = await getEndpointFromConfig(clientConfig.serviceId);
        }
        if (endpointFromConfig) {
          clientConfig.endpoint = () => Promise.resolve(toEndpointV1(endpointFromConfig));
          clientConfig.isCustomEndpoint = true;
        }
      }
      const endpointParams = await resolveParams(commandInput, instructionsSupplier, clientConfig);
      if (typeof clientConfig.endpointProvider !== "function") {
        throw new Error("config.endpointProvider is not set.");
      }
      const endpoint = clientConfig.endpointProvider(endpointParams, context);
      return endpoint;
    }, "getEndpointFromInstructions");
    resolveParams = /* @__PURE__ */ __name2(async (commandInput, instructionsSupplier, clientConfig) => {
      const endpointParams = {};
      const instructions = instructionsSupplier?.getEndpointParameterInstructions?.() || {};
      for (const [name, instruction] of Object.entries(instructions)) {
        switch (instruction.type) {
          case "staticContextParams":
            endpointParams[name] = instruction.value;
            break;
          case "contextParams":
            endpointParams[name] = commandInput[instruction.name];
            break;
          case "clientContextParams":
          case "builtInParams":
            endpointParams[name] = await createConfigValueProvider(instruction.name, name, clientConfig)();
            break;
          case "operationContextParams":
            endpointParams[name] = instruction.get(commandInput);
            break;
          default:
            throw new Error("Unrecognized endpoint parameter instruction: " + JSON.stringify(instruction));
        }
      }
      if (Object.keys(instructions).length === 0) {
        Object.assign(endpointParams, clientConfig);
      }
      if (String(clientConfig.serviceId).toLowerCase() === "s3") {
        await resolveParamsForS3(endpointParams);
      }
      return endpointParams;
    }, "resolveParams");
  }
});
var init_adaptors = __esm({
  "../node_modules/@smithy/middleware-endpoint/dist-es/adaptors/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_getEndpointFromInstructions();
    init_toEndpointV1();
  }
});
var endpointMiddleware;
var init_endpointMiddleware = __esm({
  "../node_modules/@smithy/middleware-endpoint/dist-es/endpointMiddleware.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es13();
    init_dist_es4();
    init_getEndpointFromInstructions();
    endpointMiddleware = /* @__PURE__ */ __name2(({ config: config2, instructions }) => {
      return (next, context) => async (args) => {
        if (config2.isCustomEndpoint) {
          setFeature2(context, "ENDPOINT_OVERRIDE", "N");
        }
        const endpoint = await getEndpointFromInstructions(args.input, {
          getEndpointParameterInstructions() {
            return instructions;
          }
        }, { ...config2 }, context);
        context.endpointV2 = endpoint;
        context.authSchemes = endpoint.properties?.authSchemes;
        const authScheme = context.authSchemes?.[0];
        if (authScheme) {
          context["signing_region"] = authScheme.signingRegion;
          context["signing_service"] = authScheme.signingName;
          const smithyContext = getSmithyContext(context);
          const httpAuthOption = smithyContext?.selectedHttpAuthScheme?.httpAuthOption;
          if (httpAuthOption) {
            httpAuthOption.signingProperties = Object.assign(httpAuthOption.signingProperties || {}, {
              signing_region: authScheme.signingRegion,
              signingRegion: authScheme.signingRegion,
              signing_service: authScheme.signingName,
              signingName: authScheme.signingName,
              signingRegionSet: authScheme.signingRegionSet
            }, authScheme.properties);
          }
        }
        return next({
          ...args
        });
      };
    }, "endpointMiddleware");
  }
});
var endpointMiddlewareOptions;
var getEndpointPlugin;
var init_getEndpointPlugin = __esm({
  "../node_modules/@smithy/middleware-endpoint/dist-es/getEndpointPlugin.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es5();
    init_endpointMiddleware();
    endpointMiddlewareOptions = {
      step: "serialize",
      tags: ["ENDPOINT_PARAMETERS", "ENDPOINT_V2", "ENDPOINT"],
      name: "endpointV2Middleware",
      override: true,
      relation: "before",
      toMiddleware: serializerMiddlewareOption.name
    };
    getEndpointPlugin = /* @__PURE__ */ __name2((config2, instructions) => ({
      applyToStack: /* @__PURE__ */ __name2((clientStack) => {
        clientStack.addRelativeTo(endpointMiddleware({
          config: config2,
          instructions
        }), endpointMiddlewareOptions);
      }, "applyToStack")
    }), "getEndpointPlugin");
  }
});
var resolveEndpointConfig;
var init_resolveEndpointConfig = __esm({
  "../node_modules/@smithy/middleware-endpoint/dist-es/resolveEndpointConfig.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es4();
    init_getEndpointFromConfig_browser();
    init_toEndpointV1();
    resolveEndpointConfig = /* @__PURE__ */ __name2((input) => {
      const tls = input.tls ?? true;
      const { endpoint, useDualstackEndpoint, useFipsEndpoint } = input;
      const customEndpointProvider = endpoint != null ? async () => toEndpointV1(await normalizeProvider(endpoint)()) : void 0;
      const isCustomEndpoint = !!endpoint;
      const resolvedConfig = Object.assign(input, {
        endpoint: customEndpointProvider,
        tls,
        isCustomEndpoint,
        useDualstackEndpoint: normalizeProvider(useDualstackEndpoint ?? false),
        useFipsEndpoint: normalizeProvider(useFipsEndpoint ?? false)
      });
      let configuredEndpointPromise = void 0;
      resolvedConfig.serviceConfiguredEndpoint = async () => {
        if (input.serviceId && !configuredEndpointPromise) {
          configuredEndpointPromise = getEndpointFromConfig(input.serviceId);
        }
        return configuredEndpointPromise;
      };
      return resolvedConfig;
    }, "resolveEndpointConfig");
  }
});
var init_resolveEndpointRequiredConfig = __esm({
  "../node_modules/@smithy/middleware-endpoint/dist-es/resolveEndpointRequiredConfig.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_types5 = __esm({
  "../node_modules/@smithy/middleware-endpoint/dist-es/types.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_dist_es37 = __esm({
  "../node_modules/@smithy/middleware-endpoint/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_adaptors();
    init_endpointMiddleware();
    init_getEndpointPlugin();
    init_resolveEndpointConfig();
    init_resolveEndpointRequiredConfig();
    init_types5();
  }
});
var RETRY_MODES;
var DEFAULT_MAX_ATTEMPTS;
var DEFAULT_RETRY_MODE;
var init_config3 = __esm({
  "../node_modules/@smithy/util-retry/dist-es/config.js"() {
    init_functionsRoutes_0_09879299104094341();
    (function(RETRY_MODES2) {
      RETRY_MODES2["STANDARD"] = "standard";
      RETRY_MODES2["ADAPTIVE"] = "adaptive";
    })(RETRY_MODES || (RETRY_MODES = {}));
    DEFAULT_MAX_ATTEMPTS = 3;
    DEFAULT_RETRY_MODE = RETRY_MODES.STANDARD;
  }
});
var THROTTLING_ERROR_CODES;
var TRANSIENT_ERROR_CODES;
var TRANSIENT_ERROR_STATUS_CODES;
var NODEJS_TIMEOUT_ERROR_CODES;
var NODEJS_NETWORK_ERROR_CODES;
var init_constants6 = __esm({
  "../node_modules/@smithy/service-error-classification/dist-es/constants.js"() {
    init_functionsRoutes_0_09879299104094341();
    THROTTLING_ERROR_CODES = [
      "BandwidthLimitExceeded",
      "EC2ThrottledException",
      "LimitExceededException",
      "PriorRequestNotComplete",
      "ProvisionedThroughputExceededException",
      "RequestLimitExceeded",
      "RequestThrottled",
      "RequestThrottledException",
      "SlowDown",
      "ThrottledException",
      "Throttling",
      "ThrottlingException",
      "TooManyRequestsException",
      "TransactionInProgressException"
    ];
    TRANSIENT_ERROR_CODES = ["TimeoutError", "RequestTimeout", "RequestTimeoutException"];
    TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];
    NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "ECONNREFUSED", "EPIPE", "ETIMEDOUT"];
    NODEJS_NETWORK_ERROR_CODES = ["EHOSTUNREACH", "ENETUNREACH", "ENOTFOUND"];
  }
});
var isRetryableByTrait;
var isClockSkewCorrectedError;
var isBrowserNetworkError;
var isThrottlingError;
var isTransientError;
var isServerError;
var init_dist_es38 = __esm({
  "../node_modules/@smithy/service-error-classification/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_constants6();
    isRetryableByTrait = /* @__PURE__ */ __name2((error45) => error45?.$retryable !== void 0, "isRetryableByTrait");
    isClockSkewCorrectedError = /* @__PURE__ */ __name2((error45) => error45.$metadata?.clockSkewCorrected, "isClockSkewCorrectedError");
    isBrowserNetworkError = /* @__PURE__ */ __name2((error45) => {
      const errorMessages = /* @__PURE__ */ new Set([
        "Failed to fetch",
        "NetworkError when attempting to fetch resource",
        "The Internet connection appears to be offline",
        "Load failed",
        "Network request failed"
      ]);
      const isValid = error45 && error45 instanceof TypeError;
      if (!isValid) {
        return false;
      }
      return errorMessages.has(error45.message);
    }, "isBrowserNetworkError");
    isThrottlingError = /* @__PURE__ */ __name2((error45) => error45.$metadata?.httpStatusCode === 429 || THROTTLING_ERROR_CODES.includes(error45.name) || error45.$retryable?.throttling == true, "isThrottlingError");
    isTransientError = /* @__PURE__ */ __name2((error45, depth = 0) => isRetryableByTrait(error45) || isClockSkewCorrectedError(error45) || TRANSIENT_ERROR_CODES.includes(error45.name) || NODEJS_TIMEOUT_ERROR_CODES.includes(error45?.code || "") || NODEJS_NETWORK_ERROR_CODES.includes(error45?.code || "") || TRANSIENT_ERROR_STATUS_CODES.includes(error45.$metadata?.httpStatusCode || 0) || isBrowserNetworkError(error45) || error45.cause !== void 0 && depth <= 10 && isTransientError(error45.cause, depth + 1), "isTransientError");
    isServerError = /* @__PURE__ */ __name2((error45) => {
      if (error45.$metadata?.httpStatusCode !== void 0) {
        const statusCode = error45.$metadata.httpStatusCode;
        if (500 <= statusCode && statusCode <= 599 && !isTransientError(error45)) {
          return true;
        }
        return false;
      }
      return false;
    }, "isServerError");
  }
});
var DefaultRateLimiter;
var init_DefaultRateLimiter = __esm({
  "../node_modules/@smithy/util-retry/dist-es/DefaultRateLimiter.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es38();
    DefaultRateLimiter = class _DefaultRateLimiter {
      static {
        __name(this, "_DefaultRateLimiter");
      }
      static {
        __name2(this, "DefaultRateLimiter");
      }
      constructor(options) {
        this.currentCapacity = 0;
        this.enabled = false;
        this.lastMaxRate = 0;
        this.measuredTxRate = 0;
        this.requestCount = 0;
        this.lastTimestamp = 0;
        this.timeWindow = 0;
        this.beta = options?.beta ?? 0.7;
        this.minCapacity = options?.minCapacity ?? 1;
        this.minFillRate = options?.minFillRate ?? 0.5;
        this.scaleConstant = options?.scaleConstant ?? 0.4;
        this.smooth = options?.smooth ?? 0.8;
        const currentTimeInSeconds = this.getCurrentTimeInSeconds();
        this.lastThrottleTime = currentTimeInSeconds;
        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
        this.fillRate = this.minFillRate;
        this.maxCapacity = this.minCapacity;
      }
      getCurrentTimeInSeconds() {
        return Date.now() / 1e3;
      }
      async getSendToken() {
        return this.acquireTokenBucket(1);
      }
      async acquireTokenBucket(amount) {
        if (!this.enabled) {
          return;
        }
        this.refillTokenBucket();
        if (amount > this.currentCapacity) {
          const delay = (amount - this.currentCapacity) / this.fillRate * 1e3;
          await new Promise((resolve) => _DefaultRateLimiter.setTimeoutFn(resolve, delay));
        }
        this.currentCapacity = this.currentCapacity - amount;
      }
      refillTokenBucket() {
        const timestamp = this.getCurrentTimeInSeconds();
        if (!this.lastTimestamp) {
          this.lastTimestamp = timestamp;
          return;
        }
        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
        this.lastTimestamp = timestamp;
      }
      updateClientSendingRate(response) {
        let calculatedRate;
        this.updateMeasuredRate();
        if (isThrottlingError(response)) {
          const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
          this.lastMaxRate = rateToUse;
          this.calculateTimeWindow();
          this.lastThrottleTime = this.getCurrentTimeInSeconds();
          calculatedRate = this.cubicThrottle(rateToUse);
          this.enableTokenBucket();
        } else {
          this.calculateTimeWindow();
          calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
        }
        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
        this.updateTokenBucketRate(newRate);
      }
      calculateTimeWindow() {
        this.timeWindow = this.getPrecise(Math.pow(this.lastMaxRate * (1 - this.beta) / this.scaleConstant, 1 / 3));
      }
      cubicThrottle(rateToUse) {
        return this.getPrecise(rateToUse * this.beta);
      }
      cubicSuccess(timestamp) {
        return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);
      }
      enableTokenBucket() {
        this.enabled = true;
      }
      updateTokenBucketRate(newRate) {
        this.refillTokenBucket();
        this.fillRate = Math.max(newRate, this.minFillRate);
        this.maxCapacity = Math.max(newRate, this.minCapacity);
        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
      }
      updateMeasuredRate() {
        const t2 = this.getCurrentTimeInSeconds();
        const timeBucket = Math.floor(t2 * 2) / 2;
        this.requestCount++;
        if (timeBucket > this.lastTxRateBucket) {
          const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
          this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
          this.requestCount = 0;
          this.lastTxRateBucket = timeBucket;
        }
      }
      getPrecise(num) {
        return parseFloat(num.toFixed(8));
      }
    };
    DefaultRateLimiter.setTimeoutFn = setTimeout;
  }
});
var DEFAULT_RETRY_DELAY_BASE;
var MAXIMUM_RETRY_DELAY;
var THROTTLING_RETRY_DELAY_BASE;
var INITIAL_RETRY_TOKENS;
var RETRY_COST;
var TIMEOUT_RETRY_COST;
var NO_RETRY_INCREMENT;
var INVOCATION_ID_HEADER;
var REQUEST_HEADER;
var init_constants7 = __esm({
  "../node_modules/@smithy/util-retry/dist-es/constants.js"() {
    init_functionsRoutes_0_09879299104094341();
    DEFAULT_RETRY_DELAY_BASE = 100;
    MAXIMUM_RETRY_DELAY = 20 * 1e3;
    THROTTLING_RETRY_DELAY_BASE = 500;
    INITIAL_RETRY_TOKENS = 500;
    RETRY_COST = 5;
    TIMEOUT_RETRY_COST = 10;
    NO_RETRY_INCREMENT = 1;
    INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
    REQUEST_HEADER = "amz-sdk-request";
  }
});
var getDefaultRetryBackoffStrategy;
var init_defaultRetryBackoffStrategy = __esm({
  "../node_modules/@smithy/util-retry/dist-es/defaultRetryBackoffStrategy.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_constants7();
    getDefaultRetryBackoffStrategy = /* @__PURE__ */ __name2(() => {
      let delayBase = DEFAULT_RETRY_DELAY_BASE;
      const computeNextBackoffDelay = /* @__PURE__ */ __name2((attempts) => {
        return Math.floor(Math.min(MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
      }, "computeNextBackoffDelay");
      const setDelayBase = /* @__PURE__ */ __name2((delay) => {
        delayBase = delay;
      }, "setDelayBase");
      return {
        computeNextBackoffDelay,
        setDelayBase
      };
    }, "getDefaultRetryBackoffStrategy");
  }
});
var createDefaultRetryToken;
var init_defaultRetryToken = __esm({
  "../node_modules/@smithy/util-retry/dist-es/defaultRetryToken.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_constants7();
    createDefaultRetryToken = /* @__PURE__ */ __name2(({ retryDelay, retryCount, retryCost }) => {
      const getRetryCount = /* @__PURE__ */ __name2(() => retryCount, "getRetryCount");
      const getRetryDelay = /* @__PURE__ */ __name2(() => Math.min(MAXIMUM_RETRY_DELAY, retryDelay), "getRetryDelay");
      const getRetryCost = /* @__PURE__ */ __name2(() => retryCost, "getRetryCost");
      return {
        getRetryCount,
        getRetryDelay,
        getRetryCost
      };
    }, "createDefaultRetryToken");
  }
});
var StandardRetryStrategy;
var init_StandardRetryStrategy = __esm({
  "../node_modules/@smithy/util-retry/dist-es/StandardRetryStrategy.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_config3();
    init_constants7();
    init_defaultRetryBackoffStrategy();
    init_defaultRetryToken();
    StandardRetryStrategy = class {
      static {
        __name(this, "StandardRetryStrategy");
      }
      static {
        __name2(this, "StandardRetryStrategy");
      }
      constructor(maxAttempts) {
        this.maxAttempts = maxAttempts;
        this.mode = RETRY_MODES.STANDARD;
        this.capacity = INITIAL_RETRY_TOKENS;
        this.retryBackoffStrategy = getDefaultRetryBackoffStrategy();
        this.maxAttemptsProvider = typeof maxAttempts === "function" ? maxAttempts : async () => maxAttempts;
      }
      async acquireInitialRetryToken(retryTokenScope) {
        return createDefaultRetryToken({
          retryDelay: DEFAULT_RETRY_DELAY_BASE,
          retryCount: 0
        });
      }
      async refreshRetryTokenForRetry(token, errorInfo) {
        const maxAttempts = await this.getMaxAttempts();
        if (this.shouldRetry(token, errorInfo, maxAttempts)) {
          const errorType = errorInfo.errorType;
          this.retryBackoffStrategy.setDelayBase(errorType === "THROTTLING" ? THROTTLING_RETRY_DELAY_BASE : DEFAULT_RETRY_DELAY_BASE);
          const delayFromErrorType = this.retryBackoffStrategy.computeNextBackoffDelay(token.getRetryCount());
          const retryDelay = errorInfo.retryAfterHint ? Math.max(errorInfo.retryAfterHint.getTime() - Date.now() || 0, delayFromErrorType) : delayFromErrorType;
          const capacityCost = this.getCapacityCost(errorType);
          this.capacity -= capacityCost;
          return createDefaultRetryToken({
            retryDelay,
            retryCount: token.getRetryCount() + 1,
            retryCost: capacityCost
          });
        }
        throw new Error("No retry token available");
      }
      recordSuccess(token) {
        this.capacity = Math.max(INITIAL_RETRY_TOKENS, this.capacity + (token.getRetryCost() ?? NO_RETRY_INCREMENT));
      }
      getCapacity() {
        return this.capacity;
      }
      async getMaxAttempts() {
        try {
          return await this.maxAttemptsProvider();
        } catch (error45) {
          console.warn(`Max attempts provider could not resolve. Using default of ${DEFAULT_MAX_ATTEMPTS}`);
          return DEFAULT_MAX_ATTEMPTS;
        }
      }
      shouldRetry(tokenToRenew, errorInfo, maxAttempts) {
        const attempts = tokenToRenew.getRetryCount() + 1;
        return attempts < maxAttempts && this.capacity >= this.getCapacityCost(errorInfo.errorType) && this.isRetryableError(errorInfo.errorType);
      }
      getCapacityCost(errorType) {
        return errorType === "TRANSIENT" ? TIMEOUT_RETRY_COST : RETRY_COST;
      }
      isRetryableError(errorType) {
        return errorType === "THROTTLING" || errorType === "TRANSIENT";
      }
    };
  }
});
var AdaptiveRetryStrategy;
var init_AdaptiveRetryStrategy = __esm({
  "../node_modules/@smithy/util-retry/dist-es/AdaptiveRetryStrategy.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_config3();
    init_DefaultRateLimiter();
    init_StandardRetryStrategy();
    AdaptiveRetryStrategy = class {
      static {
        __name(this, "AdaptiveRetryStrategy");
      }
      static {
        __name2(this, "AdaptiveRetryStrategy");
      }
      constructor(maxAttemptsProvider, options) {
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = RETRY_MODES.ADAPTIVE;
        const { rateLimiter } = options ?? {};
        this.rateLimiter = rateLimiter ?? new DefaultRateLimiter();
        this.standardRetryStrategy = new StandardRetryStrategy(maxAttemptsProvider);
      }
      async acquireInitialRetryToken(retryTokenScope) {
        await this.rateLimiter.getSendToken();
        return this.standardRetryStrategy.acquireInitialRetryToken(retryTokenScope);
      }
      async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        this.rateLimiter.updateClientSendingRate(errorInfo);
        return this.standardRetryStrategy.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
      }
      recordSuccess(token) {
        this.rateLimiter.updateClientSendingRate({});
        this.standardRetryStrategy.recordSuccess(token);
      }
    };
  }
});
var init_ConfiguredRetryStrategy = __esm({
  "../node_modules/@smithy/util-retry/dist-es/ConfiguredRetryStrategy.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_types6 = __esm({
  "../node_modules/@smithy/util-retry/dist-es/types.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_dist_es39 = __esm({
  "../node_modules/@smithy/util-retry/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_AdaptiveRetryStrategy();
    init_ConfiguredRetryStrategy();
    init_DefaultRateLimiter();
    init_StandardRetryStrategy();
    init_config3();
    init_constants7();
    init_types6();
  }
});
var init_delayDecider = __esm({
  "../node_modules/@smithy/middleware-retry/dist-es/delayDecider.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_retryDecider = __esm({
  "../node_modules/@smithy/middleware-retry/dist-es/retryDecider.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var asSdkError;
var init_util5 = __esm({
  "../node_modules/@smithy/middleware-retry/dist-es/util.js"() {
    init_functionsRoutes_0_09879299104094341();
    asSdkError = /* @__PURE__ */ __name2((error45) => {
      if (error45 instanceof Error)
        return error45;
      if (error45 instanceof Object)
        return Object.assign(new Error(), error45);
      if (typeof error45 === "string")
        return new Error(error45);
      return new Error(`AWS SDK error wrapper for ${error45}`);
    }, "asSdkError");
  }
});
var init_StandardRetryStrategy2 = __esm({
  "../node_modules/@smithy/middleware-retry/dist-es/StandardRetryStrategy.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_AdaptiveRetryStrategy2 = __esm({
  "../node_modules/@smithy/middleware-retry/dist-es/AdaptiveRetryStrategy.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var resolveRetryConfig;
var init_configurations2 = __esm({
  "../node_modules/@smithy/middleware-retry/dist-es/configurations.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es4();
    init_dist_es39();
    resolveRetryConfig = /* @__PURE__ */ __name2((input) => {
      const { retryStrategy, retryMode: _retryMode, maxAttempts: _maxAttempts } = input;
      const maxAttempts = normalizeProvider(_maxAttempts ?? DEFAULT_MAX_ATTEMPTS);
      return Object.assign(input, {
        maxAttempts,
        retryStrategy: /* @__PURE__ */ __name2(async () => {
          if (retryStrategy) {
            return retryStrategy;
          }
          const retryMode = await normalizeProvider(_retryMode)();
          if (retryMode === RETRY_MODES.ADAPTIVE) {
            return new AdaptiveRetryStrategy(maxAttempts);
          }
          return new StandardRetryStrategy(maxAttempts);
        }, "retryStrategy")
      });
    }, "resolveRetryConfig");
  }
});
var init_omitRetryHeadersMiddleware = __esm({
  "../node_modules/@smithy/middleware-retry/dist-es/omitRetryHeadersMiddleware.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var isStreamingPayload;
var init_isStreamingPayload_browser = __esm({
  "../node_modules/@smithy/middleware-retry/dist-es/isStreamingPayload/isStreamingPayload.browser.js"() {
    init_functionsRoutes_0_09879299104094341();
    isStreamingPayload = /* @__PURE__ */ __name2((request) => request?.body instanceof ReadableStream, "isStreamingPayload");
  }
});
var retryMiddleware;
var isRetryStrategyV2;
var getRetryErrorInfo;
var getRetryErrorType;
var retryMiddlewareOptions;
var getRetryPlugin;
var getRetryAfterHint;
var init_retryMiddleware = __esm({
  "../node_modules/@smithy/middleware-retry/dist-es/retryMiddleware.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es2();
    init_dist_es38();
    init_dist_es19();
    init_dist_es39();
    init_esm_browser();
    init_isStreamingPayload_browser();
    init_util5();
    retryMiddleware = /* @__PURE__ */ __name2((options) => (next, context) => async (args) => {
      let retryStrategy = await options.retryStrategy();
      const maxAttempts = await options.maxAttempts();
      if (isRetryStrategyV2(retryStrategy)) {
        retryStrategy = retryStrategy;
        let retryToken = await retryStrategy.acquireInitialRetryToken(context["partition_id"]);
        let lastError = new Error();
        let attempts = 0;
        let totalRetryDelay = 0;
        const { request } = args;
        const isRequest = HttpRequest.isInstance(request);
        if (isRequest) {
          request.headers[INVOCATION_ID_HEADER] = v4_default();
        }
        while (true) {
          try {
            if (isRequest) {
              request.headers[REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            }
            const { response, output } = await next(args);
            retryStrategy.recordSuccess(retryToken);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalRetryDelay;
            return { response, output };
          } catch (e2) {
            const retryErrorInfo = getRetryErrorInfo(e2);
            lastError = asSdkError(e2);
            if (isRequest && isStreamingPayload(request)) {
              (context.logger instanceof NoOpLogger ? console : context.logger)?.warn("An error was encountered in a non-retryable streaming request.");
              throw lastError;
            }
            try {
              retryToken = await retryStrategy.refreshRetryTokenForRetry(retryToken, retryErrorInfo);
            } catch (refreshError) {
              if (!lastError.$metadata) {
                lastError.$metadata = {};
              }
              lastError.$metadata.attempts = attempts + 1;
              lastError.$metadata.totalRetryDelay = totalRetryDelay;
              throw lastError;
            }
            attempts = retryToken.getRetryCount();
            const delay = retryToken.getRetryDelay();
            totalRetryDelay += delay;
            await new Promise((resolve) => setTimeout(resolve, delay));
          }
        }
      } else {
        retryStrategy = retryStrategy;
        if (retryStrategy?.mode)
          context.userAgent = [...context.userAgent || [], ["cfg/retry-mode", retryStrategy.mode]];
        return retryStrategy.retry(next, args);
      }
    }, "retryMiddleware");
    isRetryStrategyV2 = /* @__PURE__ */ __name2((retryStrategy) => typeof retryStrategy.acquireInitialRetryToken !== "undefined" && typeof retryStrategy.refreshRetryTokenForRetry !== "undefined" && typeof retryStrategy.recordSuccess !== "undefined", "isRetryStrategyV2");
    getRetryErrorInfo = /* @__PURE__ */ __name2((error45) => {
      const errorInfo = {
        error: error45,
        errorType: getRetryErrorType(error45)
      };
      const retryAfterHint = getRetryAfterHint(error45.$response);
      if (retryAfterHint) {
        errorInfo.retryAfterHint = retryAfterHint;
      }
      return errorInfo;
    }, "getRetryErrorInfo");
    getRetryErrorType = /* @__PURE__ */ __name2((error45) => {
      if (isThrottlingError(error45))
        return "THROTTLING";
      if (isTransientError(error45))
        return "TRANSIENT";
      if (isServerError(error45))
        return "SERVER_ERROR";
      return "CLIENT_ERROR";
    }, "getRetryErrorType");
    retryMiddlewareOptions = {
      name: "retryMiddleware",
      tags: ["RETRY"],
      step: "finalizeRequest",
      priority: "high",
      override: true
    };
    getRetryPlugin = /* @__PURE__ */ __name2((options) => ({
      applyToStack: /* @__PURE__ */ __name2((clientStack) => {
        clientStack.add(retryMiddleware(options), retryMiddlewareOptions);
      }, "applyToStack")
    }), "getRetryPlugin");
    getRetryAfterHint = /* @__PURE__ */ __name2((response) => {
      if (!HttpResponse.isInstance(response))
        return;
      const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === "retry-after");
      if (!retryAfterHeaderName)
        return;
      const retryAfter = response.headers[retryAfterHeaderName];
      const retryAfterSeconds = Number(retryAfter);
      if (!Number.isNaN(retryAfterSeconds))
        return new Date(retryAfterSeconds * 1e3);
      const retryAfterDate = new Date(retryAfter);
      return retryAfterDate;
    }, "getRetryAfterHint");
  }
});
var init_dist_es40 = __esm({
  "../node_modules/@smithy/middleware-retry/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_AdaptiveRetryStrategy2();
    init_StandardRetryStrategy2();
    init_configurations2();
    init_delayDecider();
    init_omitRetryHeadersMiddleware();
    init_retryDecider();
    init_retryMiddleware();
  }
});
var signatureV4CrtContainer;
var init_signature_v4_crt_container = __esm({
  "../node_modules/@aws-sdk/signature-v4-multi-region/dist-es/signature-v4-crt-container.js"() {
    init_functionsRoutes_0_09879299104094341();
    signatureV4CrtContainer = {
      CrtSignerV4: null
    };
  }
});
var SignatureV4MultiRegion;
var init_SignatureV4MultiRegion = __esm({
  "../node_modules/@aws-sdk/signature-v4-multi-region/dist-es/SignatureV4MultiRegion.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es16();
    init_signature_v4_crt_container();
    SignatureV4MultiRegion = class {
      static {
        __name(this, "SignatureV4MultiRegion");
      }
      static {
        __name2(this, "SignatureV4MultiRegion");
      }
      sigv4aSigner;
      sigv4Signer;
      signerOptions;
      static sigv4aDependency() {
        if (typeof signatureV4CrtContainer.CrtSignerV4 === "function") {
          return "crt";
        } else if (typeof signatureV4aContainer.SignatureV4a === "function") {
          return "js";
        }
        return "none";
      }
      constructor(options) {
        this.sigv4Signer = new SignatureV4S3Express(options);
        this.signerOptions = options;
      }
      async sign(requestToSign, options = {}) {
        if (options.signingRegion === "*") {
          return this.getSigv4aSigner().sign(requestToSign, options);
        }
        return this.sigv4Signer.sign(requestToSign, options);
      }
      async signWithCredentials(requestToSign, credentials, options = {}) {
        if (options.signingRegion === "*") {
          const signer = this.getSigv4aSigner();
          const CrtSignerV4 = signatureV4CrtContainer.CrtSignerV4;
          if (CrtSignerV4 && signer instanceof CrtSignerV4) {
            return signer.signWithCredentials(requestToSign, credentials, options);
          } else {
            throw new Error(`signWithCredentials with signingRegion '*' is only supported when using the CRT dependency @aws-sdk/signature-v4-crt. Please check whether you have installed the "@aws-sdk/signature-v4-crt" package explicitly. You must also register the package by calling [require("@aws-sdk/signature-v4-crt");] or an ESM equivalent such as [import "@aws-sdk/signature-v4-crt";]. For more information please go to https://github.com/aws/aws-sdk-js-v3#functionality-requiring-aws-common-runtime-crt`);
          }
        }
        return this.sigv4Signer.signWithCredentials(requestToSign, credentials, options);
      }
      async presign(originalRequest, options = {}) {
        if (options.signingRegion === "*") {
          const signer = this.getSigv4aSigner();
          const CrtSignerV4 = signatureV4CrtContainer.CrtSignerV4;
          if (CrtSignerV4 && signer instanceof CrtSignerV4) {
            return signer.presign(originalRequest, options);
          } else {
            throw new Error(`presign with signingRegion '*' is only supported when using the CRT dependency @aws-sdk/signature-v4-crt. Please check whether you have installed the "@aws-sdk/signature-v4-crt" package explicitly. You must also register the package by calling [require("@aws-sdk/signature-v4-crt");] or an ESM equivalent such as [import "@aws-sdk/signature-v4-crt";]. For more information please go to https://github.com/aws/aws-sdk-js-v3#functionality-requiring-aws-common-runtime-crt`);
          }
        }
        return this.sigv4Signer.presign(originalRequest, options);
      }
      async presignWithCredentials(originalRequest, credentials, options = {}) {
        if (options.signingRegion === "*") {
          throw new Error("Method presignWithCredentials is not supported for [signingRegion=*].");
        }
        return this.sigv4Signer.presignWithCredentials(originalRequest, credentials, options);
      }
      getSigv4aSigner() {
        if (!this.sigv4aSigner) {
          const CrtSignerV4 = signatureV4CrtContainer.CrtSignerV4;
          const JsSigV4aSigner = signatureV4aContainer.SignatureV4a;
          if (this.signerOptions.runtime === "node") {
            if (!CrtSignerV4 && !JsSigV4aSigner) {
              throw new Error("Neither CRT nor JS SigV4a implementation is available. Please load either @aws-sdk/signature-v4-crt or @aws-sdk/signature-v4a. For more information please go to https://github.com/aws/aws-sdk-js-v3#functionality-requiring-aws-common-runtime-crt");
            }
            if (CrtSignerV4 && typeof CrtSignerV4 === "function") {
              this.sigv4aSigner = new CrtSignerV4({
                ...this.signerOptions,
                signingAlgorithm: 1
              });
            } else if (JsSigV4aSigner && typeof JsSigV4aSigner === "function") {
              this.sigv4aSigner = new JsSigV4aSigner({
                ...this.signerOptions
              });
            } else {
              throw new Error("Available SigV4a implementation is not a valid constructor. Please ensure you've properly imported @aws-sdk/signature-v4-crt or @aws-sdk/signature-v4a.For more information please go to https://github.com/aws/aws-sdk-js-v3#functionality-requiring-aws-common-runtime-crt");
            }
          } else {
            if (!JsSigV4aSigner || typeof JsSigV4aSigner !== "function") {
              throw new Error("JS SigV4a implementation is not available or not a valid constructor. Please check whether you have installed the @aws-sdk/signature-v4a package explicitly. The CRT implementation is not available for browsers. You must also register the package by calling [require('@aws-sdk/signature-v4a');] or an ESM equivalent such as [import '@aws-sdk/signature-v4a';]. For more information please go to https://github.com/aws/aws-sdk-js-v3#using-javascript-non-crt-implementation-of-sigv4a");
            }
            this.sigv4aSigner = new JsSigV4aSigner({
              ...this.signerOptions
            });
          }
        }
        return this.sigv4aSigner;
      }
    };
  }
});
var init_dist_es41 = __esm({
  "../node_modules/@aws-sdk/signature-v4-multi-region/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_SignatureV4MultiRegion();
    init_signature_v4_crt_container();
  }
});
var cp;
var cq;
var cr;
var cs;
var ct;
var cu;
var cv;
var cw;
var cx;
var cy;
var cz;
var cA;
var cB;
var cC;
var cD;
var cE;
var cF;
var a;
var b;
var c;
var d;
var e;
var f;
var g;
var h;
var i;
var j;
var k;
var l;
var m;
var n;
var o;
var p;
var q;
var r;
var s;
var t;
var u;
var v;
var w;
var x;
var y;
var z;
var A;
var B;
var C;
var D;
var E;
var F;
var G;
var H;
var I;
var J;
var K;
var L;
var M;
var N;
var O;
var P;
var Q;
var R;
var S;
var T;
var U;
var V;
var W;
var X;
var Y;
var Z;
var aa;
var ab;
var ac;
var ad;
var ae;
var af;
var ag;
var ah;
var ai;
var aj;
var ak;
var al;
var am;
var an;
var ao;
var ap;
var aq;
var ar;
var as;
var at;
var au;
var av;
var aw;
var ax;
var ay;
var az;
var aA;
var aB;
var aC;
var aD;
var aE;
var aF;
var aG;
var aH;
var aI;
var aJ;
var aK;
var aL;
var aM;
var aN;
var aO;
var aP;
var aQ;
var aR;
var aS;
var aT;
var aU;
var aV;
var aW;
var aX;
var aY;
var aZ;
var ba;
var bb;
var bc;
var bd;
var be;
var bf;
var bg;
var bh;
var bi;
var bj;
var bk;
var bl;
var bm;
var bn;
var bo;
var bp;
var bq;
var br;
var bs;
var bt;
var bu;
var bv;
var bw;
var bx;
var by;
var bz;
var bA;
var bB;
var bC;
var bD;
var bE;
var bF;
var bG;
var bH;
var bI;
var bJ;
var bK;
var bL;
var bM;
var bN;
var bO;
var bP;
var bQ;
var bR;
var bS;
var bT;
var bU;
var bV;
var bW;
var bX;
var bY;
var bZ;
var ca;
var cb;
var cc;
var cd;
var ce;
var cf;
var cg;
var ch;
var ci;
var cj;
var ck;
var cl;
var cm;
var cn;
var co;
var _data;
var ruleSet;
var init_ruleset = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/endpoint/ruleset.js"() {
    init_functionsRoutes_0_09879299104094341();
    cp = "required";
    cq = "type";
    cr = "rules";
    cs = "conditions";
    ct = "fn";
    cu = "argv";
    cv = "ref";
    cw = "assign";
    cx = "url";
    cy = "properties";
    cz = "backend";
    cA = "authSchemes";
    cB = "disableDoubleEncoding";
    cC = "signingName";
    cD = "signingRegion";
    cE = "headers";
    cF = "signingRegionSet";
    a = 6;
    b = false;
    c = true;
    d = "isSet";
    e = "booleanEquals";
    f = "error";
    g = "aws.partition";
    h = "stringEquals";
    i = "getAttr";
    j = "name";
    k = "substring";
    l = "bucketSuffix";
    m = "parseURL";
    n = "endpoint";
    o = "tree";
    p = "aws.isVirtualHostableS3Bucket";
    q = "{url#scheme}://{Bucket}.{url#authority}{url#path}";
    r = "not";
    s = "accessPointSuffix";
    t = "{url#scheme}://{url#authority}{url#path}";
    u = "hardwareType";
    v = "regionPrefix";
    w = "bucketAliasSuffix";
    x = "outpostId";
    y = "isValidHostLabel";
    z = "sigv4a";
    A = "s3-outposts";
    B = "s3";
    C = "{url#scheme}://{url#authority}{url#normalizedPath}{Bucket}";
    D = "https://{Bucket}.s3-accelerate.{partitionResult#dnsSuffix}";
    E = "https://{Bucket}.s3.{partitionResult#dnsSuffix}";
    F = "aws.parseArn";
    G = "bucketArn";
    H = "arnType";
    I = "";
    J = "s3-object-lambda";
    K = "accesspoint";
    L = "accessPointName";
    M = "{url#scheme}://{accessPointName}-{bucketArn#accountId}.{url#authority}{url#path}";
    N = "mrapPartition";
    O = "outpostType";
    P = "arnPrefix";
    Q = "{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}";
    R = "https://s3.{partitionResult#dnsSuffix}/{uri_encoded_bucket}";
    S = "https://s3.{partitionResult#dnsSuffix}";
    T = { [cp]: false, [cq]: "String" };
    U = { [cp]: true, "default": false, [cq]: "Boolean" };
    V = { [cp]: false, [cq]: "Boolean" };
    W = { [ct]: e, [cu]: [{ [cv]: "Accelerate" }, true] };
    X = { [ct]: e, [cu]: [{ [cv]: "UseFIPS" }, true] };
    Y = { [ct]: e, [cu]: [{ [cv]: "UseDualStack" }, true] };
    Z = { [ct]: d, [cu]: [{ [cv]: "Endpoint" }] };
    aa = { [ct]: g, [cu]: [{ [cv]: "Region" }], [cw]: "partitionResult" };
    ab = { [ct]: h, [cu]: [{ [ct]: i, [cu]: [{ [cv]: "partitionResult" }, j] }, "aws-cn"] };
    ac = { [ct]: d, [cu]: [{ [cv]: "Bucket" }] };
    ad = { [cv]: "Bucket" };
    ae = { [cs]: [Y], [f]: "S3Express does not support Dual-stack.", [cq]: f };
    af = { [cs]: [W], [f]: "S3Express does not support S3 Accelerate.", [cq]: f };
    ag = { [cs]: [Z, { [ct]: m, [cu]: [{ [cv]: "Endpoint" }], [cw]: "url" }], [cr]: [{ [cs]: [{ [ct]: d, [cu]: [{ [cv]: "DisableS3ExpressSessionAuth" }] }, { [ct]: e, [cu]: [{ [cv]: "DisableS3ExpressSessionAuth" }, true] }], [cr]: [{ [cs]: [{ [ct]: e, [cu]: [{ [ct]: i, [cu]: [{ [cv]: "url" }, "isIp"] }, true] }], [cr]: [{ [cs]: [{ [ct]: "uriEncode", [cu]: [ad], [cw]: "uri_encoded_bucket" }], [cr]: [{ [n]: { [cx]: "{url#scheme}://{url#authority}/{uri_encoded_bucket}{url#path}", [cy]: { [cz]: "S3Express", [cA]: [{ [cB]: true, [j]: "sigv4", [cC]: "s3express", [cD]: "{Region}" }] }, [cE]: {} }, [cq]: n }], [cq]: o }], [cq]: o }, { [cs]: [{ [ct]: p, [cu]: [ad, false] }], [cr]: [{ [n]: { [cx]: q, [cy]: { [cz]: "S3Express", [cA]: [{ [cB]: true, [j]: "sigv4", [cC]: "s3express", [cD]: "{Region}" }] }, [cE]: {} }, [cq]: n }], [cq]: o }, { [f]: "S3Express bucket name is not a valid virtual hostable name.", [cq]: f }], [cq]: o }, { [cs]: [{ [ct]: e, [cu]: [{ [ct]: i, [cu]: [{ [cv]: "url" }, "isIp"] }, true] }], [cr]: [{ [cs]: [{ [ct]: "uriEncode", [cu]: [ad], [cw]: "uri_encoded_bucket" }], [cr]: [{ [n]: { [cx]: "{url#scheme}://{url#authority}/{uri_encoded_bucket}{url#path}", [cy]: { [cz]: "S3Express", [cA]: [{ [cB]: true, [j]: "sigv4-s3express", [cC]: "s3express", [cD]: "{Region}" }] }, [cE]: {} }, [cq]: n }], [cq]: o }], [cq]: o }, { [cs]: [{ [ct]: p, [cu]: [ad, false] }], [cr]: [{ [n]: { [cx]: q, [cy]: { [cz]: "S3Express", [cA]: [{ [cB]: true, [j]: "sigv4-s3express", [cC]: "s3express", [cD]: "{Region}" }] }, [cE]: {} }, [cq]: n }], [cq]: o }, { [f]: "S3Express bucket name is not a valid virtual hostable name.", [cq]: f }], [cq]: o };
    ah = { [ct]: m, [cu]: [{ [cv]: "Endpoint" }], [cw]: "url" };
    ai = { [ct]: e, [cu]: [{ [ct]: i, [cu]: [{ [cv]: "url" }, "isIp"] }, true] };
    aj = { [cv]: "url" };
    ak = { [ct]: "uriEncode", [cu]: [ad], [cw]: "uri_encoded_bucket" };
    al = { [cz]: "S3Express", [cA]: [{ [cB]: true, [j]: "sigv4", [cC]: "s3express", [cD]: "{Region}" }] };
    am = {};
    an = { [ct]: p, [cu]: [ad, false] };
    ao = { [f]: "S3Express bucket name is not a valid virtual hostable name.", [cq]: f };
    ap = { [ct]: d, [cu]: [{ [cv]: "UseS3ExpressControlEndpoint" }] };
    aq = { [ct]: e, [cu]: [{ [cv]: "UseS3ExpressControlEndpoint" }, true] };
    ar = { [ct]: r, [cu]: [Z] };
    as = { [f]: "Unrecognized S3Express bucket name format.", [cq]: f };
    at = { [ct]: r, [cu]: [ac] };
    au = { [cv]: u };
    av = { [cs]: [ar], [f]: "Expected a endpoint to be specified but no endpoint was found", [cq]: f };
    aw = { [cA]: [{ [cB]: true, [j]: z, [cC]: A, [cF]: ["*"] }, { [cB]: true, [j]: "sigv4", [cC]: A, [cD]: "{Region}" }] };
    ax = { [ct]: e, [cu]: [{ [cv]: "ForcePathStyle" }, false] };
    ay = { [cv]: "ForcePathStyle" };
    az = { [ct]: e, [cu]: [{ [cv]: "Accelerate" }, false] };
    aA = { [ct]: h, [cu]: [{ [cv]: "Region" }, "aws-global"] };
    aB = { [cA]: [{ [cB]: true, [j]: "sigv4", [cC]: B, [cD]: "us-east-1" }] };
    aC = { [ct]: r, [cu]: [aA] };
    aD = { [ct]: e, [cu]: [{ [cv]: "UseGlobalEndpoint" }, true] };
    aE = { [cx]: "https://{Bucket}.s3-fips.dualstack.{Region}.{partitionResult#dnsSuffix}", [cy]: { [cA]: [{ [cB]: true, [j]: "sigv4", [cC]: B, [cD]: "{Region}" }] }, [cE]: {} };
    aF = { [cA]: [{ [cB]: true, [j]: "sigv4", [cC]: B, [cD]: "{Region}" }] };
    aG = { [ct]: e, [cu]: [{ [cv]: "UseGlobalEndpoint" }, false] };
    aH = { [ct]: e, [cu]: [{ [cv]: "UseDualStack" }, false] };
    aI = { [cx]: "https://{Bucket}.s3-fips.{Region}.{partitionResult#dnsSuffix}", [cy]: aF, [cE]: {} };
    aJ = { [ct]: e, [cu]: [{ [cv]: "UseFIPS" }, false] };
    aK = { [cx]: "https://{Bucket}.s3-accelerate.dualstack.{partitionResult#dnsSuffix}", [cy]: aF, [cE]: {} };
    aL = { [cx]: "https://{Bucket}.s3.dualstack.{Region}.{partitionResult#dnsSuffix}", [cy]: aF, [cE]: {} };
    aM = { [ct]: e, [cu]: [{ [ct]: i, [cu]: [aj, "isIp"] }, false] };
    aN = { [cx]: C, [cy]: aF, [cE]: {} };
    aO = { [cx]: q, [cy]: aF, [cE]: {} };
    aP = { [n]: aO, [cq]: n };
    aQ = { [cx]: D, [cy]: aF, [cE]: {} };
    aR = { [cx]: "https://{Bucket}.s3.{Region}.{partitionResult#dnsSuffix}", [cy]: aF, [cE]: {} };
    aS = { [f]: "Invalid region: region was not a valid DNS name.", [cq]: f };
    aT = { [cv]: G };
    aU = { [cv]: H };
    aV = { [ct]: i, [cu]: [aT, "service"] };
    aW = { [cv]: L };
    aX = { [cs]: [Y], [f]: "S3 Object Lambda does not support Dual-stack", [cq]: f };
    aY = { [cs]: [W], [f]: "S3 Object Lambda does not support S3 Accelerate", [cq]: f };
    aZ = { [cs]: [{ [ct]: d, [cu]: [{ [cv]: "DisableAccessPoints" }] }, { [ct]: e, [cu]: [{ [cv]: "DisableAccessPoints" }, true] }], [f]: "Access points are not supported for this operation", [cq]: f };
    ba = { [cs]: [{ [ct]: d, [cu]: [{ [cv]: "UseArnRegion" }] }, { [ct]: e, [cu]: [{ [cv]: "UseArnRegion" }, false] }, { [ct]: r, [cu]: [{ [ct]: h, [cu]: [{ [ct]: i, [cu]: [aT, "region"] }, "{Region}"] }] }], [f]: "Invalid configuration: region from ARN `{bucketArn#region}` does not match client region `{Region}` and UseArnRegion is `false`", [cq]: f };
    bb = { [ct]: i, [cu]: [{ [cv]: "bucketPartition" }, j] };
    bc = { [ct]: i, [cu]: [aT, "accountId"] };
    bd = { [cA]: [{ [cB]: true, [j]: "sigv4", [cC]: J, [cD]: "{bucketArn#region}" }] };
    be = { [f]: "Invalid ARN: The access point name may only contain a-z, A-Z, 0-9 and `-`. Found: `{accessPointName}`", [cq]: f };
    bf = { [f]: "Invalid ARN: The account id may only contain a-z, A-Z, 0-9 and `-`. Found: `{bucketArn#accountId}`", [cq]: f };
    bg = { [f]: "Invalid region in ARN: `{bucketArn#region}` (invalid DNS name)", [cq]: f };
    bh = { [f]: "Client was configured for partition `{partitionResult#name}` but ARN (`{Bucket}`) has `{bucketPartition#name}`", [cq]: f };
    bi = { [f]: "Invalid ARN: The ARN may only contain a single resource component after `accesspoint`.", [cq]: f };
    bj = { [f]: "Invalid ARN: Expected a resource of the format `accesspoint:<accesspoint name>` but no name was provided", [cq]: f };
    bk = { [cA]: [{ [cB]: true, [j]: "sigv4", [cC]: B, [cD]: "{bucketArn#region}" }] };
    bl = { [cA]: [{ [cB]: true, [j]: z, [cC]: A, [cF]: ["*"] }, { [cB]: true, [j]: "sigv4", [cC]: A, [cD]: "{bucketArn#region}" }] };
    bm = { [ct]: F, [cu]: [ad] };
    bn = { [cx]: "https://s3-fips.dualstack.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [cy]: aF, [cE]: {} };
    bo = { [cx]: "https://s3-fips.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [cy]: aF, [cE]: {} };
    bp = { [cx]: "https://s3.dualstack.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [cy]: aF, [cE]: {} };
    bq = { [cx]: Q, [cy]: aF, [cE]: {} };
    br = { [cx]: "https://s3.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [cy]: aF, [cE]: {} };
    bs = { [cv]: "UseObjectLambdaEndpoint" };
    bt = { [cA]: [{ [cB]: true, [j]: "sigv4", [cC]: J, [cD]: "{Region}" }] };
    bu = { [cx]: "https://s3-fips.dualstack.{Region}.{partitionResult#dnsSuffix}", [cy]: aF, [cE]: {} };
    bv = { [cx]: "https://s3-fips.{Region}.{partitionResult#dnsSuffix}", [cy]: aF, [cE]: {} };
    bw = { [cx]: "https://s3.dualstack.{Region}.{partitionResult#dnsSuffix}", [cy]: aF, [cE]: {} };
    bx = { [cx]: t, [cy]: aF, [cE]: {} };
    by = { [cx]: "https://s3.{Region}.{partitionResult#dnsSuffix}", [cy]: aF, [cE]: {} };
    bz = [{ [cv]: "Region" }];
    bA = [{ [cv]: "Endpoint" }];
    bB = [ad];
    bC = [Y];
    bD = [W];
    bE = [Z, ah];
    bF = [{ [ct]: d, [cu]: [{ [cv]: "DisableS3ExpressSessionAuth" }] }, { [ct]: e, [cu]: [{ [cv]: "DisableS3ExpressSessionAuth" }, true] }];
    bG = [ak];
    bH = [an];
    bI = [aa];
    bJ = [X];
    bK = [{ [ct]: k, [cu]: [ad, 6, 14, true], [cw]: "s3expressAvailabilityZoneId" }, { [ct]: k, [cu]: [ad, 14, 16, true], [cw]: "s3expressAvailabilityZoneDelim" }, { [ct]: h, [cu]: [{ [cv]: "s3expressAvailabilityZoneDelim" }, "--"] }];
    bL = [{ [cs]: [X], [n]: { [cx]: "https://{Bucket}.s3express-fips-{s3expressAvailabilityZoneId}.{Region}.{partitionResult#dnsSuffix}", [cy]: al, [cE]: {} }, [cq]: n }, { [n]: { [cx]: "https://{Bucket}.s3express-{s3expressAvailabilityZoneId}.{Region}.{partitionResult#dnsSuffix}", [cy]: al, [cE]: {} }, [cq]: n }];
    bM = [{ [ct]: k, [cu]: [ad, 6, 15, true], [cw]: "s3expressAvailabilityZoneId" }, { [ct]: k, [cu]: [ad, 15, 17, true], [cw]: "s3expressAvailabilityZoneDelim" }, { [ct]: h, [cu]: [{ [cv]: "s3expressAvailabilityZoneDelim" }, "--"] }];
    bN = [{ [ct]: k, [cu]: [ad, 6, 19, true], [cw]: "s3expressAvailabilityZoneId" }, { [ct]: k, [cu]: [ad, 19, 21, true], [cw]: "s3expressAvailabilityZoneDelim" }, { [ct]: h, [cu]: [{ [cv]: "s3expressAvailabilityZoneDelim" }, "--"] }];
    bO = [{ [ct]: k, [cu]: [ad, 6, 20, true], [cw]: "s3expressAvailabilityZoneId" }, { [ct]: k, [cu]: [ad, 20, 22, true], [cw]: "s3expressAvailabilityZoneDelim" }, { [ct]: h, [cu]: [{ [cv]: "s3expressAvailabilityZoneDelim" }, "--"] }];
    bP = [{ [ct]: k, [cu]: [ad, 6, 26, true], [cw]: "s3expressAvailabilityZoneId" }, { [ct]: k, [cu]: [ad, 26, 28, true], [cw]: "s3expressAvailabilityZoneDelim" }, { [ct]: h, [cu]: [{ [cv]: "s3expressAvailabilityZoneDelim" }, "--"] }];
    bQ = [{ [cs]: [X], [n]: { [cx]: "https://{Bucket}.s3express-fips-{s3expressAvailabilityZoneId}.{Region}.{partitionResult#dnsSuffix}", [cy]: { [cz]: "S3Express", [cA]: [{ [cB]: true, [j]: "sigv4-s3express", [cC]: "s3express", [cD]: "{Region}" }] }, [cE]: {} }, [cq]: n }, { [n]: { [cx]: "https://{Bucket}.s3express-{s3expressAvailabilityZoneId}.{Region}.{partitionResult#dnsSuffix}", [cy]: { [cz]: "S3Express", [cA]: [{ [cB]: true, [j]: "sigv4-s3express", [cC]: "s3express", [cD]: "{Region}" }] }, [cE]: {} }, [cq]: n }];
    bR = [ad, 0, 7, true];
    bS = [{ [ct]: k, [cu]: [ad, 7, 15, true], [cw]: "s3expressAvailabilityZoneId" }, { [ct]: k, [cu]: [ad, 15, 17, true], [cw]: "s3expressAvailabilityZoneDelim" }, { [ct]: h, [cu]: [{ [cv]: "s3expressAvailabilityZoneDelim" }, "--"] }];
    bT = [{ [ct]: k, [cu]: [ad, 7, 16, true], [cw]: "s3expressAvailabilityZoneId" }, { [ct]: k, [cu]: [ad, 16, 18, true], [cw]: "s3expressAvailabilityZoneDelim" }, { [ct]: h, [cu]: [{ [cv]: "s3expressAvailabilityZoneDelim" }, "--"] }];
    bU = [{ [ct]: k, [cu]: [ad, 7, 20, true], [cw]: "s3expressAvailabilityZoneId" }, { [ct]: k, [cu]: [ad, 20, 22, true], [cw]: "s3expressAvailabilityZoneDelim" }, { [ct]: h, [cu]: [{ [cv]: "s3expressAvailabilityZoneDelim" }, "--"] }];
    bV = [{ [ct]: k, [cu]: [ad, 7, 21, true], [cw]: "s3expressAvailabilityZoneId" }, { [ct]: k, [cu]: [ad, 21, 23, true], [cw]: "s3expressAvailabilityZoneDelim" }, { [ct]: h, [cu]: [{ [cv]: "s3expressAvailabilityZoneDelim" }, "--"] }];
    bW = [{ [ct]: k, [cu]: [ad, 7, 27, true], [cw]: "s3expressAvailabilityZoneId" }, { [ct]: k, [cu]: [ad, 27, 29, true], [cw]: "s3expressAvailabilityZoneDelim" }, { [ct]: h, [cu]: [{ [cv]: "s3expressAvailabilityZoneDelim" }, "--"] }];
    bX = [ac];
    bY = [{ [ct]: y, [cu]: [{ [cv]: x }, false] }];
    bZ = [{ [ct]: h, [cu]: [{ [cv]: v }, "beta"] }];
    ca = ["*"];
    cb = [{ [ct]: y, [cu]: [{ [cv]: "Region" }, false] }];
    cc = [{ [ct]: h, [cu]: [{ [cv]: "Region" }, "us-east-1"] }];
    cd = [{ [ct]: h, [cu]: [aU, K] }];
    ce = [{ [ct]: i, [cu]: [aT, "resourceId[1]"], [cw]: L }, { [ct]: r, [cu]: [{ [ct]: h, [cu]: [aW, I] }] }];
    cf = [aT, "resourceId[1]"];
    cg = [{ [ct]: r, [cu]: [{ [ct]: h, [cu]: [{ [ct]: i, [cu]: [aT, "region"] }, I] }] }];
    ch = [{ [ct]: r, [cu]: [{ [ct]: d, [cu]: [{ [ct]: i, [cu]: [aT, "resourceId[2]"] }] }] }];
    ci = [aT, "resourceId[2]"];
    cj = [{ [ct]: g, [cu]: [{ [ct]: i, [cu]: [aT, "region"] }], [cw]: "bucketPartition" }];
    ck = [{ [ct]: h, [cu]: [bb, { [ct]: i, [cu]: [{ [cv]: "partitionResult" }, j] }] }];
    cl = [{ [ct]: y, [cu]: [{ [ct]: i, [cu]: [aT, "region"] }, true] }];
    cm = [{ [ct]: y, [cu]: [bc, false] }];
    cn = [{ [ct]: y, [cu]: [aW, false] }];
    co = [{ [ct]: y, [cu]: [{ [cv]: "Region" }, true] }];
    _data = { version: "1.0", parameters: { Bucket: T, Region: T, UseFIPS: U, UseDualStack: U, Endpoint: T, ForcePathStyle: U, Accelerate: U, UseGlobalEndpoint: U, UseObjectLambdaEndpoint: V, Key: T, Prefix: T, CopySource: T, DisableAccessPoints: V, DisableMultiRegionAccessPoints: U, UseArnRegion: V, UseS3ExpressControlEndpoint: V, DisableS3ExpressSessionAuth: V }, [cr]: [{ [cs]: [{ [ct]: d, [cu]: bz }], [cr]: [{ [cs]: [W, X], error: "Accelerate cannot be used with FIPS", [cq]: f }, { [cs]: [Y, Z], error: "Cannot set dual-stack in combination with a custom endpoint.", [cq]: f }, { [cs]: [Z, X], error: "A custom endpoint cannot be combined with FIPS", [cq]: f }, { [cs]: [Z, W], error: "A custom endpoint cannot be combined with S3 Accelerate", [cq]: f }, { [cs]: [X, aa, ab], error: "Partition does not support FIPS", [cq]: f }, { [cs]: [ac, { [ct]: k, [cu]: [ad, 0, a, c], [cw]: l }, { [ct]: h, [cu]: [{ [cv]: l }, "--x-s3"] }], [cr]: [ae, af, ag, { [cs]: [ap, aq], [cr]: [{ [cs]: bI, [cr]: [{ [cs]: [ak, ar], [cr]: [{ [cs]: bJ, endpoint: { [cx]: "https://s3express-control-fips.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [cy]: al, [cE]: am }, [cq]: n }, { endpoint: { [cx]: "https://s3express-control.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [cy]: al, [cE]: am }, [cq]: n }], [cq]: o }], [cq]: o }], [cq]: o }, { [cs]: bH, [cr]: [{ [cs]: bI, [cr]: [{ [cs]: bF, [cr]: [{ [cs]: bK, [cr]: bL, [cq]: o }, { [cs]: bM, [cr]: bL, [cq]: o }, { [cs]: bN, [cr]: bL, [cq]: o }, { [cs]: bO, [cr]: bL, [cq]: o }, { [cs]: bP, [cr]: bL, [cq]: o }, as], [cq]: o }, { [cs]: bK, [cr]: bQ, [cq]: o }, { [cs]: bM, [cr]: bQ, [cq]: o }, { [cs]: bN, [cr]: bQ, [cq]: o }, { [cs]: bO, [cr]: bQ, [cq]: o }, { [cs]: bP, [cr]: bQ, [cq]: o }, as], [cq]: o }], [cq]: o }, ao], [cq]: o }, { [cs]: [ac, { [ct]: k, [cu]: bR, [cw]: s }, { [ct]: h, [cu]: [{ [cv]: s }, "--xa-s3"] }], [cr]: [ae, af, ag, { [cs]: bH, [cr]: [{ [cs]: bI, [cr]: [{ [cs]: bF, [cr]: [{ [cs]: bS, [cr]: bL, [cq]: o }, { [cs]: bT, [cr]: bL, [cq]: o }, { [cs]: bU, [cr]: bL, [cq]: o }, { [cs]: bV, [cr]: bL, [cq]: o }, { [cs]: bW, [cr]: bL, [cq]: o }, as], [cq]: o }, { [cs]: bS, [cr]: bQ, [cq]: o }, { [cs]: bT, [cr]: bQ, [cq]: o }, { [cs]: bU, [cr]: bQ, [cq]: o }, { [cs]: bV, [cr]: bQ, [cq]: o }, { [cs]: bW, [cr]: bQ, [cq]: o }, as], [cq]: o }], [cq]: o }, ao], [cq]: o }, { [cs]: [at, ap, aq], [cr]: [{ [cs]: bI, [cr]: [{ [cs]: bE, endpoint: { [cx]: t, [cy]: al, [cE]: am }, [cq]: n }, { [cs]: bJ, endpoint: { [cx]: "https://s3express-control-fips.{Region}.{partitionResult#dnsSuffix}", [cy]: al, [cE]: am }, [cq]: n }, { endpoint: { [cx]: "https://s3express-control.{Region}.{partitionResult#dnsSuffix}", [cy]: al, [cE]: am }, [cq]: n }], [cq]: o }], [cq]: o }, { [cs]: [ac, { [ct]: k, [cu]: [ad, 49, 50, c], [cw]: u }, { [ct]: k, [cu]: [ad, 8, 12, c], [cw]: v }, { [ct]: k, [cu]: bR, [cw]: w }, { [ct]: k, [cu]: [ad, 32, 49, c], [cw]: x }, { [ct]: g, [cu]: bz, [cw]: "regionPartition" }, { [ct]: h, [cu]: [{ [cv]: w }, "--op-s3"] }], [cr]: [{ [cs]: bY, [cr]: [{ [cs]: [{ [ct]: h, [cu]: [au, "e"] }], [cr]: [{ [cs]: bZ, [cr]: [av, { [cs]: bE, endpoint: { [cx]: "https://{Bucket}.ec2.{url#authority}", [cy]: aw, [cE]: am }, [cq]: n }], [cq]: o }, { endpoint: { [cx]: "https://{Bucket}.ec2.s3-outposts.{Region}.{regionPartition#dnsSuffix}", [cy]: aw, [cE]: am }, [cq]: n }], [cq]: o }, { [cs]: [{ [ct]: h, [cu]: [au, "o"] }], [cr]: [{ [cs]: bZ, [cr]: [av, { [cs]: bE, endpoint: { [cx]: "https://{Bucket}.op-{outpostId}.{url#authority}", [cy]: aw, [cE]: am }, [cq]: n }], [cq]: o }, { endpoint: { [cx]: "https://{Bucket}.op-{outpostId}.s3-outposts.{Region}.{regionPartition#dnsSuffix}", [cy]: aw, [cE]: am }, [cq]: n }], [cq]: o }, { error: 'Unrecognized hardware type: "Expected hardware type o or e but got {hardwareType}"', [cq]: f }], [cq]: o }, { error: "Invalid ARN: The outpost Id must only contain a-z, A-Z, 0-9 and `-`.", [cq]: f }], [cq]: o }, { [cs]: bX, [cr]: [{ [cs]: [Z, { [ct]: r, [cu]: [{ [ct]: d, [cu]: [{ [ct]: m, [cu]: bA }] }] }], error: "Custom endpoint `{Endpoint}` was not a valid URI", [cq]: f }, { [cs]: [ax, an], [cr]: [{ [cs]: bI, [cr]: [{ [cs]: cb, [cr]: [{ [cs]: [W, ab], error: "S3 Accelerate cannot be used in this region", [cq]: f }, { [cs]: [Y, X, az, ar, aA], endpoint: { [cx]: "https://{Bucket}.s3-fips.dualstack.us-east-1.{partitionResult#dnsSuffix}", [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [Y, X, az, ar, aC, aD], [cr]: [{ endpoint: aE, [cq]: n }], [cq]: o }, { [cs]: [Y, X, az, ar, aC, aG], endpoint: aE, [cq]: n }, { [cs]: [aH, X, az, ar, aA], endpoint: { [cx]: "https://{Bucket}.s3-fips.us-east-1.{partitionResult#dnsSuffix}", [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [aH, X, az, ar, aC, aD], [cr]: [{ endpoint: aI, [cq]: n }], [cq]: o }, { [cs]: [aH, X, az, ar, aC, aG], endpoint: aI, [cq]: n }, { [cs]: [Y, aJ, W, ar, aA], endpoint: { [cx]: "https://{Bucket}.s3-accelerate.dualstack.us-east-1.{partitionResult#dnsSuffix}", [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [Y, aJ, W, ar, aC, aD], [cr]: [{ endpoint: aK, [cq]: n }], [cq]: o }, { [cs]: [Y, aJ, W, ar, aC, aG], endpoint: aK, [cq]: n }, { [cs]: [Y, aJ, az, ar, aA], endpoint: { [cx]: "https://{Bucket}.s3.dualstack.us-east-1.{partitionResult#dnsSuffix}", [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [Y, aJ, az, ar, aC, aD], [cr]: [{ endpoint: aL, [cq]: n }], [cq]: o }, { [cs]: [Y, aJ, az, ar, aC, aG], endpoint: aL, [cq]: n }, { [cs]: [aH, aJ, az, Z, ah, ai, aA], endpoint: { [cx]: C, [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [aH, aJ, az, Z, ah, aM, aA], endpoint: { [cx]: q, [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [aH, aJ, az, Z, ah, ai, aC, aD], [cr]: [{ [cs]: cc, endpoint: aN, [cq]: n }, { endpoint: aN, [cq]: n }], [cq]: o }, { [cs]: [aH, aJ, az, Z, ah, aM, aC, aD], [cr]: [{ [cs]: cc, endpoint: aO, [cq]: n }, aP], [cq]: o }, { [cs]: [aH, aJ, az, Z, ah, ai, aC, aG], endpoint: aN, [cq]: n }, { [cs]: [aH, aJ, az, Z, ah, aM, aC, aG], endpoint: aO, [cq]: n }, { [cs]: [aH, aJ, W, ar, aA], endpoint: { [cx]: D, [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [aH, aJ, W, ar, aC, aD], [cr]: [{ [cs]: cc, endpoint: aQ, [cq]: n }, { endpoint: aQ, [cq]: n }], [cq]: o }, { [cs]: [aH, aJ, W, ar, aC, aG], endpoint: aQ, [cq]: n }, { [cs]: [aH, aJ, az, ar, aA], endpoint: { [cx]: E, [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [aH, aJ, az, ar, aC, aD], [cr]: [{ [cs]: cc, endpoint: { [cx]: E, [cy]: aF, [cE]: am }, [cq]: n }, { endpoint: aR, [cq]: n }], [cq]: o }, { [cs]: [aH, aJ, az, ar, aC, aG], endpoint: aR, [cq]: n }], [cq]: o }, aS], [cq]: o }], [cq]: o }, { [cs]: [Z, ah, { [ct]: h, [cu]: [{ [ct]: i, [cu]: [aj, "scheme"] }, "http"] }, { [ct]: p, [cu]: [ad, c] }, ax, aJ, aH, az], [cr]: [{ [cs]: bI, [cr]: [{ [cs]: cb, [cr]: [aP], [cq]: o }, aS], [cq]: o }], [cq]: o }, { [cs]: [ax, { [ct]: F, [cu]: bB, [cw]: G }], [cr]: [{ [cs]: [{ [ct]: i, [cu]: [aT, "resourceId[0]"], [cw]: H }, { [ct]: r, [cu]: [{ [ct]: h, [cu]: [aU, I] }] }], [cr]: [{ [cs]: [{ [ct]: h, [cu]: [aV, J] }], [cr]: [{ [cs]: cd, [cr]: [{ [cs]: ce, [cr]: [aX, aY, { [cs]: cg, [cr]: [aZ, { [cs]: ch, [cr]: [ba, { [cs]: cj, [cr]: [{ [cs]: bI, [cr]: [{ [cs]: ck, [cr]: [{ [cs]: cl, [cr]: [{ [cs]: [{ [ct]: h, [cu]: [bc, I] }], error: "Invalid ARN: Missing account id", [cq]: f }, { [cs]: cm, [cr]: [{ [cs]: cn, [cr]: [{ [cs]: bE, endpoint: { [cx]: M, [cy]: bd, [cE]: am }, [cq]: n }, { [cs]: bJ, endpoint: { [cx]: "https://{accessPointName}-{bucketArn#accountId}.s3-object-lambda-fips.{bucketArn#region}.{bucketPartition#dnsSuffix}", [cy]: bd, [cE]: am }, [cq]: n }, { endpoint: { [cx]: "https://{accessPointName}-{bucketArn#accountId}.s3-object-lambda.{bucketArn#region}.{bucketPartition#dnsSuffix}", [cy]: bd, [cE]: am }, [cq]: n }], [cq]: o }, be], [cq]: o }, bf], [cq]: o }, bg], [cq]: o }, bh], [cq]: o }], [cq]: o }], [cq]: o }, bi], [cq]: o }, { error: "Invalid ARN: bucket ARN is missing a region", [cq]: f }], [cq]: o }, bj], [cq]: o }, { error: "Invalid ARN: Object Lambda ARNs only support `accesspoint` arn types, but found: `{arnType}`", [cq]: f }], [cq]: o }, { [cs]: cd, [cr]: [{ [cs]: ce, [cr]: [{ [cs]: cg, [cr]: [{ [cs]: cd, [cr]: [{ [cs]: cg, [cr]: [aZ, { [cs]: ch, [cr]: [ba, { [cs]: cj, [cr]: [{ [cs]: bI, [cr]: [{ [cs]: [{ [ct]: h, [cu]: [bb, "{partitionResult#name}"] }], [cr]: [{ [cs]: cl, [cr]: [{ [cs]: [{ [ct]: h, [cu]: [aV, B] }], [cr]: [{ [cs]: cm, [cr]: [{ [cs]: cn, [cr]: [{ [cs]: bD, error: "Access Points do not support S3 Accelerate", [cq]: f }, { [cs]: [X, Y], endpoint: { [cx]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint-fips.dualstack.{bucketArn#region}.{bucketPartition#dnsSuffix}", [cy]: bk, [cE]: am }, [cq]: n }, { [cs]: [X, aH], endpoint: { [cx]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint-fips.{bucketArn#region}.{bucketPartition#dnsSuffix}", [cy]: bk, [cE]: am }, [cq]: n }, { [cs]: [aJ, Y], endpoint: { [cx]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint.dualstack.{bucketArn#region}.{bucketPartition#dnsSuffix}", [cy]: bk, [cE]: am }, [cq]: n }, { [cs]: [aJ, aH, Z, ah], endpoint: { [cx]: M, [cy]: bk, [cE]: am }, [cq]: n }, { [cs]: [aJ, aH], endpoint: { [cx]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint.{bucketArn#region}.{bucketPartition#dnsSuffix}", [cy]: bk, [cE]: am }, [cq]: n }], [cq]: o }, be], [cq]: o }, bf], [cq]: o }, { error: "Invalid ARN: The ARN was not for the S3 service, found: {bucketArn#service}", [cq]: f }], [cq]: o }, bg], [cq]: o }, bh], [cq]: o }], [cq]: o }], [cq]: o }, bi], [cq]: o }], [cq]: o }], [cq]: o }, { [cs]: [{ [ct]: y, [cu]: [aW, c] }], [cr]: [{ [cs]: bC, error: "S3 MRAP does not support dual-stack", [cq]: f }, { [cs]: bJ, error: "S3 MRAP does not support FIPS", [cq]: f }, { [cs]: bD, error: "S3 MRAP does not support S3 Accelerate", [cq]: f }, { [cs]: [{ [ct]: e, [cu]: [{ [cv]: "DisableMultiRegionAccessPoints" }, c] }], error: "Invalid configuration: Multi-Region Access Point ARNs are disabled.", [cq]: f }, { [cs]: [{ [ct]: g, [cu]: bz, [cw]: N }], [cr]: [{ [cs]: [{ [ct]: h, [cu]: [{ [ct]: i, [cu]: [{ [cv]: N }, j] }, { [ct]: i, [cu]: [aT, "partition"] }] }], [cr]: [{ endpoint: { [cx]: "https://{accessPointName}.accesspoint.s3-global.{mrapPartition#dnsSuffix}", [cy]: { [cA]: [{ [cB]: c, name: z, [cC]: B, [cF]: ca }] }, [cE]: am }, [cq]: n }], [cq]: o }, { error: "Client was configured for partition `{mrapPartition#name}` but bucket referred to partition `{bucketArn#partition}`", [cq]: f }], [cq]: o }], [cq]: o }, { error: "Invalid Access Point Name", [cq]: f }], [cq]: o }, bj], [cq]: o }, { [cs]: [{ [ct]: h, [cu]: [aV, A] }], [cr]: [{ [cs]: bC, error: "S3 Outposts does not support Dual-stack", [cq]: f }, { [cs]: bJ, error: "S3 Outposts does not support FIPS", [cq]: f }, { [cs]: bD, error: "S3 Outposts does not support S3 Accelerate", [cq]: f }, { [cs]: [{ [ct]: d, [cu]: [{ [ct]: i, [cu]: [aT, "resourceId[4]"] }] }], error: "Invalid Arn: Outpost Access Point ARN contains sub resources", [cq]: f }, { [cs]: [{ [ct]: i, [cu]: cf, [cw]: x }], [cr]: [{ [cs]: bY, [cr]: [ba, { [cs]: cj, [cr]: [{ [cs]: bI, [cr]: [{ [cs]: ck, [cr]: [{ [cs]: cl, [cr]: [{ [cs]: cm, [cr]: [{ [cs]: [{ [ct]: i, [cu]: ci, [cw]: O }], [cr]: [{ [cs]: [{ [ct]: i, [cu]: [aT, "resourceId[3]"], [cw]: L }], [cr]: [{ [cs]: [{ [ct]: h, [cu]: [{ [cv]: O }, K] }], [cr]: [{ [cs]: bE, endpoint: { [cx]: "https://{accessPointName}-{bucketArn#accountId}.{outpostId}.{url#authority}", [cy]: bl, [cE]: am }, [cq]: n }, { endpoint: { [cx]: "https://{accessPointName}-{bucketArn#accountId}.{outpostId}.s3-outposts.{bucketArn#region}.{bucketPartition#dnsSuffix}", [cy]: bl, [cE]: am }, [cq]: n }], [cq]: o }, { error: "Expected an outpost type `accesspoint`, found {outpostType}", [cq]: f }], [cq]: o }, { error: "Invalid ARN: expected an access point name", [cq]: f }], [cq]: o }, { error: "Invalid ARN: Expected a 4-component resource", [cq]: f }], [cq]: o }, bf], [cq]: o }, bg], [cq]: o }, bh], [cq]: o }], [cq]: o }], [cq]: o }, { error: "Invalid ARN: The outpost Id may only contain a-z, A-Z, 0-9 and `-`. Found: `{outpostId}`", [cq]: f }], [cq]: o }, { error: "Invalid ARN: The Outpost Id was not set", [cq]: f }], [cq]: o }, { error: "Invalid ARN: Unrecognized format: {Bucket} (type: {arnType})", [cq]: f }], [cq]: o }, { error: "Invalid ARN: No ARN type specified", [cq]: f }], [cq]: o }, { [cs]: [{ [ct]: k, [cu]: [ad, 0, 4, b], [cw]: P }, { [ct]: h, [cu]: [{ [cv]: P }, "arn:"] }, { [ct]: r, [cu]: [{ [ct]: d, [cu]: [bm] }] }], error: "Invalid ARN: `{Bucket}` was not a valid ARN", [cq]: f }, { [cs]: [{ [ct]: e, [cu]: [ay, c] }, bm], error: "Path-style addressing cannot be used with ARN buckets", [cq]: f }, { [cs]: bG, [cr]: [{ [cs]: bI, [cr]: [{ [cs]: [az], [cr]: [{ [cs]: [Y, ar, X, aA], endpoint: { [cx]: "https://s3-fips.dualstack.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [Y, ar, X, aC, aD], [cr]: [{ endpoint: bn, [cq]: n }], [cq]: o }, { [cs]: [Y, ar, X, aC, aG], endpoint: bn, [cq]: n }, { [cs]: [aH, ar, X, aA], endpoint: { [cx]: "https://s3-fips.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [aH, ar, X, aC, aD], [cr]: [{ endpoint: bo, [cq]: n }], [cq]: o }, { [cs]: [aH, ar, X, aC, aG], endpoint: bo, [cq]: n }, { [cs]: [Y, ar, aJ, aA], endpoint: { [cx]: "https://s3.dualstack.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [Y, ar, aJ, aC, aD], [cr]: [{ endpoint: bp, [cq]: n }], [cq]: o }, { [cs]: [Y, ar, aJ, aC, aG], endpoint: bp, [cq]: n }, { [cs]: [aH, Z, ah, aJ, aA], endpoint: { [cx]: Q, [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [aH, Z, ah, aJ, aC, aD], [cr]: [{ [cs]: cc, endpoint: bq, [cq]: n }, { endpoint: bq, [cq]: n }], [cq]: o }, { [cs]: [aH, Z, ah, aJ, aC, aG], endpoint: bq, [cq]: n }, { [cs]: [aH, ar, aJ, aA], endpoint: { [cx]: R, [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [aH, ar, aJ, aC, aD], [cr]: [{ [cs]: cc, endpoint: { [cx]: R, [cy]: aF, [cE]: am }, [cq]: n }, { endpoint: br, [cq]: n }], [cq]: o }, { [cs]: [aH, ar, aJ, aC, aG], endpoint: br, [cq]: n }], [cq]: o }, { error: "Path-style addressing cannot be used with S3 Accelerate", [cq]: f }], [cq]: o }], [cq]: o }], [cq]: o }, { [cs]: [{ [ct]: d, [cu]: [bs] }, { [ct]: e, [cu]: [bs, c] }], [cr]: [{ [cs]: bI, [cr]: [{ [cs]: co, [cr]: [aX, aY, { [cs]: bE, endpoint: { [cx]: t, [cy]: bt, [cE]: am }, [cq]: n }, { [cs]: bJ, endpoint: { [cx]: "https://s3-object-lambda-fips.{Region}.{partitionResult#dnsSuffix}", [cy]: bt, [cE]: am }, [cq]: n }, { endpoint: { [cx]: "https://s3-object-lambda.{Region}.{partitionResult#dnsSuffix}", [cy]: bt, [cE]: am }, [cq]: n }], [cq]: o }, aS], [cq]: o }], [cq]: o }, { [cs]: [at], [cr]: [{ [cs]: bI, [cr]: [{ [cs]: co, [cr]: [{ [cs]: [X, Y, ar, aA], endpoint: { [cx]: "https://s3-fips.dualstack.us-east-1.{partitionResult#dnsSuffix}", [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [X, Y, ar, aC, aD], [cr]: [{ endpoint: bu, [cq]: n }], [cq]: o }, { [cs]: [X, Y, ar, aC, aG], endpoint: bu, [cq]: n }, { [cs]: [X, aH, ar, aA], endpoint: { [cx]: "https://s3-fips.us-east-1.{partitionResult#dnsSuffix}", [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [X, aH, ar, aC, aD], [cr]: [{ endpoint: bv, [cq]: n }], [cq]: o }, { [cs]: [X, aH, ar, aC, aG], endpoint: bv, [cq]: n }, { [cs]: [aJ, Y, ar, aA], endpoint: { [cx]: "https://s3.dualstack.us-east-1.{partitionResult#dnsSuffix}", [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [aJ, Y, ar, aC, aD], [cr]: [{ endpoint: bw, [cq]: n }], [cq]: o }, { [cs]: [aJ, Y, ar, aC, aG], endpoint: bw, [cq]: n }, { [cs]: [aJ, aH, Z, ah, aA], endpoint: { [cx]: t, [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [aJ, aH, Z, ah, aC, aD], [cr]: [{ [cs]: cc, endpoint: bx, [cq]: n }, { endpoint: bx, [cq]: n }], [cq]: o }, { [cs]: [aJ, aH, Z, ah, aC, aG], endpoint: bx, [cq]: n }, { [cs]: [aJ, aH, ar, aA], endpoint: { [cx]: S, [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [aJ, aH, ar, aC, aD], [cr]: [{ [cs]: cc, endpoint: { [cx]: S, [cy]: aF, [cE]: am }, [cq]: n }, { endpoint: by, [cq]: n }], [cq]: o }, { [cs]: [aJ, aH, ar, aC, aG], endpoint: by, [cq]: n }], [cq]: o }, aS], [cq]: o }], [cq]: o }], [cq]: o }, { error: "A region must be set when sending requests to S3.", [cq]: f }] };
    ruleSet = _data;
  }
});
var cache;
var defaultEndpointResolver;
var init_endpointResolver = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/endpoint/endpointResolver.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es32();
    init_dist_es29();
    init_ruleset();
    cache = new EndpointCache({
      size: 50,
      params: [
        "Accelerate",
        "Bucket",
        "DisableAccessPoints",
        "DisableMultiRegionAccessPoints",
        "DisableS3ExpressSessionAuth",
        "Endpoint",
        "ForcePathStyle",
        "Region",
        "UseArnRegion",
        "UseDualStack",
        "UseFIPS",
        "UseGlobalEndpoint",
        "UseObjectLambdaEndpoint",
        "UseS3ExpressControlEndpoint"
      ]
    });
    defaultEndpointResolver = /* @__PURE__ */ __name2((endpointParams, context = {}) => {
      return cache.get(endpointParams, () => resolveEndpoint(ruleSet, {
        endpointParams,
        logger: context.logger
      }));
    }, "defaultEndpointResolver");
    customEndpointFunctions.aws = awsEndpointFunctions;
  }
});
function createAwsAuthSigv4HttpAuthOption(authParameters) {
  return {
    schemeId: "aws.auth#sigv4",
    signingProperties: {
      name: "s3",
      region: authParameters.region
    },
    propertiesExtractor: /* @__PURE__ */ __name2((config2, context) => ({
      signingProperties: {
        config: config2,
        context
      }
    }), "propertiesExtractor")
  };
}
__name(createAwsAuthSigv4HttpAuthOption, "createAwsAuthSigv4HttpAuthOption");
function createAwsAuthSigv4aHttpAuthOption(authParameters) {
  return {
    schemeId: "aws.auth#sigv4a",
    signingProperties: {
      name: "s3",
      region: authParameters.region
    },
    propertiesExtractor: /* @__PURE__ */ __name2((config2, context) => ({
      signingProperties: {
        config: config2,
        context
      }
    }), "propertiesExtractor")
  };
}
__name(createAwsAuthSigv4aHttpAuthOption, "createAwsAuthSigv4aHttpAuthOption");
var createEndpointRuleSetHttpAuthSchemeParametersProvider;
var _defaultS3HttpAuthSchemeParametersProvider;
var defaultS3HttpAuthSchemeParametersProvider;
var createEndpointRuleSetHttpAuthSchemeProvider;
var _defaultS3HttpAuthSchemeProvider;
var defaultS3HttpAuthSchemeProvider;
var resolveHttpAuthSchemeConfig;
var init_httpAuthSchemeProvider = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/auth/httpAuthSchemeProvider.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es21();
    init_dist_es41();
    init_dist_es37();
    init_dist_es4();
    init_endpointResolver();
    createEndpointRuleSetHttpAuthSchemeParametersProvider = /* @__PURE__ */ __name2((defaultHttpAuthSchemeParametersProvider) => async (config2, context, input) => {
      if (!input) {
        throw new Error(`Could not find \`input\` for \`defaultEndpointRuleSetHttpAuthSchemeParametersProvider\``);
      }
      const defaultParameters = await defaultHttpAuthSchemeParametersProvider(config2, context, input);
      const instructionsFn = getSmithyContext(context)?.commandInstance?.constructor?.getEndpointParameterInstructions;
      if (!instructionsFn) {
        throw new Error(`getEndpointParameterInstructions() is not defined on \`${context.commandName}\``);
      }
      const endpointParameters = await resolveParams(input, { getEndpointParameterInstructions: instructionsFn }, config2);
      return Object.assign(defaultParameters, endpointParameters);
    }, "createEndpointRuleSetHttpAuthSchemeParametersProvider");
    _defaultS3HttpAuthSchemeParametersProvider = /* @__PURE__ */ __name2(async (config2, context, input) => {
      return {
        operation: getSmithyContext(context).operation,
        region: await normalizeProvider(config2.region)() || (() => {
          throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
        })()
      };
    }, "_defaultS3HttpAuthSchemeParametersProvider");
    defaultS3HttpAuthSchemeParametersProvider = createEndpointRuleSetHttpAuthSchemeParametersProvider(_defaultS3HttpAuthSchemeParametersProvider);
    __name2(createAwsAuthSigv4HttpAuthOption, "createAwsAuthSigv4HttpAuthOption");
    __name2(createAwsAuthSigv4aHttpAuthOption, "createAwsAuthSigv4aHttpAuthOption");
    createEndpointRuleSetHttpAuthSchemeProvider = /* @__PURE__ */ __name2((defaultEndpointResolver2, defaultHttpAuthSchemeResolver, createHttpAuthOptionFunctions) => {
      const endpointRuleSetHttpAuthSchemeProvider = /* @__PURE__ */ __name2((authParameters) => {
        const endpoint = defaultEndpointResolver2(authParameters);
        const authSchemes = endpoint.properties?.authSchemes;
        if (!authSchemes) {
          return defaultHttpAuthSchemeResolver(authParameters);
        }
        const options = [];
        for (const scheme of authSchemes) {
          const { name: resolvedName, properties = {}, ...rest } = scheme;
          const name = resolvedName.toLowerCase();
          if (resolvedName !== name) {
            console.warn(`HttpAuthScheme has been normalized with lowercasing: \`${resolvedName}\` to \`${name}\``);
          }
          let schemeId;
          if (name === "sigv4a") {
            schemeId = "aws.auth#sigv4a";
            const sigv4Present = authSchemes.find((s2) => {
              const name2 = s2.name.toLowerCase();
              return name2 !== "sigv4a" && name2.startsWith("sigv4");
            });
            if (SignatureV4MultiRegion.sigv4aDependency() === "none" && sigv4Present) {
              continue;
            }
          } else if (name.startsWith("sigv4")) {
            schemeId = "aws.auth#sigv4";
          } else {
            throw new Error(`Unknown HttpAuthScheme found in \`@smithy.rules#endpointRuleSet\`: \`${name}\``);
          }
          const createOption = createHttpAuthOptionFunctions[schemeId];
          if (!createOption) {
            throw new Error(`Could not find HttpAuthOption create function for \`${schemeId}\``);
          }
          const option = createOption(authParameters);
          option.schemeId = schemeId;
          option.signingProperties = { ...option.signingProperties || {}, ...rest, ...properties };
          options.push(option);
        }
        return options;
      }, "endpointRuleSetHttpAuthSchemeProvider");
      return endpointRuleSetHttpAuthSchemeProvider;
    }, "createEndpointRuleSetHttpAuthSchemeProvider");
    _defaultS3HttpAuthSchemeProvider = /* @__PURE__ */ __name2((authParameters) => {
      const options = [];
      switch (authParameters.operation) {
        default: {
          options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
          options.push(createAwsAuthSigv4aHttpAuthOption(authParameters));
        }
      }
      return options;
    }, "_defaultS3HttpAuthSchemeProvider");
    defaultS3HttpAuthSchemeProvider = createEndpointRuleSetHttpAuthSchemeProvider(defaultEndpointResolver, _defaultS3HttpAuthSchemeProvider, {
      "aws.auth#sigv4": createAwsAuthSigv4HttpAuthOption,
      "aws.auth#sigv4a": createAwsAuthSigv4aHttpAuthOption
    });
    resolveHttpAuthSchemeConfig = /* @__PURE__ */ __name2((config2) => {
      const config_0 = resolveAwsSdkSigV4Config(config2);
      const config_1 = resolveAwsSdkSigV4AConfig(config_0);
      return Object.assign(config_1, {
        authSchemePreference: normalizeProvider(config2.authSchemePreference ?? [])
      });
    }, "resolveHttpAuthSchemeConfig");
  }
});
var resolveClientEndpointParameters;
var commonParams;
var init_EndpointParameters = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/endpoint/EndpointParameters.js"() {
    init_functionsRoutes_0_09879299104094341();
    resolveClientEndpointParameters = /* @__PURE__ */ __name2((options) => {
      return Object.assign(options, {
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        forcePathStyle: options.forcePathStyle ?? false,
        useAccelerateEndpoint: options.useAccelerateEndpoint ?? false,
        useGlobalEndpoint: options.useGlobalEndpoint ?? false,
        disableMultiregionAccessPoints: options.disableMultiregionAccessPoints ?? false,
        defaultSigningName: "s3"
      });
    }, "resolveClientEndpointParameters");
    commonParams = {
      ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
      UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
      DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
      Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
      DisableS3ExpressSessionAuth: { type: "clientContextParams", name: "disableS3ExpressSessionAuth" },
      UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
});
var S3ServiceException;
var init_S3ServiceException = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/models/S3ServiceException.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es19();
    S3ServiceException = class _S3ServiceException extends ServiceException {
      static {
        __name(this, "_S3ServiceException");
      }
      static {
        __name2(this, "S3ServiceException");
      }
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _S3ServiceException.prototype);
      }
    };
  }
});
var NoSuchUpload;
var ObjectNotInActiveTierError;
var BucketAlreadyExists;
var BucketAlreadyOwnedByYou;
var NoSuchBucket;
var AnalyticsFilter;
var MetricsFilter;
var InvalidObjectState;
var NoSuchKey;
var NotFound;
var CompleteMultipartUploadOutputFilterSensitiveLog;
var CompleteMultipartUploadRequestFilterSensitiveLog;
var CopyObjectOutputFilterSensitiveLog;
var CopyObjectRequestFilterSensitiveLog;
var CreateMultipartUploadOutputFilterSensitiveLog;
var CreateMultipartUploadRequestFilterSensitiveLog;
var SessionCredentialsFilterSensitiveLog;
var CreateSessionOutputFilterSensitiveLog;
var CreateSessionRequestFilterSensitiveLog;
var ServerSideEncryptionByDefaultFilterSensitiveLog;
var ServerSideEncryptionRuleFilterSensitiveLog;
var ServerSideEncryptionConfigurationFilterSensitiveLog;
var GetBucketEncryptionOutputFilterSensitiveLog;
var SSEKMSFilterSensitiveLog;
var InventoryEncryptionFilterSensitiveLog;
var InventoryS3BucketDestinationFilterSensitiveLog;
var InventoryDestinationFilterSensitiveLog;
var InventoryConfigurationFilterSensitiveLog;
var GetBucketInventoryConfigurationOutputFilterSensitiveLog;
var GetObjectOutputFilterSensitiveLog;
var GetObjectRequestFilterSensitiveLog;
var GetObjectAttributesRequestFilterSensitiveLog;
var GetObjectTorrentOutputFilterSensitiveLog;
var HeadObjectOutputFilterSensitiveLog;
var HeadObjectRequestFilterSensitiveLog;
var ListBucketInventoryConfigurationsOutputFilterSensitiveLog;
var init_models_0 = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es19();
    init_S3ServiceException();
    NoSuchUpload = class _NoSuchUpload extends S3ServiceException {
      static {
        __name(this, "_NoSuchUpload");
      }
      static {
        __name2(this, "NoSuchUpload");
      }
      name = "NoSuchUpload";
      $fault = "client";
      constructor(opts) {
        super({
          name: "NoSuchUpload",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _NoSuchUpload.prototype);
      }
    };
    ObjectNotInActiveTierError = class _ObjectNotInActiveTierError extends S3ServiceException {
      static {
        __name(this, "_ObjectNotInActiveTierError");
      }
      static {
        __name2(this, "ObjectNotInActiveTierError");
      }
      name = "ObjectNotInActiveTierError";
      $fault = "client";
      constructor(opts) {
        super({
          name: "ObjectNotInActiveTierError",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _ObjectNotInActiveTierError.prototype);
      }
    };
    BucketAlreadyExists = class _BucketAlreadyExists extends S3ServiceException {
      static {
        __name(this, "_BucketAlreadyExists");
      }
      static {
        __name2(this, "BucketAlreadyExists");
      }
      name = "BucketAlreadyExists";
      $fault = "client";
      constructor(opts) {
        super({
          name: "BucketAlreadyExists",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _BucketAlreadyExists.prototype);
      }
    };
    BucketAlreadyOwnedByYou = class _BucketAlreadyOwnedByYou extends S3ServiceException {
      static {
        __name(this, "_BucketAlreadyOwnedByYou");
      }
      static {
        __name2(this, "BucketAlreadyOwnedByYou");
      }
      name = "BucketAlreadyOwnedByYou";
      $fault = "client";
      constructor(opts) {
        super({
          name: "BucketAlreadyOwnedByYou",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _BucketAlreadyOwnedByYou.prototype);
      }
    };
    NoSuchBucket = class _NoSuchBucket extends S3ServiceException {
      static {
        __name(this, "_NoSuchBucket");
      }
      static {
        __name2(this, "NoSuchBucket");
      }
      name = "NoSuchBucket";
      $fault = "client";
      constructor(opts) {
        super({
          name: "NoSuchBucket",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _NoSuchBucket.prototype);
      }
    };
    (function(AnalyticsFilter2) {
      AnalyticsFilter2.visit = (value, visitor) => {
        if (value.Prefix !== void 0)
          return visitor.Prefix(value.Prefix);
        if (value.Tag !== void 0)
          return visitor.Tag(value.Tag);
        if (value.And !== void 0)
          return visitor.And(value.And);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      };
    })(AnalyticsFilter || (AnalyticsFilter = {}));
    (function(MetricsFilter2) {
      MetricsFilter2.visit = (value, visitor) => {
        if (value.Prefix !== void 0)
          return visitor.Prefix(value.Prefix);
        if (value.Tag !== void 0)
          return visitor.Tag(value.Tag);
        if (value.AccessPointArn !== void 0)
          return visitor.AccessPointArn(value.AccessPointArn);
        if (value.And !== void 0)
          return visitor.And(value.And);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      };
    })(MetricsFilter || (MetricsFilter = {}));
    InvalidObjectState = class _InvalidObjectState extends S3ServiceException {
      static {
        __name(this, "_InvalidObjectState");
      }
      static {
        __name2(this, "InvalidObjectState");
      }
      name = "InvalidObjectState";
      $fault = "client";
      StorageClass;
      AccessTier;
      constructor(opts) {
        super({
          name: "InvalidObjectState",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _InvalidObjectState.prototype);
        this.StorageClass = opts.StorageClass;
        this.AccessTier = opts.AccessTier;
      }
    };
    NoSuchKey = class _NoSuchKey extends S3ServiceException {
      static {
        __name(this, "_NoSuchKey");
      }
      static {
        __name2(this, "NoSuchKey");
      }
      name = "NoSuchKey";
      $fault = "client";
      constructor(opts) {
        super({
          name: "NoSuchKey",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _NoSuchKey.prototype);
      }
    };
    NotFound = class _NotFound extends S3ServiceException {
      static {
        __name(this, "_NotFound");
      }
      static {
        __name2(this, "NotFound");
      }
      name = "NotFound";
      $fault = "client";
      constructor(opts) {
        super({
          name: "NotFound",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _NotFound.prototype);
      }
    };
    CompleteMultipartUploadOutputFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING2 }
    }), "CompleteMultipartUploadOutputFilterSensitiveLog");
    CompleteMultipartUploadRequestFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING2 }
    }), "CompleteMultipartUploadRequestFilterSensitiveLog");
    CopyObjectOutputFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING2 },
      ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING2 }
    }), "CopyObjectOutputFilterSensitiveLog");
    CopyObjectRequestFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING2 },
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING2 },
      ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING2 },
      ...obj.CopySourceSSECustomerKey && { CopySourceSSECustomerKey: SENSITIVE_STRING2 }
    }), "CopyObjectRequestFilterSensitiveLog");
    CreateMultipartUploadOutputFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING2 },
      ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING2 }
    }), "CreateMultipartUploadOutputFilterSensitiveLog");
    CreateMultipartUploadRequestFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING2 },
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING2 },
      ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING2 }
    }), "CreateMultipartUploadRequestFilterSensitiveLog");
    SessionCredentialsFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.SecretAccessKey && { SecretAccessKey: SENSITIVE_STRING2 },
      ...obj.SessionToken && { SessionToken: SENSITIVE_STRING2 }
    }), "SessionCredentialsFilterSensitiveLog");
    CreateSessionOutputFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING2 },
      ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING2 },
      ...obj.Credentials && { Credentials: SessionCredentialsFilterSensitiveLog(obj.Credentials) }
    }), "CreateSessionOutputFilterSensitiveLog");
    CreateSessionRequestFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING2 },
      ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING2 }
    }), "CreateSessionRequestFilterSensitiveLog");
    ServerSideEncryptionByDefaultFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.KMSMasterKeyID && { KMSMasterKeyID: SENSITIVE_STRING2 }
    }), "ServerSideEncryptionByDefaultFilterSensitiveLog");
    ServerSideEncryptionRuleFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.ApplyServerSideEncryptionByDefault && {
        ApplyServerSideEncryptionByDefault: ServerSideEncryptionByDefaultFilterSensitiveLog(obj.ApplyServerSideEncryptionByDefault)
      }
    }), "ServerSideEncryptionRuleFilterSensitiveLog");
    ServerSideEncryptionConfigurationFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.Rules && { Rules: obj.Rules.map((item) => ServerSideEncryptionRuleFilterSensitiveLog(item)) }
    }), "ServerSideEncryptionConfigurationFilterSensitiveLog");
    GetBucketEncryptionOutputFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.ServerSideEncryptionConfiguration && {
        ServerSideEncryptionConfiguration: ServerSideEncryptionConfigurationFilterSensitiveLog(obj.ServerSideEncryptionConfiguration)
      }
    }), "GetBucketEncryptionOutputFilterSensitiveLog");
    SSEKMSFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.KeyId && { KeyId: SENSITIVE_STRING2 }
    }), "SSEKMSFilterSensitiveLog");
    InventoryEncryptionFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.SSEKMS && { SSEKMS: SSEKMSFilterSensitiveLog(obj.SSEKMS) }
    }), "InventoryEncryptionFilterSensitiveLog");
    InventoryS3BucketDestinationFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.Encryption && { Encryption: InventoryEncryptionFilterSensitiveLog(obj.Encryption) }
    }), "InventoryS3BucketDestinationFilterSensitiveLog");
    InventoryDestinationFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.S3BucketDestination && {
        S3BucketDestination: InventoryS3BucketDestinationFilterSensitiveLog(obj.S3BucketDestination)
      }
    }), "InventoryDestinationFilterSensitiveLog");
    InventoryConfigurationFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.Destination && { Destination: InventoryDestinationFilterSensitiveLog(obj.Destination) }
    }), "InventoryConfigurationFilterSensitiveLog");
    GetBucketInventoryConfigurationOutputFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.InventoryConfiguration && {
        InventoryConfiguration: InventoryConfigurationFilterSensitiveLog(obj.InventoryConfiguration)
      }
    }), "GetBucketInventoryConfigurationOutputFilterSensitiveLog");
    GetObjectOutputFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING2 }
    }), "GetObjectOutputFilterSensitiveLog");
    GetObjectRequestFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING2 }
    }), "GetObjectRequestFilterSensitiveLog");
    GetObjectAttributesRequestFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING2 }
    }), "GetObjectAttributesRequestFilterSensitiveLog");
    GetObjectTorrentOutputFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj
    }), "GetObjectTorrentOutputFilterSensitiveLog");
    HeadObjectOutputFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING2 }
    }), "HeadObjectOutputFilterSensitiveLog");
    HeadObjectRequestFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING2 }
    }), "HeadObjectRequestFilterSensitiveLog");
    ListBucketInventoryConfigurationsOutputFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.InventoryConfigurationList && {
        InventoryConfigurationList: obj.InventoryConfigurationList.map((item) => InventoryConfigurationFilterSensitiveLog(item))
      }
    }), "ListBucketInventoryConfigurationsOutputFilterSensitiveLog");
  }
});
var EncryptionTypeMismatch;
var InvalidRequest;
var InvalidWriteOffset;
var TooManyParts;
var IdempotencyParameterMismatch;
var ObjectAlreadyInActiveTierError;
var SelectObjectContentEventStream;
var ListPartsRequestFilterSensitiveLog;
var PutBucketEncryptionRequestFilterSensitiveLog;
var PutBucketInventoryConfigurationRequestFilterSensitiveLog;
var PutObjectOutputFilterSensitiveLog;
var PutObjectRequestFilterSensitiveLog;
var EncryptionFilterSensitiveLog;
var S3LocationFilterSensitiveLog;
var OutputLocationFilterSensitiveLog;
var RestoreRequestFilterSensitiveLog;
var RestoreObjectRequestFilterSensitiveLog;
var SelectObjectContentOutputFilterSensitiveLog;
var SelectObjectContentRequestFilterSensitiveLog;
var UploadPartOutputFilterSensitiveLog;
var UploadPartRequestFilterSensitiveLog;
var UploadPartCopyOutputFilterSensitiveLog;
var UploadPartCopyRequestFilterSensitiveLog;
var WriteGetObjectResponseRequestFilterSensitiveLog;
var init_models_1 = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/models/models_1.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es19();
    init_models_0();
    init_S3ServiceException();
    EncryptionTypeMismatch = class _EncryptionTypeMismatch extends S3ServiceException {
      static {
        __name(this, "_EncryptionTypeMismatch");
      }
      static {
        __name2(this, "EncryptionTypeMismatch");
      }
      name = "EncryptionTypeMismatch";
      $fault = "client";
      constructor(opts) {
        super({
          name: "EncryptionTypeMismatch",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _EncryptionTypeMismatch.prototype);
      }
    };
    InvalidRequest = class _InvalidRequest extends S3ServiceException {
      static {
        __name(this, "_InvalidRequest");
      }
      static {
        __name2(this, "InvalidRequest");
      }
      name = "InvalidRequest";
      $fault = "client";
      constructor(opts) {
        super({
          name: "InvalidRequest",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _InvalidRequest.prototype);
      }
    };
    InvalidWriteOffset = class _InvalidWriteOffset extends S3ServiceException {
      static {
        __name(this, "_InvalidWriteOffset");
      }
      static {
        __name2(this, "InvalidWriteOffset");
      }
      name = "InvalidWriteOffset";
      $fault = "client";
      constructor(opts) {
        super({
          name: "InvalidWriteOffset",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _InvalidWriteOffset.prototype);
      }
    };
    TooManyParts = class _TooManyParts extends S3ServiceException {
      static {
        __name(this, "_TooManyParts");
      }
      static {
        __name2(this, "TooManyParts");
      }
      name = "TooManyParts";
      $fault = "client";
      constructor(opts) {
        super({
          name: "TooManyParts",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _TooManyParts.prototype);
      }
    };
    IdempotencyParameterMismatch = class _IdempotencyParameterMismatch extends S3ServiceException {
      static {
        __name(this, "_IdempotencyParameterMismatch");
      }
      static {
        __name2(this, "IdempotencyParameterMismatch");
      }
      name = "IdempotencyParameterMismatch";
      $fault = "client";
      constructor(opts) {
        super({
          name: "IdempotencyParameterMismatch",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _IdempotencyParameterMismatch.prototype);
      }
    };
    ObjectAlreadyInActiveTierError = class _ObjectAlreadyInActiveTierError extends S3ServiceException {
      static {
        __name(this, "_ObjectAlreadyInActiveTierError");
      }
      static {
        __name2(this, "ObjectAlreadyInActiveTierError");
      }
      name = "ObjectAlreadyInActiveTierError";
      $fault = "client";
      constructor(opts) {
        super({
          name: "ObjectAlreadyInActiveTierError",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _ObjectAlreadyInActiveTierError.prototype);
      }
    };
    (function(SelectObjectContentEventStream2) {
      SelectObjectContentEventStream2.visit = (value, visitor) => {
        if (value.Records !== void 0)
          return visitor.Records(value.Records);
        if (value.Stats !== void 0)
          return visitor.Stats(value.Stats);
        if (value.Progress !== void 0)
          return visitor.Progress(value.Progress);
        if (value.Cont !== void 0)
          return visitor.Cont(value.Cont);
        if (value.End !== void 0)
          return visitor.End(value.End);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      };
    })(SelectObjectContentEventStream || (SelectObjectContentEventStream = {}));
    ListPartsRequestFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING2 }
    }), "ListPartsRequestFilterSensitiveLog");
    PutBucketEncryptionRequestFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.ServerSideEncryptionConfiguration && {
        ServerSideEncryptionConfiguration: ServerSideEncryptionConfigurationFilterSensitiveLog(obj.ServerSideEncryptionConfiguration)
      }
    }), "PutBucketEncryptionRequestFilterSensitiveLog");
    PutBucketInventoryConfigurationRequestFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.InventoryConfiguration && {
        InventoryConfiguration: InventoryConfigurationFilterSensitiveLog(obj.InventoryConfiguration)
      }
    }), "PutBucketInventoryConfigurationRequestFilterSensitiveLog");
    PutObjectOutputFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING2 },
      ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING2 }
    }), "PutObjectOutputFilterSensitiveLog");
    PutObjectRequestFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING2 },
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING2 },
      ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING2 }
    }), "PutObjectRequestFilterSensitiveLog");
    EncryptionFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.KMSKeyId && { KMSKeyId: SENSITIVE_STRING2 }
    }), "EncryptionFilterSensitiveLog");
    S3LocationFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.Encryption && { Encryption: EncryptionFilterSensitiveLog(obj.Encryption) }
    }), "S3LocationFilterSensitiveLog");
    OutputLocationFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.S3 && { S3: S3LocationFilterSensitiveLog(obj.S3) }
    }), "OutputLocationFilterSensitiveLog");
    RestoreRequestFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.OutputLocation && { OutputLocation: OutputLocationFilterSensitiveLog(obj.OutputLocation) }
    }), "RestoreRequestFilterSensitiveLog");
    RestoreObjectRequestFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.RestoreRequest && { RestoreRequest: RestoreRequestFilterSensitiveLog(obj.RestoreRequest) }
    }), "RestoreObjectRequestFilterSensitiveLog");
    SelectObjectContentOutputFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.Payload && { Payload: "STREAMING_CONTENT" }
    }), "SelectObjectContentOutputFilterSensitiveLog");
    SelectObjectContentRequestFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING2 }
    }), "SelectObjectContentRequestFilterSensitiveLog");
    UploadPartOutputFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING2 }
    }), "UploadPartOutputFilterSensitiveLog");
    UploadPartRequestFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING2 }
    }), "UploadPartRequestFilterSensitiveLog");
    UploadPartCopyOutputFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING2 }
    }), "UploadPartCopyOutputFilterSensitiveLog");
    UploadPartCopyRequestFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING2 },
      ...obj.CopySourceSSECustomerKey && { CopySourceSSECustomerKey: SENSITIVE_STRING2 }
    }), "UploadPartCopyRequestFilterSensitiveLog");
    WriteGetObjectResponseRequestFilterSensitiveLog = /* @__PURE__ */ __name2((obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING2 }
    }), "WriteGetObjectResponseRequestFilterSensitiveLog");
  }
});
var se_AbortMultipartUploadCommand;
var se_CompleteMultipartUploadCommand;
var se_CopyObjectCommand;
var se_CreateBucketCommand;
var se_CreateBucketMetadataConfigurationCommand;
var se_CreateBucketMetadataTableConfigurationCommand;
var se_CreateMultipartUploadCommand;
var se_CreateSessionCommand;
var se_DeleteBucketCommand;
var se_DeleteBucketAnalyticsConfigurationCommand;
var se_DeleteBucketCorsCommand;
var se_DeleteBucketEncryptionCommand;
var se_DeleteBucketIntelligentTieringConfigurationCommand;
var se_DeleteBucketInventoryConfigurationCommand;
var se_DeleteBucketLifecycleCommand;
var se_DeleteBucketMetadataConfigurationCommand;
var se_DeleteBucketMetadataTableConfigurationCommand;
var se_DeleteBucketMetricsConfigurationCommand;
var se_DeleteBucketOwnershipControlsCommand;
var se_DeleteBucketPolicyCommand;
var se_DeleteBucketReplicationCommand;
var se_DeleteBucketTaggingCommand;
var se_DeleteBucketWebsiteCommand;
var se_DeleteObjectCommand;
var se_DeleteObjectsCommand;
var se_DeleteObjectTaggingCommand;
var se_DeletePublicAccessBlockCommand;
var se_GetBucketAccelerateConfigurationCommand;
var se_GetBucketAclCommand;
var se_GetBucketAnalyticsConfigurationCommand;
var se_GetBucketCorsCommand;
var se_GetBucketEncryptionCommand;
var se_GetBucketIntelligentTieringConfigurationCommand;
var se_GetBucketInventoryConfigurationCommand;
var se_GetBucketLifecycleConfigurationCommand;
var se_GetBucketLocationCommand;
var se_GetBucketLoggingCommand;
var se_GetBucketMetadataConfigurationCommand;
var se_GetBucketMetadataTableConfigurationCommand;
var se_GetBucketMetricsConfigurationCommand;
var se_GetBucketNotificationConfigurationCommand;
var se_GetBucketOwnershipControlsCommand;
var se_GetBucketPolicyCommand;
var se_GetBucketPolicyStatusCommand;
var se_GetBucketReplicationCommand;
var se_GetBucketRequestPaymentCommand;
var se_GetBucketTaggingCommand;
var se_GetBucketVersioningCommand;
var se_GetBucketWebsiteCommand;
var se_GetObjectCommand;
var se_GetObjectAclCommand;
var se_GetObjectAttributesCommand;
var se_GetObjectLegalHoldCommand;
var se_GetObjectLockConfigurationCommand;
var se_GetObjectRetentionCommand;
var se_GetObjectTaggingCommand;
var se_GetObjectTorrentCommand;
var se_GetPublicAccessBlockCommand;
var se_HeadBucketCommand;
var se_HeadObjectCommand;
var se_ListBucketAnalyticsConfigurationsCommand;
var se_ListBucketIntelligentTieringConfigurationsCommand;
var se_ListBucketInventoryConfigurationsCommand;
var se_ListBucketMetricsConfigurationsCommand;
var se_ListBucketsCommand;
var se_ListDirectoryBucketsCommand;
var se_ListMultipartUploadsCommand;
var se_ListObjectsCommand;
var se_ListObjectsV2Command;
var se_ListObjectVersionsCommand;
var se_ListPartsCommand;
var se_PutBucketAccelerateConfigurationCommand;
var se_PutBucketAclCommand;
var se_PutBucketAnalyticsConfigurationCommand;
var se_PutBucketCorsCommand;
var se_PutBucketEncryptionCommand;
var se_PutBucketIntelligentTieringConfigurationCommand;
var se_PutBucketInventoryConfigurationCommand;
var se_PutBucketLifecycleConfigurationCommand;
var se_PutBucketLoggingCommand;
var se_PutBucketMetricsConfigurationCommand;
var se_PutBucketNotificationConfigurationCommand;
var se_PutBucketOwnershipControlsCommand;
var se_PutBucketPolicyCommand;
var se_PutBucketReplicationCommand;
var se_PutBucketRequestPaymentCommand;
var se_PutBucketTaggingCommand;
var se_PutBucketVersioningCommand;
var se_PutBucketWebsiteCommand;
var se_PutObjectCommand;
var se_PutObjectAclCommand;
var se_PutObjectLegalHoldCommand;
var se_PutObjectLockConfigurationCommand;
var se_PutObjectRetentionCommand;
var se_PutObjectTaggingCommand;
var se_PutPublicAccessBlockCommand;
var se_RenameObjectCommand;
var se_RestoreObjectCommand;
var se_SelectObjectContentCommand;
var se_UpdateBucketMetadataInventoryTableConfigurationCommand;
var se_UpdateBucketMetadataJournalTableConfigurationCommand;
var se_UploadPartCommand;
var se_UploadPartCopyCommand;
var se_WriteGetObjectResponseCommand;
var de_AbortMultipartUploadCommand;
var de_CompleteMultipartUploadCommand;
var de_CopyObjectCommand;
var de_CreateBucketCommand;
var de_CreateBucketMetadataConfigurationCommand;
var de_CreateBucketMetadataTableConfigurationCommand;
var de_CreateMultipartUploadCommand;
var de_CreateSessionCommand;
var de_DeleteBucketCommand;
var de_DeleteBucketAnalyticsConfigurationCommand;
var de_DeleteBucketCorsCommand;
var de_DeleteBucketEncryptionCommand;
var de_DeleteBucketIntelligentTieringConfigurationCommand;
var de_DeleteBucketInventoryConfigurationCommand;
var de_DeleteBucketLifecycleCommand;
var de_DeleteBucketMetadataConfigurationCommand;
var de_DeleteBucketMetadataTableConfigurationCommand;
var de_DeleteBucketMetricsConfigurationCommand;
var de_DeleteBucketOwnershipControlsCommand;
var de_DeleteBucketPolicyCommand;
var de_DeleteBucketReplicationCommand;
var de_DeleteBucketTaggingCommand;
var de_DeleteBucketWebsiteCommand;
var de_DeleteObjectCommand;
var de_DeleteObjectsCommand;
var de_DeleteObjectTaggingCommand;
var de_DeletePublicAccessBlockCommand;
var de_GetBucketAccelerateConfigurationCommand;
var de_GetBucketAclCommand;
var de_GetBucketAnalyticsConfigurationCommand;
var de_GetBucketCorsCommand;
var de_GetBucketEncryptionCommand;
var de_GetBucketIntelligentTieringConfigurationCommand;
var de_GetBucketInventoryConfigurationCommand;
var de_GetBucketLifecycleConfigurationCommand;
var de_GetBucketLocationCommand;
var de_GetBucketLoggingCommand;
var de_GetBucketMetadataConfigurationCommand;
var de_GetBucketMetadataTableConfigurationCommand;
var de_GetBucketMetricsConfigurationCommand;
var de_GetBucketNotificationConfigurationCommand;
var de_GetBucketOwnershipControlsCommand;
var de_GetBucketPolicyCommand;
var de_GetBucketPolicyStatusCommand;
var de_GetBucketReplicationCommand;
var de_GetBucketRequestPaymentCommand;
var de_GetBucketTaggingCommand;
var de_GetBucketVersioningCommand;
var de_GetBucketWebsiteCommand;
var de_GetObjectCommand;
var de_GetObjectAclCommand;
var de_GetObjectAttributesCommand;
var de_GetObjectLegalHoldCommand;
var de_GetObjectLockConfigurationCommand;
var de_GetObjectRetentionCommand;
var de_GetObjectTaggingCommand;
var de_GetObjectTorrentCommand;
var de_GetPublicAccessBlockCommand;
var de_HeadBucketCommand;
var de_HeadObjectCommand;
var de_ListBucketAnalyticsConfigurationsCommand;
var de_ListBucketIntelligentTieringConfigurationsCommand;
var de_ListBucketInventoryConfigurationsCommand;
var de_ListBucketMetricsConfigurationsCommand;
var de_ListBucketsCommand;
var de_ListDirectoryBucketsCommand;
var de_ListMultipartUploadsCommand;
var de_ListObjectsCommand;
var de_ListObjectsV2Command;
var de_ListObjectVersionsCommand;
var de_ListPartsCommand;
var de_PutBucketAccelerateConfigurationCommand;
var de_PutBucketAclCommand;
var de_PutBucketAnalyticsConfigurationCommand;
var de_PutBucketCorsCommand;
var de_PutBucketEncryptionCommand;
var de_PutBucketIntelligentTieringConfigurationCommand;
var de_PutBucketInventoryConfigurationCommand;
var de_PutBucketLifecycleConfigurationCommand;
var de_PutBucketLoggingCommand;
var de_PutBucketMetricsConfigurationCommand;
var de_PutBucketNotificationConfigurationCommand;
var de_PutBucketOwnershipControlsCommand;
var de_PutBucketPolicyCommand;
var de_PutBucketReplicationCommand;
var de_PutBucketRequestPaymentCommand;
var de_PutBucketTaggingCommand;
var de_PutBucketVersioningCommand;
var de_PutBucketWebsiteCommand;
var de_PutObjectCommand;
var de_PutObjectAclCommand;
var de_PutObjectLegalHoldCommand;
var de_PutObjectLockConfigurationCommand;
var de_PutObjectRetentionCommand;
var de_PutObjectTaggingCommand;
var de_PutPublicAccessBlockCommand;
var de_RenameObjectCommand;
var de_RestoreObjectCommand;
var de_SelectObjectContentCommand;
var de_UpdateBucketMetadataInventoryTableConfigurationCommand;
var de_UpdateBucketMetadataJournalTableConfigurationCommand;
var de_UploadPartCommand;
var de_UploadPartCopyCommand;
var de_WriteGetObjectResponseCommand;
var de_CommandError;
var throwDefaultError2;
var de_BucketAlreadyExistsRes;
var de_BucketAlreadyOwnedByYouRes;
var de_EncryptionTypeMismatchRes;
var de_IdempotencyParameterMismatchRes;
var de_InvalidObjectStateRes;
var de_InvalidRequestRes;
var de_InvalidWriteOffsetRes;
var de_NoSuchBucketRes;
var de_NoSuchKeyRes;
var de_NoSuchUploadRes;
var de_NotFoundRes;
var de_ObjectAlreadyInActiveTierErrorRes;
var de_ObjectNotInActiveTierErrorRes;
var de_TooManyPartsRes;
var de_SelectObjectContentEventStream;
var de_ContinuationEvent_event;
var de_EndEvent_event;
var de_ProgressEvent_event;
var de_RecordsEvent_event;
var de_StatsEvent_event;
var se_AbortIncompleteMultipartUpload;
var se_AccelerateConfiguration;
var se_AccessControlPolicy;
var se_AccessControlTranslation;
var se_AllowedHeaders;
var se_AllowedMethods;
var se_AllowedOrigins;
var se_AnalyticsAndOperator;
var se_AnalyticsConfiguration;
var se_AnalyticsExportDestination;
var se_AnalyticsFilter;
var se_AnalyticsS3BucketDestination;
var se_BucketInfo;
var se_BucketLifecycleConfiguration;
var se_BucketLoggingStatus;
var se_CompletedMultipartUpload;
var se_CompletedPart;
var se_CompletedPartList;
var se_Condition;
var se_CORSConfiguration;
var se_CORSRule;
var se_CORSRules;
var se_CreateBucketConfiguration;
var se_CSVInput;
var se_CSVOutput;
var se_DefaultRetention;
var se_Delete;
var se_DeleteMarkerReplication;
var se_Destination;
var se_Encryption;
var se_EncryptionConfiguration;
var se_ErrorDocument;
var se_EventBridgeConfiguration;
var se_EventList;
var se_ExistingObjectReplication;
var se_ExposeHeaders;
var se_FilterRule;
var se_FilterRuleList;
var se_GlacierJobParameters;
var se_Grant;
var se_Grantee;
var se_Grants;
var se_IndexDocument;
var se_InputSerialization;
var se_IntelligentTieringAndOperator;
var se_IntelligentTieringConfiguration;
var se_IntelligentTieringFilter;
var se_InventoryConfiguration;
var se_InventoryDestination;
var se_InventoryEncryption;
var se_InventoryFilter;
var se_InventoryOptionalFields;
var se_InventoryS3BucketDestination;
var se_InventorySchedule;
var se_InventoryTableConfiguration;
var se_InventoryTableConfigurationUpdates;
var se_JournalTableConfiguration;
var se_JournalTableConfigurationUpdates;
var se_JSONInput;
var se_JSONOutput;
var se_LambdaFunctionConfiguration;
var se_LambdaFunctionConfigurationList;
var se_LifecycleExpiration;
var se_LifecycleRule;
var se_LifecycleRuleAndOperator;
var se_LifecycleRuleFilter;
var se_LifecycleRules;
var se_LocationInfo;
var se_LoggingEnabled;
var se_MetadataConfiguration;
var se_MetadataEntry;
var se_MetadataTableConfiguration;
var se_MetadataTableEncryptionConfiguration;
var se_Metrics;
var se_MetricsAndOperator;
var se_MetricsConfiguration;
var se_MetricsFilter;
var se_NoncurrentVersionExpiration;
var se_NoncurrentVersionTransition;
var se_NoncurrentVersionTransitionList;
var se_NotificationConfiguration;
var se_NotificationConfigurationFilter;
var se_ObjectIdentifier;
var se_ObjectIdentifierList;
var se_ObjectLockConfiguration;
var se_ObjectLockLegalHold;
var se_ObjectLockRetention;
var se_ObjectLockRule;
var se_OutputLocation;
var se_OutputSerialization;
var se_Owner;
var se_OwnershipControls;
var se_OwnershipControlsRule;
var se_OwnershipControlsRules;
var se_ParquetInput;
var se_PartitionedPrefix;
var se_PublicAccessBlockConfiguration;
var se_QueueConfiguration;
var se_QueueConfigurationList;
var se_RecordExpiration;
var se_Redirect;
var se_RedirectAllRequestsTo;
var se_ReplicaModifications;
var se_ReplicationConfiguration;
var se_ReplicationRule;
var se_ReplicationRuleAndOperator;
var se_ReplicationRuleFilter;
var se_ReplicationRules;
var se_ReplicationTime;
var se_ReplicationTimeValue;
var se_RequestPaymentConfiguration;
var se_RequestProgress;
var se_RestoreRequest;
var se_RoutingRule;
var se_RoutingRules;
var se_S3KeyFilter;
var se_S3Location;
var se_S3TablesDestination;
var se_ScanRange;
var se_SelectParameters;
var se_ServerSideEncryptionByDefault;
var se_ServerSideEncryptionConfiguration;
var se_ServerSideEncryptionRule;
var se_ServerSideEncryptionRules;
var se_SimplePrefix;
var se_SourceSelectionCriteria;
var se_SSEKMS;
var se_SseKmsEncryptedObjects;
var se_SSES3;
var se_StorageClassAnalysis;
var se_StorageClassAnalysisDataExport;
var se_Tag;
var se_Tagging;
var se_TagSet;
var se_TargetGrant;
var se_TargetGrants;
var se_TargetObjectKeyFormat;
var se_Tiering;
var se_TieringList;
var se_TopicConfiguration;
var se_TopicConfigurationList;
var se_Transition;
var se_TransitionList;
var se_UserMetadata;
var se_VersioningConfiguration;
var se_WebsiteConfiguration;
var de_AbortIncompleteMultipartUpload;
var de_AccessControlTranslation;
var de_AllowedHeaders;
var de_AllowedMethods;
var de_AllowedOrigins;
var de_AnalyticsAndOperator;
var de_AnalyticsConfiguration;
var de_AnalyticsConfigurationList;
var de_AnalyticsExportDestination;
var de_AnalyticsFilter;
var de_AnalyticsS3BucketDestination;
var de_Bucket;
var de_Buckets;
var de_Checksum;
var de_ChecksumAlgorithmList;
var de_CommonPrefix;
var de_CommonPrefixList;
var de_Condition;
var de_ContinuationEvent;
var de_CopyObjectResult;
var de_CopyPartResult;
var de_CORSRule;
var de_CORSRules;
var de_DefaultRetention;
var de_DeletedObject;
var de_DeletedObjects;
var de_DeleteMarkerEntry;
var de_DeleteMarkerReplication;
var de_DeleteMarkers;
var de_Destination;
var de_DestinationResult;
var de_EncryptionConfiguration;
var de_EndEvent;
var de__Error;
var de_ErrorDetails;
var de_ErrorDocument;
var de_Errors;
var de_EventBridgeConfiguration;
var de_EventList;
var de_ExistingObjectReplication;
var de_ExposeHeaders;
var de_FilterRule;
var de_FilterRuleList;
var de_GetBucketMetadataConfigurationResult;
var de_GetBucketMetadataTableConfigurationResult;
var de_GetObjectAttributesParts;
var de_Grant;
var de_Grantee;
var de_Grants;
var de_IndexDocument;
var de_Initiator;
var de_IntelligentTieringAndOperator;
var de_IntelligentTieringConfiguration;
var de_IntelligentTieringConfigurationList;
var de_IntelligentTieringFilter;
var de_InventoryConfiguration;
var de_InventoryConfigurationList;
var de_InventoryDestination;
var de_InventoryEncryption;
var de_InventoryFilter;
var de_InventoryOptionalFields;
var de_InventoryS3BucketDestination;
var de_InventorySchedule;
var de_InventoryTableConfigurationResult;
var de_JournalTableConfigurationResult;
var de_LambdaFunctionConfiguration;
var de_LambdaFunctionConfigurationList;
var de_LifecycleExpiration;
var de_LifecycleRule;
var de_LifecycleRuleAndOperator;
var de_LifecycleRuleFilter;
var de_LifecycleRules;
var de_LoggingEnabled;
var de_MetadataConfigurationResult;
var de_MetadataTableConfigurationResult;
var de_Metrics;
var de_MetricsAndOperator;
var de_MetricsConfiguration;
var de_MetricsConfigurationList;
var de_MetricsFilter;
var de_MultipartUpload;
var de_MultipartUploadList;
var de_NoncurrentVersionExpiration;
var de_NoncurrentVersionTransition;
var de_NoncurrentVersionTransitionList;
var de_NotificationConfigurationFilter;
var de__Object;
var de_ObjectList;
var de_ObjectLockConfiguration;
var de_ObjectLockLegalHold;
var de_ObjectLockRetention;
var de_ObjectLockRule;
var de_ObjectPart;
var de_ObjectVersion;
var de_ObjectVersionList;
var de_Owner;
var de_OwnershipControls;
var de_OwnershipControlsRule;
var de_OwnershipControlsRules;
var de_Part;
var de_PartitionedPrefix;
var de_Parts;
var de_PartsList;
var de_PolicyStatus;
var de_Progress;
var de_PublicAccessBlockConfiguration;
var de_QueueConfiguration;
var de_QueueConfigurationList;
var de_RecordExpiration;
var de_Redirect;
var de_RedirectAllRequestsTo;
var de_ReplicaModifications;
var de_ReplicationConfiguration;
var de_ReplicationRule;
var de_ReplicationRuleAndOperator;
var de_ReplicationRuleFilter;
var de_ReplicationRules;
var de_ReplicationTime;
var de_ReplicationTimeValue;
var de_RestoreStatus;
var de_RoutingRule;
var de_RoutingRules;
var de_S3KeyFilter;
var de_S3TablesDestinationResult;
var de_ServerSideEncryptionByDefault;
var de_ServerSideEncryptionConfiguration;
var de_ServerSideEncryptionRule;
var de_ServerSideEncryptionRules;
var de_SessionCredentials;
var de_SimplePrefix;
var de_SourceSelectionCriteria;
var de_SSEKMS;
var de_SseKmsEncryptedObjects;
var de_SSES3;
var de_Stats;
var de_StorageClassAnalysis;
var de_StorageClassAnalysisDataExport;
var de_Tag;
var de_TagSet;
var de_TargetGrant;
var de_TargetGrants;
var de_TargetObjectKeyFormat;
var de_Tiering;
var de_TieringList;
var de_TopicConfiguration;
var de_TopicConfigurationList;
var de_Transition;
var de_TransitionList;
var deserializeMetadata2;
var collectBodyString2;
var _A;
var _AAO;
var _AC;
var _ACL;
var _ACLc;
var _ACLn;
var _ACP;
var _ACT;
var _ACc;
var _AD;
var _AED;
var _AF;
var _AH;
var _AHl;
var _AI;
var _AIMU;
var _AIc;
var _AKI;
var _AM;
var _AMl;
var _AO;
var _AOl;
var _APA;
var _APAc;
var _AQRD;
var _AR;
var _ARI;
var _AS;
var _ASBD;
var _ASEFF;
var _ASSEBD;
var _AT;
var _Ac;
var _B;
var _BA;
var _BAI;
var _BAS;
var _BGR;
var _BI;
var _BKE;
var _BLC;
var _BLCu;
var _BLN;
var _BLP;
var _BLS;
var _BLT;
var _BN;
var _BP;
var _BPA;
var _BPP;
var _BR;
var _BRy;
var _BS;
var _BT;
var _BVS;
var _Bu;
var _C;
var _CA;
var _CACL;
var _CBC;
var _CC;
var _CCRC;
var _CCRCC;
var _CCRCNVME;
var _CD;
var _CDr;
var _CE;
var _CF;
var _CFC;
var _CL;
var _CLo;
var _CM;
var _CMD;
var _CMU;
var _CORSC;
var _CORSR;
var _CORSRu;
var _CP;
var _CPo;
var _CR;
var _CRSBA;
var _CS;
var _CSHA;
var _CSHAh;
var _CSIM;
var _CSIMS;
var _CSINM;
var _CSIUS;
var _CSR;
var _CSSSECA;
var _CSSSECK;
var _CSSSECKMD;
var _CSV;
var _CSVI;
var _CSVIn;
var _CSVO;
var _CSo;
var _CT;
var _CTl;
var _CTo;
var _CTom;
var _CTon;
var _Ch;
var _Co;
var _Cod;
var _Com;
var _Con;
var _D;
var _DAI;
var _DE;
var _DIM;
var _DIMS;
var _DINM;
var _DIUS;
var _DM;
var _DMR;
var _DMRS;
var _DMVI;
var _DMe;
var _DN;
var _DR;
var _DRe;
var _DRes;
var _Da;
var _Dat;
var _De;
var _Del;
var _Des;
var _Desc;
var _E;
var _EA;
var _EBC;
var _EBO;
var _EC;
var _ECn;
var _ED;
var _EH;
var _EHx;
var _EM;
var _EODM;
var _EOR;
var _EORS;
var _ERP;
var _ES;
var _ESBO;
var _ESx;
var _ESxp;
var _ET;
var _ETa;
var _ETn;
var _ETv;
var _ETx;
var _En;
var _Ena;
var _End;
var _Er;
var _Err;
var _Ev;
var _Eve;
var _Ex;
var _Exp;
var _F;
var _FD;
var _FHI;
var _FO;
var _FR;
var _FRN;
var _FRV;
var _FRi;
var _Fi;
var _Fo;
var _Fr;
var _G;
var _GFC;
var _GJP;
var _GR;
var _GRACP;
var _GW;
var _GWACP;
var _Gr;
var _Gra;
var _HECRE;
var _HN;
var _HRC;
var _I;
var _IC;
var _ICL;
var _ICS;
var _ID;
var _ID_;
var _IDn;
var _IE;
var _IEn;
var _IF;
var _IFn;
var _IFnv;
var _II;
var _IIOV;
var _IL;
var _IM;
var _IMIT;
var _IMLMT;
var _IMS;
var _IMSf;
var _INM;
var _IOF;
var _IOV;
var _IP;
var _IPA;
var _IRIP;
var _IS;
var _ISBD;
var _ISn;
var _IT;
var _ITAO;
var _ITAT;
var _ITC;
var _ITCL;
var _ITCR;
var _ITCU;
var _ITCn;
var _ITD;
var _ITF;
var _ITI;
var _ITS;
var _IUS;
var _In;
var _Ini;
var _JSON;
var _JSONI;
var _JSONO;
var _JSONT;
var _JTC;
var _JTCR;
var _JTCU;
var _K;
var _KC;
var _KI;
var _KKA;
var _KM;
var _KMSC;
var _KMSKI;
var _KMSMKID;
var _KPE;
var _L;
var _LC;
var _LE;
var _LEi;
var _LFA;
var _LFC;
var _LFCa;
var _LI;
var _LM;
var _LMT;
var _LNAS;
var _LP;
var _LR;
var _LRAO;
var _LRF;
var _LT;
var _M;
var _MAO;
var _MAS;
var _MB;
var _MC;
var _MCL;
var _MCR;
var _MCe;
var _MD;
var _MDB;
var _MDf;
var _ME;
var _MF;
var _MFA;
var _MFAD;
var _MI;
var _MK;
var _MKe;
var _MM;
var _MOS;
var _MP;
var _MS;
var _MTC;
var _MTCR;
var _MTEC;
var _MU;
var _MV;
var _Me;
var _Mes;
var _Mi;
var _Mo;
var _N;
var _NC;
var _NCF;
var _NCT;
var _ND;
var _NI;
var _NKM;
var _NM;
var _NNV;
var _NPNM;
var _NUIM;
var _NVE;
var _NVIM;
var _NVT;
var _NVTo;
var _O;
var _OA;
var _OC;
var _OCACL;
var _OCR;
var _OF;
var _OI;
var _OK;
var _OL;
var _OLC;
var _OLE;
var _OLEFB;
var _OLLH;
var _OLLHS;
var _OLM;
var _OLR;
var _OLRM;
var _OLRUD;
var _OLRb;
var _OO;
var _OOA;
var _OOw;
var _OP;
var _OS;
var _OSGT;
var _OSGTB;
var _OSLT;
var _OSLTB;
var _OSV;
var _OSb;
var _OVI;
var _Ob;
var _P;
var _PABC;
var _PC;
var _PDS;
var _PI;
var _PN;
var _PNM;
var _PP;
var _Pa;
var _Par;
var _Parq;
var _Part;
var _Pe;
var _Pr;
var _Pri;
var _Q;
var _QA;
var _QC;
var _QCu;
var _QCuo;
var _QEC;
var _QF;
var _Qu;
var _R;
var _RART;
var _RC;
var _RCC;
var _RCD;
var _RCE;
var _RCL;
var _RCT;
var _RCe;
var _RD;
var _RE;
var _RED;
var _REDe;
var _REe;
var _RKKID;
var _RKPW;
var _RKW;
var _RM;
var _RMS;
var _ROP;
var _RP;
var _RPB;
var _RPC;
var _RPe;
var _RR;
var _RRAO;
var _RRF;
var _RRS;
var _RRT;
var _RRe;
var _RRes;
var _RRo;
var _RRou;
var _RS;
var _RSe;
var _RSes;
var _RT;
var _RTS;
var _RTV;
var _RTe;
var _RUD;
var _Re;
var _Red;
var _Ro;
var _Ru;
var _Rul;
var _S;
var _SA;
var _SAK;
var _SAs;
var _SBD;
var _SC;
var _SCA;
var _SCADE;
var _SCASV;
var _SCt;
var _SDV;
var _SIM;
var _SIMS;
var _SINM;
var _SIUS;
var _SK;
var _SKEO;
var _SKEOS;
var _SKF;
var _SKe;
var _SL;
var _SM;
var _SOCR;
var _SP;
var _SPi;
var _SR;
var _SS;
var _SSC;
var _SSE;
var _SSEA;
var _SSEBD;
var _SSEC;
var _SSECA;
var _SSECK;
var _SSECKMD;
var _SSEKMS;
var _SSEKMSEC;
var _SSEKMSKI;
var _SSER;
var _SSES;
var _ST;
var _STBA;
var _STD;
var _STDR;
var _STN;
var _S_;
var _Sc;
var _Se;
var _Si;
var _St;
var _Su;
var _T;
var _TA;
var _TAa;
var _TB;
var _TBA;
var _TBT;
var _TC;
var _TCo;
var _TCop;
var _TD;
var _TDMOS;
var _TG;
var _TGa;
var _TN;
var _TNa;
var _TOKF;
var _TP;
var _TPC;
var _TS;
var _TSA;
var _TSC;
var _TSa;
var _Ta;
var _Tag;
var _Ti;
var _Tie;
var _Tier;
var _Tim;
var _To;
var _Top;
var _Tr;
var _Tra;
var _Ty;
var _U;
var _UI;
var _UIM;
var _UM;
var _URI;
var _Up;
var _V;
var _VC;
var _VCe;
var _VI;
var _VIM;
var _Va;
var _Ve;
var _WC;
var _WOB;
var _WRL;
var _Y;
var _a;
var _ac;
var _acl;
var _ar;
var _at;
var _br;
var _c;
var _cc;
var _cd;
var _ce;
var _cl;
var _cl_;
var _cm;
var _cr;
var _ct;
var _ct_;
var _d;
var _de;
var _e;
var _en;
var _et;
var _eta;
var _ex;
var _fo;
var _i;
var _im;
var _ims;
var _in;
var _inm;
var _it;
var _ius;
var _km;
var _l;
var _lh;
var _lm;
var _lo;
var _log;
var _lt2;
var _m;
var _mC;
var _mIT;
var _mJT;
var _mT;
var _ma;
var _mb;
var _mdb;
var _me;
var _mk;
var _mp;
var _mu;
var _n;
var _oC;
var _ol;
var _p;
var _pAB;
var _pN;
var _pS;
var _pnm;
var _pr;
var _r;
var _rO;
var _rP;
var _ra;
var _rcc;
var _rcd;
var _rce;
var _rcl;
var _rct;
var _re;
var _res;
var _ret;
var _s;
var _sa;
var _se;
var _st;
var _t;
var _to;
var _u;
var _uI;
var _uim;
var _v;
var _vI;
var _ve;
var _ver;
var _vim;
var _w;
var _x;
var _xaa;
var _xaad;
var _xaapa;
var _xaari;
var _xaas;
var _xaba;
var _xabgr;
var _xabln;
var _xablt;
var _xabole;
var _xabolt;
var _xabr;
var _xaca;
var _xacc;
var _xacc_;
var _xacc__;
var _xacm;
var _xacrsba;
var _xacs;
var _xacs_;
var _xacs__;
var _xacsim;
var _xacsims;
var _xacsinm;
var _xacsius;
var _xacsm;
var _xacsr;
var _xacssseca;
var _xacssseck;
var _xacssseckm;
var _xacsvi;
var _xact;
var _xact_;
var _xadm;
var _xae;
var _xaebo;
var _xafec;
var _xafem;
var _xafhar;
var _xafhcc;
var _xafhcd;
var _xafhce;
var _xafhcl;
var _xafhcr;
var _xafhct;
var _xafhe;
var _xafhe_;
var _xafhlm;
var _xafhxacc;
var _xafhxacc_;
var _xafhxacc__;
var _xafhxacs;
var _xafhxacs_;
var _xafhxadm;
var _xafhxae;
var _xafhxamm;
var _xafhxampc;
var _xafhxaollh;
var _xafhxaolm;
var _xafhxaolrud;
var _xafhxar;
var _xafhxarc;
var _xafhxars;
var _xafhxasc;
var _xafhxasse;
var _xafhxasseakki;
var _xafhxassebke;
var _xafhxasseca;
var _xafhxasseckm;
var _xafhxatc;
var _xafhxavi;
var _xafs;
var _xagfc;
var _xagr;
var _xagra;
var _xagw;
var _xagwa;
var _xaimit;
var _xaimlmt;
var _xaims;
var _xam;
var _xamd;
var _xamm;
var _xamos;
var _xamp;
var _xampc;
var _xaoa;
var _xaollh;
var _xaolm;
var _xaolrud;
var _xaoo;
var _xaooa;
var _xaos;
var _xapnm;
var _xar;
var _xarc;
var _xarop;
var _xarp;
var _xarr;
var _xars;
var _xars_;
var _xarsim;
var _xarsims;
var _xarsinm;
var _xarsius;
var _xart;
var _xasc;
var _xasca;
var _xasdv;
var _xasebo;
var _xasse;
var _xasseakki;
var _xassebke;
var _xassec;
var _xasseca;
var _xasseck;
var _xasseckm;
var _xat;
var _xatc;
var _xatd;
var _xatdmos;
var _xavi;
var _xawob;
var _xawrl;
var _xi;
var init_Aws_restXml = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es21();
    init_dist_es20();
    init_dist_es13();
    init_dist_es2();
    init_dist_es19();
    init_esm_browser();
    init_models_0();
    init_models_1();
    init_S3ServiceException();
    se_AbortMultipartUploadCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO],
        [_xaimit]: [() => isSerializableHeaderValue(input[_IMIT]), () => dateToUtcString(input[_IMIT]).toString()]
      });
      b2.bp("/{Key+}");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b2.p("Key", () => input.Key, "{Key+}", true);
      const query = map2({
        [_xi]: [, "AbortMultipartUpload"],
        [_uI]: [, expectNonNull(input[_UI], `UploadId`)]
      });
      let body;
      b2.m("DELETE").h(headers).q(query).b(body);
      return b2.build();
    }, "se_AbortMultipartUploadCommand");
    se_CompleteMultipartUploadCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xacc]: input[_CCRC],
        [_xacc_]: input[_CCRCC],
        [_xacc__]: input[_CCRCNVME],
        [_xacs]: input[_CSHA],
        [_xacs_]: input[_CSHAh],
        [_xact]: input[_CT],
        [_xamos]: [() => isSerializableHeaderValue(input[_MOS]), () => input[_MOS].toString()],
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO],
        [_im]: input[_IM],
        [_inm]: input[_INM],
        [_xasseca]: input[_SSECA],
        [_xasseck]: input[_SSECK],
        [_xasseckm]: input[_SSECKMD]
      });
      b2.bp("/{Key+}");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b2.p("Key", () => input.Key, "{Key+}", true);
      const query = map2({
        [_uI]: [, expectNonNull(input[_UI], `UploadId`)]
      });
      let body;
      let contents;
      if (input.MultipartUpload !== void 0) {
        contents = se_CompletedMultipartUpload(input.MultipartUpload, context);
        contents = contents.n("CompleteMultipartUpload");
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b2.m("POST").h(headers).q(query).b(body);
      return b2.build();
    }, "se_CompleteMultipartUploadCommand");
    se_CopyObjectCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        ...input.Metadata !== void 0 && Object.keys(input.Metadata).reduce((acc, suffix) => {
          acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
          return acc;
        }, {}),
        [_xaa]: input[_ACL],
        [_cc]: input[_CC],
        [_xaca]: input[_CA],
        [_cd]: input[_CD],
        [_ce]: input[_CE],
        [_cl]: input[_CL],
        [_ct]: input[_CTo],
        [_xacs__]: input[_CS],
        [_xacsim]: input[_CSIM],
        [_xacsims]: [() => isSerializableHeaderValue(input[_CSIMS]), () => dateToUtcString(input[_CSIMS]).toString()],
        [_xacsinm]: input[_CSINM],
        [_xacsius]: [() => isSerializableHeaderValue(input[_CSIUS]), () => dateToUtcString(input[_CSIUS]).toString()],
        [_e]: [() => isSerializableHeaderValue(input[_E]), () => dateToUtcString(input[_E]).toString()],
        [_xagfc]: input[_GFC],
        [_xagr]: input[_GR],
        [_xagra]: input[_GRACP],
        [_xagwa]: input[_GWACP],
        [_xamd]: input[_MD],
        [_xatd]: input[_TD],
        [_xasse]: input[_SSE],
        [_xasc]: input[_SC],
        [_xawrl]: input[_WRL],
        [_xasseca]: input[_SSECA],
        [_xasseck]: input[_SSECK],
        [_xasseckm]: input[_SSECKMD],
        [_xasseakki]: input[_SSEKMSKI],
        [_xassec]: input[_SSEKMSEC],
        [_xassebke]: [() => isSerializableHeaderValue(input[_BKE]), () => input[_BKE].toString()],
        [_xacssseca]: input[_CSSSECA],
        [_xacssseck]: input[_CSSSECK],
        [_xacssseckm]: input[_CSSSECKMD],
        [_xarp]: input[_RP],
        [_xat]: input[_T],
        [_xaolm]: input[_OLM],
        [_xaolrud]: [() => isSerializableHeaderValue(input[_OLRUD]), () => serializeDateTime(input[_OLRUD]).toString()],
        [_xaollh]: input[_OLLHS],
        [_xaebo]: input[_EBO],
        [_xasebo]: input[_ESBO]
      });
      b2.bp("/{Key+}");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b2.p("Key", () => input.Key, "{Key+}", true);
      const query = map2({
        [_xi]: [, "CopyObject"]
      });
      let body;
      b2.m("PUT").h(headers).q(query).b(body);
      return b2.build();
    }, "se_CopyObjectCommand");
    se_CreateBucketCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xaa]: input[_ACL],
        [_xagfc]: input[_GFC],
        [_xagr]: input[_GR],
        [_xagra]: input[_GRACP],
        [_xagw]: input[_GW],
        [_xagwa]: input[_GWACP],
        [_xabole]: [() => isSerializableHeaderValue(input[_OLEFB]), () => input[_OLEFB].toString()],
        [_xaoo]: input[_OO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      let body;
      let contents;
      if (input.CreateBucketConfiguration !== void 0) {
        contents = se_CreateBucketConfiguration(input.CreateBucketConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b2.m("PUT").h(headers).b(body);
      return b2.build();
    }, "se_CreateBucketCommand");
    se_CreateBucketMetadataConfigurationCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_mC]: [, ""]
      });
      let body;
      let contents;
      if (input.MetadataConfiguration !== void 0) {
        contents = se_MetadataConfiguration(input.MetadataConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b2.m("POST").h(headers).q(query).b(body);
      return b2.build();
    }, "se_CreateBucketMetadataConfigurationCommand");
    se_CreateBucketMetadataTableConfigurationCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_mT]: [, ""]
      });
      let body;
      let contents;
      if (input.MetadataTableConfiguration !== void 0) {
        contents = se_MetadataTableConfiguration(input.MetadataTableConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b2.m("POST").h(headers).q(query).b(body);
      return b2.build();
    }, "se_CreateBucketMetadataTableConfigurationCommand");
    se_CreateMultipartUploadCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        ...input.Metadata !== void 0 && Object.keys(input.Metadata).reduce((acc, suffix) => {
          acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
          return acc;
        }, {}),
        [_xaa]: input[_ACL],
        [_cc]: input[_CC],
        [_cd]: input[_CD],
        [_ce]: input[_CE],
        [_cl]: input[_CL],
        [_ct]: input[_CTo],
        [_e]: [() => isSerializableHeaderValue(input[_E]), () => dateToUtcString(input[_E]).toString()],
        [_xagfc]: input[_GFC],
        [_xagr]: input[_GR],
        [_xagra]: input[_GRACP],
        [_xagwa]: input[_GWACP],
        [_xasse]: input[_SSE],
        [_xasc]: input[_SC],
        [_xawrl]: input[_WRL],
        [_xasseca]: input[_SSECA],
        [_xasseck]: input[_SSECK],
        [_xasseckm]: input[_SSECKMD],
        [_xasseakki]: input[_SSEKMSKI],
        [_xassec]: input[_SSEKMSEC],
        [_xassebke]: [() => isSerializableHeaderValue(input[_BKE]), () => input[_BKE].toString()],
        [_xarp]: input[_RP],
        [_xat]: input[_T],
        [_xaolm]: input[_OLM],
        [_xaolrud]: [() => isSerializableHeaderValue(input[_OLRUD]), () => serializeDateTime(input[_OLRUD]).toString()],
        [_xaollh]: input[_OLLHS],
        [_xaebo]: input[_EBO],
        [_xaca]: input[_CA],
        [_xact]: input[_CT]
      });
      b2.bp("/{Key+}");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b2.p("Key", () => input.Key, "{Key+}", true);
      const query = map2({
        [_u]: [, ""]
      });
      let body;
      b2.m("POST").h(headers).q(query).b(body);
      return b2.build();
    }, "se_CreateMultipartUploadCommand");
    se_CreateSessionCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xacsm]: input[_SM],
        [_xasse]: input[_SSE],
        [_xasseakki]: input[_SSEKMSKI],
        [_xassec]: input[_SSEKMSEC],
        [_xassebke]: [() => isSerializableHeaderValue(input[_BKE]), () => input[_BKE].toString()]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_s]: [, ""]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_CreateSessionCommand");
    se_DeleteBucketCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      let body;
      b2.m("DELETE").h(headers).b(body);
      return b2.build();
    }, "se_DeleteBucketCommand");
    se_DeleteBucketAnalyticsConfigurationCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_a]: [, ""],
        [_i]: [, expectNonNull(input[_I], `Id`)]
      });
      let body;
      b2.m("DELETE").h(headers).q(query).b(body);
      return b2.build();
    }, "se_DeleteBucketAnalyticsConfigurationCommand");
    se_DeleteBucketCorsCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_c]: [, ""]
      });
      let body;
      b2.m("DELETE").h(headers).q(query).b(body);
      return b2.build();
    }, "se_DeleteBucketCorsCommand");
    se_DeleteBucketEncryptionCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_en]: [, ""]
      });
      let body;
      b2.m("DELETE").h(headers).q(query).b(body);
      return b2.build();
    }, "se_DeleteBucketEncryptionCommand");
    se_DeleteBucketIntelligentTieringConfigurationCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_it]: [, ""],
        [_i]: [, expectNonNull(input[_I], `Id`)]
      });
      let body;
      b2.m("DELETE").h(headers).q(query).b(body);
      return b2.build();
    }, "se_DeleteBucketIntelligentTieringConfigurationCommand");
    se_DeleteBucketInventoryConfigurationCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_in]: [, ""],
        [_i]: [, expectNonNull(input[_I], `Id`)]
      });
      let body;
      b2.m("DELETE").h(headers).q(query).b(body);
      return b2.build();
    }, "se_DeleteBucketInventoryConfigurationCommand");
    se_DeleteBucketLifecycleCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_l]: [, ""]
      });
      let body;
      b2.m("DELETE").h(headers).q(query).b(body);
      return b2.build();
    }, "se_DeleteBucketLifecycleCommand");
    se_DeleteBucketMetadataConfigurationCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_mC]: [, ""]
      });
      let body;
      b2.m("DELETE").h(headers).q(query).b(body);
      return b2.build();
    }, "se_DeleteBucketMetadataConfigurationCommand");
    se_DeleteBucketMetadataTableConfigurationCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_mT]: [, ""]
      });
      let body;
      b2.m("DELETE").h(headers).q(query).b(body);
      return b2.build();
    }, "se_DeleteBucketMetadataTableConfigurationCommand");
    se_DeleteBucketMetricsConfigurationCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_m]: [, ""],
        [_i]: [, expectNonNull(input[_I], `Id`)]
      });
      let body;
      b2.m("DELETE").h(headers).q(query).b(body);
      return b2.build();
    }, "se_DeleteBucketMetricsConfigurationCommand");
    se_DeleteBucketOwnershipControlsCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_oC]: [, ""]
      });
      let body;
      b2.m("DELETE").h(headers).q(query).b(body);
      return b2.build();
    }, "se_DeleteBucketOwnershipControlsCommand");
    se_DeleteBucketPolicyCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_p]: [, ""]
      });
      let body;
      b2.m("DELETE").h(headers).q(query).b(body);
      return b2.build();
    }, "se_DeleteBucketPolicyCommand");
    se_DeleteBucketReplicationCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_r]: [, ""]
      });
      let body;
      b2.m("DELETE").h(headers).q(query).b(body);
      return b2.build();
    }, "se_DeleteBucketReplicationCommand");
    se_DeleteBucketTaggingCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_t]: [, ""]
      });
      let body;
      b2.m("DELETE").h(headers).q(query).b(body);
      return b2.build();
    }, "se_DeleteBucketTaggingCommand");
    se_DeleteBucketWebsiteCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_w]: [, ""]
      });
      let body;
      b2.m("DELETE").h(headers).q(query).b(body);
      return b2.build();
    }, "se_DeleteBucketWebsiteCommand");
    se_DeleteObjectCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xam]: input[_MFA],
        [_xarp]: input[_RP],
        [_xabgr]: [() => isSerializableHeaderValue(input[_BGR]), () => input[_BGR].toString()],
        [_xaebo]: input[_EBO],
        [_im]: input[_IM],
        [_xaimlmt]: [() => isSerializableHeaderValue(input[_IMLMT]), () => dateToUtcString(input[_IMLMT]).toString()],
        [_xaims]: [() => isSerializableHeaderValue(input[_IMS]), () => input[_IMS].toString()]
      });
      b2.bp("/{Key+}");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b2.p("Key", () => input.Key, "{Key+}", true);
      const query = map2({
        [_xi]: [, "DeleteObject"],
        [_vI]: [, input[_VI]]
      });
      let body;
      b2.m("DELETE").h(headers).q(query).b(body);
      return b2.build();
    }, "se_DeleteObjectCommand");
    se_DeleteObjectsCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xam]: input[_MFA],
        [_xarp]: input[_RP],
        [_xabgr]: [() => isSerializableHeaderValue(input[_BGR]), () => input[_BGR].toString()],
        [_xaebo]: input[_EBO],
        [_xasca]: input[_CA]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_d]: [, ""]
      });
      let body;
      let contents;
      if (input.Delete !== void 0) {
        contents = se_Delete(input.Delete, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b2.m("POST").h(headers).q(query).b(body);
      return b2.build();
    }, "se_DeleteObjectsCommand");
    se_DeleteObjectTaggingCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/{Key+}");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b2.p("Key", () => input.Key, "{Key+}", true);
      const query = map2({
        [_t]: [, ""],
        [_vI]: [, input[_VI]]
      });
      let body;
      b2.m("DELETE").h(headers).q(query).b(body);
      return b2.build();
    }, "se_DeleteObjectTaggingCommand");
    se_DeletePublicAccessBlockCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_pAB]: [, ""]
      });
      let body;
      b2.m("DELETE").h(headers).q(query).b(body);
      return b2.build();
    }, "se_DeletePublicAccessBlockCommand");
    se_GetBucketAccelerateConfigurationCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO],
        [_xarp]: input[_RP]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_ac]: [, ""]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_GetBucketAccelerateConfigurationCommand");
    se_GetBucketAclCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_acl]: [, ""]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_GetBucketAclCommand");
    se_GetBucketAnalyticsConfigurationCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_a]: [, ""],
        [_xi]: [, "GetBucketAnalyticsConfiguration"],
        [_i]: [, expectNonNull(input[_I], `Id`)]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_GetBucketAnalyticsConfigurationCommand");
    se_GetBucketCorsCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_c]: [, ""]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_GetBucketCorsCommand");
    se_GetBucketEncryptionCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_en]: [, ""]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_GetBucketEncryptionCommand");
    se_GetBucketIntelligentTieringConfigurationCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_it]: [, ""],
        [_xi]: [, "GetBucketIntelligentTieringConfiguration"],
        [_i]: [, expectNonNull(input[_I], `Id`)]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_GetBucketIntelligentTieringConfigurationCommand");
    se_GetBucketInventoryConfigurationCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_in]: [, ""],
        [_xi]: [, "GetBucketInventoryConfiguration"],
        [_i]: [, expectNonNull(input[_I], `Id`)]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_GetBucketInventoryConfigurationCommand");
    se_GetBucketLifecycleConfigurationCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_l]: [, ""]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_GetBucketLifecycleConfigurationCommand");
    se_GetBucketLocationCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_lo]: [, ""]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_GetBucketLocationCommand");
    se_GetBucketLoggingCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_log]: [, ""]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_GetBucketLoggingCommand");
    se_GetBucketMetadataConfigurationCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_mC]: [, ""]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_GetBucketMetadataConfigurationCommand");
    se_GetBucketMetadataTableConfigurationCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_mT]: [, ""]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_GetBucketMetadataTableConfigurationCommand");
    se_GetBucketMetricsConfigurationCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_m]: [, ""],
        [_xi]: [, "GetBucketMetricsConfiguration"],
        [_i]: [, expectNonNull(input[_I], `Id`)]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_GetBucketMetricsConfigurationCommand");
    se_GetBucketNotificationConfigurationCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_n]: [, ""]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_GetBucketNotificationConfigurationCommand");
    se_GetBucketOwnershipControlsCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_oC]: [, ""]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_GetBucketOwnershipControlsCommand");
    se_GetBucketPolicyCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_p]: [, ""]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_GetBucketPolicyCommand");
    se_GetBucketPolicyStatusCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_pS]: [, ""]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_GetBucketPolicyStatusCommand");
    se_GetBucketReplicationCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_r]: [, ""]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_GetBucketReplicationCommand");
    se_GetBucketRequestPaymentCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_rP]: [, ""]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_GetBucketRequestPaymentCommand");
    se_GetBucketTaggingCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_t]: [, ""]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_GetBucketTaggingCommand");
    se_GetBucketVersioningCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_v]: [, ""]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_GetBucketVersioningCommand");
    se_GetBucketWebsiteCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_w]: [, ""]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_GetBucketWebsiteCommand");
    se_GetObjectCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_im]: input[_IM],
        [_ims]: [() => isSerializableHeaderValue(input[_IMSf]), () => dateToUtcString(input[_IMSf]).toString()],
        [_inm]: input[_INM],
        [_ius]: [() => isSerializableHeaderValue(input[_IUS]), () => dateToUtcString(input[_IUS]).toString()],
        [_ra]: input[_R],
        [_xasseca]: input[_SSECA],
        [_xasseck]: input[_SSECK],
        [_xasseckm]: input[_SSECKMD],
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO],
        [_xacm]: input[_CM]
      });
      b2.bp("/{Key+}");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b2.p("Key", () => input.Key, "{Key+}", true);
      const query = map2({
        [_xi]: [, "GetObject"],
        [_rcc]: [, input[_RCC]],
        [_rcd]: [, input[_RCD]],
        [_rce]: [, input[_RCE]],
        [_rcl]: [, input[_RCL]],
        [_rct]: [, input[_RCT]],
        [_re]: [() => input.ResponseExpires !== void 0, () => dateToUtcString(input[_RE]).toString()],
        [_vI]: [, input[_VI]],
        [_pN]: [() => input.PartNumber !== void 0, () => input[_PN].toString()]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_GetObjectCommand");
    se_GetObjectAclCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO]
      });
      b2.bp("/{Key+}");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b2.p("Key", () => input.Key, "{Key+}", true);
      const query = map2({
        [_acl]: [, ""],
        [_vI]: [, input[_VI]]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_GetObjectAclCommand");
    se_GetObjectAttributesCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xamp]: [() => isSerializableHeaderValue(input[_MP]), () => input[_MP].toString()],
        [_xapnm]: input[_PNM],
        [_xasseca]: input[_SSECA],
        [_xasseck]: input[_SSECK],
        [_xasseckm]: input[_SSECKMD],
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO],
        [_xaoa]: [() => isSerializableHeaderValue(input[_OA]), () => (input[_OA] || []).map(quoteHeader).join(", ")]
      });
      b2.bp("/{Key+}");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b2.p("Key", () => input.Key, "{Key+}", true);
      const query = map2({
        [_at]: [, ""],
        [_vI]: [, input[_VI]]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_GetObjectAttributesCommand");
    se_GetObjectLegalHoldCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO]
      });
      b2.bp("/{Key+}");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b2.p("Key", () => input.Key, "{Key+}", true);
      const query = map2({
        [_lh]: [, ""],
        [_vI]: [, input[_VI]]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_GetObjectLegalHoldCommand");
    se_GetObjectLockConfigurationCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_ol]: [, ""]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_GetObjectLockConfigurationCommand");
    se_GetObjectRetentionCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO]
      });
      b2.bp("/{Key+}");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b2.p("Key", () => input.Key, "{Key+}", true);
      const query = map2({
        [_ret]: [, ""],
        [_vI]: [, input[_VI]]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_GetObjectRetentionCommand");
    se_GetObjectTaggingCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO],
        [_xarp]: input[_RP]
      });
      b2.bp("/{Key+}");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b2.p("Key", () => input.Key, "{Key+}", true);
      const query = map2({
        [_t]: [, ""],
        [_vI]: [, input[_VI]]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_GetObjectTaggingCommand");
    se_GetObjectTorrentCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO]
      });
      b2.bp("/{Key+}");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b2.p("Key", () => input.Key, "{Key+}", true);
      const query = map2({
        [_to]: [, ""]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_GetObjectTorrentCommand");
    se_GetPublicAccessBlockCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_pAB]: [, ""]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_GetPublicAccessBlockCommand");
    se_HeadBucketCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      let body;
      b2.m("HEAD").h(headers).b(body);
      return b2.build();
    }, "se_HeadBucketCommand");
    se_HeadObjectCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_im]: input[_IM],
        [_ims]: [() => isSerializableHeaderValue(input[_IMSf]), () => dateToUtcString(input[_IMSf]).toString()],
        [_inm]: input[_INM],
        [_ius]: [() => isSerializableHeaderValue(input[_IUS]), () => dateToUtcString(input[_IUS]).toString()],
        [_ra]: input[_R],
        [_xasseca]: input[_SSECA],
        [_xasseck]: input[_SSECK],
        [_xasseckm]: input[_SSECKMD],
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO],
        [_xacm]: input[_CM]
      });
      b2.bp("/{Key+}");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b2.p("Key", () => input.Key, "{Key+}", true);
      const query = map2({
        [_rcc]: [, input[_RCC]],
        [_rcd]: [, input[_RCD]],
        [_rce]: [, input[_RCE]],
        [_rcl]: [, input[_RCL]],
        [_rct]: [, input[_RCT]],
        [_re]: [() => input.ResponseExpires !== void 0, () => dateToUtcString(input[_RE]).toString()],
        [_vI]: [, input[_VI]],
        [_pN]: [() => input.PartNumber !== void 0, () => input[_PN].toString()]
      });
      let body;
      b2.m("HEAD").h(headers).q(query).b(body);
      return b2.build();
    }, "se_HeadObjectCommand");
    se_ListBucketAnalyticsConfigurationsCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_a]: [, ""],
        [_xi]: [, "ListBucketAnalyticsConfigurations"],
        [_ct_]: [, input[_CTon]]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_ListBucketAnalyticsConfigurationsCommand");
    se_ListBucketIntelligentTieringConfigurationsCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_it]: [, ""],
        [_xi]: [, "ListBucketIntelligentTieringConfigurations"],
        [_ct_]: [, input[_CTon]]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_ListBucketIntelligentTieringConfigurationsCommand");
    se_ListBucketInventoryConfigurationsCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_in]: [, ""],
        [_xi]: [, "ListBucketInventoryConfigurations"],
        [_ct_]: [, input[_CTon]]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_ListBucketInventoryConfigurationsCommand");
    se_ListBucketMetricsConfigurationsCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_m]: [, ""],
        [_xi]: [, "ListBucketMetricsConfigurations"],
        [_ct_]: [, input[_CTon]]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_ListBucketMetricsConfigurationsCommand");
    se_ListBucketsCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = {};
      b2.bp("/");
      const query = map2({
        [_xi]: [, "ListBuckets"],
        [_mb]: [() => input.MaxBuckets !== void 0, () => input[_MB].toString()],
        [_ct_]: [, input[_CTon]],
        [_pr]: [, input[_P]],
        [_br]: [, input[_BR]]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_ListBucketsCommand");
    se_ListDirectoryBucketsCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = {};
      b2.bp("/");
      const query = map2({
        [_xi]: [, "ListDirectoryBuckets"],
        [_ct_]: [, input[_CTon]],
        [_mdb]: [() => input.MaxDirectoryBuckets !== void 0, () => input[_MDB].toString()]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_ListDirectoryBucketsCommand");
    se_ListMultipartUploadsCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO],
        [_xarp]: input[_RP]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_u]: [, ""],
        [_de]: [, input[_D]],
        [_et]: [, input[_ET]],
        [_km]: [, input[_KM]],
        [_mu]: [() => input.MaxUploads !== void 0, () => input[_MU].toString()],
        [_pr]: [, input[_P]],
        [_uim]: [, input[_UIM]]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_ListMultipartUploadsCommand");
    se_ListObjectsCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO],
        [_xaooa]: [() => isSerializableHeaderValue(input[_OOA]), () => (input[_OOA] || []).map(quoteHeader).join(", ")]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_de]: [, input[_D]],
        [_et]: [, input[_ET]],
        [_ma]: [, input[_M]],
        [_mk]: [() => input.MaxKeys !== void 0, () => input[_MK].toString()],
        [_pr]: [, input[_P]]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_ListObjectsCommand");
    se_ListObjectsV2Command = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO],
        [_xaooa]: [() => isSerializableHeaderValue(input[_OOA]), () => (input[_OOA] || []).map(quoteHeader).join(", ")]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_lt2]: [, "2"],
        [_de]: [, input[_D]],
        [_et]: [, input[_ET]],
        [_mk]: [() => input.MaxKeys !== void 0, () => input[_MK].toString()],
        [_pr]: [, input[_P]],
        [_ct_]: [, input[_CTon]],
        [_fo]: [() => input.FetchOwner !== void 0, () => input[_FO].toString()],
        [_sa]: [, input[_SA]]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_ListObjectsV2Command");
    se_ListObjectVersionsCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO],
        [_xarp]: input[_RP],
        [_xaooa]: [() => isSerializableHeaderValue(input[_OOA]), () => (input[_OOA] || []).map(quoteHeader).join(", ")]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_ver]: [, ""],
        [_de]: [, input[_D]],
        [_et]: [, input[_ET]],
        [_km]: [, input[_KM]],
        [_mk]: [() => input.MaxKeys !== void 0, () => input[_MK].toString()],
        [_pr]: [, input[_P]],
        [_vim]: [, input[_VIM]]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_ListObjectVersionsCommand");
    se_ListPartsCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO],
        [_xasseca]: input[_SSECA],
        [_xasseck]: input[_SSECK],
        [_xasseckm]: input[_SSECKMD]
      });
      b2.bp("/{Key+}");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b2.p("Key", () => input.Key, "{Key+}", true);
      const query = map2({
        [_xi]: [, "ListParts"],
        [_mp]: [() => input.MaxParts !== void 0, () => input[_MP].toString()],
        [_pnm]: [, input[_PNM]],
        [_uI]: [, expectNonNull(input[_UI], `UploadId`)]
      });
      let body;
      b2.m("GET").h(headers).q(query).b(body);
      return b2.build();
    }, "se_ListPartsCommand");
    se_PutBucketAccelerateConfigurationCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xaebo]: input[_EBO],
        [_xasca]: input[_CA]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_ac]: [, ""]
      });
      let body;
      let contents;
      if (input.AccelerateConfiguration !== void 0) {
        contents = se_AccelerateConfiguration(input.AccelerateConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b2.m("PUT").h(headers).q(query).b(body);
      return b2.build();
    }, "se_PutBucketAccelerateConfigurationCommand");
    se_PutBucketAclCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xaa]: input[_ACL],
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xagfc]: input[_GFC],
        [_xagr]: input[_GR],
        [_xagra]: input[_GRACP],
        [_xagw]: input[_GW],
        [_xagwa]: input[_GWACP],
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_acl]: [, ""]
      });
      let body;
      let contents;
      if (input.AccessControlPolicy !== void 0) {
        contents = se_AccessControlPolicy(input.AccessControlPolicy, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b2.m("PUT").h(headers).q(query).b(body);
      return b2.build();
    }, "se_PutBucketAclCommand");
    se_PutBucketAnalyticsConfigurationCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_a]: [, ""],
        [_i]: [, expectNonNull(input[_I], `Id`)]
      });
      let body;
      let contents;
      if (input.AnalyticsConfiguration !== void 0) {
        contents = se_AnalyticsConfiguration(input.AnalyticsConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b2.m("PUT").h(headers).q(query).b(body);
      return b2.build();
    }, "se_PutBucketAnalyticsConfigurationCommand");
    se_PutBucketCorsCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_c]: [, ""]
      });
      let body;
      let contents;
      if (input.CORSConfiguration !== void 0) {
        contents = se_CORSConfiguration(input.CORSConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b2.m("PUT").h(headers).q(query).b(body);
      return b2.build();
    }, "se_PutBucketCorsCommand");
    se_PutBucketEncryptionCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_en]: [, ""]
      });
      let body;
      let contents;
      if (input.ServerSideEncryptionConfiguration !== void 0) {
        contents = se_ServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b2.m("PUT").h(headers).q(query).b(body);
      return b2.build();
    }, "se_PutBucketEncryptionCommand");
    se_PutBucketIntelligentTieringConfigurationCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_it]: [, ""],
        [_i]: [, expectNonNull(input[_I], `Id`)]
      });
      let body;
      let contents;
      if (input.IntelligentTieringConfiguration !== void 0) {
        contents = se_IntelligentTieringConfiguration(input.IntelligentTieringConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b2.m("PUT").h(headers).q(query).b(body);
      return b2.build();
    }, "se_PutBucketIntelligentTieringConfigurationCommand");
    se_PutBucketInventoryConfigurationCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_in]: [, ""],
        [_i]: [, expectNonNull(input[_I], `Id`)]
      });
      let body;
      let contents;
      if (input.InventoryConfiguration !== void 0) {
        contents = se_InventoryConfiguration(input.InventoryConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b2.m("PUT").h(headers).q(query).b(body);
      return b2.build();
    }, "se_PutBucketInventoryConfigurationCommand");
    se_PutBucketLifecycleConfigurationCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO],
        [_xatdmos]: input[_TDMOS]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_l]: [, ""]
      });
      let body;
      let contents;
      if (input.LifecycleConfiguration !== void 0) {
        contents = se_BucketLifecycleConfiguration(input.LifecycleConfiguration, context);
        contents = contents.n("LifecycleConfiguration");
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b2.m("PUT").h(headers).q(query).b(body);
      return b2.build();
    }, "se_PutBucketLifecycleConfigurationCommand");
    se_PutBucketLoggingCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_log]: [, ""]
      });
      let body;
      let contents;
      if (input.BucketLoggingStatus !== void 0) {
        contents = se_BucketLoggingStatus(input.BucketLoggingStatus, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b2.m("PUT").h(headers).q(query).b(body);
      return b2.build();
    }, "se_PutBucketLoggingCommand");
    se_PutBucketMetricsConfigurationCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_m]: [, ""],
        [_i]: [, expectNonNull(input[_I], `Id`)]
      });
      let body;
      let contents;
      if (input.MetricsConfiguration !== void 0) {
        contents = se_MetricsConfiguration(input.MetricsConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b2.m("PUT").h(headers).q(query).b(body);
      return b2.build();
    }, "se_PutBucketMetricsConfigurationCommand");
    se_PutBucketNotificationConfigurationCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xaebo]: input[_EBO],
        [_xasdv]: [() => isSerializableHeaderValue(input[_SDV]), () => input[_SDV].toString()]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_n]: [, ""]
      });
      let body;
      let contents;
      if (input.NotificationConfiguration !== void 0) {
        contents = se_NotificationConfiguration(input.NotificationConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b2.m("PUT").h(headers).q(query).b(body);
      return b2.build();
    }, "se_PutBucketNotificationConfigurationCommand");
    se_PutBucketOwnershipControlsCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xaebo]: input[_EBO],
        [_xasca]: input[_CA]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_oC]: [, ""]
      });
      let body;
      let contents;
      if (input.OwnershipControls !== void 0) {
        contents = se_OwnershipControls(input.OwnershipControls, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b2.m("PUT").h(headers).q(query).b(body);
      return b2.build();
    }, "se_PutBucketOwnershipControlsCommand");
    se_PutBucketPolicyCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        "content-type": "text/plain",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xacrsba]: [() => isSerializableHeaderValue(input[_CRSBA]), () => input[_CRSBA].toString()],
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_p]: [, ""]
      });
      let body;
      let contents;
      if (input.Policy !== void 0) {
        contents = input.Policy;
        body = contents;
      }
      b2.m("PUT").h(headers).q(query).b(body);
      return b2.build();
    }, "se_PutBucketPolicyCommand");
    se_PutBucketReplicationCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xabolt]: input[_To],
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_r]: [, ""]
      });
      let body;
      let contents;
      if (input.ReplicationConfiguration !== void 0) {
        contents = se_ReplicationConfiguration(input.ReplicationConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b2.m("PUT").h(headers).q(query).b(body);
      return b2.build();
    }, "se_PutBucketReplicationCommand");
    se_PutBucketRequestPaymentCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_rP]: [, ""]
      });
      let body;
      let contents;
      if (input.RequestPaymentConfiguration !== void 0) {
        contents = se_RequestPaymentConfiguration(input.RequestPaymentConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b2.m("PUT").h(headers).q(query).b(body);
      return b2.build();
    }, "se_PutBucketRequestPaymentCommand");
    se_PutBucketTaggingCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_t]: [, ""]
      });
      let body;
      let contents;
      if (input.Tagging !== void 0) {
        contents = se_Tagging(input.Tagging, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b2.m("PUT").h(headers).q(query).b(body);
      return b2.build();
    }, "se_PutBucketTaggingCommand");
    se_PutBucketVersioningCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xam]: input[_MFA],
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_v]: [, ""]
      });
      let body;
      let contents;
      if (input.VersioningConfiguration !== void 0) {
        contents = se_VersioningConfiguration(input.VersioningConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b2.m("PUT").h(headers).q(query).b(body);
      return b2.build();
    }, "se_PutBucketVersioningCommand");
    se_PutBucketWebsiteCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_w]: [, ""]
      });
      let body;
      let contents;
      if (input.WebsiteConfiguration !== void 0) {
        contents = se_WebsiteConfiguration(input.WebsiteConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b2.m("PUT").h(headers).q(query).b(body);
      return b2.build();
    }, "se_PutBucketWebsiteCommand");
    se_PutObjectCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        ...input.Metadata !== void 0 && Object.keys(input.Metadata).reduce((acc, suffix) => {
          acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
          return acc;
        }, {}),
        [_ct]: input[_CTo] || "application/octet-stream",
        [_xaa]: input[_ACL],
        [_cc]: input[_CC],
        [_cd]: input[_CD],
        [_ce]: input[_CE],
        [_cl]: input[_CL],
        [_cl_]: [() => isSerializableHeaderValue(input[_CLo]), () => input[_CLo].toString()],
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xacc]: input[_CCRC],
        [_xacc_]: input[_CCRCC],
        [_xacc__]: input[_CCRCNVME],
        [_xacs]: input[_CSHA],
        [_xacs_]: input[_CSHAh],
        [_e]: [() => isSerializableHeaderValue(input[_E]), () => dateToUtcString(input[_E]).toString()],
        [_im]: input[_IM],
        [_inm]: input[_INM],
        [_xagfc]: input[_GFC],
        [_xagr]: input[_GR],
        [_xagra]: input[_GRACP],
        [_xagwa]: input[_GWACP],
        [_xawob]: [() => isSerializableHeaderValue(input[_WOB]), () => input[_WOB].toString()],
        [_xasse]: input[_SSE],
        [_xasc]: input[_SC],
        [_xawrl]: input[_WRL],
        [_xasseca]: input[_SSECA],
        [_xasseck]: input[_SSECK],
        [_xasseckm]: input[_SSECKMD],
        [_xasseakki]: input[_SSEKMSKI],
        [_xassec]: input[_SSEKMSEC],
        [_xassebke]: [() => isSerializableHeaderValue(input[_BKE]), () => input[_BKE].toString()],
        [_xarp]: input[_RP],
        [_xat]: input[_T],
        [_xaolm]: input[_OLM],
        [_xaolrud]: [() => isSerializableHeaderValue(input[_OLRUD]), () => serializeDateTime(input[_OLRUD]).toString()],
        [_xaollh]: input[_OLLHS],
        [_xaebo]: input[_EBO]
      });
      b2.bp("/{Key+}");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b2.p("Key", () => input.Key, "{Key+}", true);
      const query = map2({
        [_xi]: [, "PutObject"]
      });
      let body;
      let contents;
      if (input.Body !== void 0) {
        contents = input.Body;
        body = contents;
      }
      b2.m("PUT").h(headers).q(query).b(body);
      return b2.build();
    }, "se_PutObjectCommand");
    se_PutObjectAclCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xaa]: input[_ACL],
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xagfc]: input[_GFC],
        [_xagr]: input[_GR],
        [_xagra]: input[_GRACP],
        [_xagw]: input[_GW],
        [_xagwa]: input[_GWACP],
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO]
      });
      b2.bp("/{Key+}");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b2.p("Key", () => input.Key, "{Key+}", true);
      const query = map2({
        [_acl]: [, ""],
        [_vI]: [, input[_VI]]
      });
      let body;
      let contents;
      if (input.AccessControlPolicy !== void 0) {
        contents = se_AccessControlPolicy(input.AccessControlPolicy, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b2.m("PUT").h(headers).q(query).b(body);
      return b2.build();
    }, "se_PutObjectAclCommand");
    se_PutObjectLegalHoldCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xarp]: input[_RP],
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b2.bp("/{Key+}");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b2.p("Key", () => input.Key, "{Key+}", true);
      const query = map2({
        [_lh]: [, ""],
        [_vI]: [, input[_VI]]
      });
      let body;
      let contents;
      if (input.LegalHold !== void 0) {
        contents = se_ObjectLockLegalHold(input.LegalHold, context);
        contents = contents.n("LegalHold");
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b2.m("PUT").h(headers).q(query).b(body);
      return b2.build();
    }, "se_PutObjectLegalHoldCommand");
    se_PutObjectLockConfigurationCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xarp]: input[_RP],
        [_xabolt]: input[_To],
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_ol]: [, ""]
      });
      let body;
      let contents;
      if (input.ObjectLockConfiguration !== void 0) {
        contents = se_ObjectLockConfiguration(input.ObjectLockConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b2.m("PUT").h(headers).q(query).b(body);
      return b2.build();
    }, "se_PutObjectLockConfigurationCommand");
    se_PutObjectRetentionCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xarp]: input[_RP],
        [_xabgr]: [() => isSerializableHeaderValue(input[_BGR]), () => input[_BGR].toString()],
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b2.bp("/{Key+}");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b2.p("Key", () => input.Key, "{Key+}", true);
      const query = map2({
        [_ret]: [, ""],
        [_vI]: [, input[_VI]]
      });
      let body;
      let contents;
      if (input.Retention !== void 0) {
        contents = se_ObjectLockRetention(input.Retention, context);
        contents = contents.n("Retention");
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b2.m("PUT").h(headers).q(query).b(body);
      return b2.build();
    }, "se_PutObjectRetentionCommand");
    se_PutObjectTaggingCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO],
        [_xarp]: input[_RP]
      });
      b2.bp("/{Key+}");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b2.p("Key", () => input.Key, "{Key+}", true);
      const query = map2({
        [_t]: [, ""],
        [_vI]: [, input[_VI]]
      });
      let body;
      let contents;
      if (input.Tagging !== void 0) {
        contents = se_Tagging(input.Tagging, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b2.m("PUT").h(headers).q(query).b(body);
      return b2.build();
    }, "se_PutObjectTaggingCommand");
    se_PutPublicAccessBlockCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_pAB]: [, ""]
      });
      let body;
      let contents;
      if (input.PublicAccessBlockConfiguration !== void 0) {
        contents = se_PublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b2.m("PUT").h(headers).q(query).b(body);
      return b2.build();
    }, "se_PutPublicAccessBlockCommand");
    se_RenameObjectCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xars]: input[_RS],
        [_im]: input[_DIM],
        [_inm]: input[_DINM],
        [_ims]: [() => isSerializableHeaderValue(input[_DIMS]), () => dateToUtcString(input[_DIMS]).toString()],
        [_ius]: [() => isSerializableHeaderValue(input[_DIUS]), () => dateToUtcString(input[_DIUS]).toString()],
        [_xarsim]: input[_SIM],
        [_xarsinm]: input[_SINM],
        [_xarsims]: [() => isSerializableHeaderValue(input[_SIMS]), () => dateToUtcString(input[_SIMS]).toString()],
        [_xarsius]: [() => isSerializableHeaderValue(input[_SIUS]), () => dateToUtcString(input[_SIUS]).toString()],
        [_xact_]: input[_CTl] ?? v4_default()
      });
      b2.bp("/{Key+}");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b2.p("Key", () => input.Key, "{Key+}", true);
      const query = map2({
        [_rO]: [, ""]
      });
      let body;
      b2.m("PUT").h(headers).q(query).b(body);
      return b2.build();
    }, "se_RenameObjectCommand");
    se_RestoreObjectCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xarp]: input[_RP],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b2.bp("/{Key+}");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b2.p("Key", () => input.Key, "{Key+}", true);
      const query = map2({
        [_res]: [, ""],
        [_vI]: [, input[_VI]]
      });
      let body;
      let contents;
      if (input.RestoreRequest !== void 0) {
        contents = se_RestoreRequest(input.RestoreRequest, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b2.m("POST").h(headers).q(query).b(body);
      return b2.build();
    }, "se_RestoreObjectCommand");
    se_SelectObjectContentCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xasseca]: input[_SSECA],
        [_xasseck]: input[_SSECK],
        [_xasseckm]: input[_SSECKMD],
        [_xaebo]: input[_EBO]
      });
      b2.bp("/{Key+}");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b2.p("Key", () => input.Key, "{Key+}", true);
      const query = map2({
        [_se]: [, ""],
        [_st]: [, "2"]
      });
      let body;
      body = _ve;
      const bn2 = new XmlNode2(_SOCR);
      bn2.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      bn2.cc(input, _Ex);
      bn2.cc(input, _ETx);
      if (input[_IS] != null) {
        bn2.c(se_InputSerialization(input[_IS], context).n(_IS));
      }
      if (input[_OS] != null) {
        bn2.c(se_OutputSerialization(input[_OS], context).n(_OS));
      }
      if (input[_RPe] != null) {
        bn2.c(se_RequestProgress(input[_RPe], context).n(_RPe));
      }
      if (input[_SR] != null) {
        bn2.c(se_ScanRange(input[_SR], context).n(_SR));
      }
      body += bn2.toString();
      b2.m("POST").h(headers).q(query).b(body);
      return b2.build();
    }, "se_SelectObjectContentCommand");
    se_UpdateBucketMetadataInventoryTableConfigurationCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_mIT]: [, ""]
      });
      let body;
      let contents;
      if (input.InventoryTableConfiguration !== void 0) {
        contents = se_InventoryTableConfigurationUpdates(input.InventoryTableConfiguration, context);
        contents = contents.n("InventoryTableConfiguration");
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b2.m("PUT").h(headers).q(query).b(body);
      return b2.build();
    }, "se_UpdateBucketMetadataInventoryTableConfigurationCommand");
    se_UpdateBucketMetadataJournalTableConfigurationCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b2.bp("/");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map2({
        [_mJT]: [, ""]
      });
      let body;
      let contents;
      if (input.JournalTableConfiguration !== void 0) {
        contents = se_JournalTableConfigurationUpdates(input.JournalTableConfiguration, context);
        contents = contents.n("JournalTableConfiguration");
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b2.m("PUT").h(headers).q(query).b(body);
      return b2.build();
    }, "se_UpdateBucketMetadataJournalTableConfigurationCommand");
    se_UploadPartCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        "content-type": "application/octet-stream",
        [_cl_]: [() => isSerializableHeaderValue(input[_CLo]), () => input[_CLo].toString()],
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xacc]: input[_CCRC],
        [_xacc_]: input[_CCRCC],
        [_xacc__]: input[_CCRCNVME],
        [_xacs]: input[_CSHA],
        [_xacs_]: input[_CSHAh],
        [_xasseca]: input[_SSECA],
        [_xasseck]: input[_SSECK],
        [_xasseckm]: input[_SSECKMD],
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO]
      });
      b2.bp("/{Key+}");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b2.p("Key", () => input.Key, "{Key+}", true);
      const query = map2({
        [_xi]: [, "UploadPart"],
        [_pN]: [expectNonNull(input.PartNumber, `PartNumber`) != null, () => input[_PN].toString()],
        [_uI]: [, expectNonNull(input[_UI], `UploadId`)]
      });
      let body;
      let contents;
      if (input.Body !== void 0) {
        contents = input.Body;
        body = contents;
      }
      b2.m("PUT").h(headers).q(query).b(body);
      return b2.build();
    }, "se_UploadPartCommand");
    se_UploadPartCopyCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xacs__]: input[_CS],
        [_xacsim]: input[_CSIM],
        [_xacsims]: [() => isSerializableHeaderValue(input[_CSIMS]), () => dateToUtcString(input[_CSIMS]).toString()],
        [_xacsinm]: input[_CSINM],
        [_xacsius]: [() => isSerializableHeaderValue(input[_CSIUS]), () => dateToUtcString(input[_CSIUS]).toString()],
        [_xacsr]: input[_CSR],
        [_xasseca]: input[_SSECA],
        [_xasseck]: input[_SSECK],
        [_xasseckm]: input[_SSECKMD],
        [_xacssseca]: input[_CSSSECA],
        [_xacssseck]: input[_CSSSECK],
        [_xacssseckm]: input[_CSSSECKMD],
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO],
        [_xasebo]: input[_ESBO]
      });
      b2.bp("/{Key+}");
      b2.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b2.p("Key", () => input.Key, "{Key+}", true);
      const query = map2({
        [_xi]: [, "UploadPartCopy"],
        [_pN]: [expectNonNull(input.PartNumber, `PartNumber`) != null, () => input[_PN].toString()],
        [_uI]: [, expectNonNull(input[_UI], `UploadId`)]
      });
      let body;
      b2.m("PUT").h(headers).q(query).b(body);
      return b2.build();
    }, "se_UploadPartCopyCommand");
    se_WriteGetObjectResponseCommand = /* @__PURE__ */ __name2(async (input, context) => {
      const b2 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        "x-amz-content-sha256": "UNSIGNED-PAYLOAD",
        ...input.Metadata !== void 0 && Object.keys(input.Metadata).reduce((acc, suffix) => {
          acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
          return acc;
        }, {}),
        "content-type": "application/octet-stream",
        [_xarr]: input[_RR],
        [_xart]: input[_RT],
        [_xafs]: [() => isSerializableHeaderValue(input[_SCt]), () => input[_SCt].toString()],
        [_xafec]: input[_EC],
        [_xafem]: input[_EM],
        [_xafhar]: input[_AR],
        [_xafhcc]: input[_CC],
        [_xafhcd]: input[_CD],
        [_xafhce]: input[_CE],
        [_xafhcl]: input[_CL],
        [_cl_]: [() => isSerializableHeaderValue(input[_CLo]), () => input[_CLo].toString()],
        [_xafhcr]: input[_CR],
        [_xafhct]: input[_CTo],
        [_xafhxacc]: input[_CCRC],
        [_xafhxacc_]: input[_CCRCC],
        [_xafhxacc__]: input[_CCRCNVME],
        [_xafhxacs]: input[_CSHA],
        [_xafhxacs_]: input[_CSHAh],
        [_xafhxadm]: [() => isSerializableHeaderValue(input[_DM]), () => input[_DM].toString()],
        [_xafhe]: input[_ETa],
        [_xafhe_]: [() => isSerializableHeaderValue(input[_E]), () => dateToUtcString(input[_E]).toString()],
        [_xafhxae]: input[_Exp],
        [_xafhlm]: [() => isSerializableHeaderValue(input[_LM]), () => dateToUtcString(input[_LM]).toString()],
        [_xafhxamm]: [() => isSerializableHeaderValue(input[_MM]), () => input[_MM].toString()],
        [_xafhxaolm]: input[_OLM],
        [_xafhxaollh]: input[_OLLHS],
        [_xafhxaolrud]: [
          () => isSerializableHeaderValue(input[_OLRUD]),
          () => serializeDateTime(input[_OLRUD]).toString()
        ],
        [_xafhxampc]: [() => isSerializableHeaderValue(input[_PC]), () => input[_PC].toString()],
        [_xafhxars]: input[_RSe],
        [_xafhxarc]: input[_RC],
        [_xafhxar]: input[_Re],
        [_xafhxasse]: input[_SSE],
        [_xafhxasseca]: input[_SSECA],
        [_xafhxasseakki]: input[_SSEKMSKI],
        [_xafhxasseckm]: input[_SSECKMD],
        [_xafhxasc]: input[_SC],
        [_xafhxatc]: [() => isSerializableHeaderValue(input[_TC]), () => input[_TC].toString()],
        [_xafhxavi]: input[_VI],
        [_xafhxassebke]: [() => isSerializableHeaderValue(input[_BKE]), () => input[_BKE].toString()]
      });
      b2.bp("/WriteGetObjectResponse");
      let body;
      let contents;
      if (input.Body !== void 0) {
        contents = input.Body;
        body = contents;
      }
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "{RequestRoute}." + resolvedHostname;
        if (input.RequestRoute === void 0) {
          throw new Error("Empty value provided for input host prefix: RequestRoute.");
        }
        resolvedHostname = resolvedHostname.replace("{RequestRoute}", input.RequestRoute);
        if (!isValidHostname(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      b2.hn(resolvedHostname);
      b2.m("POST").h(headers).b(body);
      return b2.build();
    }, "se_WriteGetObjectResponseCommand");
    de_AbortMultipartUploadCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output),
        [_RC]: [, output.headers[_xarc]]
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_AbortMultipartUploadCommand");
    de_CompleteMultipartUploadCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output),
        [_Exp]: [, output.headers[_xae]],
        [_SSE]: [, output.headers[_xasse]],
        [_VI]: [, output.headers[_xavi]],
        [_SSEKMSKI]: [, output.headers[_xasseakki]],
        [_BKE]: [() => void 0 !== output.headers[_xassebke], () => parseBoolean(output.headers[_xassebke])],
        [_RC]: [, output.headers[_xarc]]
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data[_B] != null) {
        contents[_B] = expectString(data[_B]);
      }
      if (data[_CCRC] != null) {
        contents[_CCRC] = expectString(data[_CCRC]);
      }
      if (data[_CCRCC] != null) {
        contents[_CCRCC] = expectString(data[_CCRCC]);
      }
      if (data[_CCRCNVME] != null) {
        contents[_CCRCNVME] = expectString(data[_CCRCNVME]);
      }
      if (data[_CSHA] != null) {
        contents[_CSHA] = expectString(data[_CSHA]);
      }
      if (data[_CSHAh] != null) {
        contents[_CSHAh] = expectString(data[_CSHAh]);
      }
      if (data[_CT] != null) {
        contents[_CT] = expectString(data[_CT]);
      }
      if (data[_ETa] != null) {
        contents[_ETa] = expectString(data[_ETa]);
      }
      if (data[_K] != null) {
        contents[_K] = expectString(data[_K]);
      }
      if (data[_L] != null) {
        contents[_L] = expectString(data[_L]);
      }
      return contents;
    }, "de_CompleteMultipartUploadCommand");
    de_CopyObjectCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output),
        [_Exp]: [, output.headers[_xae]],
        [_CSVI]: [, output.headers[_xacsvi]],
        [_VI]: [, output.headers[_xavi]],
        [_SSE]: [, output.headers[_xasse]],
        [_SSECA]: [, output.headers[_xasseca]],
        [_SSECKMD]: [, output.headers[_xasseckm]],
        [_SSEKMSKI]: [, output.headers[_xasseakki]],
        [_SSEKMSEC]: [, output.headers[_xassec]],
        [_BKE]: [() => void 0 !== output.headers[_xassebke], () => parseBoolean(output.headers[_xassebke])],
        [_RC]: [, output.headers[_xarc]]
      });
      const data = expectObject(await parseXmlBody(output.body, context));
      contents.CopyObjectResult = de_CopyObjectResult(data, context);
      return contents;
    }, "de_CopyObjectCommand");
    de_CreateBucketCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output),
        [_L]: [, output.headers[_lo]],
        [_BA]: [, output.headers[_xaba]]
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_CreateBucketCommand");
    de_CreateBucketMetadataConfigurationCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_CreateBucketMetadataConfigurationCommand");
    de_CreateBucketMetadataTableConfigurationCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_CreateBucketMetadataTableConfigurationCommand");
    de_CreateMultipartUploadCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output),
        [_AD]: [
          () => void 0 !== output.headers[_xaad],
          () => expectNonNull(parseRfc7231DateTime(output.headers[_xaad]))
        ],
        [_ARI]: [, output.headers[_xaari]],
        [_SSE]: [, output.headers[_xasse]],
        [_SSECA]: [, output.headers[_xasseca]],
        [_SSECKMD]: [, output.headers[_xasseckm]],
        [_SSEKMSKI]: [, output.headers[_xasseakki]],
        [_SSEKMSEC]: [, output.headers[_xassec]],
        [_BKE]: [() => void 0 !== output.headers[_xassebke], () => parseBoolean(output.headers[_xassebke])],
        [_RC]: [, output.headers[_xarc]],
        [_CA]: [, output.headers[_xaca]],
        [_CT]: [, output.headers[_xact]]
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data[_B] != null) {
        contents[_B] = expectString(data[_B]);
      }
      if (data[_K] != null) {
        contents[_K] = expectString(data[_K]);
      }
      if (data[_UI] != null) {
        contents[_UI] = expectString(data[_UI]);
      }
      return contents;
    }, "de_CreateMultipartUploadCommand");
    de_CreateSessionCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output),
        [_SSE]: [, output.headers[_xasse]],
        [_SSEKMSKI]: [, output.headers[_xasseakki]],
        [_SSEKMSEC]: [, output.headers[_xassec]],
        [_BKE]: [() => void 0 !== output.headers[_xassebke], () => parseBoolean(output.headers[_xassebke])]
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data[_C] != null) {
        contents[_C] = de_SessionCredentials(data[_C], context);
      }
      return contents;
    }, "de_CreateSessionCommand");
    de_DeleteBucketCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_DeleteBucketCommand");
    de_DeleteBucketAnalyticsConfigurationCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_DeleteBucketAnalyticsConfigurationCommand");
    de_DeleteBucketCorsCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_DeleteBucketCorsCommand");
    de_DeleteBucketEncryptionCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_DeleteBucketEncryptionCommand");
    de_DeleteBucketIntelligentTieringConfigurationCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_DeleteBucketIntelligentTieringConfigurationCommand");
    de_DeleteBucketInventoryConfigurationCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_DeleteBucketInventoryConfigurationCommand");
    de_DeleteBucketLifecycleCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_DeleteBucketLifecycleCommand");
    de_DeleteBucketMetadataConfigurationCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_DeleteBucketMetadataConfigurationCommand");
    de_DeleteBucketMetadataTableConfigurationCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_DeleteBucketMetadataTableConfigurationCommand");
    de_DeleteBucketMetricsConfigurationCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_DeleteBucketMetricsConfigurationCommand");
    de_DeleteBucketOwnershipControlsCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_DeleteBucketOwnershipControlsCommand");
    de_DeleteBucketPolicyCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_DeleteBucketPolicyCommand");
    de_DeleteBucketReplicationCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_DeleteBucketReplicationCommand");
    de_DeleteBucketTaggingCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_DeleteBucketTaggingCommand");
    de_DeleteBucketWebsiteCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_DeleteBucketWebsiteCommand");
    de_DeleteObjectCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output),
        [_DM]: [() => void 0 !== output.headers[_xadm], () => parseBoolean(output.headers[_xadm])],
        [_VI]: [, output.headers[_xavi]],
        [_RC]: [, output.headers[_xarc]]
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_DeleteObjectCommand");
    de_DeleteObjectsCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output),
        [_RC]: [, output.headers[_xarc]]
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data.Deleted === "") {
        contents[_De] = [];
      } else if (data[_De] != null) {
        contents[_De] = de_DeletedObjects(getArrayIfSingleItem(data[_De]), context);
      }
      if (data.Error === "") {
        contents[_Err] = [];
      } else if (data[_Er] != null) {
        contents[_Err] = de_Errors(getArrayIfSingleItem(data[_Er]), context);
      }
      return contents;
    }, "de_DeleteObjectsCommand");
    de_DeleteObjectTaggingCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output),
        [_VI]: [, output.headers[_xavi]]
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_DeleteObjectTaggingCommand");
    de_DeletePublicAccessBlockCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_DeletePublicAccessBlockCommand");
    de_GetBucketAccelerateConfigurationCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output),
        [_RC]: [, output.headers[_xarc]]
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data[_S] != null) {
        contents[_S] = expectString(data[_S]);
      }
      return contents;
    }, "de_GetBucketAccelerateConfigurationCommand");
    de_GetBucketAclCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data.AccessControlList === "") {
        contents[_Gr] = [];
      } else if (data[_ACLc] != null && data[_ACLc][_G] != null) {
        contents[_Gr] = de_Grants(getArrayIfSingleItem(data[_ACLc][_G]), context);
      }
      if (data[_O] != null) {
        contents[_O] = de_Owner(data[_O], context);
      }
      return contents;
    }, "de_GetBucketAclCommand");
    de_GetBucketAnalyticsConfigurationCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectObject(await parseXmlBody(output.body, context));
      contents.AnalyticsConfiguration = de_AnalyticsConfiguration(data, context);
      return contents;
    }, "de_GetBucketAnalyticsConfigurationCommand");
    de_GetBucketCorsCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data.CORSRule === "") {
        contents[_CORSRu] = [];
      } else if (data[_CORSR] != null) {
        contents[_CORSRu] = de_CORSRules(getArrayIfSingleItem(data[_CORSR]), context);
      }
      return contents;
    }, "de_GetBucketCorsCommand");
    de_GetBucketEncryptionCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectObject(await parseXmlBody(output.body, context));
      contents.ServerSideEncryptionConfiguration = de_ServerSideEncryptionConfiguration(data, context);
      return contents;
    }, "de_GetBucketEncryptionCommand");
    de_GetBucketIntelligentTieringConfigurationCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectObject(await parseXmlBody(output.body, context));
      contents.IntelligentTieringConfiguration = de_IntelligentTieringConfiguration(data, context);
      return contents;
    }, "de_GetBucketIntelligentTieringConfigurationCommand");
    de_GetBucketInventoryConfigurationCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectObject(await parseXmlBody(output.body, context));
      contents.InventoryConfiguration = de_InventoryConfiguration(data, context);
      return contents;
    }, "de_GetBucketInventoryConfigurationCommand");
    de_GetBucketLifecycleConfigurationCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output),
        [_TDMOS]: [, output.headers[_xatdmos]]
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data.Rule === "") {
        contents[_Rul] = [];
      } else if (data[_Ru] != null) {
        contents[_Rul] = de_LifecycleRules(getArrayIfSingleItem(data[_Ru]), context);
      }
      return contents;
    }, "de_GetBucketLifecycleConfigurationCommand");
    de_GetBucketLocationCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data[_LC] != null) {
        contents[_LC] = expectString(data[_LC]);
      }
      return contents;
    }, "de_GetBucketLocationCommand");
    de_GetBucketLoggingCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data[_LE] != null) {
        contents[_LE] = de_LoggingEnabled(data[_LE], context);
      }
      return contents;
    }, "de_GetBucketLoggingCommand");
    de_GetBucketMetadataConfigurationCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectObject(await parseXmlBody(output.body, context));
      contents.GetBucketMetadataConfigurationResult = de_GetBucketMetadataConfigurationResult(data, context);
      return contents;
    }, "de_GetBucketMetadataConfigurationCommand");
    de_GetBucketMetadataTableConfigurationCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectObject(await parseXmlBody(output.body, context));
      contents.GetBucketMetadataTableConfigurationResult = de_GetBucketMetadataTableConfigurationResult(data, context);
      return contents;
    }, "de_GetBucketMetadataTableConfigurationCommand");
    de_GetBucketMetricsConfigurationCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectObject(await parseXmlBody(output.body, context));
      contents.MetricsConfiguration = de_MetricsConfiguration(data, context);
      return contents;
    }, "de_GetBucketMetricsConfigurationCommand");
    de_GetBucketNotificationConfigurationCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data[_EBC] != null) {
        contents[_EBC] = de_EventBridgeConfiguration(data[_EBC], context);
      }
      if (data.CloudFunctionConfiguration === "") {
        contents[_LFC] = [];
      } else if (data[_CFC] != null) {
        contents[_LFC] = de_LambdaFunctionConfigurationList(getArrayIfSingleItem(data[_CFC]), context);
      }
      if (data.QueueConfiguration === "") {
        contents[_QCu] = [];
      } else if (data[_QC] != null) {
        contents[_QCu] = de_QueueConfigurationList(getArrayIfSingleItem(data[_QC]), context);
      }
      if (data.TopicConfiguration === "") {
        contents[_TCop] = [];
      } else if (data[_TCo] != null) {
        contents[_TCop] = de_TopicConfigurationList(getArrayIfSingleItem(data[_TCo]), context);
      }
      return contents;
    }, "de_GetBucketNotificationConfigurationCommand");
    de_GetBucketOwnershipControlsCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectObject(await parseXmlBody(output.body, context));
      contents.OwnershipControls = de_OwnershipControls(data, context);
      return contents;
    }, "de_GetBucketOwnershipControlsCommand");
    de_GetBucketPolicyCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      const data = await collectBodyString2(output.body, context);
      contents.Policy = expectString(data);
      return contents;
    }, "de_GetBucketPolicyCommand");
    de_GetBucketPolicyStatusCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectObject(await parseXmlBody(output.body, context));
      contents.PolicyStatus = de_PolicyStatus(data, context);
      return contents;
    }, "de_GetBucketPolicyStatusCommand");
    de_GetBucketReplicationCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectObject(await parseXmlBody(output.body, context));
      contents.ReplicationConfiguration = de_ReplicationConfiguration(data, context);
      return contents;
    }, "de_GetBucketReplicationCommand");
    de_GetBucketRequestPaymentCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data[_Pa] != null) {
        contents[_Pa] = expectString(data[_Pa]);
      }
      return contents;
    }, "de_GetBucketRequestPaymentCommand");
    de_GetBucketTaggingCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data.TagSet === "") {
        contents[_TS] = [];
      } else if (data[_TS] != null && data[_TS][_Ta] != null) {
        contents[_TS] = de_TagSet(getArrayIfSingleItem(data[_TS][_Ta]), context);
      }
      return contents;
    }, "de_GetBucketTaggingCommand");
    de_GetBucketVersioningCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data[_MDf] != null) {
        contents[_MFAD] = expectString(data[_MDf]);
      }
      if (data[_S] != null) {
        contents[_S] = expectString(data[_S]);
      }
      return contents;
    }, "de_GetBucketVersioningCommand");
    de_GetBucketWebsiteCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data[_ED] != null) {
        contents[_ED] = de_ErrorDocument(data[_ED], context);
      }
      if (data[_ID] != null) {
        contents[_ID] = de_IndexDocument(data[_ID], context);
      }
      if (data[_RART] != null) {
        contents[_RART] = de_RedirectAllRequestsTo(data[_RART], context);
      }
      if (data.RoutingRules === "") {
        contents[_RRo] = [];
      } else if (data[_RRo] != null && data[_RRo][_RRou] != null) {
        contents[_RRo] = de_RoutingRules(getArrayIfSingleItem(data[_RRo][_RRou]), context);
      }
      return contents;
    }, "de_GetBucketWebsiteCommand");
    de_GetObjectCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output),
        [_DM]: [() => void 0 !== output.headers[_xadm], () => parseBoolean(output.headers[_xadm])],
        [_AR]: [, output.headers[_ar]],
        [_Exp]: [, output.headers[_xae]],
        [_Re]: [, output.headers[_xar]],
        [_LM]: [() => void 0 !== output.headers[_lm], () => expectNonNull(parseRfc7231DateTime(output.headers[_lm]))],
        [_CLo]: [() => void 0 !== output.headers[_cl_], () => strictParseLong(output.headers[_cl_])],
        [_ETa]: [, output.headers[_eta]],
        [_CCRC]: [, output.headers[_xacc]],
        [_CCRCC]: [, output.headers[_xacc_]],
        [_CCRCNVME]: [, output.headers[_xacc__]],
        [_CSHA]: [, output.headers[_xacs]],
        [_CSHAh]: [, output.headers[_xacs_]],
        [_CT]: [, output.headers[_xact]],
        [_MM]: [() => void 0 !== output.headers[_xamm], () => strictParseInt32(output.headers[_xamm])],
        [_VI]: [, output.headers[_xavi]],
        [_CC]: [, output.headers[_cc]],
        [_CD]: [, output.headers[_cd]],
        [_CE]: [, output.headers[_ce]],
        [_CL]: [, output.headers[_cl]],
        [_CR]: [, output.headers[_cr]],
        [_CTo]: [, output.headers[_ct]],
        [_E]: [() => void 0 !== output.headers[_e], () => expectNonNull(parseRfc7231DateTime(output.headers[_e]))],
        [_ES]: [, output.headers[_ex]],
        [_WRL]: [, output.headers[_xawrl]],
        [_SSE]: [, output.headers[_xasse]],
        [_SSECA]: [, output.headers[_xasseca]],
        [_SSECKMD]: [, output.headers[_xasseckm]],
        [_SSEKMSKI]: [, output.headers[_xasseakki]],
        [_BKE]: [() => void 0 !== output.headers[_xassebke], () => parseBoolean(output.headers[_xassebke])],
        [_SC]: [, output.headers[_xasc]],
        [_RC]: [, output.headers[_xarc]],
        [_RSe]: [, output.headers[_xars_]],
        [_PC]: [() => void 0 !== output.headers[_xampc], () => strictParseInt32(output.headers[_xampc])],
        [_TC]: [() => void 0 !== output.headers[_xatc], () => strictParseInt32(output.headers[_xatc])],
        [_OLM]: [, output.headers[_xaolm]],
        [_OLRUD]: [
          () => void 0 !== output.headers[_xaolrud],
          () => expectNonNull(parseRfc3339DateTimeWithOffset(output.headers[_xaolrud]))
        ],
        [_OLLHS]: [, output.headers[_xaollh]],
        Metadata: [
          ,
          Object.keys(output.headers).filter((header) => header.startsWith("x-amz-meta-")).reduce((acc, header) => {
            acc[header.substring(11)] = output.headers[header];
            return acc;
          }, {})
        ]
      });
      const data = output.body;
      context.sdkStreamMixin(data);
      contents.Body = data;
      return contents;
    }, "de_GetObjectCommand");
    de_GetObjectAclCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output),
        [_RC]: [, output.headers[_xarc]]
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data.AccessControlList === "") {
        contents[_Gr] = [];
      } else if (data[_ACLc] != null && data[_ACLc][_G] != null) {
        contents[_Gr] = de_Grants(getArrayIfSingleItem(data[_ACLc][_G]), context);
      }
      if (data[_O] != null) {
        contents[_O] = de_Owner(data[_O], context);
      }
      return contents;
    }, "de_GetObjectAclCommand");
    de_GetObjectAttributesCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output),
        [_DM]: [() => void 0 !== output.headers[_xadm], () => parseBoolean(output.headers[_xadm])],
        [_LM]: [() => void 0 !== output.headers[_lm], () => expectNonNull(parseRfc7231DateTime(output.headers[_lm]))],
        [_VI]: [, output.headers[_xavi]],
        [_RC]: [, output.headers[_xarc]]
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data[_Ch] != null) {
        contents[_Ch] = de_Checksum(data[_Ch], context);
      }
      if (data[_ETa] != null) {
        contents[_ETa] = expectString(data[_ETa]);
      }
      if (data[_OP] != null) {
        contents[_OP] = de_GetObjectAttributesParts(data[_OP], context);
      }
      if (data[_OSb] != null) {
        contents[_OSb] = strictParseLong(data[_OSb]);
      }
      if (data[_SC] != null) {
        contents[_SC] = expectString(data[_SC]);
      }
      return contents;
    }, "de_GetObjectAttributesCommand");
    de_GetObjectLegalHoldCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectObject(await parseXmlBody(output.body, context));
      contents.LegalHold = de_ObjectLockLegalHold(data, context);
      return contents;
    }, "de_GetObjectLegalHoldCommand");
    de_GetObjectLockConfigurationCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectObject(await parseXmlBody(output.body, context));
      contents.ObjectLockConfiguration = de_ObjectLockConfiguration(data, context);
      return contents;
    }, "de_GetObjectLockConfigurationCommand");
    de_GetObjectRetentionCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectObject(await parseXmlBody(output.body, context));
      contents.Retention = de_ObjectLockRetention(data, context);
      return contents;
    }, "de_GetObjectRetentionCommand");
    de_GetObjectTaggingCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output),
        [_VI]: [, output.headers[_xavi]]
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data.TagSet === "") {
        contents[_TS] = [];
      } else if (data[_TS] != null && data[_TS][_Ta] != null) {
        contents[_TS] = de_TagSet(getArrayIfSingleItem(data[_TS][_Ta]), context);
      }
      return contents;
    }, "de_GetObjectTaggingCommand");
    de_GetObjectTorrentCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output),
        [_RC]: [, output.headers[_xarc]]
      });
      const data = output.body;
      context.sdkStreamMixin(data);
      contents.Body = data;
      return contents;
    }, "de_GetObjectTorrentCommand");
    de_GetPublicAccessBlockCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectObject(await parseXmlBody(output.body, context));
      contents.PublicAccessBlockConfiguration = de_PublicAccessBlockConfiguration(data, context);
      return contents;
    }, "de_GetPublicAccessBlockCommand");
    de_HeadBucketCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output),
        [_BA]: [, output.headers[_xaba]],
        [_BLT]: [, output.headers[_xablt]],
        [_BLN]: [, output.headers[_xabln]],
        [_BR]: [, output.headers[_xabr]],
        [_APA]: [() => void 0 !== output.headers[_xaapa], () => parseBoolean(output.headers[_xaapa])]
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_HeadBucketCommand");
    de_HeadObjectCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output),
        [_DM]: [() => void 0 !== output.headers[_xadm], () => parseBoolean(output.headers[_xadm])],
        [_AR]: [, output.headers[_ar]],
        [_Exp]: [, output.headers[_xae]],
        [_Re]: [, output.headers[_xar]],
        [_AS]: [, output.headers[_xaas]],
        [_LM]: [() => void 0 !== output.headers[_lm], () => expectNonNull(parseRfc7231DateTime(output.headers[_lm]))],
        [_CLo]: [() => void 0 !== output.headers[_cl_], () => strictParseLong(output.headers[_cl_])],
        [_CCRC]: [, output.headers[_xacc]],
        [_CCRCC]: [, output.headers[_xacc_]],
        [_CCRCNVME]: [, output.headers[_xacc__]],
        [_CSHA]: [, output.headers[_xacs]],
        [_CSHAh]: [, output.headers[_xacs_]],
        [_CT]: [, output.headers[_xact]],
        [_ETa]: [, output.headers[_eta]],
        [_MM]: [() => void 0 !== output.headers[_xamm], () => strictParseInt32(output.headers[_xamm])],
        [_VI]: [, output.headers[_xavi]],
        [_CC]: [, output.headers[_cc]],
        [_CD]: [, output.headers[_cd]],
        [_CE]: [, output.headers[_ce]],
        [_CL]: [, output.headers[_cl]],
        [_CTo]: [, output.headers[_ct]],
        [_CR]: [, output.headers[_cr]],
        [_E]: [() => void 0 !== output.headers[_e], () => expectNonNull(parseRfc7231DateTime(output.headers[_e]))],
        [_ES]: [, output.headers[_ex]],
        [_WRL]: [, output.headers[_xawrl]],
        [_SSE]: [, output.headers[_xasse]],
        [_SSECA]: [, output.headers[_xasseca]],
        [_SSECKMD]: [, output.headers[_xasseckm]],
        [_SSEKMSKI]: [, output.headers[_xasseakki]],
        [_BKE]: [() => void 0 !== output.headers[_xassebke], () => parseBoolean(output.headers[_xassebke])],
        [_SC]: [, output.headers[_xasc]],
        [_RC]: [, output.headers[_xarc]],
        [_RSe]: [, output.headers[_xars_]],
        [_PC]: [() => void 0 !== output.headers[_xampc], () => strictParseInt32(output.headers[_xampc])],
        [_TC]: [() => void 0 !== output.headers[_xatc], () => strictParseInt32(output.headers[_xatc])],
        [_OLM]: [, output.headers[_xaolm]],
        [_OLRUD]: [
          () => void 0 !== output.headers[_xaolrud],
          () => expectNonNull(parseRfc3339DateTimeWithOffset(output.headers[_xaolrud]))
        ],
        [_OLLHS]: [, output.headers[_xaollh]],
        Metadata: [
          ,
          Object.keys(output.headers).filter((header) => header.startsWith("x-amz-meta-")).reduce((acc, header) => {
            acc[header.substring(11)] = output.headers[header];
            return acc;
          }, {})
        ]
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_HeadObjectCommand");
    de_ListBucketAnalyticsConfigurationsCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data.AnalyticsConfiguration === "") {
        contents[_ACLn] = [];
      } else if (data[_AC] != null) {
        contents[_ACLn] = de_AnalyticsConfigurationList(getArrayIfSingleItem(data[_AC]), context);
      }
      if (data[_CTon] != null) {
        contents[_CTon] = expectString(data[_CTon]);
      }
      if (data[_IT] != null) {
        contents[_IT] = parseBoolean(data[_IT]);
      }
      if (data[_NCT] != null) {
        contents[_NCT] = expectString(data[_NCT]);
      }
      return contents;
    }, "de_ListBucketAnalyticsConfigurationsCommand");
    de_ListBucketIntelligentTieringConfigurationsCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data[_CTon] != null) {
        contents[_CTon] = expectString(data[_CTon]);
      }
      if (data.IntelligentTieringConfiguration === "") {
        contents[_ITCL] = [];
      } else if (data[_ITC] != null) {
        contents[_ITCL] = de_IntelligentTieringConfigurationList(getArrayIfSingleItem(data[_ITC]), context);
      }
      if (data[_IT] != null) {
        contents[_IT] = parseBoolean(data[_IT]);
      }
      if (data[_NCT] != null) {
        contents[_NCT] = expectString(data[_NCT]);
      }
      return contents;
    }, "de_ListBucketIntelligentTieringConfigurationsCommand");
    de_ListBucketInventoryConfigurationsCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data[_CTon] != null) {
        contents[_CTon] = expectString(data[_CTon]);
      }
      if (data.InventoryConfiguration === "") {
        contents[_ICL] = [];
      } else if (data[_IC] != null) {
        contents[_ICL] = de_InventoryConfigurationList(getArrayIfSingleItem(data[_IC]), context);
      }
      if (data[_IT] != null) {
        contents[_IT] = parseBoolean(data[_IT]);
      }
      if (data[_NCT] != null) {
        contents[_NCT] = expectString(data[_NCT]);
      }
      return contents;
    }, "de_ListBucketInventoryConfigurationsCommand");
    de_ListBucketMetricsConfigurationsCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data[_CTon] != null) {
        contents[_CTon] = expectString(data[_CTon]);
      }
      if (data[_IT] != null) {
        contents[_IT] = parseBoolean(data[_IT]);
      }
      if (data.MetricsConfiguration === "") {
        contents[_MCL] = [];
      } else if (data[_MC] != null) {
        contents[_MCL] = de_MetricsConfigurationList(getArrayIfSingleItem(data[_MC]), context);
      }
      if (data[_NCT] != null) {
        contents[_NCT] = expectString(data[_NCT]);
      }
      return contents;
    }, "de_ListBucketMetricsConfigurationsCommand");
    de_ListBucketsCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data.Buckets === "") {
        contents[_Bu] = [];
      } else if (data[_Bu] != null && data[_Bu][_B] != null) {
        contents[_Bu] = de_Buckets(getArrayIfSingleItem(data[_Bu][_B]), context);
      }
      if (data[_CTon] != null) {
        contents[_CTon] = expectString(data[_CTon]);
      }
      if (data[_O] != null) {
        contents[_O] = de_Owner(data[_O], context);
      }
      if (data[_P] != null) {
        contents[_P] = expectString(data[_P]);
      }
      return contents;
    }, "de_ListBucketsCommand");
    de_ListDirectoryBucketsCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data.Buckets === "") {
        contents[_Bu] = [];
      } else if (data[_Bu] != null && data[_Bu][_B] != null) {
        contents[_Bu] = de_Buckets(getArrayIfSingleItem(data[_Bu][_B]), context);
      }
      if (data[_CTon] != null) {
        contents[_CTon] = expectString(data[_CTon]);
      }
      return contents;
    }, "de_ListDirectoryBucketsCommand");
    de_ListMultipartUploadsCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output),
        [_RC]: [, output.headers[_xarc]]
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data[_B] != null) {
        contents[_B] = expectString(data[_B]);
      }
      if (data.CommonPrefixes === "") {
        contents[_CP] = [];
      } else if (data[_CP] != null) {
        contents[_CP] = de_CommonPrefixList(getArrayIfSingleItem(data[_CP]), context);
      }
      if (data[_D] != null) {
        contents[_D] = expectString(data[_D]);
      }
      if (data[_ET] != null) {
        contents[_ET] = expectString(data[_ET]);
      }
      if (data[_IT] != null) {
        contents[_IT] = parseBoolean(data[_IT]);
      }
      if (data[_KM] != null) {
        contents[_KM] = expectString(data[_KM]);
      }
      if (data[_MU] != null) {
        contents[_MU] = strictParseInt32(data[_MU]);
      }
      if (data[_NKM] != null) {
        contents[_NKM] = expectString(data[_NKM]);
      }
      if (data[_NUIM] != null) {
        contents[_NUIM] = expectString(data[_NUIM]);
      }
      if (data[_P] != null) {
        contents[_P] = expectString(data[_P]);
      }
      if (data[_UIM] != null) {
        contents[_UIM] = expectString(data[_UIM]);
      }
      if (data.Upload === "") {
        contents[_Up] = [];
      } else if (data[_U] != null) {
        contents[_Up] = de_MultipartUploadList(getArrayIfSingleItem(data[_U]), context);
      }
      return contents;
    }, "de_ListMultipartUploadsCommand");
    de_ListObjectsCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output),
        [_RC]: [, output.headers[_xarc]]
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data.CommonPrefixes === "") {
        contents[_CP] = [];
      } else if (data[_CP] != null) {
        contents[_CP] = de_CommonPrefixList(getArrayIfSingleItem(data[_CP]), context);
      }
      if (data.Contents === "") {
        contents[_Co] = [];
      } else if (data[_Co] != null) {
        contents[_Co] = de_ObjectList(getArrayIfSingleItem(data[_Co]), context);
      }
      if (data[_D] != null) {
        contents[_D] = expectString(data[_D]);
      }
      if (data[_ET] != null) {
        contents[_ET] = expectString(data[_ET]);
      }
      if (data[_IT] != null) {
        contents[_IT] = parseBoolean(data[_IT]);
      }
      if (data[_M] != null) {
        contents[_M] = expectString(data[_M]);
      }
      if (data[_MK] != null) {
        contents[_MK] = strictParseInt32(data[_MK]);
      }
      if (data[_N] != null) {
        contents[_N] = expectString(data[_N]);
      }
      if (data[_NM] != null) {
        contents[_NM] = expectString(data[_NM]);
      }
      if (data[_P] != null) {
        contents[_P] = expectString(data[_P]);
      }
      return contents;
    }, "de_ListObjectsCommand");
    de_ListObjectsV2Command = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output),
        [_RC]: [, output.headers[_xarc]]
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data.CommonPrefixes === "") {
        contents[_CP] = [];
      } else if (data[_CP] != null) {
        contents[_CP] = de_CommonPrefixList(getArrayIfSingleItem(data[_CP]), context);
      }
      if (data.Contents === "") {
        contents[_Co] = [];
      } else if (data[_Co] != null) {
        contents[_Co] = de_ObjectList(getArrayIfSingleItem(data[_Co]), context);
      }
      if (data[_CTon] != null) {
        contents[_CTon] = expectString(data[_CTon]);
      }
      if (data[_D] != null) {
        contents[_D] = expectString(data[_D]);
      }
      if (data[_ET] != null) {
        contents[_ET] = expectString(data[_ET]);
      }
      if (data[_IT] != null) {
        contents[_IT] = parseBoolean(data[_IT]);
      }
      if (data[_KC] != null) {
        contents[_KC] = strictParseInt32(data[_KC]);
      }
      if (data[_MK] != null) {
        contents[_MK] = strictParseInt32(data[_MK]);
      }
      if (data[_N] != null) {
        contents[_N] = expectString(data[_N]);
      }
      if (data[_NCT] != null) {
        contents[_NCT] = expectString(data[_NCT]);
      }
      if (data[_P] != null) {
        contents[_P] = expectString(data[_P]);
      }
      if (data[_SA] != null) {
        contents[_SA] = expectString(data[_SA]);
      }
      return contents;
    }, "de_ListObjectsV2Command");
    de_ListObjectVersionsCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output),
        [_RC]: [, output.headers[_xarc]]
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data.CommonPrefixes === "") {
        contents[_CP] = [];
      } else if (data[_CP] != null) {
        contents[_CP] = de_CommonPrefixList(getArrayIfSingleItem(data[_CP]), context);
      }
      if (data.DeleteMarker === "") {
        contents[_DMe] = [];
      } else if (data[_DM] != null) {
        contents[_DMe] = de_DeleteMarkers(getArrayIfSingleItem(data[_DM]), context);
      }
      if (data[_D] != null) {
        contents[_D] = expectString(data[_D]);
      }
      if (data[_ET] != null) {
        contents[_ET] = expectString(data[_ET]);
      }
      if (data[_IT] != null) {
        contents[_IT] = parseBoolean(data[_IT]);
      }
      if (data[_KM] != null) {
        contents[_KM] = expectString(data[_KM]);
      }
      if (data[_MK] != null) {
        contents[_MK] = strictParseInt32(data[_MK]);
      }
      if (data[_N] != null) {
        contents[_N] = expectString(data[_N]);
      }
      if (data[_NKM] != null) {
        contents[_NKM] = expectString(data[_NKM]);
      }
      if (data[_NVIM] != null) {
        contents[_NVIM] = expectString(data[_NVIM]);
      }
      if (data[_P] != null) {
        contents[_P] = expectString(data[_P]);
      }
      if (data[_VIM] != null) {
        contents[_VIM] = expectString(data[_VIM]);
      }
      if (data.Version === "") {
        contents[_Ve] = [];
      } else if (data[_V] != null) {
        contents[_Ve] = de_ObjectVersionList(getArrayIfSingleItem(data[_V]), context);
      }
      return contents;
    }, "de_ListObjectVersionsCommand");
    de_ListPartsCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output),
        [_AD]: [
          () => void 0 !== output.headers[_xaad],
          () => expectNonNull(parseRfc7231DateTime(output.headers[_xaad]))
        ],
        [_ARI]: [, output.headers[_xaari]],
        [_RC]: [, output.headers[_xarc]]
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data[_B] != null) {
        contents[_B] = expectString(data[_B]);
      }
      if (data[_CA] != null) {
        contents[_CA] = expectString(data[_CA]);
      }
      if (data[_CT] != null) {
        contents[_CT] = expectString(data[_CT]);
      }
      if (data[_In] != null) {
        contents[_In] = de_Initiator(data[_In], context);
      }
      if (data[_IT] != null) {
        contents[_IT] = parseBoolean(data[_IT]);
      }
      if (data[_K] != null) {
        contents[_K] = expectString(data[_K]);
      }
      if (data[_MP] != null) {
        contents[_MP] = strictParseInt32(data[_MP]);
      }
      if (data[_NPNM] != null) {
        contents[_NPNM] = expectString(data[_NPNM]);
      }
      if (data[_O] != null) {
        contents[_O] = de_Owner(data[_O], context);
      }
      if (data[_PNM] != null) {
        contents[_PNM] = expectString(data[_PNM]);
      }
      if (data.Part === "") {
        contents[_Part] = [];
      } else if (data[_Par] != null) {
        contents[_Part] = de_Parts(getArrayIfSingleItem(data[_Par]), context);
      }
      if (data[_SC] != null) {
        contents[_SC] = expectString(data[_SC]);
      }
      if (data[_UI] != null) {
        contents[_UI] = expectString(data[_UI]);
      }
      return contents;
    }, "de_ListPartsCommand");
    de_PutBucketAccelerateConfigurationCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_PutBucketAccelerateConfigurationCommand");
    de_PutBucketAclCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_PutBucketAclCommand");
    de_PutBucketAnalyticsConfigurationCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_PutBucketAnalyticsConfigurationCommand");
    de_PutBucketCorsCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_PutBucketCorsCommand");
    de_PutBucketEncryptionCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_PutBucketEncryptionCommand");
    de_PutBucketIntelligentTieringConfigurationCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_PutBucketIntelligentTieringConfigurationCommand");
    de_PutBucketInventoryConfigurationCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_PutBucketInventoryConfigurationCommand");
    de_PutBucketLifecycleConfigurationCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output),
        [_TDMOS]: [, output.headers[_xatdmos]]
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_PutBucketLifecycleConfigurationCommand");
    de_PutBucketLoggingCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_PutBucketLoggingCommand");
    de_PutBucketMetricsConfigurationCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_PutBucketMetricsConfigurationCommand");
    de_PutBucketNotificationConfigurationCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_PutBucketNotificationConfigurationCommand");
    de_PutBucketOwnershipControlsCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_PutBucketOwnershipControlsCommand");
    de_PutBucketPolicyCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_PutBucketPolicyCommand");
    de_PutBucketReplicationCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_PutBucketReplicationCommand");
    de_PutBucketRequestPaymentCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_PutBucketRequestPaymentCommand");
    de_PutBucketTaggingCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_PutBucketTaggingCommand");
    de_PutBucketVersioningCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_PutBucketVersioningCommand");
    de_PutBucketWebsiteCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_PutBucketWebsiteCommand");
    de_PutObjectCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output),
        [_Exp]: [, output.headers[_xae]],
        [_ETa]: [, output.headers[_eta]],
        [_CCRC]: [, output.headers[_xacc]],
        [_CCRCC]: [, output.headers[_xacc_]],
        [_CCRCNVME]: [, output.headers[_xacc__]],
        [_CSHA]: [, output.headers[_xacs]],
        [_CSHAh]: [, output.headers[_xacs_]],
        [_CT]: [, output.headers[_xact]],
        [_SSE]: [, output.headers[_xasse]],
        [_VI]: [, output.headers[_xavi]],
        [_SSECA]: [, output.headers[_xasseca]],
        [_SSECKMD]: [, output.headers[_xasseckm]],
        [_SSEKMSKI]: [, output.headers[_xasseakki]],
        [_SSEKMSEC]: [, output.headers[_xassec]],
        [_BKE]: [() => void 0 !== output.headers[_xassebke], () => parseBoolean(output.headers[_xassebke])],
        [_Si]: [() => void 0 !== output.headers[_xaos], () => strictParseLong(output.headers[_xaos])],
        [_RC]: [, output.headers[_xarc]]
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_PutObjectCommand");
    de_PutObjectAclCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output),
        [_RC]: [, output.headers[_xarc]]
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_PutObjectAclCommand");
    de_PutObjectLegalHoldCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output),
        [_RC]: [, output.headers[_xarc]]
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_PutObjectLegalHoldCommand");
    de_PutObjectLockConfigurationCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output),
        [_RC]: [, output.headers[_xarc]]
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_PutObjectLockConfigurationCommand");
    de_PutObjectRetentionCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output),
        [_RC]: [, output.headers[_xarc]]
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_PutObjectRetentionCommand");
    de_PutObjectTaggingCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output),
        [_VI]: [, output.headers[_xavi]]
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_PutObjectTaggingCommand");
    de_PutPublicAccessBlockCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_PutPublicAccessBlockCommand");
    de_RenameObjectCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_RenameObjectCommand");
    de_RestoreObjectCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output),
        [_RC]: [, output.headers[_xarc]],
        [_ROP]: [, output.headers[_xarop]]
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_RestoreObjectCommand");
    de_SelectObjectContentCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      const data = output.body;
      contents.Payload = de_SelectObjectContentEventStream(data, context);
      return contents;
    }, "de_SelectObjectContentCommand");
    de_UpdateBucketMetadataInventoryTableConfigurationCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_UpdateBucketMetadataInventoryTableConfigurationCommand");
    de_UpdateBucketMetadataJournalTableConfigurationCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_UpdateBucketMetadataJournalTableConfigurationCommand");
    de_UploadPartCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output),
        [_SSE]: [, output.headers[_xasse]],
        [_ETa]: [, output.headers[_eta]],
        [_CCRC]: [, output.headers[_xacc]],
        [_CCRCC]: [, output.headers[_xacc_]],
        [_CCRCNVME]: [, output.headers[_xacc__]],
        [_CSHA]: [, output.headers[_xacs]],
        [_CSHAh]: [, output.headers[_xacs_]],
        [_SSECA]: [, output.headers[_xasseca]],
        [_SSECKMD]: [, output.headers[_xasseckm]],
        [_SSEKMSKI]: [, output.headers[_xasseakki]],
        [_BKE]: [() => void 0 !== output.headers[_xassebke], () => parseBoolean(output.headers[_xassebke])],
        [_RC]: [, output.headers[_xarc]]
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_UploadPartCommand");
    de_UploadPartCopyCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output),
        [_CSVI]: [, output.headers[_xacsvi]],
        [_SSE]: [, output.headers[_xasse]],
        [_SSECA]: [, output.headers[_xasseca]],
        [_SSECKMD]: [, output.headers[_xasseckm]],
        [_SSEKMSKI]: [, output.headers[_xasseakki]],
        [_BKE]: [() => void 0 !== output.headers[_xassebke], () => parseBoolean(output.headers[_xassebke])],
        [_RC]: [, output.headers[_xarc]]
      });
      const data = expectObject(await parseXmlBody(output.body, context));
      contents.CopyPartResult = de_CopyPartResult(data, context);
      return contents;
    }, "de_UploadPartCopyCommand");
    de_WriteGetObjectResponseCommand = /* @__PURE__ */ __name2(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "de_WriteGetObjectResponseCommand");
    de_CommandError = /* @__PURE__ */ __name2(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseXmlErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchUpload":
        case "com.amazonaws.s3#NoSuchUpload":
          throw await de_NoSuchUploadRes(parsedOutput, context);
        case "ObjectNotInActiveTierError":
        case "com.amazonaws.s3#ObjectNotInActiveTierError":
          throw await de_ObjectNotInActiveTierErrorRes(parsedOutput, context);
        case "BucketAlreadyExists":
        case "com.amazonaws.s3#BucketAlreadyExists":
          throw await de_BucketAlreadyExistsRes(parsedOutput, context);
        case "BucketAlreadyOwnedByYou":
        case "com.amazonaws.s3#BucketAlreadyOwnedByYou":
          throw await de_BucketAlreadyOwnedByYouRes(parsedOutput, context);
        case "NoSuchBucket":
        case "com.amazonaws.s3#NoSuchBucket":
          throw await de_NoSuchBucketRes(parsedOutput, context);
        case "InvalidObjectState":
        case "com.amazonaws.s3#InvalidObjectState":
          throw await de_InvalidObjectStateRes(parsedOutput, context);
        case "NoSuchKey":
        case "com.amazonaws.s3#NoSuchKey":
          throw await de_NoSuchKeyRes(parsedOutput, context);
        case "NotFound":
        case "com.amazonaws.s3#NotFound":
          throw await de_NotFoundRes(parsedOutput, context);
        case "EncryptionTypeMismatch":
        case "com.amazonaws.s3#EncryptionTypeMismatch":
          throw await de_EncryptionTypeMismatchRes(parsedOutput, context);
        case "InvalidRequest":
        case "com.amazonaws.s3#InvalidRequest":
          throw await de_InvalidRequestRes(parsedOutput, context);
        case "InvalidWriteOffset":
        case "com.amazonaws.s3#InvalidWriteOffset":
          throw await de_InvalidWriteOffsetRes(parsedOutput, context);
        case "TooManyParts":
        case "com.amazonaws.s3#TooManyParts":
          throw await de_TooManyPartsRes(parsedOutput, context);
        case "IdempotencyParameterMismatch":
        case "com.amazonaws.s3#IdempotencyParameterMismatch":
          throw await de_IdempotencyParameterMismatchRes(parsedOutput, context);
        case "ObjectAlreadyInActiveTierError":
        case "com.amazonaws.s3#ObjectAlreadyInActiveTierError":
          throw await de_ObjectAlreadyInActiveTierErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError2({
            output,
            parsedBody,
            errorCode
          });
      }
    }, "de_CommandError");
    throwDefaultError2 = withBaseException(S3ServiceException);
    de_BucketAlreadyExistsRes = /* @__PURE__ */ __name2(async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const exception = new BucketAlreadyExists({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    }, "de_BucketAlreadyExistsRes");
    de_BucketAlreadyOwnedByYouRes = /* @__PURE__ */ __name2(async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const exception = new BucketAlreadyOwnedByYou({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    }, "de_BucketAlreadyOwnedByYouRes");
    de_EncryptionTypeMismatchRes = /* @__PURE__ */ __name2(async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const exception = new EncryptionTypeMismatch({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    }, "de_EncryptionTypeMismatchRes");
    de_IdempotencyParameterMismatchRes = /* @__PURE__ */ __name2(async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const exception = new IdempotencyParameterMismatch({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    }, "de_IdempotencyParameterMismatchRes");
    de_InvalidObjectStateRes = /* @__PURE__ */ __name2(async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      if (data[_AT] != null) {
        contents[_AT] = expectString(data[_AT]);
      }
      if (data[_SC] != null) {
        contents[_SC] = expectString(data[_SC]);
      }
      const exception = new InvalidObjectState({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    }, "de_InvalidObjectStateRes");
    de_InvalidRequestRes = /* @__PURE__ */ __name2(async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const exception = new InvalidRequest({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    }, "de_InvalidRequestRes");
    de_InvalidWriteOffsetRes = /* @__PURE__ */ __name2(async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const exception = new InvalidWriteOffset({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    }, "de_InvalidWriteOffsetRes");
    de_NoSuchBucketRes = /* @__PURE__ */ __name2(async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const exception = new NoSuchBucket({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    }, "de_NoSuchBucketRes");
    de_NoSuchKeyRes = /* @__PURE__ */ __name2(async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const exception = new NoSuchKey({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    }, "de_NoSuchKeyRes");
    de_NoSuchUploadRes = /* @__PURE__ */ __name2(async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const exception = new NoSuchUpload({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    }, "de_NoSuchUploadRes");
    de_NotFoundRes = /* @__PURE__ */ __name2(async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const exception = new NotFound({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    }, "de_NotFoundRes");
    de_ObjectAlreadyInActiveTierErrorRes = /* @__PURE__ */ __name2(async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const exception = new ObjectAlreadyInActiveTierError({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    }, "de_ObjectAlreadyInActiveTierErrorRes");
    de_ObjectNotInActiveTierErrorRes = /* @__PURE__ */ __name2(async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const exception = new ObjectNotInActiveTierError({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    }, "de_ObjectNotInActiveTierErrorRes");
    de_TooManyPartsRes = /* @__PURE__ */ __name2(async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const exception = new TooManyParts({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    }, "de_TooManyPartsRes");
    de_SelectObjectContentEventStream = /* @__PURE__ */ __name2((output, context) => {
      return context.eventStreamMarshaller.deserialize(output, async (event) => {
        if (event["Records"] != null) {
          return {
            Records: await de_RecordsEvent_event(event["Records"], context)
          };
        }
        if (event["Stats"] != null) {
          return {
            Stats: await de_StatsEvent_event(event["Stats"], context)
          };
        }
        if (event["Progress"] != null) {
          return {
            Progress: await de_ProgressEvent_event(event["Progress"], context)
          };
        }
        if (event["Cont"] != null) {
          return {
            Cont: await de_ContinuationEvent_event(event["Cont"], context)
          };
        }
        if (event["End"] != null) {
          return {
            End: await de_EndEvent_event(event["End"], context)
          };
        }
        return { $unknown: event };
      });
    }, "de_SelectObjectContentEventStream");
    de_ContinuationEvent_event = /* @__PURE__ */ __name2(async (output, context) => {
      const contents = {};
      const data = await parseXmlBody(output.body, context);
      Object.assign(contents, de_ContinuationEvent(data, context));
      return contents;
    }, "de_ContinuationEvent_event");
    de_EndEvent_event = /* @__PURE__ */ __name2(async (output, context) => {
      const contents = {};
      const data = await parseXmlBody(output.body, context);
      Object.assign(contents, de_EndEvent(data, context));
      return contents;
    }, "de_EndEvent_event");
    de_ProgressEvent_event = /* @__PURE__ */ __name2(async (output, context) => {
      const contents = {};
      const data = await parseXmlBody(output.body, context);
      contents.Details = de_Progress(data, context);
      return contents;
    }, "de_ProgressEvent_event");
    de_RecordsEvent_event = /* @__PURE__ */ __name2(async (output, context) => {
      const contents = {};
      contents.Payload = output.body;
      return contents;
    }, "de_RecordsEvent_event");
    de_StatsEvent_event = /* @__PURE__ */ __name2(async (output, context) => {
      const contents = {};
      const data = await parseXmlBody(output.body, context);
      contents.Details = de_Stats(data, context);
      return contents;
    }, "de_StatsEvent_event");
    se_AbortIncompleteMultipartUpload = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_AIMU);
      if (input[_DAI] != null) {
        bn2.c(XmlNode2.of(_DAI, String(input[_DAI])).n(_DAI));
      }
      return bn2;
    }, "se_AbortIncompleteMultipartUpload");
    se_AccelerateConfiguration = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_ACc);
      if (input[_S] != null) {
        bn2.c(XmlNode2.of(_BAS, input[_S]).n(_S));
      }
      return bn2;
    }, "se_AccelerateConfiguration");
    se_AccessControlPolicy = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_ACP);
      bn2.lc(input, "Grants", "AccessControlList", () => se_Grants(input[_Gr], context));
      if (input[_O] != null) {
        bn2.c(se_Owner(input[_O], context).n(_O));
      }
      return bn2;
    }, "se_AccessControlPolicy");
    se_AccessControlTranslation = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_ACT);
      if (input[_O] != null) {
        bn2.c(XmlNode2.of(_OOw, input[_O]).n(_O));
      }
      return bn2;
    }, "se_AccessControlTranslation");
    se_AllowedHeaders = /* @__PURE__ */ __name2((input, context) => {
      return input.filter((e2) => e2 != null).map((entry) => {
        const n2 = XmlNode2.of(_AH, entry);
        return n2.n(_me);
      });
    }, "se_AllowedHeaders");
    se_AllowedMethods = /* @__PURE__ */ __name2((input, context) => {
      return input.filter((e2) => e2 != null).map((entry) => {
        const n2 = XmlNode2.of(_AM, entry);
        return n2.n(_me);
      });
    }, "se_AllowedMethods");
    se_AllowedOrigins = /* @__PURE__ */ __name2((input, context) => {
      return input.filter((e2) => e2 != null).map((entry) => {
        const n2 = XmlNode2.of(_AO, entry);
        return n2.n(_me);
      });
    }, "se_AllowedOrigins");
    se_AnalyticsAndOperator = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_AAO);
      bn2.cc(input, _P);
      bn2.l(input, "Tags", "Tag", () => se_TagSet(input[_Tag], context));
      return bn2;
    }, "se_AnalyticsAndOperator");
    se_AnalyticsConfiguration = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_AC);
      if (input[_I] != null) {
        bn2.c(XmlNode2.of(_AI, input[_I]).n(_I));
      }
      if (input[_F] != null) {
        bn2.c(se_AnalyticsFilter(input[_F], context).n(_F));
      }
      if (input[_SCA] != null) {
        bn2.c(se_StorageClassAnalysis(input[_SCA], context).n(_SCA));
      }
      return bn2;
    }, "se_AnalyticsConfiguration");
    se_AnalyticsExportDestination = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_AED);
      if (input[_SBD] != null) {
        bn2.c(se_AnalyticsS3BucketDestination(input[_SBD], context).n(_SBD));
      }
      return bn2;
    }, "se_AnalyticsExportDestination");
    se_AnalyticsFilter = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_AF);
      AnalyticsFilter.visit(input, {
        Prefix: /* @__PURE__ */ __name2((value) => {
          if (input[_P] != null) {
            bn2.c(XmlNode2.of(_P, value).n(_P));
          }
        }, "Prefix"),
        Tag: /* @__PURE__ */ __name2((value) => {
          if (input[_Ta] != null) {
            bn2.c(se_Tag(value, context).n(_Ta));
          }
        }, "Tag"),
        And: /* @__PURE__ */ __name2((value) => {
          if (input[_A] != null) {
            bn2.c(se_AnalyticsAndOperator(value, context).n(_A));
          }
        }, "And"),
        _: /* @__PURE__ */ __name2((name, value) => {
          if (!(value instanceof XmlNode2 || value instanceof XmlText)) {
            throw new Error("Unable to serialize unknown union members in XML.");
          }
          bn2.c(new XmlNode2(name).c(value));
        }, "_")
      });
      return bn2;
    }, "se_AnalyticsFilter");
    se_AnalyticsS3BucketDestination = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_ASBD);
      if (input[_Fo] != null) {
        bn2.c(XmlNode2.of(_ASEFF, input[_Fo]).n(_Fo));
      }
      if (input[_BAI] != null) {
        bn2.c(XmlNode2.of(_AIc, input[_BAI]).n(_BAI));
      }
      if (input[_B] != null) {
        bn2.c(XmlNode2.of(_BN, input[_B]).n(_B));
      }
      bn2.cc(input, _P);
      return bn2;
    }, "se_AnalyticsS3BucketDestination");
    se_BucketInfo = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_BI);
      bn2.cc(input, _DR);
      if (input[_Ty] != null) {
        bn2.c(XmlNode2.of(_BT, input[_Ty]).n(_Ty));
      }
      return bn2;
    }, "se_BucketInfo");
    se_BucketLifecycleConfiguration = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_BLC);
      bn2.l(input, "Rules", "Rule", () => se_LifecycleRules(input[_Rul], context));
      return bn2;
    }, "se_BucketLifecycleConfiguration");
    se_BucketLoggingStatus = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_BLS);
      if (input[_LE] != null) {
        bn2.c(se_LoggingEnabled(input[_LE], context).n(_LE));
      }
      return bn2;
    }, "se_BucketLoggingStatus");
    se_CompletedMultipartUpload = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_CMU);
      bn2.l(input, "Parts", "Part", () => se_CompletedPartList(input[_Part], context));
      return bn2;
    }, "se_CompletedMultipartUpload");
    se_CompletedPart = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_CPo);
      bn2.cc(input, _ETa);
      bn2.cc(input, _CCRC);
      bn2.cc(input, _CCRCC);
      bn2.cc(input, _CCRCNVME);
      bn2.cc(input, _CSHA);
      bn2.cc(input, _CSHAh);
      if (input[_PN] != null) {
        bn2.c(XmlNode2.of(_PN, String(input[_PN])).n(_PN));
      }
      return bn2;
    }, "se_CompletedPart");
    se_CompletedPartList = /* @__PURE__ */ __name2((input, context) => {
      return input.filter((e2) => e2 != null).map((entry) => {
        const n2 = se_CompletedPart(entry, context);
        return n2.n(_me);
      });
    }, "se_CompletedPartList");
    se_Condition = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_Con);
      bn2.cc(input, _HECRE);
      bn2.cc(input, _KPE);
      return bn2;
    }, "se_Condition");
    se_CORSConfiguration = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_CORSC);
      bn2.l(input, "CORSRules", "CORSRule", () => se_CORSRules(input[_CORSRu], context));
      return bn2;
    }, "se_CORSConfiguration");
    se_CORSRule = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_CORSR);
      bn2.cc(input, _ID_);
      bn2.l(input, "AllowedHeaders", "AllowedHeader", () => se_AllowedHeaders(input[_AHl], context));
      bn2.l(input, "AllowedMethods", "AllowedMethod", () => se_AllowedMethods(input[_AMl], context));
      bn2.l(input, "AllowedOrigins", "AllowedOrigin", () => se_AllowedOrigins(input[_AOl], context));
      bn2.l(input, "ExposeHeaders", "ExposeHeader", () => se_ExposeHeaders(input[_EH], context));
      if (input[_MAS] != null) {
        bn2.c(XmlNode2.of(_MAS, String(input[_MAS])).n(_MAS));
      }
      return bn2;
    }, "se_CORSRule");
    se_CORSRules = /* @__PURE__ */ __name2((input, context) => {
      return input.filter((e2) => e2 != null).map((entry) => {
        const n2 = se_CORSRule(entry, context);
        return n2.n(_me);
      });
    }, "se_CORSRules");
    se_CreateBucketConfiguration = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_CBC);
      if (input[_LC] != null) {
        bn2.c(XmlNode2.of(_BLCu, input[_LC]).n(_LC));
      }
      if (input[_L] != null) {
        bn2.c(se_LocationInfo(input[_L], context).n(_L));
      }
      if (input[_B] != null) {
        bn2.c(se_BucketInfo(input[_B], context).n(_B));
      }
      bn2.lc(input, "Tags", "Tags", () => se_TagSet(input[_Tag], context));
      return bn2;
    }, "se_CreateBucketConfiguration");
    se_CSVInput = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_CSVIn);
      bn2.cc(input, _FHI);
      bn2.cc(input, _Com);
      bn2.cc(input, _QEC);
      bn2.cc(input, _RD);
      bn2.cc(input, _FD);
      bn2.cc(input, _QCuo);
      if (input[_AQRD] != null) {
        bn2.c(XmlNode2.of(_AQRD, String(input[_AQRD])).n(_AQRD));
      }
      return bn2;
    }, "se_CSVInput");
    se_CSVOutput = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_CSVO);
      bn2.cc(input, _QF);
      bn2.cc(input, _QEC);
      bn2.cc(input, _RD);
      bn2.cc(input, _FD);
      bn2.cc(input, _QCuo);
      return bn2;
    }, "se_CSVOutput");
    se_DefaultRetention = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_DRe);
      if (input[_Mo] != null) {
        bn2.c(XmlNode2.of(_OLRM, input[_Mo]).n(_Mo));
      }
      if (input[_Da] != null) {
        bn2.c(XmlNode2.of(_Da, String(input[_Da])).n(_Da));
      }
      if (input[_Y] != null) {
        bn2.c(XmlNode2.of(_Y, String(input[_Y])).n(_Y));
      }
      return bn2;
    }, "se_DefaultRetention");
    se_Delete = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_Del);
      bn2.l(input, "Objects", "Object", () => se_ObjectIdentifierList(input[_Ob], context));
      if (input[_Q] != null) {
        bn2.c(XmlNode2.of(_Q, String(input[_Q])).n(_Q));
      }
      return bn2;
    }, "se_Delete");
    se_DeleteMarkerReplication = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_DMR);
      if (input[_S] != null) {
        bn2.c(XmlNode2.of(_DMRS, input[_S]).n(_S));
      }
      return bn2;
    }, "se_DeleteMarkerReplication");
    se_Destination = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_Des);
      if (input[_B] != null) {
        bn2.c(XmlNode2.of(_BN, input[_B]).n(_B));
      }
      if (input[_Ac] != null) {
        bn2.c(XmlNode2.of(_AIc, input[_Ac]).n(_Ac));
      }
      bn2.cc(input, _SC);
      if (input[_ACT] != null) {
        bn2.c(se_AccessControlTranslation(input[_ACT], context).n(_ACT));
      }
      if (input[_ECn] != null) {
        bn2.c(se_EncryptionConfiguration(input[_ECn], context).n(_ECn));
      }
      if (input[_RTe] != null) {
        bn2.c(se_ReplicationTime(input[_RTe], context).n(_RTe));
      }
      if (input[_Me] != null) {
        bn2.c(se_Metrics(input[_Me], context).n(_Me));
      }
      return bn2;
    }, "se_Destination");
    se_Encryption = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_En);
      if (input[_ETn] != null) {
        bn2.c(XmlNode2.of(_SSE, input[_ETn]).n(_ETn));
      }
      if (input[_KMSKI] != null) {
        bn2.c(XmlNode2.of(_SSEKMSKI, input[_KMSKI]).n(_KMSKI));
      }
      bn2.cc(input, _KMSC);
      return bn2;
    }, "se_Encryption");
    se_EncryptionConfiguration = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_ECn);
      bn2.cc(input, _RKKID);
      return bn2;
    }, "se_EncryptionConfiguration");
    se_ErrorDocument = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_ED);
      if (input[_K] != null) {
        bn2.c(XmlNode2.of(_OK, input[_K]).n(_K));
      }
      return bn2;
    }, "se_ErrorDocument");
    se_EventBridgeConfiguration = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_EBC);
      return bn2;
    }, "se_EventBridgeConfiguration");
    se_EventList = /* @__PURE__ */ __name2((input, context) => {
      return input.filter((e2) => e2 != null).map((entry) => {
        const n2 = XmlNode2.of(_Ev, entry);
        return n2.n(_me);
      });
    }, "se_EventList");
    se_ExistingObjectReplication = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_EOR);
      if (input[_S] != null) {
        bn2.c(XmlNode2.of(_EORS, input[_S]).n(_S));
      }
      return bn2;
    }, "se_ExistingObjectReplication");
    se_ExposeHeaders = /* @__PURE__ */ __name2((input, context) => {
      return input.filter((e2) => e2 != null).map((entry) => {
        const n2 = XmlNode2.of(_EHx, entry);
        return n2.n(_me);
      });
    }, "se_ExposeHeaders");
    se_FilterRule = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_FR);
      if (input[_N] != null) {
        bn2.c(XmlNode2.of(_FRN, input[_N]).n(_N));
      }
      if (input[_Va] != null) {
        bn2.c(XmlNode2.of(_FRV, input[_Va]).n(_Va));
      }
      return bn2;
    }, "se_FilterRule");
    se_FilterRuleList = /* @__PURE__ */ __name2((input, context) => {
      return input.filter((e2) => e2 != null).map((entry) => {
        const n2 = se_FilterRule(entry, context);
        return n2.n(_me);
      });
    }, "se_FilterRuleList");
    se_GlacierJobParameters = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_GJP);
      bn2.cc(input, _Ti);
      return bn2;
    }, "se_GlacierJobParameters");
    se_Grant = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_G);
      if (input[_Gra] != null) {
        const n2 = se_Grantee(input[_Gra], context).n(_Gra);
        n2.a("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
        bn2.c(n2);
      }
      bn2.cc(input, _Pe);
      return bn2;
    }, "se_Grant");
    se_Grantee = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_Gra);
      bn2.cc(input, _DN);
      bn2.cc(input, _EA);
      bn2.cc(input, _ID_);
      bn2.cc(input, _URI);
      bn2.a("xsi:type", input[_Ty]);
      return bn2;
    }, "se_Grantee");
    se_Grants = /* @__PURE__ */ __name2((input, context) => {
      return input.filter((e2) => e2 != null).map((entry) => {
        const n2 = se_Grant(entry, context);
        return n2.n(_G);
      });
    }, "se_Grants");
    se_IndexDocument = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_ID);
      bn2.cc(input, _Su);
      return bn2;
    }, "se_IndexDocument");
    se_InputSerialization = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_IS);
      if (input[_CSV] != null) {
        bn2.c(se_CSVInput(input[_CSV], context).n(_CSV));
      }
      bn2.cc(input, _CTom);
      if (input[_JSON] != null) {
        bn2.c(se_JSONInput(input[_JSON], context).n(_JSON));
      }
      if (input[_Parq] != null) {
        bn2.c(se_ParquetInput(input[_Parq], context).n(_Parq));
      }
      return bn2;
    }, "se_InputSerialization");
    se_IntelligentTieringAndOperator = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_ITAO);
      bn2.cc(input, _P);
      bn2.l(input, "Tags", "Tag", () => se_TagSet(input[_Tag], context));
      return bn2;
    }, "se_IntelligentTieringAndOperator");
    se_IntelligentTieringConfiguration = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_ITC);
      if (input[_I] != null) {
        bn2.c(XmlNode2.of(_ITI, input[_I]).n(_I));
      }
      if (input[_F] != null) {
        bn2.c(se_IntelligentTieringFilter(input[_F], context).n(_F));
      }
      if (input[_S] != null) {
        bn2.c(XmlNode2.of(_ITS, input[_S]).n(_S));
      }
      bn2.l(input, "Tierings", "Tiering", () => se_TieringList(input[_Tie], context));
      return bn2;
    }, "se_IntelligentTieringConfiguration");
    se_IntelligentTieringFilter = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_ITF);
      bn2.cc(input, _P);
      if (input[_Ta] != null) {
        bn2.c(se_Tag(input[_Ta], context).n(_Ta));
      }
      if (input[_A] != null) {
        bn2.c(se_IntelligentTieringAndOperator(input[_A], context).n(_A));
      }
      return bn2;
    }, "se_IntelligentTieringFilter");
    se_InventoryConfiguration = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_IC);
      if (input[_Des] != null) {
        bn2.c(se_InventoryDestination(input[_Des], context).n(_Des));
      }
      if (input[_IE] != null) {
        bn2.c(XmlNode2.of(_IE, String(input[_IE])).n(_IE));
      }
      if (input[_F] != null) {
        bn2.c(se_InventoryFilter(input[_F], context).n(_F));
      }
      if (input[_I] != null) {
        bn2.c(XmlNode2.of(_II, input[_I]).n(_I));
      }
      if (input[_IOV] != null) {
        bn2.c(XmlNode2.of(_IIOV, input[_IOV]).n(_IOV));
      }
      bn2.lc(input, "OptionalFields", "OptionalFields", () => se_InventoryOptionalFields(input[_OF], context));
      if (input[_Sc] != null) {
        bn2.c(se_InventorySchedule(input[_Sc], context).n(_Sc));
      }
      return bn2;
    }, "se_InventoryConfiguration");
    se_InventoryDestination = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_IDn);
      if (input[_SBD] != null) {
        bn2.c(se_InventoryS3BucketDestination(input[_SBD], context).n(_SBD));
      }
      return bn2;
    }, "se_InventoryDestination");
    se_InventoryEncryption = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_IEn);
      if (input[_SSES] != null) {
        bn2.c(se_SSES3(input[_SSES], context).n(_SS));
      }
      if (input[_SSEKMS] != null) {
        bn2.c(se_SSEKMS(input[_SSEKMS], context).n(_SK));
      }
      return bn2;
    }, "se_InventoryEncryption");
    se_InventoryFilter = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_IF);
      bn2.cc(input, _P);
      return bn2;
    }, "se_InventoryFilter");
    se_InventoryOptionalFields = /* @__PURE__ */ __name2((input, context) => {
      return input.filter((e2) => e2 != null).map((entry) => {
        const n2 = XmlNode2.of(_IOF, entry);
        return n2.n(_Fi);
      });
    }, "se_InventoryOptionalFields");
    se_InventoryS3BucketDestination = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_ISBD);
      bn2.cc(input, _AIc);
      if (input[_B] != null) {
        bn2.c(XmlNode2.of(_BN, input[_B]).n(_B));
      }
      if (input[_Fo] != null) {
        bn2.c(XmlNode2.of(_IFn, input[_Fo]).n(_Fo));
      }
      bn2.cc(input, _P);
      if (input[_En] != null) {
        bn2.c(se_InventoryEncryption(input[_En], context).n(_En));
      }
      return bn2;
    }, "se_InventoryS3BucketDestination");
    se_InventorySchedule = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_ISn);
      if (input[_Fr] != null) {
        bn2.c(XmlNode2.of(_IFnv, input[_Fr]).n(_Fr));
      }
      return bn2;
    }, "se_InventorySchedule");
    se_InventoryTableConfiguration = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_ITCn);
      if (input[_CSo] != null) {
        bn2.c(XmlNode2.of(_ICS, input[_CSo]).n(_CSo));
      }
      if (input[_ECn] != null) {
        bn2.c(se_MetadataTableEncryptionConfiguration(input[_ECn], context).n(_ECn));
      }
      return bn2;
    }, "se_InventoryTableConfiguration");
    se_InventoryTableConfigurationUpdates = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_ITCU);
      if (input[_CSo] != null) {
        bn2.c(XmlNode2.of(_ICS, input[_CSo]).n(_CSo));
      }
      if (input[_ECn] != null) {
        bn2.c(se_MetadataTableEncryptionConfiguration(input[_ECn], context).n(_ECn));
      }
      return bn2;
    }, "se_InventoryTableConfigurationUpdates");
    se_JournalTableConfiguration = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_JTC);
      if (input[_REe] != null) {
        bn2.c(se_RecordExpiration(input[_REe], context).n(_REe));
      }
      if (input[_ECn] != null) {
        bn2.c(se_MetadataTableEncryptionConfiguration(input[_ECn], context).n(_ECn));
      }
      return bn2;
    }, "se_JournalTableConfiguration");
    se_JournalTableConfigurationUpdates = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_JTCU);
      if (input[_REe] != null) {
        bn2.c(se_RecordExpiration(input[_REe], context).n(_REe));
      }
      return bn2;
    }, "se_JournalTableConfigurationUpdates");
    se_JSONInput = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_JSONI);
      if (input[_Ty] != null) {
        bn2.c(XmlNode2.of(_JSONT, input[_Ty]).n(_Ty));
      }
      return bn2;
    }, "se_JSONInput");
    se_JSONOutput = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_JSONO);
      bn2.cc(input, _RD);
      return bn2;
    }, "se_JSONOutput");
    se_LambdaFunctionConfiguration = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_LFCa);
      if (input[_I] != null) {
        bn2.c(XmlNode2.of(_NI, input[_I]).n(_I));
      }
      if (input[_LFA] != null) {
        bn2.c(XmlNode2.of(_LFA, input[_LFA]).n(_CF));
      }
      bn2.l(input, "Events", "Event", () => se_EventList(input[_Eve], context));
      if (input[_F] != null) {
        bn2.c(se_NotificationConfigurationFilter(input[_F], context).n(_F));
      }
      return bn2;
    }, "se_LambdaFunctionConfiguration");
    se_LambdaFunctionConfigurationList = /* @__PURE__ */ __name2((input, context) => {
      return input.filter((e2) => e2 != null).map((entry) => {
        const n2 = se_LambdaFunctionConfiguration(entry, context);
        return n2.n(_me);
      });
    }, "se_LambdaFunctionConfigurationList");
    se_LifecycleExpiration = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_LEi);
      if (input[_Dat] != null) {
        bn2.c(XmlNode2.of(_Dat, serializeDateTime(input[_Dat]).toString()).n(_Dat));
      }
      if (input[_Da] != null) {
        bn2.c(XmlNode2.of(_Da, String(input[_Da])).n(_Da));
      }
      if (input[_EODM] != null) {
        bn2.c(XmlNode2.of(_EODM, String(input[_EODM])).n(_EODM));
      }
      return bn2;
    }, "se_LifecycleExpiration");
    se_LifecycleRule = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_LR);
      if (input[_Exp] != null) {
        bn2.c(se_LifecycleExpiration(input[_Exp], context).n(_Exp));
      }
      bn2.cc(input, _ID_);
      bn2.cc(input, _P);
      if (input[_F] != null) {
        bn2.c(se_LifecycleRuleFilter(input[_F], context).n(_F));
      }
      if (input[_S] != null) {
        bn2.c(XmlNode2.of(_ESx, input[_S]).n(_S));
      }
      bn2.l(input, "Transitions", "Transition", () => se_TransitionList(input[_Tr], context));
      bn2.l(input, "NoncurrentVersionTransitions", "NoncurrentVersionTransition", () => se_NoncurrentVersionTransitionList(input[_NVT], context));
      if (input[_NVE] != null) {
        bn2.c(se_NoncurrentVersionExpiration(input[_NVE], context).n(_NVE));
      }
      if (input[_AIMU] != null) {
        bn2.c(se_AbortIncompleteMultipartUpload(input[_AIMU], context).n(_AIMU));
      }
      return bn2;
    }, "se_LifecycleRule");
    se_LifecycleRuleAndOperator = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_LRAO);
      bn2.cc(input, _P);
      bn2.l(input, "Tags", "Tag", () => se_TagSet(input[_Tag], context));
      if (input[_OSGT] != null) {
        bn2.c(XmlNode2.of(_OSGTB, String(input[_OSGT])).n(_OSGT));
      }
      if (input[_OSLT] != null) {
        bn2.c(XmlNode2.of(_OSLTB, String(input[_OSLT])).n(_OSLT));
      }
      return bn2;
    }, "se_LifecycleRuleAndOperator");
    se_LifecycleRuleFilter = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_LRF);
      bn2.cc(input, _P);
      if (input[_Ta] != null) {
        bn2.c(se_Tag(input[_Ta], context).n(_Ta));
      }
      if (input[_OSGT] != null) {
        bn2.c(XmlNode2.of(_OSGTB, String(input[_OSGT])).n(_OSGT));
      }
      if (input[_OSLT] != null) {
        bn2.c(XmlNode2.of(_OSLTB, String(input[_OSLT])).n(_OSLT));
      }
      if (input[_A] != null) {
        bn2.c(se_LifecycleRuleAndOperator(input[_A], context).n(_A));
      }
      return bn2;
    }, "se_LifecycleRuleFilter");
    se_LifecycleRules = /* @__PURE__ */ __name2((input, context) => {
      return input.filter((e2) => e2 != null).map((entry) => {
        const n2 = se_LifecycleRule(entry, context);
        return n2.n(_me);
      });
    }, "se_LifecycleRules");
    se_LocationInfo = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_LI);
      if (input[_Ty] != null) {
        bn2.c(XmlNode2.of(_LT, input[_Ty]).n(_Ty));
      }
      if (input[_N] != null) {
        bn2.c(XmlNode2.of(_LNAS, input[_N]).n(_N));
      }
      return bn2;
    }, "se_LocationInfo");
    se_LoggingEnabled = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_LE);
      bn2.cc(input, _TB);
      bn2.lc(input, "TargetGrants", "TargetGrants", () => se_TargetGrants(input[_TG], context));
      bn2.cc(input, _TP);
      if (input[_TOKF] != null) {
        bn2.c(se_TargetObjectKeyFormat(input[_TOKF], context).n(_TOKF));
      }
      return bn2;
    }, "se_LoggingEnabled");
    se_MetadataConfiguration = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_MCe);
      if (input[_JTC] != null) {
        bn2.c(se_JournalTableConfiguration(input[_JTC], context).n(_JTC));
      }
      if (input[_ITCn] != null) {
        bn2.c(se_InventoryTableConfiguration(input[_ITCn], context).n(_ITCn));
      }
      return bn2;
    }, "se_MetadataConfiguration");
    se_MetadataEntry = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_ME);
      if (input[_N] != null) {
        bn2.c(XmlNode2.of(_MKe, input[_N]).n(_N));
      }
      if (input[_Va] != null) {
        bn2.c(XmlNode2.of(_MV, input[_Va]).n(_Va));
      }
      return bn2;
    }, "se_MetadataEntry");
    se_MetadataTableConfiguration = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_MTC);
      if (input[_STD] != null) {
        bn2.c(se_S3TablesDestination(input[_STD], context).n(_STD));
      }
      return bn2;
    }, "se_MetadataTableConfiguration");
    se_MetadataTableEncryptionConfiguration = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_MTEC);
      if (input[_SAs] != null) {
        bn2.c(XmlNode2.of(_TSA, input[_SAs]).n(_SAs));
      }
      bn2.cc(input, _KKA);
      return bn2;
    }, "se_MetadataTableEncryptionConfiguration");
    se_Metrics = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_Me);
      if (input[_S] != null) {
        bn2.c(XmlNode2.of(_MS, input[_S]).n(_S));
      }
      if (input[_ETv] != null) {
        bn2.c(se_ReplicationTimeValue(input[_ETv], context).n(_ETv));
      }
      return bn2;
    }, "se_Metrics");
    se_MetricsAndOperator = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_MAO);
      bn2.cc(input, _P);
      bn2.l(input, "Tags", "Tag", () => se_TagSet(input[_Tag], context));
      bn2.cc(input, _APAc);
      return bn2;
    }, "se_MetricsAndOperator");
    se_MetricsConfiguration = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_MC);
      if (input[_I] != null) {
        bn2.c(XmlNode2.of(_MI, input[_I]).n(_I));
      }
      if (input[_F] != null) {
        bn2.c(se_MetricsFilter(input[_F], context).n(_F));
      }
      return bn2;
    }, "se_MetricsConfiguration");
    se_MetricsFilter = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_MF);
      MetricsFilter.visit(input, {
        Prefix: /* @__PURE__ */ __name2((value) => {
          if (input[_P] != null) {
            bn2.c(XmlNode2.of(_P, value).n(_P));
          }
        }, "Prefix"),
        Tag: /* @__PURE__ */ __name2((value) => {
          if (input[_Ta] != null) {
            bn2.c(se_Tag(value, context).n(_Ta));
          }
        }, "Tag"),
        AccessPointArn: /* @__PURE__ */ __name2((value) => {
          if (input[_APAc] != null) {
            bn2.c(XmlNode2.of(_APAc, value).n(_APAc));
          }
        }, "AccessPointArn"),
        And: /* @__PURE__ */ __name2((value) => {
          if (input[_A] != null) {
            bn2.c(se_MetricsAndOperator(value, context).n(_A));
          }
        }, "And"),
        _: /* @__PURE__ */ __name2((name, value) => {
          if (!(value instanceof XmlNode2 || value instanceof XmlText)) {
            throw new Error("Unable to serialize unknown union members in XML.");
          }
          bn2.c(new XmlNode2(name).c(value));
        }, "_")
      });
      return bn2;
    }, "se_MetricsFilter");
    se_NoncurrentVersionExpiration = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_NVE);
      if (input[_ND] != null) {
        bn2.c(XmlNode2.of(_Da, String(input[_ND])).n(_ND));
      }
      if (input[_NNV] != null) {
        bn2.c(XmlNode2.of(_VC, String(input[_NNV])).n(_NNV));
      }
      return bn2;
    }, "se_NoncurrentVersionExpiration");
    se_NoncurrentVersionTransition = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_NVTo);
      if (input[_ND] != null) {
        bn2.c(XmlNode2.of(_Da, String(input[_ND])).n(_ND));
      }
      if (input[_SC] != null) {
        bn2.c(XmlNode2.of(_TSC, input[_SC]).n(_SC));
      }
      if (input[_NNV] != null) {
        bn2.c(XmlNode2.of(_VC, String(input[_NNV])).n(_NNV));
      }
      return bn2;
    }, "se_NoncurrentVersionTransition");
    se_NoncurrentVersionTransitionList = /* @__PURE__ */ __name2((input, context) => {
      return input.filter((e2) => e2 != null).map((entry) => {
        const n2 = se_NoncurrentVersionTransition(entry, context);
        return n2.n(_me);
      });
    }, "se_NoncurrentVersionTransitionList");
    se_NotificationConfiguration = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_NC);
      bn2.l(input, "TopicConfigurations", "TopicConfiguration", () => se_TopicConfigurationList(input[_TCop], context));
      bn2.l(input, "QueueConfigurations", "QueueConfiguration", () => se_QueueConfigurationList(input[_QCu], context));
      bn2.l(input, "LambdaFunctionConfigurations", "CloudFunctionConfiguration", () => se_LambdaFunctionConfigurationList(input[_LFC], context));
      if (input[_EBC] != null) {
        bn2.c(se_EventBridgeConfiguration(input[_EBC], context).n(_EBC));
      }
      return bn2;
    }, "se_NotificationConfiguration");
    se_NotificationConfigurationFilter = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_NCF);
      if (input[_K] != null) {
        bn2.c(se_S3KeyFilter(input[_K], context).n(_SKe));
      }
      return bn2;
    }, "se_NotificationConfigurationFilter");
    se_ObjectIdentifier = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_OI);
      if (input[_K] != null) {
        bn2.c(XmlNode2.of(_OK, input[_K]).n(_K));
      }
      if (input[_VI] != null) {
        bn2.c(XmlNode2.of(_OVI, input[_VI]).n(_VI));
      }
      bn2.cc(input, _ETa);
      if (input[_LMT] != null) {
        bn2.c(XmlNode2.of(_LMT, dateToUtcString(input[_LMT]).toString()).n(_LMT));
      }
      if (input[_Si] != null) {
        bn2.c(XmlNode2.of(_Si, String(input[_Si])).n(_Si));
      }
      return bn2;
    }, "se_ObjectIdentifier");
    se_ObjectIdentifierList = /* @__PURE__ */ __name2((input, context) => {
      return input.filter((e2) => e2 != null).map((entry) => {
        const n2 = se_ObjectIdentifier(entry, context);
        return n2.n(_me);
      });
    }, "se_ObjectIdentifierList");
    se_ObjectLockConfiguration = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_OLC);
      bn2.cc(input, _OLE);
      if (input[_Ru] != null) {
        bn2.c(se_ObjectLockRule(input[_Ru], context).n(_Ru));
      }
      return bn2;
    }, "se_ObjectLockConfiguration");
    se_ObjectLockLegalHold = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_OLLH);
      if (input[_S] != null) {
        bn2.c(XmlNode2.of(_OLLHS, input[_S]).n(_S));
      }
      return bn2;
    }, "se_ObjectLockLegalHold");
    se_ObjectLockRetention = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_OLR);
      if (input[_Mo] != null) {
        bn2.c(XmlNode2.of(_OLRM, input[_Mo]).n(_Mo));
      }
      if (input[_RUD] != null) {
        bn2.c(XmlNode2.of(_Dat, serializeDateTime(input[_RUD]).toString()).n(_RUD));
      }
      return bn2;
    }, "se_ObjectLockRetention");
    se_ObjectLockRule = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_OLRb);
      if (input[_DRe] != null) {
        bn2.c(se_DefaultRetention(input[_DRe], context).n(_DRe));
      }
      return bn2;
    }, "se_ObjectLockRule");
    se_OutputLocation = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_OL);
      if (input[_S_] != null) {
        bn2.c(se_S3Location(input[_S_], context).n(_S_));
      }
      return bn2;
    }, "se_OutputLocation");
    se_OutputSerialization = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_OS);
      if (input[_CSV] != null) {
        bn2.c(se_CSVOutput(input[_CSV], context).n(_CSV));
      }
      if (input[_JSON] != null) {
        bn2.c(se_JSONOutput(input[_JSON], context).n(_JSON));
      }
      return bn2;
    }, "se_OutputSerialization");
    se_Owner = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_O);
      bn2.cc(input, _DN);
      bn2.cc(input, _ID_);
      return bn2;
    }, "se_Owner");
    se_OwnershipControls = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_OC);
      bn2.l(input, "Rules", "Rule", () => se_OwnershipControlsRules(input[_Rul], context));
      return bn2;
    }, "se_OwnershipControls");
    se_OwnershipControlsRule = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_OCR);
      bn2.cc(input, _OO);
      return bn2;
    }, "se_OwnershipControlsRule");
    se_OwnershipControlsRules = /* @__PURE__ */ __name2((input, context) => {
      return input.filter((e2) => e2 != null).map((entry) => {
        const n2 = se_OwnershipControlsRule(entry, context);
        return n2.n(_me);
      });
    }, "se_OwnershipControlsRules");
    se_ParquetInput = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_PI);
      return bn2;
    }, "se_ParquetInput");
    se_PartitionedPrefix = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_PP);
      bn2.cc(input, _PDS);
      return bn2;
    }, "se_PartitionedPrefix");
    se_PublicAccessBlockConfiguration = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_PABC);
      if (input[_BPA] != null) {
        bn2.c(XmlNode2.of(_Se, String(input[_BPA])).n(_BPA));
      }
      if (input[_IPA] != null) {
        bn2.c(XmlNode2.of(_Se, String(input[_IPA])).n(_IPA));
      }
      if (input[_BPP] != null) {
        bn2.c(XmlNode2.of(_Se, String(input[_BPP])).n(_BPP));
      }
      if (input[_RPB] != null) {
        bn2.c(XmlNode2.of(_Se, String(input[_RPB])).n(_RPB));
      }
      return bn2;
    }, "se_PublicAccessBlockConfiguration");
    se_QueueConfiguration = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_QC);
      if (input[_I] != null) {
        bn2.c(XmlNode2.of(_NI, input[_I]).n(_I));
      }
      if (input[_QA] != null) {
        bn2.c(XmlNode2.of(_QA, input[_QA]).n(_Qu));
      }
      bn2.l(input, "Events", "Event", () => se_EventList(input[_Eve], context));
      if (input[_F] != null) {
        bn2.c(se_NotificationConfigurationFilter(input[_F], context).n(_F));
      }
      return bn2;
    }, "se_QueueConfiguration");
    se_QueueConfigurationList = /* @__PURE__ */ __name2((input, context) => {
      return input.filter((e2) => e2 != null).map((entry) => {
        const n2 = se_QueueConfiguration(entry, context);
        return n2.n(_me);
      });
    }, "se_QueueConfigurationList");
    se_RecordExpiration = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_REe);
      if (input[_Exp] != null) {
        bn2.c(XmlNode2.of(_ESxp, input[_Exp]).n(_Exp));
      }
      if (input[_Da] != null) {
        bn2.c(XmlNode2.of(_RED, String(input[_Da])).n(_Da));
      }
      return bn2;
    }, "se_RecordExpiration");
    se_Redirect = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_Red);
      bn2.cc(input, _HN);
      bn2.cc(input, _HRC);
      bn2.cc(input, _Pr);
      bn2.cc(input, _RKPW);
      bn2.cc(input, _RKW);
      return bn2;
    }, "se_Redirect");
    se_RedirectAllRequestsTo = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_RART);
      bn2.cc(input, _HN);
      bn2.cc(input, _Pr);
      return bn2;
    }, "se_RedirectAllRequestsTo");
    se_ReplicaModifications = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_RM);
      if (input[_S] != null) {
        bn2.c(XmlNode2.of(_RMS, input[_S]).n(_S));
      }
      return bn2;
    }, "se_ReplicaModifications");
    se_ReplicationConfiguration = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_RCe);
      bn2.cc(input, _Ro);
      bn2.l(input, "Rules", "Rule", () => se_ReplicationRules(input[_Rul], context));
      return bn2;
    }, "se_ReplicationConfiguration");
    se_ReplicationRule = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_RRe);
      bn2.cc(input, _ID_);
      if (input[_Pri] != null) {
        bn2.c(XmlNode2.of(_Pri, String(input[_Pri])).n(_Pri));
      }
      bn2.cc(input, _P);
      if (input[_F] != null) {
        bn2.c(se_ReplicationRuleFilter(input[_F], context).n(_F));
      }
      if (input[_S] != null) {
        bn2.c(XmlNode2.of(_RRS, input[_S]).n(_S));
      }
      if (input[_SSC] != null) {
        bn2.c(se_SourceSelectionCriteria(input[_SSC], context).n(_SSC));
      }
      if (input[_EOR] != null) {
        bn2.c(se_ExistingObjectReplication(input[_EOR], context).n(_EOR));
      }
      if (input[_Des] != null) {
        bn2.c(se_Destination(input[_Des], context).n(_Des));
      }
      if (input[_DMR] != null) {
        bn2.c(se_DeleteMarkerReplication(input[_DMR], context).n(_DMR));
      }
      return bn2;
    }, "se_ReplicationRule");
    se_ReplicationRuleAndOperator = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_RRAO);
      bn2.cc(input, _P);
      bn2.l(input, "Tags", "Tag", () => se_TagSet(input[_Tag], context));
      return bn2;
    }, "se_ReplicationRuleAndOperator");
    se_ReplicationRuleFilter = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_RRF);
      bn2.cc(input, _P);
      if (input[_Ta] != null) {
        bn2.c(se_Tag(input[_Ta], context).n(_Ta));
      }
      if (input[_A] != null) {
        bn2.c(se_ReplicationRuleAndOperator(input[_A], context).n(_A));
      }
      return bn2;
    }, "se_ReplicationRuleFilter");
    se_ReplicationRules = /* @__PURE__ */ __name2((input, context) => {
      return input.filter((e2) => e2 != null).map((entry) => {
        const n2 = se_ReplicationRule(entry, context);
        return n2.n(_me);
      });
    }, "se_ReplicationRules");
    se_ReplicationTime = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_RTe);
      if (input[_S] != null) {
        bn2.c(XmlNode2.of(_RTS, input[_S]).n(_S));
      }
      if (input[_Tim] != null) {
        bn2.c(se_ReplicationTimeValue(input[_Tim], context).n(_Tim));
      }
      return bn2;
    }, "se_ReplicationTime");
    se_ReplicationTimeValue = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_RTV);
      if (input[_Mi] != null) {
        bn2.c(XmlNode2.of(_Mi, String(input[_Mi])).n(_Mi));
      }
      return bn2;
    }, "se_ReplicationTimeValue");
    se_RequestPaymentConfiguration = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_RPC);
      bn2.cc(input, _Pa);
      return bn2;
    }, "se_RequestPaymentConfiguration");
    se_RequestProgress = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_RPe);
      if (input[_Ena] != null) {
        bn2.c(XmlNode2.of(_ERP, String(input[_Ena])).n(_Ena));
      }
      return bn2;
    }, "se_RequestProgress");
    se_RestoreRequest = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_RRes);
      if (input[_Da] != null) {
        bn2.c(XmlNode2.of(_Da, String(input[_Da])).n(_Da));
      }
      if (input[_GJP] != null) {
        bn2.c(se_GlacierJobParameters(input[_GJP], context).n(_GJP));
      }
      if (input[_Ty] != null) {
        bn2.c(XmlNode2.of(_RRT, input[_Ty]).n(_Ty));
      }
      bn2.cc(input, _Ti);
      bn2.cc(input, _Desc);
      if (input[_SP] != null) {
        bn2.c(se_SelectParameters(input[_SP], context).n(_SP));
      }
      if (input[_OL] != null) {
        bn2.c(se_OutputLocation(input[_OL], context).n(_OL));
      }
      return bn2;
    }, "se_RestoreRequest");
    se_RoutingRule = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_RRou);
      if (input[_Con] != null) {
        bn2.c(se_Condition(input[_Con], context).n(_Con));
      }
      if (input[_Red] != null) {
        bn2.c(se_Redirect(input[_Red], context).n(_Red));
      }
      return bn2;
    }, "se_RoutingRule");
    se_RoutingRules = /* @__PURE__ */ __name2((input, context) => {
      return input.filter((e2) => e2 != null).map((entry) => {
        const n2 = se_RoutingRule(entry, context);
        return n2.n(_RRou);
      });
    }, "se_RoutingRules");
    se_S3KeyFilter = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_SKF);
      bn2.l(input, "FilterRules", "FilterRule", () => se_FilterRuleList(input[_FRi], context));
      return bn2;
    }, "se_S3KeyFilter");
    se_S3Location = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_SL);
      bn2.cc(input, _BN);
      if (input[_P] != null) {
        bn2.c(XmlNode2.of(_LP, input[_P]).n(_P));
      }
      if (input[_En] != null) {
        bn2.c(se_Encryption(input[_En], context).n(_En));
      }
      if (input[_CACL] != null) {
        bn2.c(XmlNode2.of(_OCACL, input[_CACL]).n(_CACL));
      }
      bn2.lc(input, "AccessControlList", "AccessControlList", () => se_Grants(input[_ACLc], context));
      if (input[_T] != null) {
        bn2.c(se_Tagging(input[_T], context).n(_T));
      }
      bn2.lc(input, "UserMetadata", "UserMetadata", () => se_UserMetadata(input[_UM], context));
      bn2.cc(input, _SC);
      return bn2;
    }, "se_S3Location");
    se_S3TablesDestination = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_STD);
      if (input[_TBA] != null) {
        bn2.c(XmlNode2.of(_STBA, input[_TBA]).n(_TBA));
      }
      if (input[_TN] != null) {
        bn2.c(XmlNode2.of(_STN, input[_TN]).n(_TN));
      }
      return bn2;
    }, "se_S3TablesDestination");
    se_ScanRange = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_SR);
      if (input[_St] != null) {
        bn2.c(XmlNode2.of(_St, String(input[_St])).n(_St));
      }
      if (input[_End] != null) {
        bn2.c(XmlNode2.of(_End, String(input[_End])).n(_End));
      }
      return bn2;
    }, "se_ScanRange");
    se_SelectParameters = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_SP);
      if (input[_IS] != null) {
        bn2.c(se_InputSerialization(input[_IS], context).n(_IS));
      }
      bn2.cc(input, _ETx);
      bn2.cc(input, _Ex);
      if (input[_OS] != null) {
        bn2.c(se_OutputSerialization(input[_OS], context).n(_OS));
      }
      return bn2;
    }, "se_SelectParameters");
    se_ServerSideEncryptionByDefault = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_SSEBD);
      if (input[_SSEA] != null) {
        bn2.c(XmlNode2.of(_SSE, input[_SSEA]).n(_SSEA));
      }
      if (input[_KMSMKID] != null) {
        bn2.c(XmlNode2.of(_SSEKMSKI, input[_KMSMKID]).n(_KMSMKID));
      }
      return bn2;
    }, "se_ServerSideEncryptionByDefault");
    se_ServerSideEncryptionConfiguration = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_SSEC);
      bn2.l(input, "Rules", "Rule", () => se_ServerSideEncryptionRules(input[_Rul], context));
      return bn2;
    }, "se_ServerSideEncryptionConfiguration");
    se_ServerSideEncryptionRule = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_SSER);
      if (input[_ASSEBD] != null) {
        bn2.c(se_ServerSideEncryptionByDefault(input[_ASSEBD], context).n(_ASSEBD));
      }
      if (input[_BKE] != null) {
        bn2.c(XmlNode2.of(_BKE, String(input[_BKE])).n(_BKE));
      }
      return bn2;
    }, "se_ServerSideEncryptionRule");
    se_ServerSideEncryptionRules = /* @__PURE__ */ __name2((input, context) => {
      return input.filter((e2) => e2 != null).map((entry) => {
        const n2 = se_ServerSideEncryptionRule(entry, context);
        return n2.n(_me);
      });
    }, "se_ServerSideEncryptionRules");
    se_SimplePrefix = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_SPi);
      return bn2;
    }, "se_SimplePrefix");
    se_SourceSelectionCriteria = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_SSC);
      if (input[_SKEO] != null) {
        bn2.c(se_SseKmsEncryptedObjects(input[_SKEO], context).n(_SKEO));
      }
      if (input[_RM] != null) {
        bn2.c(se_ReplicaModifications(input[_RM], context).n(_RM));
      }
      return bn2;
    }, "se_SourceSelectionCriteria");
    se_SSEKMS = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_SK);
      if (input[_KI] != null) {
        bn2.c(XmlNode2.of(_SSEKMSKI, input[_KI]).n(_KI));
      }
      return bn2;
    }, "se_SSEKMS");
    se_SseKmsEncryptedObjects = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_SKEO);
      if (input[_S] != null) {
        bn2.c(XmlNode2.of(_SKEOS, input[_S]).n(_S));
      }
      return bn2;
    }, "se_SseKmsEncryptedObjects");
    se_SSES3 = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_SS);
      return bn2;
    }, "se_SSES3");
    se_StorageClassAnalysis = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_SCA);
      if (input[_DE] != null) {
        bn2.c(se_StorageClassAnalysisDataExport(input[_DE], context).n(_DE));
      }
      return bn2;
    }, "se_StorageClassAnalysis");
    se_StorageClassAnalysisDataExport = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_SCADE);
      if (input[_OSV] != null) {
        bn2.c(XmlNode2.of(_SCASV, input[_OSV]).n(_OSV));
      }
      if (input[_Des] != null) {
        bn2.c(se_AnalyticsExportDestination(input[_Des], context).n(_Des));
      }
      return bn2;
    }, "se_StorageClassAnalysisDataExport");
    se_Tag = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_Ta);
      if (input[_K] != null) {
        bn2.c(XmlNode2.of(_OK, input[_K]).n(_K));
      }
      bn2.cc(input, _Va);
      return bn2;
    }, "se_Tag");
    se_Tagging = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_T);
      bn2.lc(input, "TagSet", "TagSet", () => se_TagSet(input[_TS], context));
      return bn2;
    }, "se_Tagging");
    se_TagSet = /* @__PURE__ */ __name2((input, context) => {
      return input.filter((e2) => e2 != null).map((entry) => {
        const n2 = se_Tag(entry, context);
        return n2.n(_Ta);
      });
    }, "se_TagSet");
    se_TargetGrant = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_TGa);
      if (input[_Gra] != null) {
        const n2 = se_Grantee(input[_Gra], context).n(_Gra);
        n2.a("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
        bn2.c(n2);
      }
      if (input[_Pe] != null) {
        bn2.c(XmlNode2.of(_BLP, input[_Pe]).n(_Pe));
      }
      return bn2;
    }, "se_TargetGrant");
    se_TargetGrants = /* @__PURE__ */ __name2((input, context) => {
      return input.filter((e2) => e2 != null).map((entry) => {
        const n2 = se_TargetGrant(entry, context);
        return n2.n(_G);
      });
    }, "se_TargetGrants");
    se_TargetObjectKeyFormat = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_TOKF);
      if (input[_SPi] != null) {
        bn2.c(se_SimplePrefix(input[_SPi], context).n(_SPi));
      }
      if (input[_PP] != null) {
        bn2.c(se_PartitionedPrefix(input[_PP], context).n(_PP));
      }
      return bn2;
    }, "se_TargetObjectKeyFormat");
    se_Tiering = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_Tier);
      if (input[_Da] != null) {
        bn2.c(XmlNode2.of(_ITD, String(input[_Da])).n(_Da));
      }
      if (input[_AT] != null) {
        bn2.c(XmlNode2.of(_ITAT, input[_AT]).n(_AT));
      }
      return bn2;
    }, "se_Tiering");
    se_TieringList = /* @__PURE__ */ __name2((input, context) => {
      return input.filter((e2) => e2 != null).map((entry) => {
        const n2 = se_Tiering(entry, context);
        return n2.n(_me);
      });
    }, "se_TieringList");
    se_TopicConfiguration = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_TCo);
      if (input[_I] != null) {
        bn2.c(XmlNode2.of(_NI, input[_I]).n(_I));
      }
      if (input[_TA] != null) {
        bn2.c(XmlNode2.of(_TA, input[_TA]).n(_Top));
      }
      bn2.l(input, "Events", "Event", () => se_EventList(input[_Eve], context));
      if (input[_F] != null) {
        bn2.c(se_NotificationConfigurationFilter(input[_F], context).n(_F));
      }
      return bn2;
    }, "se_TopicConfiguration");
    se_TopicConfigurationList = /* @__PURE__ */ __name2((input, context) => {
      return input.filter((e2) => e2 != null).map((entry) => {
        const n2 = se_TopicConfiguration(entry, context);
        return n2.n(_me);
      });
    }, "se_TopicConfigurationList");
    se_Transition = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_Tra);
      if (input[_Dat] != null) {
        bn2.c(XmlNode2.of(_Dat, serializeDateTime(input[_Dat]).toString()).n(_Dat));
      }
      if (input[_Da] != null) {
        bn2.c(XmlNode2.of(_Da, String(input[_Da])).n(_Da));
      }
      if (input[_SC] != null) {
        bn2.c(XmlNode2.of(_TSC, input[_SC]).n(_SC));
      }
      return bn2;
    }, "se_Transition");
    se_TransitionList = /* @__PURE__ */ __name2((input, context) => {
      return input.filter((e2) => e2 != null).map((entry) => {
        const n2 = se_Transition(entry, context);
        return n2.n(_me);
      });
    }, "se_TransitionList");
    se_UserMetadata = /* @__PURE__ */ __name2((input, context) => {
      return input.filter((e2) => e2 != null).map((entry) => {
        const n2 = se_MetadataEntry(entry, context);
        return n2.n(_ME);
      });
    }, "se_UserMetadata");
    se_VersioningConfiguration = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_VCe);
      if (input[_MFAD] != null) {
        bn2.c(XmlNode2.of(_MFAD, input[_MFAD]).n(_MDf));
      }
      if (input[_S] != null) {
        bn2.c(XmlNode2.of(_BVS, input[_S]).n(_S));
      }
      return bn2;
    }, "se_VersioningConfiguration");
    se_WebsiteConfiguration = /* @__PURE__ */ __name2((input, context) => {
      const bn2 = new XmlNode2(_WC);
      if (input[_ED] != null) {
        bn2.c(se_ErrorDocument(input[_ED], context).n(_ED));
      }
      if (input[_ID] != null) {
        bn2.c(se_IndexDocument(input[_ID], context).n(_ID));
      }
      if (input[_RART] != null) {
        bn2.c(se_RedirectAllRequestsTo(input[_RART], context).n(_RART));
      }
      bn2.lc(input, "RoutingRules", "RoutingRules", () => se_RoutingRules(input[_RRo], context));
      return bn2;
    }, "se_WebsiteConfiguration");
    de_AbortIncompleteMultipartUpload = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_DAI] != null) {
        contents[_DAI] = strictParseInt32(output[_DAI]);
      }
      return contents;
    }, "de_AbortIncompleteMultipartUpload");
    de_AccessControlTranslation = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_O] != null) {
        contents[_O] = expectString(output[_O]);
      }
      return contents;
    }, "de_AccessControlTranslation");
    de_AllowedHeaders = /* @__PURE__ */ __name2((output, context) => {
      return (output || []).filter((e2) => e2 != null).map((entry) => {
        return expectString(entry);
      });
    }, "de_AllowedHeaders");
    de_AllowedMethods = /* @__PURE__ */ __name2((output, context) => {
      return (output || []).filter((e2) => e2 != null).map((entry) => {
        return expectString(entry);
      });
    }, "de_AllowedMethods");
    de_AllowedOrigins = /* @__PURE__ */ __name2((output, context) => {
      return (output || []).filter((e2) => e2 != null).map((entry) => {
        return expectString(entry);
      });
    }, "de_AllowedOrigins");
    de_AnalyticsAndOperator = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_P] != null) {
        contents[_P] = expectString(output[_P]);
      }
      if (output.Tag === "") {
        contents[_Tag] = [];
      } else if (output[_Ta] != null) {
        contents[_Tag] = de_TagSet(getArrayIfSingleItem(output[_Ta]), context);
      }
      return contents;
    }, "de_AnalyticsAndOperator");
    de_AnalyticsConfiguration = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_I] != null) {
        contents[_I] = expectString(output[_I]);
      }
      if (output.Filter === "") {
      } else if (output[_F] != null) {
        contents[_F] = de_AnalyticsFilter(expectUnion(output[_F]), context);
      }
      if (output[_SCA] != null) {
        contents[_SCA] = de_StorageClassAnalysis(output[_SCA], context);
      }
      return contents;
    }, "de_AnalyticsConfiguration");
    de_AnalyticsConfigurationList = /* @__PURE__ */ __name2((output, context) => {
      return (output || []).filter((e2) => e2 != null).map((entry) => {
        return de_AnalyticsConfiguration(entry, context);
      });
    }, "de_AnalyticsConfigurationList");
    de_AnalyticsExportDestination = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_SBD] != null) {
        contents[_SBD] = de_AnalyticsS3BucketDestination(output[_SBD], context);
      }
      return contents;
    }, "de_AnalyticsExportDestination");
    de_AnalyticsFilter = /* @__PURE__ */ __name2((output, context) => {
      if (output[_P] != null) {
        return {
          Prefix: expectString(output[_P])
        };
      }
      if (output[_Ta] != null) {
        return {
          Tag: de_Tag(output[_Ta], context)
        };
      }
      if (output[_A] != null) {
        return {
          And: de_AnalyticsAndOperator(output[_A], context)
        };
      }
      return { $unknown: Object.entries(output)[0] };
    }, "de_AnalyticsFilter");
    de_AnalyticsS3BucketDestination = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_Fo] != null) {
        contents[_Fo] = expectString(output[_Fo]);
      }
      if (output[_BAI] != null) {
        contents[_BAI] = expectString(output[_BAI]);
      }
      if (output[_B] != null) {
        contents[_B] = expectString(output[_B]);
      }
      if (output[_P] != null) {
        contents[_P] = expectString(output[_P]);
      }
      return contents;
    }, "de_AnalyticsS3BucketDestination");
    de_Bucket = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_N] != null) {
        contents[_N] = expectString(output[_N]);
      }
      if (output[_CDr] != null) {
        contents[_CDr] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_CDr]));
      }
      if (output[_BR] != null) {
        contents[_BR] = expectString(output[_BR]);
      }
      if (output[_BA] != null) {
        contents[_BA] = expectString(output[_BA]);
      }
      return contents;
    }, "de_Bucket");
    de_Buckets = /* @__PURE__ */ __name2((output, context) => {
      return (output || []).filter((e2) => e2 != null).map((entry) => {
        return de_Bucket(entry, context);
      });
    }, "de_Buckets");
    de_Checksum = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_CCRC] != null) {
        contents[_CCRC] = expectString(output[_CCRC]);
      }
      if (output[_CCRCC] != null) {
        contents[_CCRCC] = expectString(output[_CCRCC]);
      }
      if (output[_CCRCNVME] != null) {
        contents[_CCRCNVME] = expectString(output[_CCRCNVME]);
      }
      if (output[_CSHA] != null) {
        contents[_CSHA] = expectString(output[_CSHA]);
      }
      if (output[_CSHAh] != null) {
        contents[_CSHAh] = expectString(output[_CSHAh]);
      }
      if (output[_CT] != null) {
        contents[_CT] = expectString(output[_CT]);
      }
      return contents;
    }, "de_Checksum");
    de_ChecksumAlgorithmList = /* @__PURE__ */ __name2((output, context) => {
      return (output || []).filter((e2) => e2 != null).map((entry) => {
        return expectString(entry);
      });
    }, "de_ChecksumAlgorithmList");
    de_CommonPrefix = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_P] != null) {
        contents[_P] = expectString(output[_P]);
      }
      return contents;
    }, "de_CommonPrefix");
    de_CommonPrefixList = /* @__PURE__ */ __name2((output, context) => {
      return (output || []).filter((e2) => e2 != null).map((entry) => {
        return de_CommonPrefix(entry, context);
      });
    }, "de_CommonPrefixList");
    de_Condition = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_HECRE] != null) {
        contents[_HECRE] = expectString(output[_HECRE]);
      }
      if (output[_KPE] != null) {
        contents[_KPE] = expectString(output[_KPE]);
      }
      return contents;
    }, "de_Condition");
    de_ContinuationEvent = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      return contents;
    }, "de_ContinuationEvent");
    de_CopyObjectResult = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_ETa] != null) {
        contents[_ETa] = expectString(output[_ETa]);
      }
      if (output[_LM] != null) {
        contents[_LM] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_LM]));
      }
      if (output[_CT] != null) {
        contents[_CT] = expectString(output[_CT]);
      }
      if (output[_CCRC] != null) {
        contents[_CCRC] = expectString(output[_CCRC]);
      }
      if (output[_CCRCC] != null) {
        contents[_CCRCC] = expectString(output[_CCRCC]);
      }
      if (output[_CCRCNVME] != null) {
        contents[_CCRCNVME] = expectString(output[_CCRCNVME]);
      }
      if (output[_CSHA] != null) {
        contents[_CSHA] = expectString(output[_CSHA]);
      }
      if (output[_CSHAh] != null) {
        contents[_CSHAh] = expectString(output[_CSHAh]);
      }
      return contents;
    }, "de_CopyObjectResult");
    de_CopyPartResult = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_ETa] != null) {
        contents[_ETa] = expectString(output[_ETa]);
      }
      if (output[_LM] != null) {
        contents[_LM] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_LM]));
      }
      if (output[_CCRC] != null) {
        contents[_CCRC] = expectString(output[_CCRC]);
      }
      if (output[_CCRCC] != null) {
        contents[_CCRCC] = expectString(output[_CCRCC]);
      }
      if (output[_CCRCNVME] != null) {
        contents[_CCRCNVME] = expectString(output[_CCRCNVME]);
      }
      if (output[_CSHA] != null) {
        contents[_CSHA] = expectString(output[_CSHA]);
      }
      if (output[_CSHAh] != null) {
        contents[_CSHAh] = expectString(output[_CSHAh]);
      }
      return contents;
    }, "de_CopyPartResult");
    de_CORSRule = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_ID_] != null) {
        contents[_ID_] = expectString(output[_ID_]);
      }
      if (output.AllowedHeader === "") {
        contents[_AHl] = [];
      } else if (output[_AH] != null) {
        contents[_AHl] = de_AllowedHeaders(getArrayIfSingleItem(output[_AH]), context);
      }
      if (output.AllowedMethod === "") {
        contents[_AMl] = [];
      } else if (output[_AM] != null) {
        contents[_AMl] = de_AllowedMethods(getArrayIfSingleItem(output[_AM]), context);
      }
      if (output.AllowedOrigin === "") {
        contents[_AOl] = [];
      } else if (output[_AO] != null) {
        contents[_AOl] = de_AllowedOrigins(getArrayIfSingleItem(output[_AO]), context);
      }
      if (output.ExposeHeader === "") {
        contents[_EH] = [];
      } else if (output[_EHx] != null) {
        contents[_EH] = de_ExposeHeaders(getArrayIfSingleItem(output[_EHx]), context);
      }
      if (output[_MAS] != null) {
        contents[_MAS] = strictParseInt32(output[_MAS]);
      }
      return contents;
    }, "de_CORSRule");
    de_CORSRules = /* @__PURE__ */ __name2((output, context) => {
      return (output || []).filter((e2) => e2 != null).map((entry) => {
        return de_CORSRule(entry, context);
      });
    }, "de_CORSRules");
    de_DefaultRetention = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_Mo] != null) {
        contents[_Mo] = expectString(output[_Mo]);
      }
      if (output[_Da] != null) {
        contents[_Da] = strictParseInt32(output[_Da]);
      }
      if (output[_Y] != null) {
        contents[_Y] = strictParseInt32(output[_Y]);
      }
      return contents;
    }, "de_DefaultRetention");
    de_DeletedObject = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_K] != null) {
        contents[_K] = expectString(output[_K]);
      }
      if (output[_VI] != null) {
        contents[_VI] = expectString(output[_VI]);
      }
      if (output[_DM] != null) {
        contents[_DM] = parseBoolean(output[_DM]);
      }
      if (output[_DMVI] != null) {
        contents[_DMVI] = expectString(output[_DMVI]);
      }
      return contents;
    }, "de_DeletedObject");
    de_DeletedObjects = /* @__PURE__ */ __name2((output, context) => {
      return (output || []).filter((e2) => e2 != null).map((entry) => {
        return de_DeletedObject(entry, context);
      });
    }, "de_DeletedObjects");
    de_DeleteMarkerEntry = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_O] != null) {
        contents[_O] = de_Owner(output[_O], context);
      }
      if (output[_K] != null) {
        contents[_K] = expectString(output[_K]);
      }
      if (output[_VI] != null) {
        contents[_VI] = expectString(output[_VI]);
      }
      if (output[_IL] != null) {
        contents[_IL] = parseBoolean(output[_IL]);
      }
      if (output[_LM] != null) {
        contents[_LM] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_LM]));
      }
      return contents;
    }, "de_DeleteMarkerEntry");
    de_DeleteMarkerReplication = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_S] != null) {
        contents[_S] = expectString(output[_S]);
      }
      return contents;
    }, "de_DeleteMarkerReplication");
    de_DeleteMarkers = /* @__PURE__ */ __name2((output, context) => {
      return (output || []).filter((e2) => e2 != null).map((entry) => {
        return de_DeleteMarkerEntry(entry, context);
      });
    }, "de_DeleteMarkers");
    de_Destination = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_B] != null) {
        contents[_B] = expectString(output[_B]);
      }
      if (output[_Ac] != null) {
        contents[_Ac] = expectString(output[_Ac]);
      }
      if (output[_SC] != null) {
        contents[_SC] = expectString(output[_SC]);
      }
      if (output[_ACT] != null) {
        contents[_ACT] = de_AccessControlTranslation(output[_ACT], context);
      }
      if (output[_ECn] != null) {
        contents[_ECn] = de_EncryptionConfiguration(output[_ECn], context);
      }
      if (output[_RTe] != null) {
        contents[_RTe] = de_ReplicationTime(output[_RTe], context);
      }
      if (output[_Me] != null) {
        contents[_Me] = de_Metrics(output[_Me], context);
      }
      return contents;
    }, "de_Destination");
    de_DestinationResult = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_TBT] != null) {
        contents[_TBT] = expectString(output[_TBT]);
      }
      if (output[_TBA] != null) {
        contents[_TBA] = expectString(output[_TBA]);
      }
      if (output[_TNa] != null) {
        contents[_TNa] = expectString(output[_TNa]);
      }
      return contents;
    }, "de_DestinationResult");
    de_EncryptionConfiguration = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_RKKID] != null) {
        contents[_RKKID] = expectString(output[_RKKID]);
      }
      return contents;
    }, "de_EncryptionConfiguration");
    de_EndEvent = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      return contents;
    }, "de_EndEvent");
    de__Error = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_K] != null) {
        contents[_K] = expectString(output[_K]);
      }
      if (output[_VI] != null) {
        contents[_VI] = expectString(output[_VI]);
      }
      if (output[_Cod] != null) {
        contents[_Cod] = expectString(output[_Cod]);
      }
      if (output[_Mes] != null) {
        contents[_Mes] = expectString(output[_Mes]);
      }
      return contents;
    }, "de__Error");
    de_ErrorDetails = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_EC] != null) {
        contents[_EC] = expectString(output[_EC]);
      }
      if (output[_EM] != null) {
        contents[_EM] = expectString(output[_EM]);
      }
      return contents;
    }, "de_ErrorDetails");
    de_ErrorDocument = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_K] != null) {
        contents[_K] = expectString(output[_K]);
      }
      return contents;
    }, "de_ErrorDocument");
    de_Errors = /* @__PURE__ */ __name2((output, context) => {
      return (output || []).filter((e2) => e2 != null).map((entry) => {
        return de__Error(entry, context);
      });
    }, "de_Errors");
    de_EventBridgeConfiguration = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      return contents;
    }, "de_EventBridgeConfiguration");
    de_EventList = /* @__PURE__ */ __name2((output, context) => {
      return (output || []).filter((e2) => e2 != null).map((entry) => {
        return expectString(entry);
      });
    }, "de_EventList");
    de_ExistingObjectReplication = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_S] != null) {
        contents[_S] = expectString(output[_S]);
      }
      return contents;
    }, "de_ExistingObjectReplication");
    de_ExposeHeaders = /* @__PURE__ */ __name2((output, context) => {
      return (output || []).filter((e2) => e2 != null).map((entry) => {
        return expectString(entry);
      });
    }, "de_ExposeHeaders");
    de_FilterRule = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_N] != null) {
        contents[_N] = expectString(output[_N]);
      }
      if (output[_Va] != null) {
        contents[_Va] = expectString(output[_Va]);
      }
      return contents;
    }, "de_FilterRule");
    de_FilterRuleList = /* @__PURE__ */ __name2((output, context) => {
      return (output || []).filter((e2) => e2 != null).map((entry) => {
        return de_FilterRule(entry, context);
      });
    }, "de_FilterRuleList");
    de_GetBucketMetadataConfigurationResult = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_MCR] != null) {
        contents[_MCR] = de_MetadataConfigurationResult(output[_MCR], context);
      }
      return contents;
    }, "de_GetBucketMetadataConfigurationResult");
    de_GetBucketMetadataTableConfigurationResult = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_MTCR] != null) {
        contents[_MTCR] = de_MetadataTableConfigurationResult(output[_MTCR], context);
      }
      if (output[_S] != null) {
        contents[_S] = expectString(output[_S]);
      }
      if (output[_Er] != null) {
        contents[_Er] = de_ErrorDetails(output[_Er], context);
      }
      return contents;
    }, "de_GetBucketMetadataTableConfigurationResult");
    de_GetObjectAttributesParts = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_PC] != null) {
        contents[_TPC] = strictParseInt32(output[_PC]);
      }
      if (output[_PNM] != null) {
        contents[_PNM] = expectString(output[_PNM]);
      }
      if (output[_NPNM] != null) {
        contents[_NPNM] = expectString(output[_NPNM]);
      }
      if (output[_MP] != null) {
        contents[_MP] = strictParseInt32(output[_MP]);
      }
      if (output[_IT] != null) {
        contents[_IT] = parseBoolean(output[_IT]);
      }
      if (output.Part === "") {
        contents[_Part] = [];
      } else if (output[_Par] != null) {
        contents[_Part] = de_PartsList(getArrayIfSingleItem(output[_Par]), context);
      }
      return contents;
    }, "de_GetObjectAttributesParts");
    de_Grant = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_Gra] != null) {
        contents[_Gra] = de_Grantee(output[_Gra], context);
      }
      if (output[_Pe] != null) {
        contents[_Pe] = expectString(output[_Pe]);
      }
      return contents;
    }, "de_Grant");
    de_Grantee = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_DN] != null) {
        contents[_DN] = expectString(output[_DN]);
      }
      if (output[_EA] != null) {
        contents[_EA] = expectString(output[_EA]);
      }
      if (output[_ID_] != null) {
        contents[_ID_] = expectString(output[_ID_]);
      }
      if (output[_URI] != null) {
        contents[_URI] = expectString(output[_URI]);
      }
      if (output[_x] != null) {
        contents[_Ty] = expectString(output[_x]);
      }
      return contents;
    }, "de_Grantee");
    de_Grants = /* @__PURE__ */ __name2((output, context) => {
      return (output || []).filter((e2) => e2 != null).map((entry) => {
        return de_Grant(entry, context);
      });
    }, "de_Grants");
    de_IndexDocument = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_Su] != null) {
        contents[_Su] = expectString(output[_Su]);
      }
      return contents;
    }, "de_IndexDocument");
    de_Initiator = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_ID_] != null) {
        contents[_ID_] = expectString(output[_ID_]);
      }
      if (output[_DN] != null) {
        contents[_DN] = expectString(output[_DN]);
      }
      return contents;
    }, "de_Initiator");
    de_IntelligentTieringAndOperator = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_P] != null) {
        contents[_P] = expectString(output[_P]);
      }
      if (output.Tag === "") {
        contents[_Tag] = [];
      } else if (output[_Ta] != null) {
        contents[_Tag] = de_TagSet(getArrayIfSingleItem(output[_Ta]), context);
      }
      return contents;
    }, "de_IntelligentTieringAndOperator");
    de_IntelligentTieringConfiguration = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_I] != null) {
        contents[_I] = expectString(output[_I]);
      }
      if (output[_F] != null) {
        contents[_F] = de_IntelligentTieringFilter(output[_F], context);
      }
      if (output[_S] != null) {
        contents[_S] = expectString(output[_S]);
      }
      if (output.Tiering === "") {
        contents[_Tie] = [];
      } else if (output[_Tier] != null) {
        contents[_Tie] = de_TieringList(getArrayIfSingleItem(output[_Tier]), context);
      }
      return contents;
    }, "de_IntelligentTieringConfiguration");
    de_IntelligentTieringConfigurationList = /* @__PURE__ */ __name2((output, context) => {
      return (output || []).filter((e2) => e2 != null).map((entry) => {
        return de_IntelligentTieringConfiguration(entry, context);
      });
    }, "de_IntelligentTieringConfigurationList");
    de_IntelligentTieringFilter = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_P] != null) {
        contents[_P] = expectString(output[_P]);
      }
      if (output[_Ta] != null) {
        contents[_Ta] = de_Tag(output[_Ta], context);
      }
      if (output[_A] != null) {
        contents[_A] = de_IntelligentTieringAndOperator(output[_A], context);
      }
      return contents;
    }, "de_IntelligentTieringFilter");
    de_InventoryConfiguration = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_Des] != null) {
        contents[_Des] = de_InventoryDestination(output[_Des], context);
      }
      if (output[_IE] != null) {
        contents[_IE] = parseBoolean(output[_IE]);
      }
      if (output[_F] != null) {
        contents[_F] = de_InventoryFilter(output[_F], context);
      }
      if (output[_I] != null) {
        contents[_I] = expectString(output[_I]);
      }
      if (output[_IOV] != null) {
        contents[_IOV] = expectString(output[_IOV]);
      }
      if (output.OptionalFields === "") {
        contents[_OF] = [];
      } else if (output[_OF] != null && output[_OF][_Fi] != null) {
        contents[_OF] = de_InventoryOptionalFields(getArrayIfSingleItem(output[_OF][_Fi]), context);
      }
      if (output[_Sc] != null) {
        contents[_Sc] = de_InventorySchedule(output[_Sc], context);
      }
      return contents;
    }, "de_InventoryConfiguration");
    de_InventoryConfigurationList = /* @__PURE__ */ __name2((output, context) => {
      return (output || []).filter((e2) => e2 != null).map((entry) => {
        return de_InventoryConfiguration(entry, context);
      });
    }, "de_InventoryConfigurationList");
    de_InventoryDestination = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_SBD] != null) {
        contents[_SBD] = de_InventoryS3BucketDestination(output[_SBD], context);
      }
      return contents;
    }, "de_InventoryDestination");
    de_InventoryEncryption = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_SS] != null) {
        contents[_SSES] = de_SSES3(output[_SS], context);
      }
      if (output[_SK] != null) {
        contents[_SSEKMS] = de_SSEKMS(output[_SK], context);
      }
      return contents;
    }, "de_InventoryEncryption");
    de_InventoryFilter = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_P] != null) {
        contents[_P] = expectString(output[_P]);
      }
      return contents;
    }, "de_InventoryFilter");
    de_InventoryOptionalFields = /* @__PURE__ */ __name2((output, context) => {
      return (output || []).filter((e2) => e2 != null).map((entry) => {
        return expectString(entry);
      });
    }, "de_InventoryOptionalFields");
    de_InventoryS3BucketDestination = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_AIc] != null) {
        contents[_AIc] = expectString(output[_AIc]);
      }
      if (output[_B] != null) {
        contents[_B] = expectString(output[_B]);
      }
      if (output[_Fo] != null) {
        contents[_Fo] = expectString(output[_Fo]);
      }
      if (output[_P] != null) {
        contents[_P] = expectString(output[_P]);
      }
      if (output[_En] != null) {
        contents[_En] = de_InventoryEncryption(output[_En], context);
      }
      return contents;
    }, "de_InventoryS3BucketDestination");
    de_InventorySchedule = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_Fr] != null) {
        contents[_Fr] = expectString(output[_Fr]);
      }
      return contents;
    }, "de_InventorySchedule");
    de_InventoryTableConfigurationResult = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_CSo] != null) {
        contents[_CSo] = expectString(output[_CSo]);
      }
      if (output[_TSa] != null) {
        contents[_TSa] = expectString(output[_TSa]);
      }
      if (output[_Er] != null) {
        contents[_Er] = de_ErrorDetails(output[_Er], context);
      }
      if (output[_TN] != null) {
        contents[_TN] = expectString(output[_TN]);
      }
      if (output[_TAa] != null) {
        contents[_TAa] = expectString(output[_TAa]);
      }
      return contents;
    }, "de_InventoryTableConfigurationResult");
    de_JournalTableConfigurationResult = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_TSa] != null) {
        contents[_TSa] = expectString(output[_TSa]);
      }
      if (output[_Er] != null) {
        contents[_Er] = de_ErrorDetails(output[_Er], context);
      }
      if (output[_TN] != null) {
        contents[_TN] = expectString(output[_TN]);
      }
      if (output[_TAa] != null) {
        contents[_TAa] = expectString(output[_TAa]);
      }
      if (output[_REe] != null) {
        contents[_REe] = de_RecordExpiration(output[_REe], context);
      }
      return contents;
    }, "de_JournalTableConfigurationResult");
    de_LambdaFunctionConfiguration = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_I] != null) {
        contents[_I] = expectString(output[_I]);
      }
      if (output[_CF] != null) {
        contents[_LFA] = expectString(output[_CF]);
      }
      if (output.Event === "") {
        contents[_Eve] = [];
      } else if (output[_Ev] != null) {
        contents[_Eve] = de_EventList(getArrayIfSingleItem(output[_Ev]), context);
      }
      if (output[_F] != null) {
        contents[_F] = de_NotificationConfigurationFilter(output[_F], context);
      }
      return contents;
    }, "de_LambdaFunctionConfiguration");
    de_LambdaFunctionConfigurationList = /* @__PURE__ */ __name2((output, context) => {
      return (output || []).filter((e2) => e2 != null).map((entry) => {
        return de_LambdaFunctionConfiguration(entry, context);
      });
    }, "de_LambdaFunctionConfigurationList");
    de_LifecycleExpiration = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_Dat] != null) {
        contents[_Dat] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_Dat]));
      }
      if (output[_Da] != null) {
        contents[_Da] = strictParseInt32(output[_Da]);
      }
      if (output[_EODM] != null) {
        contents[_EODM] = parseBoolean(output[_EODM]);
      }
      return contents;
    }, "de_LifecycleExpiration");
    de_LifecycleRule = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_Exp] != null) {
        contents[_Exp] = de_LifecycleExpiration(output[_Exp], context);
      }
      if (output[_ID_] != null) {
        contents[_ID_] = expectString(output[_ID_]);
      }
      if (output[_P] != null) {
        contents[_P] = expectString(output[_P]);
      }
      if (output[_F] != null) {
        contents[_F] = de_LifecycleRuleFilter(output[_F], context);
      }
      if (output[_S] != null) {
        contents[_S] = expectString(output[_S]);
      }
      if (output.Transition === "") {
        contents[_Tr] = [];
      } else if (output[_Tra] != null) {
        contents[_Tr] = de_TransitionList(getArrayIfSingleItem(output[_Tra]), context);
      }
      if (output.NoncurrentVersionTransition === "") {
        contents[_NVT] = [];
      } else if (output[_NVTo] != null) {
        contents[_NVT] = de_NoncurrentVersionTransitionList(getArrayIfSingleItem(output[_NVTo]), context);
      }
      if (output[_NVE] != null) {
        contents[_NVE] = de_NoncurrentVersionExpiration(output[_NVE], context);
      }
      if (output[_AIMU] != null) {
        contents[_AIMU] = de_AbortIncompleteMultipartUpload(output[_AIMU], context);
      }
      return contents;
    }, "de_LifecycleRule");
    de_LifecycleRuleAndOperator = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_P] != null) {
        contents[_P] = expectString(output[_P]);
      }
      if (output.Tag === "") {
        contents[_Tag] = [];
      } else if (output[_Ta] != null) {
        contents[_Tag] = de_TagSet(getArrayIfSingleItem(output[_Ta]), context);
      }
      if (output[_OSGT] != null) {
        contents[_OSGT] = strictParseLong(output[_OSGT]);
      }
      if (output[_OSLT] != null) {
        contents[_OSLT] = strictParseLong(output[_OSLT]);
      }
      return contents;
    }, "de_LifecycleRuleAndOperator");
    de_LifecycleRuleFilter = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_P] != null) {
        contents[_P] = expectString(output[_P]);
      }
      if (output[_Ta] != null) {
        contents[_Ta] = de_Tag(output[_Ta], context);
      }
      if (output[_OSGT] != null) {
        contents[_OSGT] = strictParseLong(output[_OSGT]);
      }
      if (output[_OSLT] != null) {
        contents[_OSLT] = strictParseLong(output[_OSLT]);
      }
      if (output[_A] != null) {
        contents[_A] = de_LifecycleRuleAndOperator(output[_A], context);
      }
      return contents;
    }, "de_LifecycleRuleFilter");
    de_LifecycleRules = /* @__PURE__ */ __name2((output, context) => {
      return (output || []).filter((e2) => e2 != null).map((entry) => {
        return de_LifecycleRule(entry, context);
      });
    }, "de_LifecycleRules");
    de_LoggingEnabled = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_TB] != null) {
        contents[_TB] = expectString(output[_TB]);
      }
      if (output.TargetGrants === "") {
        contents[_TG] = [];
      } else if (output[_TG] != null && output[_TG][_G] != null) {
        contents[_TG] = de_TargetGrants(getArrayIfSingleItem(output[_TG][_G]), context);
      }
      if (output[_TP] != null) {
        contents[_TP] = expectString(output[_TP]);
      }
      if (output[_TOKF] != null) {
        contents[_TOKF] = de_TargetObjectKeyFormat(output[_TOKF], context);
      }
      return contents;
    }, "de_LoggingEnabled");
    de_MetadataConfigurationResult = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_DRes] != null) {
        contents[_DRes] = de_DestinationResult(output[_DRes], context);
      }
      if (output[_JTCR] != null) {
        contents[_JTCR] = de_JournalTableConfigurationResult(output[_JTCR], context);
      }
      if (output[_ITCR] != null) {
        contents[_ITCR] = de_InventoryTableConfigurationResult(output[_ITCR], context);
      }
      return contents;
    }, "de_MetadataConfigurationResult");
    de_MetadataTableConfigurationResult = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_STDR] != null) {
        contents[_STDR] = de_S3TablesDestinationResult(output[_STDR], context);
      }
      return contents;
    }, "de_MetadataTableConfigurationResult");
    de_Metrics = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_S] != null) {
        contents[_S] = expectString(output[_S]);
      }
      if (output[_ETv] != null) {
        contents[_ETv] = de_ReplicationTimeValue(output[_ETv], context);
      }
      return contents;
    }, "de_Metrics");
    de_MetricsAndOperator = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_P] != null) {
        contents[_P] = expectString(output[_P]);
      }
      if (output.Tag === "") {
        contents[_Tag] = [];
      } else if (output[_Ta] != null) {
        contents[_Tag] = de_TagSet(getArrayIfSingleItem(output[_Ta]), context);
      }
      if (output[_APAc] != null) {
        contents[_APAc] = expectString(output[_APAc]);
      }
      return contents;
    }, "de_MetricsAndOperator");
    de_MetricsConfiguration = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_I] != null) {
        contents[_I] = expectString(output[_I]);
      }
      if (output.Filter === "") {
      } else if (output[_F] != null) {
        contents[_F] = de_MetricsFilter(expectUnion(output[_F]), context);
      }
      return contents;
    }, "de_MetricsConfiguration");
    de_MetricsConfigurationList = /* @__PURE__ */ __name2((output, context) => {
      return (output || []).filter((e2) => e2 != null).map((entry) => {
        return de_MetricsConfiguration(entry, context);
      });
    }, "de_MetricsConfigurationList");
    de_MetricsFilter = /* @__PURE__ */ __name2((output, context) => {
      if (output[_P] != null) {
        return {
          Prefix: expectString(output[_P])
        };
      }
      if (output[_Ta] != null) {
        return {
          Tag: de_Tag(output[_Ta], context)
        };
      }
      if (output[_APAc] != null) {
        return {
          AccessPointArn: expectString(output[_APAc])
        };
      }
      if (output[_A] != null) {
        return {
          And: de_MetricsAndOperator(output[_A], context)
        };
      }
      return { $unknown: Object.entries(output)[0] };
    }, "de_MetricsFilter");
    de_MultipartUpload = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_UI] != null) {
        contents[_UI] = expectString(output[_UI]);
      }
      if (output[_K] != null) {
        contents[_K] = expectString(output[_K]);
      }
      if (output[_Ini] != null) {
        contents[_Ini] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_Ini]));
      }
      if (output[_SC] != null) {
        contents[_SC] = expectString(output[_SC]);
      }
      if (output[_O] != null) {
        contents[_O] = de_Owner(output[_O], context);
      }
      if (output[_In] != null) {
        contents[_In] = de_Initiator(output[_In], context);
      }
      if (output[_CA] != null) {
        contents[_CA] = expectString(output[_CA]);
      }
      if (output[_CT] != null) {
        contents[_CT] = expectString(output[_CT]);
      }
      return contents;
    }, "de_MultipartUpload");
    de_MultipartUploadList = /* @__PURE__ */ __name2((output, context) => {
      return (output || []).filter((e2) => e2 != null).map((entry) => {
        return de_MultipartUpload(entry, context);
      });
    }, "de_MultipartUploadList");
    de_NoncurrentVersionExpiration = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_ND] != null) {
        contents[_ND] = strictParseInt32(output[_ND]);
      }
      if (output[_NNV] != null) {
        contents[_NNV] = strictParseInt32(output[_NNV]);
      }
      return contents;
    }, "de_NoncurrentVersionExpiration");
    de_NoncurrentVersionTransition = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_ND] != null) {
        contents[_ND] = strictParseInt32(output[_ND]);
      }
      if (output[_SC] != null) {
        contents[_SC] = expectString(output[_SC]);
      }
      if (output[_NNV] != null) {
        contents[_NNV] = strictParseInt32(output[_NNV]);
      }
      return contents;
    }, "de_NoncurrentVersionTransition");
    de_NoncurrentVersionTransitionList = /* @__PURE__ */ __name2((output, context) => {
      return (output || []).filter((e2) => e2 != null).map((entry) => {
        return de_NoncurrentVersionTransition(entry, context);
      });
    }, "de_NoncurrentVersionTransitionList");
    de_NotificationConfigurationFilter = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_SKe] != null) {
        contents[_K] = de_S3KeyFilter(output[_SKe], context);
      }
      return contents;
    }, "de_NotificationConfigurationFilter");
    de__Object = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_K] != null) {
        contents[_K] = expectString(output[_K]);
      }
      if (output[_LM] != null) {
        contents[_LM] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_LM]));
      }
      if (output[_ETa] != null) {
        contents[_ETa] = expectString(output[_ETa]);
      }
      if (output.ChecksumAlgorithm === "") {
        contents[_CA] = [];
      } else if (output[_CA] != null) {
        contents[_CA] = de_ChecksumAlgorithmList(getArrayIfSingleItem(output[_CA]), context);
      }
      if (output[_CT] != null) {
        contents[_CT] = expectString(output[_CT]);
      }
      if (output[_Si] != null) {
        contents[_Si] = strictParseLong(output[_Si]);
      }
      if (output[_SC] != null) {
        contents[_SC] = expectString(output[_SC]);
      }
      if (output[_O] != null) {
        contents[_O] = de_Owner(output[_O], context);
      }
      if (output[_RSes] != null) {
        contents[_RSes] = de_RestoreStatus(output[_RSes], context);
      }
      return contents;
    }, "de__Object");
    de_ObjectList = /* @__PURE__ */ __name2((output, context) => {
      return (output || []).filter((e2) => e2 != null).map((entry) => {
        return de__Object(entry, context);
      });
    }, "de_ObjectList");
    de_ObjectLockConfiguration = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_OLE] != null) {
        contents[_OLE] = expectString(output[_OLE]);
      }
      if (output[_Ru] != null) {
        contents[_Ru] = de_ObjectLockRule(output[_Ru], context);
      }
      return contents;
    }, "de_ObjectLockConfiguration");
    de_ObjectLockLegalHold = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_S] != null) {
        contents[_S] = expectString(output[_S]);
      }
      return contents;
    }, "de_ObjectLockLegalHold");
    de_ObjectLockRetention = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_Mo] != null) {
        contents[_Mo] = expectString(output[_Mo]);
      }
      if (output[_RUD] != null) {
        contents[_RUD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_RUD]));
      }
      return contents;
    }, "de_ObjectLockRetention");
    de_ObjectLockRule = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_DRe] != null) {
        contents[_DRe] = de_DefaultRetention(output[_DRe], context);
      }
      return contents;
    }, "de_ObjectLockRule");
    de_ObjectPart = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_PN] != null) {
        contents[_PN] = strictParseInt32(output[_PN]);
      }
      if (output[_Si] != null) {
        contents[_Si] = strictParseLong(output[_Si]);
      }
      if (output[_CCRC] != null) {
        contents[_CCRC] = expectString(output[_CCRC]);
      }
      if (output[_CCRCC] != null) {
        contents[_CCRCC] = expectString(output[_CCRCC]);
      }
      if (output[_CCRCNVME] != null) {
        contents[_CCRCNVME] = expectString(output[_CCRCNVME]);
      }
      if (output[_CSHA] != null) {
        contents[_CSHA] = expectString(output[_CSHA]);
      }
      if (output[_CSHAh] != null) {
        contents[_CSHAh] = expectString(output[_CSHAh]);
      }
      return contents;
    }, "de_ObjectPart");
    de_ObjectVersion = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_ETa] != null) {
        contents[_ETa] = expectString(output[_ETa]);
      }
      if (output.ChecksumAlgorithm === "") {
        contents[_CA] = [];
      } else if (output[_CA] != null) {
        contents[_CA] = de_ChecksumAlgorithmList(getArrayIfSingleItem(output[_CA]), context);
      }
      if (output[_CT] != null) {
        contents[_CT] = expectString(output[_CT]);
      }
      if (output[_Si] != null) {
        contents[_Si] = strictParseLong(output[_Si]);
      }
      if (output[_SC] != null) {
        contents[_SC] = expectString(output[_SC]);
      }
      if (output[_K] != null) {
        contents[_K] = expectString(output[_K]);
      }
      if (output[_VI] != null) {
        contents[_VI] = expectString(output[_VI]);
      }
      if (output[_IL] != null) {
        contents[_IL] = parseBoolean(output[_IL]);
      }
      if (output[_LM] != null) {
        contents[_LM] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_LM]));
      }
      if (output[_O] != null) {
        contents[_O] = de_Owner(output[_O], context);
      }
      if (output[_RSes] != null) {
        contents[_RSes] = de_RestoreStatus(output[_RSes], context);
      }
      return contents;
    }, "de_ObjectVersion");
    de_ObjectVersionList = /* @__PURE__ */ __name2((output, context) => {
      return (output || []).filter((e2) => e2 != null).map((entry) => {
        return de_ObjectVersion(entry, context);
      });
    }, "de_ObjectVersionList");
    de_Owner = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_DN] != null) {
        contents[_DN] = expectString(output[_DN]);
      }
      if (output[_ID_] != null) {
        contents[_ID_] = expectString(output[_ID_]);
      }
      return contents;
    }, "de_Owner");
    de_OwnershipControls = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output.Rule === "") {
        contents[_Rul] = [];
      } else if (output[_Ru] != null) {
        contents[_Rul] = de_OwnershipControlsRules(getArrayIfSingleItem(output[_Ru]), context);
      }
      return contents;
    }, "de_OwnershipControls");
    de_OwnershipControlsRule = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_OO] != null) {
        contents[_OO] = expectString(output[_OO]);
      }
      return contents;
    }, "de_OwnershipControlsRule");
    de_OwnershipControlsRules = /* @__PURE__ */ __name2((output, context) => {
      return (output || []).filter((e2) => e2 != null).map((entry) => {
        return de_OwnershipControlsRule(entry, context);
      });
    }, "de_OwnershipControlsRules");
    de_Part = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_PN] != null) {
        contents[_PN] = strictParseInt32(output[_PN]);
      }
      if (output[_LM] != null) {
        contents[_LM] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_LM]));
      }
      if (output[_ETa] != null) {
        contents[_ETa] = expectString(output[_ETa]);
      }
      if (output[_Si] != null) {
        contents[_Si] = strictParseLong(output[_Si]);
      }
      if (output[_CCRC] != null) {
        contents[_CCRC] = expectString(output[_CCRC]);
      }
      if (output[_CCRCC] != null) {
        contents[_CCRCC] = expectString(output[_CCRCC]);
      }
      if (output[_CCRCNVME] != null) {
        contents[_CCRCNVME] = expectString(output[_CCRCNVME]);
      }
      if (output[_CSHA] != null) {
        contents[_CSHA] = expectString(output[_CSHA]);
      }
      if (output[_CSHAh] != null) {
        contents[_CSHAh] = expectString(output[_CSHAh]);
      }
      return contents;
    }, "de_Part");
    de_PartitionedPrefix = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_PDS] != null) {
        contents[_PDS] = expectString(output[_PDS]);
      }
      return contents;
    }, "de_PartitionedPrefix");
    de_Parts = /* @__PURE__ */ __name2((output, context) => {
      return (output || []).filter((e2) => e2 != null).map((entry) => {
        return de_Part(entry, context);
      });
    }, "de_Parts");
    de_PartsList = /* @__PURE__ */ __name2((output, context) => {
      return (output || []).filter((e2) => e2 != null).map((entry) => {
        return de_ObjectPart(entry, context);
      });
    }, "de_PartsList");
    de_PolicyStatus = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_IP] != null) {
        contents[_IP] = parseBoolean(output[_IP]);
      }
      return contents;
    }, "de_PolicyStatus");
    de_Progress = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_BS] != null) {
        contents[_BS] = strictParseLong(output[_BS]);
      }
      if (output[_BP] != null) {
        contents[_BP] = strictParseLong(output[_BP]);
      }
      if (output[_BRy] != null) {
        contents[_BRy] = strictParseLong(output[_BRy]);
      }
      return contents;
    }, "de_Progress");
    de_PublicAccessBlockConfiguration = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_BPA] != null) {
        contents[_BPA] = parseBoolean(output[_BPA]);
      }
      if (output[_IPA] != null) {
        contents[_IPA] = parseBoolean(output[_IPA]);
      }
      if (output[_BPP] != null) {
        contents[_BPP] = parseBoolean(output[_BPP]);
      }
      if (output[_RPB] != null) {
        contents[_RPB] = parseBoolean(output[_RPB]);
      }
      return contents;
    }, "de_PublicAccessBlockConfiguration");
    de_QueueConfiguration = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_I] != null) {
        contents[_I] = expectString(output[_I]);
      }
      if (output[_Qu] != null) {
        contents[_QA] = expectString(output[_Qu]);
      }
      if (output.Event === "") {
        contents[_Eve] = [];
      } else if (output[_Ev] != null) {
        contents[_Eve] = de_EventList(getArrayIfSingleItem(output[_Ev]), context);
      }
      if (output[_F] != null) {
        contents[_F] = de_NotificationConfigurationFilter(output[_F], context);
      }
      return contents;
    }, "de_QueueConfiguration");
    de_QueueConfigurationList = /* @__PURE__ */ __name2((output, context) => {
      return (output || []).filter((e2) => e2 != null).map((entry) => {
        return de_QueueConfiguration(entry, context);
      });
    }, "de_QueueConfigurationList");
    de_RecordExpiration = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_Exp] != null) {
        contents[_Exp] = expectString(output[_Exp]);
      }
      if (output[_Da] != null) {
        contents[_Da] = strictParseInt32(output[_Da]);
      }
      return contents;
    }, "de_RecordExpiration");
    de_Redirect = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_HN] != null) {
        contents[_HN] = expectString(output[_HN]);
      }
      if (output[_HRC] != null) {
        contents[_HRC] = expectString(output[_HRC]);
      }
      if (output[_Pr] != null) {
        contents[_Pr] = expectString(output[_Pr]);
      }
      if (output[_RKPW] != null) {
        contents[_RKPW] = expectString(output[_RKPW]);
      }
      if (output[_RKW] != null) {
        contents[_RKW] = expectString(output[_RKW]);
      }
      return contents;
    }, "de_Redirect");
    de_RedirectAllRequestsTo = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_HN] != null) {
        contents[_HN] = expectString(output[_HN]);
      }
      if (output[_Pr] != null) {
        contents[_Pr] = expectString(output[_Pr]);
      }
      return contents;
    }, "de_RedirectAllRequestsTo");
    de_ReplicaModifications = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_S] != null) {
        contents[_S] = expectString(output[_S]);
      }
      return contents;
    }, "de_ReplicaModifications");
    de_ReplicationConfiguration = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_Ro] != null) {
        contents[_Ro] = expectString(output[_Ro]);
      }
      if (output.Rule === "") {
        contents[_Rul] = [];
      } else if (output[_Ru] != null) {
        contents[_Rul] = de_ReplicationRules(getArrayIfSingleItem(output[_Ru]), context);
      }
      return contents;
    }, "de_ReplicationConfiguration");
    de_ReplicationRule = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_ID_] != null) {
        contents[_ID_] = expectString(output[_ID_]);
      }
      if (output[_Pri] != null) {
        contents[_Pri] = strictParseInt32(output[_Pri]);
      }
      if (output[_P] != null) {
        contents[_P] = expectString(output[_P]);
      }
      if (output[_F] != null) {
        contents[_F] = de_ReplicationRuleFilter(output[_F], context);
      }
      if (output[_S] != null) {
        contents[_S] = expectString(output[_S]);
      }
      if (output[_SSC] != null) {
        contents[_SSC] = de_SourceSelectionCriteria(output[_SSC], context);
      }
      if (output[_EOR] != null) {
        contents[_EOR] = de_ExistingObjectReplication(output[_EOR], context);
      }
      if (output[_Des] != null) {
        contents[_Des] = de_Destination(output[_Des], context);
      }
      if (output[_DMR] != null) {
        contents[_DMR] = de_DeleteMarkerReplication(output[_DMR], context);
      }
      return contents;
    }, "de_ReplicationRule");
    de_ReplicationRuleAndOperator = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_P] != null) {
        contents[_P] = expectString(output[_P]);
      }
      if (output.Tag === "") {
        contents[_Tag] = [];
      } else if (output[_Ta] != null) {
        contents[_Tag] = de_TagSet(getArrayIfSingleItem(output[_Ta]), context);
      }
      return contents;
    }, "de_ReplicationRuleAndOperator");
    de_ReplicationRuleFilter = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_P] != null) {
        contents[_P] = expectString(output[_P]);
      }
      if (output[_Ta] != null) {
        contents[_Ta] = de_Tag(output[_Ta], context);
      }
      if (output[_A] != null) {
        contents[_A] = de_ReplicationRuleAndOperator(output[_A], context);
      }
      return contents;
    }, "de_ReplicationRuleFilter");
    de_ReplicationRules = /* @__PURE__ */ __name2((output, context) => {
      return (output || []).filter((e2) => e2 != null).map((entry) => {
        return de_ReplicationRule(entry, context);
      });
    }, "de_ReplicationRules");
    de_ReplicationTime = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_S] != null) {
        contents[_S] = expectString(output[_S]);
      }
      if (output[_Tim] != null) {
        contents[_Tim] = de_ReplicationTimeValue(output[_Tim], context);
      }
      return contents;
    }, "de_ReplicationTime");
    de_ReplicationTimeValue = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_Mi] != null) {
        contents[_Mi] = strictParseInt32(output[_Mi]);
      }
      return contents;
    }, "de_ReplicationTimeValue");
    de_RestoreStatus = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_IRIP] != null) {
        contents[_IRIP] = parseBoolean(output[_IRIP]);
      }
      if (output[_REDe] != null) {
        contents[_REDe] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_REDe]));
      }
      return contents;
    }, "de_RestoreStatus");
    de_RoutingRule = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_Con] != null) {
        contents[_Con] = de_Condition(output[_Con], context);
      }
      if (output[_Red] != null) {
        contents[_Red] = de_Redirect(output[_Red], context);
      }
      return contents;
    }, "de_RoutingRule");
    de_RoutingRules = /* @__PURE__ */ __name2((output, context) => {
      return (output || []).filter((e2) => e2 != null).map((entry) => {
        return de_RoutingRule(entry, context);
      });
    }, "de_RoutingRules");
    de_S3KeyFilter = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output.FilterRule === "") {
        contents[_FRi] = [];
      } else if (output[_FR] != null) {
        contents[_FRi] = de_FilterRuleList(getArrayIfSingleItem(output[_FR]), context);
      }
      return contents;
    }, "de_S3KeyFilter");
    de_S3TablesDestinationResult = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_TBA] != null) {
        contents[_TBA] = expectString(output[_TBA]);
      }
      if (output[_TN] != null) {
        contents[_TN] = expectString(output[_TN]);
      }
      if (output[_TAa] != null) {
        contents[_TAa] = expectString(output[_TAa]);
      }
      if (output[_TNa] != null) {
        contents[_TNa] = expectString(output[_TNa]);
      }
      return contents;
    }, "de_S3TablesDestinationResult");
    de_ServerSideEncryptionByDefault = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_SSEA] != null) {
        contents[_SSEA] = expectString(output[_SSEA]);
      }
      if (output[_KMSMKID] != null) {
        contents[_KMSMKID] = expectString(output[_KMSMKID]);
      }
      return contents;
    }, "de_ServerSideEncryptionByDefault");
    de_ServerSideEncryptionConfiguration = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output.Rule === "") {
        contents[_Rul] = [];
      } else if (output[_Ru] != null) {
        contents[_Rul] = de_ServerSideEncryptionRules(getArrayIfSingleItem(output[_Ru]), context);
      }
      return contents;
    }, "de_ServerSideEncryptionConfiguration");
    de_ServerSideEncryptionRule = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_ASSEBD] != null) {
        contents[_ASSEBD] = de_ServerSideEncryptionByDefault(output[_ASSEBD], context);
      }
      if (output[_BKE] != null) {
        contents[_BKE] = parseBoolean(output[_BKE]);
      }
      return contents;
    }, "de_ServerSideEncryptionRule");
    de_ServerSideEncryptionRules = /* @__PURE__ */ __name2((output, context) => {
      return (output || []).filter((e2) => e2 != null).map((entry) => {
        return de_ServerSideEncryptionRule(entry, context);
      });
    }, "de_ServerSideEncryptionRules");
    de_SessionCredentials = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_AKI] != null) {
        contents[_AKI] = expectString(output[_AKI]);
      }
      if (output[_SAK] != null) {
        contents[_SAK] = expectString(output[_SAK]);
      }
      if (output[_ST] != null) {
        contents[_ST] = expectString(output[_ST]);
      }
      if (output[_Exp] != null) {
        contents[_Exp] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_Exp]));
      }
      return contents;
    }, "de_SessionCredentials");
    de_SimplePrefix = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      return contents;
    }, "de_SimplePrefix");
    de_SourceSelectionCriteria = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_SKEO] != null) {
        contents[_SKEO] = de_SseKmsEncryptedObjects(output[_SKEO], context);
      }
      if (output[_RM] != null) {
        contents[_RM] = de_ReplicaModifications(output[_RM], context);
      }
      return contents;
    }, "de_SourceSelectionCriteria");
    de_SSEKMS = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_KI] != null) {
        contents[_KI] = expectString(output[_KI]);
      }
      return contents;
    }, "de_SSEKMS");
    de_SseKmsEncryptedObjects = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_S] != null) {
        contents[_S] = expectString(output[_S]);
      }
      return contents;
    }, "de_SseKmsEncryptedObjects");
    de_SSES3 = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      return contents;
    }, "de_SSES3");
    de_Stats = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_BS] != null) {
        contents[_BS] = strictParseLong(output[_BS]);
      }
      if (output[_BP] != null) {
        contents[_BP] = strictParseLong(output[_BP]);
      }
      if (output[_BRy] != null) {
        contents[_BRy] = strictParseLong(output[_BRy]);
      }
      return contents;
    }, "de_Stats");
    de_StorageClassAnalysis = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_DE] != null) {
        contents[_DE] = de_StorageClassAnalysisDataExport(output[_DE], context);
      }
      return contents;
    }, "de_StorageClassAnalysis");
    de_StorageClassAnalysisDataExport = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_OSV] != null) {
        contents[_OSV] = expectString(output[_OSV]);
      }
      if (output[_Des] != null) {
        contents[_Des] = de_AnalyticsExportDestination(output[_Des], context);
      }
      return contents;
    }, "de_StorageClassAnalysisDataExport");
    de_Tag = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_K] != null) {
        contents[_K] = expectString(output[_K]);
      }
      if (output[_Va] != null) {
        contents[_Va] = expectString(output[_Va]);
      }
      return contents;
    }, "de_Tag");
    de_TagSet = /* @__PURE__ */ __name2((output, context) => {
      return (output || []).filter((e2) => e2 != null).map((entry) => {
        return de_Tag(entry, context);
      });
    }, "de_TagSet");
    de_TargetGrant = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_Gra] != null) {
        contents[_Gra] = de_Grantee(output[_Gra], context);
      }
      if (output[_Pe] != null) {
        contents[_Pe] = expectString(output[_Pe]);
      }
      return contents;
    }, "de_TargetGrant");
    de_TargetGrants = /* @__PURE__ */ __name2((output, context) => {
      return (output || []).filter((e2) => e2 != null).map((entry) => {
        return de_TargetGrant(entry, context);
      });
    }, "de_TargetGrants");
    de_TargetObjectKeyFormat = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_SPi] != null) {
        contents[_SPi] = de_SimplePrefix(output[_SPi], context);
      }
      if (output[_PP] != null) {
        contents[_PP] = de_PartitionedPrefix(output[_PP], context);
      }
      return contents;
    }, "de_TargetObjectKeyFormat");
    de_Tiering = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_Da] != null) {
        contents[_Da] = strictParseInt32(output[_Da]);
      }
      if (output[_AT] != null) {
        contents[_AT] = expectString(output[_AT]);
      }
      return contents;
    }, "de_Tiering");
    de_TieringList = /* @__PURE__ */ __name2((output, context) => {
      return (output || []).filter((e2) => e2 != null).map((entry) => {
        return de_Tiering(entry, context);
      });
    }, "de_TieringList");
    de_TopicConfiguration = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_I] != null) {
        contents[_I] = expectString(output[_I]);
      }
      if (output[_Top] != null) {
        contents[_TA] = expectString(output[_Top]);
      }
      if (output.Event === "") {
        contents[_Eve] = [];
      } else if (output[_Ev] != null) {
        contents[_Eve] = de_EventList(getArrayIfSingleItem(output[_Ev]), context);
      }
      if (output[_F] != null) {
        contents[_F] = de_NotificationConfigurationFilter(output[_F], context);
      }
      return contents;
    }, "de_TopicConfiguration");
    de_TopicConfigurationList = /* @__PURE__ */ __name2((output, context) => {
      return (output || []).filter((e2) => e2 != null).map((entry) => {
        return de_TopicConfiguration(entry, context);
      });
    }, "de_TopicConfigurationList");
    de_Transition = /* @__PURE__ */ __name2((output, context) => {
      const contents = {};
      if (output[_Dat] != null) {
        contents[_Dat] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_Dat]));
      }
      if (output[_Da] != null) {
        contents[_Da] = strictParseInt32(output[_Da]);
      }
      if (output[_SC] != null) {
        contents[_SC] = expectString(output[_SC]);
      }
      return contents;
    }, "de_Transition");
    de_TransitionList = /* @__PURE__ */ __name2((output, context) => {
      return (output || []).filter((e2) => e2 != null).map((entry) => {
        return de_Transition(entry, context);
      });
    }, "de_TransitionList");
    deserializeMetadata2 = /* @__PURE__ */ __name2((output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    }), "deserializeMetadata");
    collectBodyString2 = /* @__PURE__ */ __name2((streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body)), "collectBodyString");
    _A = "And";
    _AAO = "AnalyticsAndOperator";
    _AC = "AnalyticsConfiguration";
    _ACL = "ACL";
    _ACLc = "AccessControlList";
    _ACLn = "AnalyticsConfigurationList";
    _ACP = "AccessControlPolicy";
    _ACT = "AccessControlTranslation";
    _ACc = "AccelerateConfiguration";
    _AD = "AbortDate";
    _AED = "AnalyticsExportDestination";
    _AF = "AnalyticsFilter";
    _AH = "AllowedHeader";
    _AHl = "AllowedHeaders";
    _AI = "AnalyticsId";
    _AIMU = "AbortIncompleteMultipartUpload";
    _AIc = "AccountId";
    _AKI = "AccessKeyId";
    _AM = "AllowedMethod";
    _AMl = "AllowedMethods";
    _AO = "AllowedOrigin";
    _AOl = "AllowedOrigins";
    _APA = "AccessPointAlias";
    _APAc = "AccessPointArn";
    _AQRD = "AllowQuotedRecordDelimiter";
    _AR = "AcceptRanges";
    _ARI = "AbortRuleId";
    _AS = "ArchiveStatus";
    _ASBD = "AnalyticsS3BucketDestination";
    _ASEFF = "AnalyticsS3ExportFileFormat";
    _ASSEBD = "ApplyServerSideEncryptionByDefault";
    _AT = "AccessTier";
    _Ac = "Account";
    _B = "Bucket";
    _BA = "BucketArn";
    _BAI = "BucketAccountId";
    _BAS = "BucketAccelerateStatus";
    _BGR = "BypassGovernanceRetention";
    _BI = "BucketInfo";
    _BKE = "BucketKeyEnabled";
    _BLC = "BucketLifecycleConfiguration";
    _BLCu = "BucketLocationConstraint";
    _BLN = "BucketLocationName";
    _BLP = "BucketLogsPermission";
    _BLS = "BucketLoggingStatus";
    _BLT = "BucketLocationType";
    _BN = "BucketName";
    _BP = "BytesProcessed";
    _BPA = "BlockPublicAcls";
    _BPP = "BlockPublicPolicy";
    _BR = "BucketRegion";
    _BRy = "BytesReturned";
    _BS = "BytesScanned";
    _BT = "BucketType";
    _BVS = "BucketVersioningStatus";
    _Bu = "Buckets";
    _C = "Credentials";
    _CA = "ChecksumAlgorithm";
    _CACL = "CannedACL";
    _CBC = "CreateBucketConfiguration";
    _CC = "CacheControl";
    _CCRC = "ChecksumCRC32";
    _CCRCC = "ChecksumCRC32C";
    _CCRCNVME = "ChecksumCRC64NVME";
    _CD = "ContentDisposition";
    _CDr = "CreationDate";
    _CE = "ContentEncoding";
    _CF = "CloudFunction";
    _CFC = "CloudFunctionConfiguration";
    _CL = "ContentLanguage";
    _CLo = "ContentLength";
    _CM = "ChecksumMode";
    _CMD = "ContentMD5";
    _CMU = "CompletedMultipartUpload";
    _CORSC = "CORSConfiguration";
    _CORSR = "CORSRule";
    _CORSRu = "CORSRules";
    _CP = "CommonPrefixes";
    _CPo = "CompletedPart";
    _CR = "ContentRange";
    _CRSBA = "ConfirmRemoveSelfBucketAccess";
    _CS = "CopySource";
    _CSHA = "ChecksumSHA1";
    _CSHAh = "ChecksumSHA256";
    _CSIM = "CopySourceIfMatch";
    _CSIMS = "CopySourceIfModifiedSince";
    _CSINM = "CopySourceIfNoneMatch";
    _CSIUS = "CopySourceIfUnmodifiedSince";
    _CSR = "CopySourceRange";
    _CSSSECA = "CopySourceSSECustomerAlgorithm";
    _CSSSECK = "CopySourceSSECustomerKey";
    _CSSSECKMD = "CopySourceSSECustomerKeyMD5";
    _CSV = "CSV";
    _CSVI = "CopySourceVersionId";
    _CSVIn = "CSVInput";
    _CSVO = "CSVOutput";
    _CSo = "ConfigurationState";
    _CT = "ChecksumType";
    _CTl = "ClientToken";
    _CTo = "ContentType";
    _CTom = "CompressionType";
    _CTon = "ContinuationToken";
    _Ch = "Checksum";
    _Co = "Contents";
    _Cod = "Code";
    _Com = "Comments";
    _Con = "Condition";
    _D = "Delimiter";
    _DAI = "DaysAfterInitiation";
    _DE = "DataExport";
    _DIM = "DestinationIfMatch";
    _DIMS = "DestinationIfModifiedSince";
    _DINM = "DestinationIfNoneMatch";
    _DIUS = "DestinationIfUnmodifiedSince";
    _DM = "DeleteMarker";
    _DMR = "DeleteMarkerReplication";
    _DMRS = "DeleteMarkerReplicationStatus";
    _DMVI = "DeleteMarkerVersionId";
    _DMe = "DeleteMarkers";
    _DN = "DisplayName";
    _DR = "DataRedundancy";
    _DRe = "DefaultRetention";
    _DRes = "DestinationResult";
    _Da = "Days";
    _Dat = "Date";
    _De = "Deleted";
    _Del = "Delete";
    _Des = "Destination";
    _Desc = "Description";
    _E = "Expires";
    _EA = "EmailAddress";
    _EBC = "EventBridgeConfiguration";
    _EBO = "ExpectedBucketOwner";
    _EC = "ErrorCode";
    _ECn = "EncryptionConfiguration";
    _ED = "ErrorDocument";
    _EH = "ExposeHeaders";
    _EHx = "ExposeHeader";
    _EM = "ErrorMessage";
    _EODM = "ExpiredObjectDeleteMarker";
    _EOR = "ExistingObjectReplication";
    _EORS = "ExistingObjectReplicationStatus";
    _ERP = "EnableRequestProgress";
    _ES = "ExpiresString";
    _ESBO = "ExpectedSourceBucketOwner";
    _ESx = "ExpirationStatus";
    _ESxp = "ExpirationState";
    _ET = "EncodingType";
    _ETa = "ETag";
    _ETn = "EncryptionType";
    _ETv = "EventThreshold";
    _ETx = "ExpressionType";
    _En = "Encryption";
    _Ena = "Enabled";
    _End = "End";
    _Er = "Error";
    _Err = "Errors";
    _Ev = "Event";
    _Eve = "Events";
    _Ex = "Expression";
    _Exp = "Expiration";
    _F = "Filter";
    _FD = "FieldDelimiter";
    _FHI = "FileHeaderInfo";
    _FO = "FetchOwner";
    _FR = "FilterRule";
    _FRN = "FilterRuleName";
    _FRV = "FilterRuleValue";
    _FRi = "FilterRules";
    _Fi = "Field";
    _Fo = "Format";
    _Fr = "Frequency";
    _G = "Grant";
    _GFC = "GrantFullControl";
    _GJP = "GlacierJobParameters";
    _GR = "GrantRead";
    _GRACP = "GrantReadACP";
    _GW = "GrantWrite";
    _GWACP = "GrantWriteACP";
    _Gr = "Grants";
    _Gra = "Grantee";
    _HECRE = "HttpErrorCodeReturnedEquals";
    _HN = "HostName";
    _HRC = "HttpRedirectCode";
    _I = "Id";
    _IC = "InventoryConfiguration";
    _ICL = "InventoryConfigurationList";
    _ICS = "InventoryConfigurationState";
    _ID = "IndexDocument";
    _ID_ = "ID";
    _IDn = "InventoryDestination";
    _IE = "IsEnabled";
    _IEn = "InventoryEncryption";
    _IF = "InventoryFilter";
    _IFn = "InventoryFormat";
    _IFnv = "InventoryFrequency";
    _II = "InventoryId";
    _IIOV = "InventoryIncludedObjectVersions";
    _IL = "IsLatest";
    _IM = "IfMatch";
    _IMIT = "IfMatchInitiatedTime";
    _IMLMT = "IfMatchLastModifiedTime";
    _IMS = "IfMatchSize";
    _IMSf = "IfModifiedSince";
    _INM = "IfNoneMatch";
    _IOF = "InventoryOptionalField";
    _IOV = "IncludedObjectVersions";
    _IP = "IsPublic";
    _IPA = "IgnorePublicAcls";
    _IRIP = "IsRestoreInProgress";
    _IS = "InputSerialization";
    _ISBD = "InventoryS3BucketDestination";
    _ISn = "InventorySchedule";
    _IT = "IsTruncated";
    _ITAO = "IntelligentTieringAndOperator";
    _ITAT = "IntelligentTieringAccessTier";
    _ITC = "IntelligentTieringConfiguration";
    _ITCL = "IntelligentTieringConfigurationList";
    _ITCR = "InventoryTableConfigurationResult";
    _ITCU = "InventoryTableConfigurationUpdates";
    _ITCn = "InventoryTableConfiguration";
    _ITD = "IntelligentTieringDays";
    _ITF = "IntelligentTieringFilter";
    _ITI = "IntelligentTieringId";
    _ITS = "IntelligentTieringStatus";
    _IUS = "IfUnmodifiedSince";
    _In = "Initiator";
    _Ini = "Initiated";
    _JSON = "JSON";
    _JSONI = "JSONInput";
    _JSONO = "JSONOutput";
    _JSONT = "JSONType";
    _JTC = "JournalTableConfiguration";
    _JTCR = "JournalTableConfigurationResult";
    _JTCU = "JournalTableConfigurationUpdates";
    _K = "Key";
    _KC = "KeyCount";
    _KI = "KeyId";
    _KKA = "KmsKeyArn";
    _KM = "KeyMarker";
    _KMSC = "KMSContext";
    _KMSKI = "KMSKeyId";
    _KMSMKID = "KMSMasterKeyID";
    _KPE = "KeyPrefixEquals";
    _L = "Location";
    _LC = "LocationConstraint";
    _LE = "LoggingEnabled";
    _LEi = "LifecycleExpiration";
    _LFA = "LambdaFunctionArn";
    _LFC = "LambdaFunctionConfigurations";
    _LFCa = "LambdaFunctionConfiguration";
    _LI = "LocationInfo";
    _LM = "LastModified";
    _LMT = "LastModifiedTime";
    _LNAS = "LocationNameAsString";
    _LP = "LocationPrefix";
    _LR = "LifecycleRule";
    _LRAO = "LifecycleRuleAndOperator";
    _LRF = "LifecycleRuleFilter";
    _LT = "LocationType";
    _M = "Marker";
    _MAO = "MetricsAndOperator";
    _MAS = "MaxAgeSeconds";
    _MB = "MaxBuckets";
    _MC = "MetricsConfiguration";
    _MCL = "MetricsConfigurationList";
    _MCR = "MetadataConfigurationResult";
    _MCe = "MetadataConfiguration";
    _MD = "MetadataDirective";
    _MDB = "MaxDirectoryBuckets";
    _MDf = "MfaDelete";
    _ME = "MetadataEntry";
    _MF = "MetricsFilter";
    _MFA = "MFA";
    _MFAD = "MFADelete";
    _MI = "MetricsId";
    _MK = "MaxKeys";
    _MKe = "MetadataKey";
    _MM = "MissingMeta";
    _MOS = "MpuObjectSize";
    _MP = "MaxParts";
    _MS = "MetricsStatus";
    _MTC = "MetadataTableConfiguration";
    _MTCR = "MetadataTableConfigurationResult";
    _MTEC = "MetadataTableEncryptionConfiguration";
    _MU = "MaxUploads";
    _MV = "MetadataValue";
    _Me = "Metrics";
    _Mes = "Message";
    _Mi = "Minutes";
    _Mo = "Mode";
    _N = "Name";
    _NC = "NotificationConfiguration";
    _NCF = "NotificationConfigurationFilter";
    _NCT = "NextContinuationToken";
    _ND = "NoncurrentDays";
    _NI = "NotificationId";
    _NKM = "NextKeyMarker";
    _NM = "NextMarker";
    _NNV = "NewerNoncurrentVersions";
    _NPNM = "NextPartNumberMarker";
    _NUIM = "NextUploadIdMarker";
    _NVE = "NoncurrentVersionExpiration";
    _NVIM = "NextVersionIdMarker";
    _NVT = "NoncurrentVersionTransitions";
    _NVTo = "NoncurrentVersionTransition";
    _O = "Owner";
    _OA = "ObjectAttributes";
    _OC = "OwnershipControls";
    _OCACL = "ObjectCannedACL";
    _OCR = "OwnershipControlsRule";
    _OF = "OptionalFields";
    _OI = "ObjectIdentifier";
    _OK = "ObjectKey";
    _OL = "OutputLocation";
    _OLC = "ObjectLockConfiguration";
    _OLE = "ObjectLockEnabled";
    _OLEFB = "ObjectLockEnabledForBucket";
    _OLLH = "ObjectLockLegalHold";
    _OLLHS = "ObjectLockLegalHoldStatus";
    _OLM = "ObjectLockMode";
    _OLR = "ObjectLockRetention";
    _OLRM = "ObjectLockRetentionMode";
    _OLRUD = "ObjectLockRetainUntilDate";
    _OLRb = "ObjectLockRule";
    _OO = "ObjectOwnership";
    _OOA = "OptionalObjectAttributes";
    _OOw = "OwnerOverride";
    _OP = "ObjectParts";
    _OS = "OutputSerialization";
    _OSGT = "ObjectSizeGreaterThan";
    _OSGTB = "ObjectSizeGreaterThanBytes";
    _OSLT = "ObjectSizeLessThan";
    _OSLTB = "ObjectSizeLessThanBytes";
    _OSV = "OutputSchemaVersion";
    _OSb = "ObjectSize";
    _OVI = "ObjectVersionId";
    _Ob = "Objects";
    _P = "Prefix";
    _PABC = "PublicAccessBlockConfiguration";
    _PC = "PartsCount";
    _PDS = "PartitionDateSource";
    _PI = "ParquetInput";
    _PN = "PartNumber";
    _PNM = "PartNumberMarker";
    _PP = "PartitionedPrefix";
    _Pa = "Payer";
    _Par = "Part";
    _Parq = "Parquet";
    _Part = "Parts";
    _Pe = "Permission";
    _Pr = "Protocol";
    _Pri = "Priority";
    _Q = "Quiet";
    _QA = "QueueArn";
    _QC = "QueueConfiguration";
    _QCu = "QueueConfigurations";
    _QCuo = "QuoteCharacter";
    _QEC = "QuoteEscapeCharacter";
    _QF = "QuoteFields";
    _Qu = "Queue";
    _R = "Range";
    _RART = "RedirectAllRequestsTo";
    _RC = "RequestCharged";
    _RCC = "ResponseCacheControl";
    _RCD = "ResponseContentDisposition";
    _RCE = "ResponseContentEncoding";
    _RCL = "ResponseContentLanguage";
    _RCT = "ResponseContentType";
    _RCe = "ReplicationConfiguration";
    _RD = "RecordDelimiter";
    _RE = "ResponseExpires";
    _RED = "RecordExpirationDays";
    _REDe = "RestoreExpiryDate";
    _REe = "RecordExpiration";
    _RKKID = "ReplicaKmsKeyID";
    _RKPW = "ReplaceKeyPrefixWith";
    _RKW = "ReplaceKeyWith";
    _RM = "ReplicaModifications";
    _RMS = "ReplicaModificationsStatus";
    _ROP = "RestoreOutputPath";
    _RP = "RequestPayer";
    _RPB = "RestrictPublicBuckets";
    _RPC = "RequestPaymentConfiguration";
    _RPe = "RequestProgress";
    _RR = "RequestRoute";
    _RRAO = "ReplicationRuleAndOperator";
    _RRF = "ReplicationRuleFilter";
    _RRS = "ReplicationRuleStatus";
    _RRT = "RestoreRequestType";
    _RRe = "ReplicationRule";
    _RRes = "RestoreRequest";
    _RRo = "RoutingRules";
    _RRou = "RoutingRule";
    _RS = "RenameSource";
    _RSe = "ReplicationStatus";
    _RSes = "RestoreStatus";
    _RT = "RequestToken";
    _RTS = "ReplicationTimeStatus";
    _RTV = "ReplicationTimeValue";
    _RTe = "ReplicationTime";
    _RUD = "RetainUntilDate";
    _Re = "Restore";
    _Red = "Redirect";
    _Ro = "Role";
    _Ru = "Rule";
    _Rul = "Rules";
    _S = "Status";
    _SA = "StartAfter";
    _SAK = "SecretAccessKey";
    _SAs = "SseAlgorithm";
    _SBD = "S3BucketDestination";
    _SC = "StorageClass";
    _SCA = "StorageClassAnalysis";
    _SCADE = "StorageClassAnalysisDataExport";
    _SCASV = "StorageClassAnalysisSchemaVersion";
    _SCt = "StatusCode";
    _SDV = "SkipDestinationValidation";
    _SIM = "SourceIfMatch";
    _SIMS = "SourceIfModifiedSince";
    _SINM = "SourceIfNoneMatch";
    _SIUS = "SourceIfUnmodifiedSince";
    _SK = "SSE-KMS";
    _SKEO = "SseKmsEncryptedObjects";
    _SKEOS = "SseKmsEncryptedObjectsStatus";
    _SKF = "S3KeyFilter";
    _SKe = "S3Key";
    _SL = "S3Location";
    _SM = "SessionMode";
    _SOCR = "SelectObjectContentRequest";
    _SP = "SelectParameters";
    _SPi = "SimplePrefix";
    _SR = "ScanRange";
    _SS = "SSE-S3";
    _SSC = "SourceSelectionCriteria";
    _SSE = "ServerSideEncryption";
    _SSEA = "SSEAlgorithm";
    _SSEBD = "ServerSideEncryptionByDefault";
    _SSEC = "ServerSideEncryptionConfiguration";
    _SSECA = "SSECustomerAlgorithm";
    _SSECK = "SSECustomerKey";
    _SSECKMD = "SSECustomerKeyMD5";
    _SSEKMS = "SSEKMS";
    _SSEKMSEC = "SSEKMSEncryptionContext";
    _SSEKMSKI = "SSEKMSKeyId";
    _SSER = "ServerSideEncryptionRule";
    _SSES = "SSES3";
    _ST = "SessionToken";
    _STBA = "S3TablesBucketArn";
    _STD = "S3TablesDestination";
    _STDR = "S3TablesDestinationResult";
    _STN = "S3TablesName";
    _S_ = "S3";
    _Sc = "Schedule";
    _Se = "Setting";
    _Si = "Size";
    _St = "Start";
    _Su = "Suffix";
    _T = "Tagging";
    _TA = "TopicArn";
    _TAa = "TableArn";
    _TB = "TargetBucket";
    _TBA = "TableBucketArn";
    _TBT = "TableBucketType";
    _TC = "TagCount";
    _TCo = "TopicConfiguration";
    _TCop = "TopicConfigurations";
    _TD = "TaggingDirective";
    _TDMOS = "TransitionDefaultMinimumObjectSize";
    _TG = "TargetGrants";
    _TGa = "TargetGrant";
    _TN = "TableName";
    _TNa = "TableNamespace";
    _TOKF = "TargetObjectKeyFormat";
    _TP = "TargetPrefix";
    _TPC = "TotalPartsCount";
    _TS = "TagSet";
    _TSA = "TableSseAlgorithm";
    _TSC = "TransitionStorageClass";
    _TSa = "TableStatus";
    _Ta = "Tag";
    _Tag = "Tags";
    _Ti = "Tier";
    _Tie = "Tierings";
    _Tier = "Tiering";
    _Tim = "Time";
    _To = "Token";
    _Top = "Topic";
    _Tr = "Transitions";
    _Tra = "Transition";
    _Ty = "Type";
    _U = "Upload";
    _UI = "UploadId";
    _UIM = "UploadIdMarker";
    _UM = "UserMetadata";
    _URI = "URI";
    _Up = "Uploads";
    _V = "Version";
    _VC = "VersionCount";
    _VCe = "VersioningConfiguration";
    _VI = "VersionId";
    _VIM = "VersionIdMarker";
    _Va = "Value";
    _Ve = "Versions";
    _WC = "WebsiteConfiguration";
    _WOB = "WriteOffsetBytes";
    _WRL = "WebsiteRedirectLocation";
    _Y = "Years";
    _a = "analytics";
    _ac = "accelerate";
    _acl = "acl";
    _ar = "accept-ranges";
    _at = "attributes";
    _br = "bucket-region";
    _c = "cors";
    _cc = "cache-control";
    _cd = "content-disposition";
    _ce = "content-encoding";
    _cl = "content-language";
    _cl_ = "content-length";
    _cm = "content-md5";
    _cr = "content-range";
    _ct = "content-type";
    _ct_ = "continuation-token";
    _d = "delete";
    _de = "delimiter";
    _e = "expires";
    _en = "encryption";
    _et = "encoding-type";
    _eta = "etag";
    _ex = "expiresstring";
    _fo = "fetch-owner";
    _i = "id";
    _im = "if-match";
    _ims = "if-modified-since";
    _in = "inventory";
    _inm = "if-none-match";
    _it = "intelligent-tiering";
    _ius = "if-unmodified-since";
    _km = "key-marker";
    _l = "lifecycle";
    _lh = "legal-hold";
    _lm = "last-modified";
    _lo = "location";
    _log = "logging";
    _lt2 = "list-type";
    _m = "metrics";
    _mC = "metadataConfiguration";
    _mIT = "metadataInventoryTable";
    _mJT = "metadataJournalTable";
    _mT = "metadataTable";
    _ma = "marker";
    _mb = "max-buckets";
    _mdb = "max-directory-buckets";
    _me = "member";
    _mk = "max-keys";
    _mp = "max-parts";
    _mu = "max-uploads";
    _n = "notification";
    _oC = "ownershipControls";
    _ol = "object-lock";
    _p = "policy";
    _pAB = "publicAccessBlock";
    _pN = "partNumber";
    _pS = "policyStatus";
    _pnm = "part-number-marker";
    _pr = "prefix";
    _r = "replication";
    _rO = "renameObject";
    _rP = "requestPayment";
    _ra = "range";
    _rcc = "response-cache-control";
    _rcd = "response-content-disposition";
    _rce = "response-content-encoding";
    _rcl = "response-content-language";
    _rct = "response-content-type";
    _re = "response-expires";
    _res = "restore";
    _ret = "retention";
    _s = "session";
    _sa = "start-after";
    _se = "select";
    _st = "select-type";
    _t = "tagging";
    _to = "torrent";
    _u = "uploads";
    _uI = "uploadId";
    _uim = "upload-id-marker";
    _v = "versioning";
    _vI = "versionId";
    _ve = '<?xml version="1.0" encoding="UTF-8"?>';
    _ver = "versions";
    _vim = "version-id-marker";
    _w = "website";
    _x = "xsi:type";
    _xaa = "x-amz-acl";
    _xaad = "x-amz-abort-date";
    _xaapa = "x-amz-access-point-alias";
    _xaari = "x-amz-abort-rule-id";
    _xaas = "x-amz-archive-status";
    _xaba = "x-amz-bucket-arn";
    _xabgr = "x-amz-bypass-governance-retention";
    _xabln = "x-amz-bucket-location-name";
    _xablt = "x-amz-bucket-location-type";
    _xabole = "x-amz-bucket-object-lock-enabled";
    _xabolt = "x-amz-bucket-object-lock-token";
    _xabr = "x-amz-bucket-region";
    _xaca = "x-amz-checksum-algorithm";
    _xacc = "x-amz-checksum-crc32";
    _xacc_ = "x-amz-checksum-crc32c";
    _xacc__ = "x-amz-checksum-crc64nvme";
    _xacm = "x-amz-checksum-mode";
    _xacrsba = "x-amz-confirm-remove-self-bucket-access";
    _xacs = "x-amz-checksum-sha1";
    _xacs_ = "x-amz-checksum-sha256";
    _xacs__ = "x-amz-copy-source";
    _xacsim = "x-amz-copy-source-if-match";
    _xacsims = "x-amz-copy-source-if-modified-since";
    _xacsinm = "x-amz-copy-source-if-none-match";
    _xacsius = "x-amz-copy-source-if-unmodified-since";
    _xacsm = "x-amz-create-session-mode";
    _xacsr = "x-amz-copy-source-range";
    _xacssseca = "x-amz-copy-source-server-side-encryption-customer-algorithm";
    _xacssseck = "x-amz-copy-source-server-side-encryption-customer-key";
    _xacssseckm = "x-amz-copy-source-server-side-encryption-customer-key-md5";
    _xacsvi = "x-amz-copy-source-version-id";
    _xact = "x-amz-checksum-type";
    _xact_ = "x-amz-client-token";
    _xadm = "x-amz-delete-marker";
    _xae = "x-amz-expiration";
    _xaebo = "x-amz-expected-bucket-owner";
    _xafec = "x-amz-fwd-error-code";
    _xafem = "x-amz-fwd-error-message";
    _xafhar = "x-amz-fwd-header-accept-ranges";
    _xafhcc = "x-amz-fwd-header-cache-control";
    _xafhcd = "x-amz-fwd-header-content-disposition";
    _xafhce = "x-amz-fwd-header-content-encoding";
    _xafhcl = "x-amz-fwd-header-content-language";
    _xafhcr = "x-amz-fwd-header-content-range";
    _xafhct = "x-amz-fwd-header-content-type";
    _xafhe = "x-amz-fwd-header-etag";
    _xafhe_ = "x-amz-fwd-header-expires";
    _xafhlm = "x-amz-fwd-header-last-modified";
    _xafhxacc = "x-amz-fwd-header-x-amz-checksum-crc32";
    _xafhxacc_ = "x-amz-fwd-header-x-amz-checksum-crc32c";
    _xafhxacc__ = "x-amz-fwd-header-x-amz-checksum-crc64nvme";
    _xafhxacs = "x-amz-fwd-header-x-amz-checksum-sha1";
    _xafhxacs_ = "x-amz-fwd-header-x-amz-checksum-sha256";
    _xafhxadm = "x-amz-fwd-header-x-amz-delete-marker";
    _xafhxae = "x-amz-fwd-header-x-amz-expiration";
    _xafhxamm = "x-amz-fwd-header-x-amz-missing-meta";
    _xafhxampc = "x-amz-fwd-header-x-amz-mp-parts-count";
    _xafhxaollh = "x-amz-fwd-header-x-amz-object-lock-legal-hold";
    _xafhxaolm = "x-amz-fwd-header-x-amz-object-lock-mode";
    _xafhxaolrud = "x-amz-fwd-header-x-amz-object-lock-retain-until-date";
    _xafhxar = "x-amz-fwd-header-x-amz-restore";
    _xafhxarc = "x-amz-fwd-header-x-amz-request-charged";
    _xafhxars = "x-amz-fwd-header-x-amz-replication-status";
    _xafhxasc = "x-amz-fwd-header-x-amz-storage-class";
    _xafhxasse = "x-amz-fwd-header-x-amz-server-side-encryption";
    _xafhxasseakki = "x-amz-fwd-header-x-amz-server-side-encryption-aws-kms-key-id";
    _xafhxassebke = "x-amz-fwd-header-x-amz-server-side-encryption-bucket-key-enabled";
    _xafhxasseca = "x-amz-fwd-header-x-amz-server-side-encryption-customer-algorithm";
    _xafhxasseckm = "x-amz-fwd-header-x-amz-server-side-encryption-customer-key-md5";
    _xafhxatc = "x-amz-fwd-header-x-amz-tagging-count";
    _xafhxavi = "x-amz-fwd-header-x-amz-version-id";
    _xafs = "x-amz-fwd-status";
    _xagfc = "x-amz-grant-full-control";
    _xagr = "x-amz-grant-read";
    _xagra = "x-amz-grant-read-acp";
    _xagw = "x-amz-grant-write";
    _xagwa = "x-amz-grant-write-acp";
    _xaimit = "x-amz-if-match-initiated-time";
    _xaimlmt = "x-amz-if-match-last-modified-time";
    _xaims = "x-amz-if-match-size";
    _xam = "x-amz-mfa";
    _xamd = "x-amz-metadata-directive";
    _xamm = "x-amz-missing-meta";
    _xamos = "x-amz-mp-object-size";
    _xamp = "x-amz-max-parts";
    _xampc = "x-amz-mp-parts-count";
    _xaoa = "x-amz-object-attributes";
    _xaollh = "x-amz-object-lock-legal-hold";
    _xaolm = "x-amz-object-lock-mode";
    _xaolrud = "x-amz-object-lock-retain-until-date";
    _xaoo = "x-amz-object-ownership";
    _xaooa = "x-amz-optional-object-attributes";
    _xaos = "x-amz-object-size";
    _xapnm = "x-amz-part-number-marker";
    _xar = "x-amz-restore";
    _xarc = "x-amz-request-charged";
    _xarop = "x-amz-restore-output-path";
    _xarp = "x-amz-request-payer";
    _xarr = "x-amz-request-route";
    _xars = "x-amz-rename-source";
    _xars_ = "x-amz-replication-status";
    _xarsim = "x-amz-rename-source-if-match";
    _xarsims = "x-amz-rename-source-if-modified-since";
    _xarsinm = "x-amz-rename-source-if-none-match";
    _xarsius = "x-amz-rename-source-if-unmodified-since";
    _xart = "x-amz-request-token";
    _xasc = "x-amz-storage-class";
    _xasca = "x-amz-sdk-checksum-algorithm";
    _xasdv = "x-amz-skip-destination-validation";
    _xasebo = "x-amz-source-expected-bucket-owner";
    _xasse = "x-amz-server-side-encryption";
    _xasseakki = "x-amz-server-side-encryption-aws-kms-key-id";
    _xassebke = "x-amz-server-side-encryption-bucket-key-enabled";
    _xassec = "x-amz-server-side-encryption-context";
    _xasseca = "x-amz-server-side-encryption-customer-algorithm";
    _xasseck = "x-amz-server-side-encryption-customer-key";
    _xasseckm = "x-amz-server-side-encryption-customer-key-md5";
    _xat = "x-amz-tagging";
    _xatc = "x-amz-tagging-count";
    _xatd = "x-amz-tagging-directive";
    _xatdmos = "x-amz-transition-default-minimum-object-size";
    _xavi = "x-amz-version-id";
    _xawob = "x-amz-write-offset-bytes";
    _xawrl = "x-amz-website-redirect-location";
    _xi = "x-id";
  }
});
var CreateSessionCommand;
var init_CreateSessionCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/CreateSessionCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_models_0();
    init_Aws_restXml();
    CreateSessionCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      DisableS3ExpressSessionAuth: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "CreateSession", {}).n("S3Client", "CreateSessionCommand").f(CreateSessionRequestFilterSensitiveLog, CreateSessionOutputFilterSensitiveLog).ser(se_CreateSessionCommand).de(de_CreateSessionCommand).build() {
      static {
        __name(this, "CreateSessionCommand");
      }
      static {
        __name2(this, "CreateSessionCommand");
      }
    };
  }
});
var package_default;
var init_package = __esm({
  "../node_modules/@aws-sdk/client-s3/package.json"() {
    package_default = {
      name: "@aws-sdk/client-s3",
      description: "AWS SDK for JavaScript S3 Client for Node.js, Browser and React Native",
      version: "3.893.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "node ../../scripts/compilation/inline client-s3",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo s3",
        test: "yarn g:vitest run",
        "test:browser": "node ./test/browser-build/esbuild && yarn g:vitest run -c vitest.config.browser.mts",
        "test:browser:watch": "node ./test/browser-build/esbuild && yarn g:vitest watch -c vitest.config.browser.mts",
        "test:e2e": "yarn g:vitest run -c vitest.config.e2e.mts && yarn test:browser",
        "test:e2e:watch": "yarn g:vitest watch -c vitest.config.e2e.mts",
        "test:integration": "yarn g:vitest run -c vitest.config.integ.mts",
        "test:integration:watch": "yarn g:vitest watch -c vitest.config.integ.mts",
        "test:watch": "yarn g:vitest watch"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha1-browser": "5.2.0",
        "@aws-crypto/sha256-browser": "5.2.0",
        "@aws-crypto/sha256-js": "5.2.0",
        "@aws-sdk/core": "3.893.0",
        "@aws-sdk/credential-provider-node": "3.893.0",
        "@aws-sdk/middleware-bucket-endpoint": "3.893.0",
        "@aws-sdk/middleware-expect-continue": "3.893.0",
        "@aws-sdk/middleware-flexible-checksums": "3.893.0",
        "@aws-sdk/middleware-host-header": "3.893.0",
        "@aws-sdk/middleware-location-constraint": "3.893.0",
        "@aws-sdk/middleware-logger": "3.893.0",
        "@aws-sdk/middleware-recursion-detection": "3.893.0",
        "@aws-sdk/middleware-sdk-s3": "3.893.0",
        "@aws-sdk/middleware-ssec": "3.893.0",
        "@aws-sdk/middleware-user-agent": "3.893.0",
        "@aws-sdk/region-config-resolver": "3.893.0",
        "@aws-sdk/signature-v4-multi-region": "3.893.0",
        "@aws-sdk/types": "3.893.0",
        "@aws-sdk/util-endpoints": "3.893.0",
        "@aws-sdk/util-user-agent-browser": "3.893.0",
        "@aws-sdk/util-user-agent-node": "3.893.0",
        "@aws-sdk/xml-builder": "3.893.0",
        "@smithy/config-resolver": "^4.2.2",
        "@smithy/core": "^3.11.1",
        "@smithy/eventstream-serde-browser": "^4.1.1",
        "@smithy/eventstream-serde-config-resolver": "^4.2.1",
        "@smithy/eventstream-serde-node": "^4.1.1",
        "@smithy/fetch-http-handler": "^5.2.1",
        "@smithy/hash-blob-browser": "^4.1.1",
        "@smithy/hash-node": "^4.1.1",
        "@smithy/hash-stream-node": "^4.1.1",
        "@smithy/invalid-dependency": "^4.1.1",
        "@smithy/md5-js": "^4.1.1",
        "@smithy/middleware-content-length": "^4.1.1",
        "@smithy/middleware-endpoint": "^4.2.3",
        "@smithy/middleware-retry": "^4.2.4",
        "@smithy/middleware-serde": "^4.1.1",
        "@smithy/middleware-stack": "^4.1.1",
        "@smithy/node-config-provider": "^4.2.2",
        "@smithy/node-http-handler": "^4.2.1",
        "@smithy/protocol-http": "^5.2.1",
        "@smithy/smithy-client": "^4.6.3",
        "@smithy/types": "^4.5.0",
        "@smithy/url-parser": "^4.1.1",
        "@smithy/util-base64": "^4.1.0",
        "@smithy/util-body-length-browser": "^4.1.0",
        "@smithy/util-body-length-node": "^4.1.0",
        "@smithy/util-defaults-mode-browser": "^4.1.3",
        "@smithy/util-defaults-mode-node": "^4.1.3",
        "@smithy/util-endpoints": "^3.1.2",
        "@smithy/util-middleware": "^4.1.1",
        "@smithy/util-retry": "^4.1.2",
        "@smithy/util-stream": "^4.3.2",
        "@smithy/util-utf8": "^4.1.0",
        "@smithy/util-waiter": "^4.1.1",
        "@types/uuid": "^9.0.1",
        tslib: "^2.6.2",
        uuid: "^9.0.1"
      },
      devDependencies: {
        "@aws-sdk/signature-v4-crt": "3.893.0",
        "@tsconfig/node18": "18.2.4",
        "@types/node": "^18.19.69",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typescript: "~5.8.3"
      },
      engines: {
        node: ">=18.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-s3",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-s3"
      }
    };
  }
});
var fromUtf84;
var init_fromUtf8_browser3 = __esm({
  "../node_modules/@aws-crypto/sha1-browser/node_modules/@smithy/util-utf8/dist-es/fromUtf8.browser.js"() {
    init_functionsRoutes_0_09879299104094341();
    fromUtf84 = /* @__PURE__ */ __name2((input) => new TextEncoder().encode(input), "fromUtf8");
  }
});
var init_toUint8Array3 = __esm({
  "../node_modules/@aws-crypto/sha1-browser/node_modules/@smithy/util-utf8/dist-es/toUint8Array.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_fromUtf8_browser3();
  }
});
var init_toUtf8_browser3 = __esm({
  "../node_modules/@aws-crypto/sha1-browser/node_modules/@smithy/util-utf8/dist-es/toUtf8.browser.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_dist_es42 = __esm({
  "../node_modules/@aws-crypto/sha1-browser/node_modules/@smithy/util-utf8/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_fromUtf8_browser3();
    init_toUint8Array3();
    init_toUtf8_browser3();
  }
});
function isEmptyData2(data) {
  if (typeof data === "string") {
    return data.length === 0;
  }
  return data.byteLength === 0;
}
__name(isEmptyData2, "isEmptyData2");
var init_isEmptyData2 = __esm({
  "../node_modules/@aws-crypto/sha1-browser/build/module/isEmptyData.js"() {
    init_functionsRoutes_0_09879299104094341();
    __name2(isEmptyData2, "isEmptyData");
  }
});
var SHA_1_HASH;
var SHA_1_HMAC_ALGO;
var EMPTY_DATA_SHA_1;
var init_constants8 = __esm({
  "../node_modules/@aws-crypto/sha1-browser/build/module/constants.js"() {
    init_functionsRoutes_0_09879299104094341();
    SHA_1_HASH = { name: "SHA-1" };
    SHA_1_HMAC_ALGO = {
      name: "HMAC",
      hash: SHA_1_HASH
    };
    EMPTY_DATA_SHA_1 = new Uint8Array([
      218,
      57,
      163,
      238,
      94,
      107,
      75,
      13,
      50,
      85,
      191,
      239,
      149,
      96,
      24,
      144,
      175,
      216,
      7,
      9
    ]);
  }
});
function locateWindow() {
  if (typeof window !== "undefined") {
    return window;
  } else if (typeof self !== "undefined") {
    return self;
  }
  return fallbackWindow;
}
__name(locateWindow, "locateWindow");
var fallbackWindow;
var init_dist_es43 = __esm({
  "../node_modules/@aws-sdk/util-locate-window/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    fallbackWindow = {};
    __name2(locateWindow, "locateWindow");
  }
});
function convertToBuffer2(data) {
  if (typeof data === "string") {
    return fromUtf84(data);
  }
  if (ArrayBuffer.isView(data)) {
    return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
  }
  return new Uint8Array(data);
}
__name(convertToBuffer2, "convertToBuffer2");
var Sha1;
var init_webCryptoSha1 = __esm({
  "../node_modules/@aws-crypto/sha1-browser/build/module/webCryptoSha1.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es42();
    init_isEmptyData2();
    init_constants8();
    init_dist_es43();
    Sha1 = /** @class */
    function() {
      function Sha13(secret) {
        this.toHash = new Uint8Array(0);
        if (secret !== void 0) {
          this.key = new Promise(function(resolve, reject) {
            locateWindow().crypto.subtle.importKey("raw", convertToBuffer2(secret), SHA_1_HMAC_ALGO, false, ["sign"]).then(resolve, reject);
          });
          this.key.catch(function() {
          });
        }
      }
      __name(Sha13, "Sha13");
      __name2(Sha13, "Sha1");
      Sha13.prototype.update = function(data) {
        if (isEmptyData2(data)) {
          return;
        }
        var update = convertToBuffer2(data);
        var typedArray = new Uint8Array(this.toHash.byteLength + update.byteLength);
        typedArray.set(this.toHash, 0);
        typedArray.set(update, this.toHash.byteLength);
        this.toHash = typedArray;
      };
      Sha13.prototype.digest = function() {
        var _this = this;
        if (this.key) {
          return this.key.then(function(key) {
            return locateWindow().crypto.subtle.sign(SHA_1_HMAC_ALGO, key, _this.toHash).then(function(data) {
              return new Uint8Array(data);
            });
          });
        }
        if (isEmptyData2(this.toHash)) {
          return Promise.resolve(EMPTY_DATA_SHA_1);
        }
        return Promise.resolve().then(function() {
          return locateWindow().crypto.subtle.digest(SHA_1_HASH, _this.toHash);
        }).then(function(data) {
          return Promise.resolve(new Uint8Array(data));
        });
      };
      Sha13.prototype.reset = function() {
        this.toHash = new Uint8Array(0);
      };
      return Sha13;
    }();
    __name2(convertToBuffer2, "convertToBuffer");
  }
});
function supportsWebCrypto(window2) {
  if (supportsSecureRandom(window2) && typeof window2.crypto.subtle === "object") {
    var subtle = window2.crypto.subtle;
    return supportsSubtleCrypto(subtle);
  }
  return false;
}
__name(supportsWebCrypto, "supportsWebCrypto");
function supportsSecureRandom(window2) {
  if (typeof window2 === "object" && typeof window2.crypto === "object") {
    var getRandomValues2 = window2.crypto.getRandomValues;
    return typeof getRandomValues2 === "function";
  }
  return false;
}
__name(supportsSecureRandom, "supportsSecureRandom");
function supportsSubtleCrypto(subtle) {
  return subtle && subtleCryptoMethods.every(function(methodName) {
    return typeof subtle[methodName] === "function";
  });
}
__name(supportsSubtleCrypto, "supportsSubtleCrypto");
var subtleCryptoMethods;
var init_supportsWebCrypto = __esm({
  "../node_modules/@aws-crypto/supports-web-crypto/build/module/supportsWebCrypto.js"() {
    init_functionsRoutes_0_09879299104094341();
    subtleCryptoMethods = [
      "decrypt",
      "digest",
      "encrypt",
      "exportKey",
      "generateKey",
      "importKey",
      "sign",
      "verify"
    ];
    __name2(supportsWebCrypto, "supportsWebCrypto");
    __name2(supportsSecureRandom, "supportsSecureRandom");
    __name2(supportsSubtleCrypto, "supportsSubtleCrypto");
  }
});
var init_module4 = __esm({
  "../node_modules/@aws-crypto/supports-web-crypto/build/module/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_supportsWebCrypto();
  }
});
var Sha12;
var init_crossPlatformSha1 = __esm({
  "../node_modules/@aws-crypto/sha1-browser/build/module/crossPlatformSha1.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_webCryptoSha1();
    init_module4();
    init_dist_es43();
    init_module();
    Sha12 = /** @class */
    function() {
      function Sha13(secret) {
        if (supportsWebCrypto(locateWindow())) {
          this.hash = new Sha1(secret);
        } else {
          throw new Error("SHA1 not supported");
        }
      }
      __name(Sha13, "Sha13");
      __name2(Sha13, "Sha1");
      Sha13.prototype.update = function(data, encoding) {
        this.hash.update(convertToBuffer(data));
      };
      Sha13.prototype.digest = function() {
        return this.hash.digest();
      };
      Sha13.prototype.reset = function() {
        this.hash.reset();
      };
      return Sha13;
    }();
  }
});
var init_module5 = __esm({
  "../node_modules/@aws-crypto/sha1-browser/build/module/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_crossPlatformSha1();
    init_webCryptoSha1();
  }
});
var SHA_256_HASH;
var SHA_256_HMAC_ALGO;
var EMPTY_DATA_SHA_256;
var init_constants9 = __esm({
  "../node_modules/@aws-crypto/sha256-browser/build/module/constants.js"() {
    init_functionsRoutes_0_09879299104094341();
    SHA_256_HASH = { name: "SHA-256" };
    SHA_256_HMAC_ALGO = {
      name: "HMAC",
      hash: SHA_256_HASH
    };
    EMPTY_DATA_SHA_256 = new Uint8Array([
      227,
      176,
      196,
      66,
      152,
      252,
      28,
      20,
      154,
      251,
      244,
      200,
      153,
      111,
      185,
      36,
      39,
      174,
      65,
      228,
      100,
      155,
      147,
      76,
      164,
      149,
      153,
      27,
      120,
      82,
      184,
      85
    ]);
  }
});
var Sha256;
var init_webCryptoSha256 = __esm({
  "../node_modules/@aws-crypto/sha256-browser/build/module/webCryptoSha256.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_module();
    init_constants9();
    init_dist_es43();
    Sha256 = /** @class */
    function() {
      function Sha2564(secret) {
        this.toHash = new Uint8Array(0);
        this.secret = secret;
        this.reset();
      }
      __name(Sha2564, "Sha2564");
      __name2(Sha2564, "Sha256");
      Sha2564.prototype.update = function(data) {
        if (isEmptyData(data)) {
          return;
        }
        var update = convertToBuffer(data);
        var typedArray = new Uint8Array(this.toHash.byteLength + update.byteLength);
        typedArray.set(this.toHash, 0);
        typedArray.set(update, this.toHash.byteLength);
        this.toHash = typedArray;
      };
      Sha2564.prototype.digest = function() {
        var _this = this;
        if (this.key) {
          return this.key.then(function(key) {
            return locateWindow().crypto.subtle.sign(SHA_256_HMAC_ALGO, key, _this.toHash).then(function(data) {
              return new Uint8Array(data);
            });
          });
        }
        if (isEmptyData(this.toHash)) {
          return Promise.resolve(EMPTY_DATA_SHA_256);
        }
        return Promise.resolve().then(function() {
          return locateWindow().crypto.subtle.digest(SHA_256_HASH, _this.toHash);
        }).then(function(data) {
          return Promise.resolve(new Uint8Array(data));
        });
      };
      Sha2564.prototype.reset = function() {
        var _this = this;
        this.toHash = new Uint8Array(0);
        if (this.secret && this.secret !== void 0) {
          this.key = new Promise(function(resolve, reject) {
            locateWindow().crypto.subtle.importKey("raw", convertToBuffer(_this.secret), SHA_256_HMAC_ALGO, false, ["sign"]).then(resolve, reject);
          });
          this.key.catch(function() {
          });
        }
      };
      return Sha2564;
    }();
  }
});
var BLOCK_SIZE;
var DIGEST_LENGTH;
var KEY;
var INIT;
var MAX_HASHABLE_LENGTH;
var init_constants10 = __esm({
  "../node_modules/@aws-crypto/sha256-js/build/module/constants.js"() {
    init_functionsRoutes_0_09879299104094341();
    BLOCK_SIZE = 64;
    DIGEST_LENGTH = 32;
    KEY = new Uint32Array([
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ]);
    INIT = [
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ];
    MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1;
  }
});
var RawSha256;
var init_RawSha256 = __esm({
  "../node_modules/@aws-crypto/sha256-js/build/module/RawSha256.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_constants10();
    RawSha256 = /** @class */
    function() {
      function RawSha2562() {
        this.state = Int32Array.from(INIT);
        this.temp = new Int32Array(64);
        this.buffer = new Uint8Array(64);
        this.bufferLength = 0;
        this.bytesHashed = 0;
        this.finished = false;
      }
      __name(RawSha2562, "RawSha2562");
      __name2(RawSha2562, "RawSha256");
      RawSha2562.prototype.update = function(data) {
        if (this.finished) {
          throw new Error("Attempted to update an already finished hash.");
        }
        var position = 0;
        var byteLength = data.byteLength;
        this.bytesHashed += byteLength;
        if (this.bytesHashed * 8 > MAX_HASHABLE_LENGTH) {
          throw new Error("Cannot hash more than 2^53 - 1 bits");
        }
        while (byteLength > 0) {
          this.buffer[this.bufferLength++] = data[position++];
          byteLength--;
          if (this.bufferLength === BLOCK_SIZE) {
            this.hashBuffer();
            this.bufferLength = 0;
          }
        }
      };
      RawSha2562.prototype.digest = function() {
        if (!this.finished) {
          var bitsHashed = this.bytesHashed * 8;
          var bufferView = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);
          var undecoratedLength = this.bufferLength;
          bufferView.setUint8(this.bufferLength++, 128);
          if (undecoratedLength % BLOCK_SIZE >= BLOCK_SIZE - 8) {
            for (var i2 = this.bufferLength; i2 < BLOCK_SIZE; i2++) {
              bufferView.setUint8(i2, 0);
            }
            this.hashBuffer();
            this.bufferLength = 0;
          }
          for (var i2 = this.bufferLength; i2 < BLOCK_SIZE - 8; i2++) {
            bufferView.setUint8(i2, 0);
          }
          bufferView.setUint32(BLOCK_SIZE - 8, Math.floor(bitsHashed / 4294967296), true);
          bufferView.setUint32(BLOCK_SIZE - 4, bitsHashed);
          this.hashBuffer();
          this.finished = true;
        }
        var out = new Uint8Array(DIGEST_LENGTH);
        for (var i2 = 0; i2 < 8; i2++) {
          out[i2 * 4] = this.state[i2] >>> 24 & 255;
          out[i2 * 4 + 1] = this.state[i2] >>> 16 & 255;
          out[i2 * 4 + 2] = this.state[i2] >>> 8 & 255;
          out[i2 * 4 + 3] = this.state[i2] >>> 0 & 255;
        }
        return out;
      };
      RawSha2562.prototype.hashBuffer = function() {
        var _a2 = this, buffer = _a2.buffer, state = _a2.state;
        var state0 = state[0], state1 = state[1], state2 = state[2], state3 = state[3], state4 = state[4], state5 = state[5], state6 = state[6], state7 = state[7];
        for (var i2 = 0; i2 < BLOCK_SIZE; i2++) {
          if (i2 < 16) {
            this.temp[i2] = (buffer[i2 * 4] & 255) << 24 | (buffer[i2 * 4 + 1] & 255) << 16 | (buffer[i2 * 4 + 2] & 255) << 8 | buffer[i2 * 4 + 3] & 255;
          } else {
            var u2 = this.temp[i2 - 2];
            var t1_1 = (u2 >>> 17 | u2 << 15) ^ (u2 >>> 19 | u2 << 13) ^ u2 >>> 10;
            u2 = this.temp[i2 - 15];
            var t2_1 = (u2 >>> 7 | u2 << 25) ^ (u2 >>> 18 | u2 << 14) ^ u2 >>> 3;
            this.temp[i2] = (t1_1 + this.temp[i2 - 7] | 0) + (t2_1 + this.temp[i2 - 16] | 0);
          }
          var t1 = (((state4 >>> 6 | state4 << 26) ^ (state4 >>> 11 | state4 << 21) ^ (state4 >>> 25 | state4 << 7)) + (state4 & state5 ^ ~state4 & state6) | 0) + (state7 + (KEY[i2] + this.temp[i2] | 0) | 0) | 0;
          var t2 = ((state0 >>> 2 | state0 << 30) ^ (state0 >>> 13 | state0 << 19) ^ (state0 >>> 22 | state0 << 10)) + (state0 & state1 ^ state0 & state2 ^ state1 & state2) | 0;
          state7 = state6;
          state6 = state5;
          state5 = state4;
          state4 = state3 + t1 | 0;
          state3 = state2;
          state2 = state1;
          state1 = state0;
          state0 = t1 + t2 | 0;
        }
        state[0] += state0;
        state[1] += state1;
        state[2] += state2;
        state[3] += state3;
        state[4] += state4;
        state[5] += state5;
        state[6] += state6;
        state[7] += state7;
      };
      return RawSha2562;
    }();
  }
});
function bufferFromSecret(secret) {
  var input = convertToBuffer(secret);
  if (input.byteLength > BLOCK_SIZE) {
    var bufferHash = new RawSha256();
    bufferHash.update(input);
    input = bufferHash.digest();
  }
  var buffer = new Uint8Array(BLOCK_SIZE);
  buffer.set(input);
  return buffer;
}
__name(bufferFromSecret, "bufferFromSecret");
var Sha2562;
var init_jsSha256 = __esm({
  "../node_modules/@aws-crypto/sha256-js/build/module/jsSha256.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_tslib_es6();
    init_constants10();
    init_RawSha256();
    init_module();
    Sha2562 = /** @class */
    function() {
      function Sha2564(secret) {
        this.secret = secret;
        this.hash = new RawSha256();
        this.reset();
      }
      __name(Sha2564, "Sha2564");
      __name2(Sha2564, "Sha256");
      Sha2564.prototype.update = function(toHash) {
        if (isEmptyData(toHash) || this.error) {
          return;
        }
        try {
          this.hash.update(convertToBuffer(toHash));
        } catch (e2) {
          this.error = e2;
        }
      };
      Sha2564.prototype.digestSync = function() {
        if (this.error) {
          throw this.error;
        }
        if (this.outer) {
          if (!this.outer.finished) {
            this.outer.update(this.hash.digest());
          }
          return this.outer.digest();
        }
        return this.hash.digest();
      };
      Sha2564.prototype.digest = function() {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(_a2) {
            return [2, this.digestSync()];
          });
        });
      };
      Sha2564.prototype.reset = function() {
        this.hash = new RawSha256();
        if (this.secret) {
          this.outer = new RawSha256();
          var inner = bufferFromSecret(this.secret);
          var outer = new Uint8Array(BLOCK_SIZE);
          outer.set(inner);
          for (var i2 = 0; i2 < BLOCK_SIZE; i2++) {
            inner[i2] ^= 54;
            outer[i2] ^= 92;
          }
          this.hash.update(inner);
          this.outer.update(outer);
          for (var i2 = 0; i2 < inner.byteLength; i2++) {
            inner[i2] = 0;
          }
        }
      };
      return Sha2564;
    }();
    __name2(bufferFromSecret, "bufferFromSecret");
  }
});
var init_module6 = __esm({
  "../node_modules/@aws-crypto/sha256-js/build/module/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_jsSha256();
  }
});
var Sha2563;
var init_crossPlatformSha256 = __esm({
  "../node_modules/@aws-crypto/sha256-browser/build/module/crossPlatformSha256.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_webCryptoSha256();
    init_module6();
    init_module4();
    init_dist_es43();
    init_module();
    Sha2563 = /** @class */
    function() {
      function Sha2564(secret) {
        if (supportsWebCrypto(locateWindow())) {
          this.hash = new Sha256(secret);
        } else {
          this.hash = new Sha2562(secret);
        }
      }
      __name(Sha2564, "Sha2564");
      __name2(Sha2564, "Sha256");
      Sha2564.prototype.update = function(data, encoding) {
        this.hash.update(convertToBuffer(data));
      };
      Sha2564.prototype.digest = function() {
        return this.hash.digest();
      };
      Sha2564.prototype.reset = function() {
        this.hash.reset();
      };
      return Sha2564;
    }();
  }
});
var init_module7 = __esm({
  "../node_modules/@aws-crypto/sha256-browser/build/module/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_crossPlatformSha256();
    init_webCryptoSha256();
  }
});
var require_es5 = __commonJS({
  "../node_modules/bowser/es5.js"(exports2, module) {
    init_functionsRoutes_0_09879299104094341();
    !function(e2, t2) {
      "object" == typeof exports2 && "object" == typeof module ? module.exports = t2() : "function" == typeof define && define.amd ? define([], t2) : "object" == typeof exports2 ? exports2.bowser = t2() : e2.bowser = t2();
    }(exports2, function() {
      return function(e2) {
        var t2 = {};
        function r2(i2) {
          if (t2[i2]) return t2[i2].exports;
          var n2 = t2[i2] = { i: i2, l: false, exports: {} };
          return e2[i2].call(n2.exports, n2, n2.exports, r2), n2.l = true, n2.exports;
        }
        __name(r2, "r2");
        __name2(r2, "r");
        return r2.m = e2, r2.c = t2, r2.d = function(e3, t3, i2) {
          r2.o(e3, t3) || Object.defineProperty(e3, t3, { enumerable: true, get: i2 });
        }, r2.r = function(e3) {
          "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e3, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e3, "__esModule", { value: true });
        }, r2.t = function(e3, t3) {
          if (1 & t3 && (e3 = r2(e3)), 8 & t3) return e3;
          if (4 & t3 && "object" == typeof e3 && e3 && e3.__esModule) return e3;
          var i2 = /* @__PURE__ */ Object.create(null);
          if (r2.r(i2), Object.defineProperty(i2, "default", { enumerable: true, value: e3 }), 2 & t3 && "string" != typeof e3) for (var n2 in e3) r2.d(i2, n2, function(t4) {
            return e3[t4];
          }.bind(null, n2));
          return i2;
        }, r2.n = function(e3) {
          var t3 = e3 && e3.__esModule ? function() {
            return e3.default;
          } : function() {
            return e3;
          };
          return r2.d(t3, "a", t3), t3;
        }, r2.o = function(e3, t3) {
          return Object.prototype.hasOwnProperty.call(e3, t3);
        }, r2.p = "", r2(r2.s = 90);
      }({ 17: function(e2, t2, r2) {
        "use strict";
        t2.__esModule = true, t2.default = void 0;
        var i2 = r2(18), n2 = function() {
          function e3() {
          }
          __name(e3, "e3");
          __name2(e3, "e");
          return e3.getFirstMatch = function(e4, t3) {
            var r3 = t3.match(e4);
            return r3 && r3.length > 0 && r3[1] || "";
          }, e3.getSecondMatch = function(e4, t3) {
            var r3 = t3.match(e4);
            return r3 && r3.length > 1 && r3[2] || "";
          }, e3.matchAndReturnConst = function(e4, t3, r3) {
            if (e4.test(t3)) return r3;
          }, e3.getWindowsVersionName = function(e4) {
            switch (e4) {
              case "NT":
                return "NT";
              case "XP":
                return "XP";
              case "NT 5.0":
                return "2000";
              case "NT 5.1":
                return "XP";
              case "NT 5.2":
                return "2003";
              case "NT 6.0":
                return "Vista";
              case "NT 6.1":
                return "7";
              case "NT 6.2":
                return "8";
              case "NT 6.3":
                return "8.1";
              case "NT 10.0":
                return "10";
              default:
                return;
            }
          }, e3.getMacOSVersionName = function(e4) {
            var t3 = e4.split(".").splice(0, 2).map(function(e5) {
              return parseInt(e5, 10) || 0;
            });
            if (t3.push(0), 10 === t3[0]) switch (t3[1]) {
              case 5:
                return "Leopard";
              case 6:
                return "Snow Leopard";
              case 7:
                return "Lion";
              case 8:
                return "Mountain Lion";
              case 9:
                return "Mavericks";
              case 10:
                return "Yosemite";
              case 11:
                return "El Capitan";
              case 12:
                return "Sierra";
              case 13:
                return "High Sierra";
              case 14:
                return "Mojave";
              case 15:
                return "Catalina";
              default:
                return;
            }
          }, e3.getAndroidVersionName = function(e4) {
            var t3 = e4.split(".").splice(0, 2).map(function(e5) {
              return parseInt(e5, 10) || 0;
            });
            if (t3.push(0), !(1 === t3[0] && t3[1] < 5)) return 1 === t3[0] && t3[1] < 6 ? "Cupcake" : 1 === t3[0] && t3[1] >= 6 ? "Donut" : 2 === t3[0] && t3[1] < 2 ? "Eclair" : 2 === t3[0] && 2 === t3[1] ? "Froyo" : 2 === t3[0] && t3[1] > 2 ? "Gingerbread" : 3 === t3[0] ? "Honeycomb" : 4 === t3[0] && t3[1] < 1 ? "Ice Cream Sandwich" : 4 === t3[0] && t3[1] < 4 ? "Jelly Bean" : 4 === t3[0] && t3[1] >= 4 ? "KitKat" : 5 === t3[0] ? "Lollipop" : 6 === t3[0] ? "Marshmallow" : 7 === t3[0] ? "Nougat" : 8 === t3[0] ? "Oreo" : 9 === t3[0] ? "Pie" : void 0;
          }, e3.getVersionPrecision = function(e4) {
            return e4.split(".").length;
          }, e3.compareVersions = function(t3, r3, i3) {
            void 0 === i3 && (i3 = false);
            var n3 = e3.getVersionPrecision(t3), s2 = e3.getVersionPrecision(r3), a2 = Math.max(n3, s2), o2 = 0, u2 = e3.map([t3, r3], function(t4) {
              var r4 = a2 - e3.getVersionPrecision(t4), i4 = t4 + new Array(r4 + 1).join(".0");
              return e3.map(i4.split("."), function(e4) {
                return new Array(20 - e4.length).join("0") + e4;
              }).reverse();
            });
            for (i3 && (o2 = a2 - Math.min(n3, s2)), a2 -= 1; a2 >= o2; ) {
              if (u2[0][a2] > u2[1][a2]) return 1;
              if (u2[0][a2] === u2[1][a2]) {
                if (a2 === o2) return 0;
                a2 -= 1;
              } else if (u2[0][a2] < u2[1][a2]) return -1;
            }
          }, e3.map = function(e4, t3) {
            var r3, i3 = [];
            if (Array.prototype.map) return Array.prototype.map.call(e4, t3);
            for (r3 = 0; r3 < e4.length; r3 += 1) i3.push(t3(e4[r3]));
            return i3;
          }, e3.find = function(e4, t3) {
            var r3, i3;
            if (Array.prototype.find) return Array.prototype.find.call(e4, t3);
            for (r3 = 0, i3 = e4.length; r3 < i3; r3 += 1) {
              var n3 = e4[r3];
              if (t3(n3, r3)) return n3;
            }
          }, e3.assign = function(e4) {
            for (var t3, r3, i3 = e4, n3 = arguments.length, s2 = new Array(n3 > 1 ? n3 - 1 : 0), a2 = 1; a2 < n3; a2++) s2[a2 - 1] = arguments[a2];
            if (Object.assign) return Object.assign.apply(Object, [e4].concat(s2));
            var o2 = /* @__PURE__ */ __name2(function() {
              var e5 = s2[t3];
              "object" == typeof e5 && null !== e5 && Object.keys(e5).forEach(function(t4) {
                i3[t4] = e5[t4];
              });
            }, "o");
            for (t3 = 0, r3 = s2.length; t3 < r3; t3 += 1) o2();
            return e4;
          }, e3.getBrowserAlias = function(e4) {
            return i2.BROWSER_ALIASES_MAP[e4];
          }, e3.getBrowserTypeByAlias = function(e4) {
            return i2.BROWSER_MAP[e4] || "";
          }, e3;
        }();
        t2.default = n2, e2.exports = t2.default;
      }, 18: function(e2, t2, r2) {
        "use strict";
        t2.__esModule = true, t2.ENGINE_MAP = t2.OS_MAP = t2.PLATFORMS_MAP = t2.BROWSER_MAP = t2.BROWSER_ALIASES_MAP = void 0;
        t2.BROWSER_ALIASES_MAP = { "Amazon Silk": "amazon_silk", "Android Browser": "android", Bada: "bada", BlackBerry: "blackberry", Chrome: "chrome", Chromium: "chromium", Electron: "electron", Epiphany: "epiphany", Firefox: "firefox", Focus: "focus", Generic: "generic", "Google Search": "google_search", Googlebot: "googlebot", "Internet Explorer": "ie", "K-Meleon": "k_meleon", Maxthon: "maxthon", "Microsoft Edge": "edge", "MZ Browser": "mz", "NAVER Whale Browser": "naver", Opera: "opera", "Opera Coast": "opera_coast", "Pale Moon": "pale_moon", PhantomJS: "phantomjs", Puffin: "puffin", QupZilla: "qupzilla", QQ: "qq", QQLite: "qqlite", Safari: "safari", Sailfish: "sailfish", "Samsung Internet for Android": "samsung_internet", SeaMonkey: "seamonkey", Sleipnir: "sleipnir", Swing: "swing", Tizen: "tizen", "UC Browser": "uc", Vivaldi: "vivaldi", "WebOS Browser": "webos", WeChat: "wechat", "Yandex Browser": "yandex", Roku: "roku" };
        t2.BROWSER_MAP = { amazon_silk: "Amazon Silk", android: "Android Browser", bada: "Bada", blackberry: "BlackBerry", chrome: "Chrome", chromium: "Chromium", electron: "Electron", epiphany: "Epiphany", firefox: "Firefox", focus: "Focus", generic: "Generic", googlebot: "Googlebot", google_search: "Google Search", ie: "Internet Explorer", k_meleon: "K-Meleon", maxthon: "Maxthon", edge: "Microsoft Edge", mz: "MZ Browser", naver: "NAVER Whale Browser", opera: "Opera", opera_coast: "Opera Coast", pale_moon: "Pale Moon", phantomjs: "PhantomJS", puffin: "Puffin", qupzilla: "QupZilla", qq: "QQ Browser", qqlite: "QQ Browser Lite", safari: "Safari", sailfish: "Sailfish", samsung_internet: "Samsung Internet for Android", seamonkey: "SeaMonkey", sleipnir: "Sleipnir", swing: "Swing", tizen: "Tizen", uc: "UC Browser", vivaldi: "Vivaldi", webos: "WebOS Browser", wechat: "WeChat", yandex: "Yandex Browser" };
        t2.PLATFORMS_MAP = { tablet: "tablet", mobile: "mobile", desktop: "desktop", tv: "tv", bot: "bot" };
        t2.OS_MAP = { WindowsPhone: "Windows Phone", Windows: "Windows", MacOS: "macOS", iOS: "iOS", Android: "Android", WebOS: "WebOS", BlackBerry: "BlackBerry", Bada: "Bada", Tizen: "Tizen", Linux: "Linux", ChromeOS: "Chrome OS", PlayStation4: "PlayStation 4", Roku: "Roku" };
        t2.ENGINE_MAP = { EdgeHTML: "EdgeHTML", Blink: "Blink", Trident: "Trident", Presto: "Presto", Gecko: "Gecko", WebKit: "WebKit" };
      }, 90: function(e2, t2, r2) {
        "use strict";
        t2.__esModule = true, t2.default = void 0;
        var i2, n2 = (i2 = r2(91)) && i2.__esModule ? i2 : { default: i2 }, s2 = r2(18);
        function a2(e3, t3) {
          for (var r3 = 0; r3 < t3.length; r3++) {
            var i3 = t3[r3];
            i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(e3, i3.key, i3);
          }
        }
        __name(a2, "a2");
        __name2(a2, "a");
        var o2 = function() {
          function e3() {
          }
          __name(e3, "e3");
          __name2(e3, "e");
          var t3, r3, i3;
          return e3.getParser = function(e4, t4) {
            if (void 0 === t4 && (t4 = false), "string" != typeof e4) throw new Error("UserAgent should be a string");
            return new n2.default(e4, t4);
          }, e3.parse = function(e4) {
            return new n2.default(e4).getResult();
          }, t3 = e3, i3 = [{ key: "BROWSER_MAP", get: /* @__PURE__ */ __name2(function() {
            return s2.BROWSER_MAP;
          }, "get") }, { key: "ENGINE_MAP", get: /* @__PURE__ */ __name2(function() {
            return s2.ENGINE_MAP;
          }, "get") }, { key: "OS_MAP", get: /* @__PURE__ */ __name2(function() {
            return s2.OS_MAP;
          }, "get") }, { key: "PLATFORMS_MAP", get: /* @__PURE__ */ __name2(function() {
            return s2.PLATFORMS_MAP;
          }, "get") }], (r3 = null) && a2(t3.prototype, r3), i3 && a2(t3, i3), e3;
        }();
        t2.default = o2, e2.exports = t2.default;
      }, 91: function(e2, t2, r2) {
        "use strict";
        t2.__esModule = true, t2.default = void 0;
        var i2 = u2(r2(92)), n2 = u2(r2(93)), s2 = u2(r2(94)), a2 = u2(r2(95)), o2 = u2(r2(17));
        function u2(e3) {
          return e3 && e3.__esModule ? e3 : { default: e3 };
        }
        __name(u2, "u2");
        __name2(u2, "u");
        var d2 = function() {
          function e3(e4, t4) {
            if (void 0 === t4 && (t4 = false), null == e4 || "" === e4) throw new Error("UserAgent parameter can't be empty");
            this._ua = e4, this.parsedResult = {}, true !== t4 && this.parse();
          }
          __name(e3, "e3");
          __name2(e3, "e");
          var t3 = e3.prototype;
          return t3.getUA = function() {
            return this._ua;
          }, t3.test = function(e4) {
            return e4.test(this._ua);
          }, t3.parseBrowser = function() {
            var e4 = this;
            this.parsedResult.browser = {};
            var t4 = o2.default.find(i2.default, function(t5) {
              if ("function" == typeof t5.test) return t5.test(e4);
              if (Array.isArray(t5.test)) return t5.test.some(function(t6) {
                return e4.test(t6);
              });
              throw new Error("Browser's test function is not valid");
            });
            return t4 && (this.parsedResult.browser = t4.describe(this.getUA())), this.parsedResult.browser;
          }, t3.getBrowser = function() {
            return this.parsedResult.browser ? this.parsedResult.browser : this.parseBrowser();
          }, t3.getBrowserName = function(e4) {
            return e4 ? String(this.getBrowser().name).toLowerCase() || "" : this.getBrowser().name || "";
          }, t3.getBrowserVersion = function() {
            return this.getBrowser().version;
          }, t3.getOS = function() {
            return this.parsedResult.os ? this.parsedResult.os : this.parseOS();
          }, t3.parseOS = function() {
            var e4 = this;
            this.parsedResult.os = {};
            var t4 = o2.default.find(n2.default, function(t5) {
              if ("function" == typeof t5.test) return t5.test(e4);
              if (Array.isArray(t5.test)) return t5.test.some(function(t6) {
                return e4.test(t6);
              });
              throw new Error("Browser's test function is not valid");
            });
            return t4 && (this.parsedResult.os = t4.describe(this.getUA())), this.parsedResult.os;
          }, t3.getOSName = function(e4) {
            var t4 = this.getOS().name;
            return e4 ? String(t4).toLowerCase() || "" : t4 || "";
          }, t3.getOSVersion = function() {
            return this.getOS().version;
          }, t3.getPlatform = function() {
            return this.parsedResult.platform ? this.parsedResult.platform : this.parsePlatform();
          }, t3.getPlatformType = function(e4) {
            void 0 === e4 && (e4 = false);
            var t4 = this.getPlatform().type;
            return e4 ? String(t4).toLowerCase() || "" : t4 || "";
          }, t3.parsePlatform = function() {
            var e4 = this;
            this.parsedResult.platform = {};
            var t4 = o2.default.find(s2.default, function(t5) {
              if ("function" == typeof t5.test) return t5.test(e4);
              if (Array.isArray(t5.test)) return t5.test.some(function(t6) {
                return e4.test(t6);
              });
              throw new Error("Browser's test function is not valid");
            });
            return t4 && (this.parsedResult.platform = t4.describe(this.getUA())), this.parsedResult.platform;
          }, t3.getEngine = function() {
            return this.parsedResult.engine ? this.parsedResult.engine : this.parseEngine();
          }, t3.getEngineName = function(e4) {
            return e4 ? String(this.getEngine().name).toLowerCase() || "" : this.getEngine().name || "";
          }, t3.parseEngine = function() {
            var e4 = this;
            this.parsedResult.engine = {};
            var t4 = o2.default.find(a2.default, function(t5) {
              if ("function" == typeof t5.test) return t5.test(e4);
              if (Array.isArray(t5.test)) return t5.test.some(function(t6) {
                return e4.test(t6);
              });
              throw new Error("Browser's test function is not valid");
            });
            return t4 && (this.parsedResult.engine = t4.describe(this.getUA())), this.parsedResult.engine;
          }, t3.parse = function() {
            return this.parseBrowser(), this.parseOS(), this.parsePlatform(), this.parseEngine(), this;
          }, t3.getResult = function() {
            return o2.default.assign({}, this.parsedResult);
          }, t3.satisfies = function(e4) {
            var t4 = this, r3 = {}, i3 = 0, n3 = {}, s3 = 0;
            if (Object.keys(e4).forEach(function(t5) {
              var a4 = e4[t5];
              "string" == typeof a4 ? (n3[t5] = a4, s3 += 1) : "object" == typeof a4 && (r3[t5] = a4, i3 += 1);
            }), i3 > 0) {
              var a3 = Object.keys(r3), u3 = o2.default.find(a3, function(e5) {
                return t4.isOS(e5);
              });
              if (u3) {
                var d3 = this.satisfies(r3[u3]);
                if (void 0 !== d3) return d3;
              }
              var c2 = o2.default.find(a3, function(e5) {
                return t4.isPlatform(e5);
              });
              if (c2) {
                var f2 = this.satisfies(r3[c2]);
                if (void 0 !== f2) return f2;
              }
            }
            if (s3 > 0) {
              var l2 = Object.keys(n3), h2 = o2.default.find(l2, function(e5) {
                return t4.isBrowser(e5, true);
              });
              if (void 0 !== h2) return this.compareVersion(n3[h2]);
            }
          }, t3.isBrowser = function(e4, t4) {
            void 0 === t4 && (t4 = false);
            var r3 = this.getBrowserName().toLowerCase(), i3 = e4.toLowerCase(), n3 = o2.default.getBrowserTypeByAlias(i3);
            return t4 && n3 && (i3 = n3.toLowerCase()), i3 === r3;
          }, t3.compareVersion = function(e4) {
            var t4 = [0], r3 = e4, i3 = false, n3 = this.getBrowserVersion();
            if ("string" == typeof n3) return ">" === e4[0] || "<" === e4[0] ? (r3 = e4.substr(1), "=" === e4[1] ? (i3 = true, r3 = e4.substr(2)) : t4 = [], ">" === e4[0] ? t4.push(1) : t4.push(-1)) : "=" === e4[0] ? r3 = e4.substr(1) : "~" === e4[0] && (i3 = true, r3 = e4.substr(1)), t4.indexOf(o2.default.compareVersions(n3, r3, i3)) > -1;
          }, t3.isOS = function(e4) {
            return this.getOSName(true) === String(e4).toLowerCase();
          }, t3.isPlatform = function(e4) {
            return this.getPlatformType(true) === String(e4).toLowerCase();
          }, t3.isEngine = function(e4) {
            return this.getEngineName(true) === String(e4).toLowerCase();
          }, t3.is = function(e4, t4) {
            return void 0 === t4 && (t4 = false), this.isBrowser(e4, t4) || this.isOS(e4) || this.isPlatform(e4);
          }, t3.some = function(e4) {
            var t4 = this;
            return void 0 === e4 && (e4 = []), e4.some(function(e5) {
              return t4.is(e5);
            });
          }, e3;
        }();
        t2.default = d2, e2.exports = t2.default;
      }, 92: function(e2, t2, r2) {
        "use strict";
        t2.__esModule = true, t2.default = void 0;
        var i2, n2 = (i2 = r2(17)) && i2.__esModule ? i2 : { default: i2 };
        var s2 = /version\/(\d+(\.?_?\d+)+)/i, a2 = [{ test: [/googlebot/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "Googlebot" }, r3 = n2.default.getFirstMatch(/googlebot\/(\d+(\.\d+))/i, e3) || n2.default.getFirstMatch(s2, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/opera/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "Opera" }, r3 = n2.default.getFirstMatch(s2, e3) || n2.default.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/opr\/|opios/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "Opera" }, r3 = n2.default.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i, e3) || n2.default.getFirstMatch(s2, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/SamsungBrowser/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "Samsung Internet for Android" }, r3 = n2.default.getFirstMatch(s2, e3) || n2.default.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/Whale/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "NAVER Whale Browser" }, r3 = n2.default.getFirstMatch(s2, e3) || n2.default.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/PaleMoon/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "Pale Moon" }, r3 = n2.default.getFirstMatch(s2, e3) || n2.default.getFirstMatch(/(?:PaleMoon)[\s/](\d+(?:\.\d+)+)/i, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/MZBrowser/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "MZ Browser" }, r3 = n2.default.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i, e3) || n2.default.getFirstMatch(s2, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/focus/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "Focus" }, r3 = n2.default.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i, e3) || n2.default.getFirstMatch(s2, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/swing/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "Swing" }, r3 = n2.default.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i, e3) || n2.default.getFirstMatch(s2, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/coast/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "Opera Coast" }, r3 = n2.default.getFirstMatch(s2, e3) || n2.default.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/opt\/\d+(?:.?_?\d+)+/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "Opera Touch" }, r3 = n2.default.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i, e3) || n2.default.getFirstMatch(s2, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/yabrowser/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "Yandex Browser" }, r3 = n2.default.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i, e3) || n2.default.getFirstMatch(s2, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/ucbrowser/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "UC Browser" }, r3 = n2.default.getFirstMatch(s2, e3) || n2.default.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/Maxthon|mxios/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "Maxthon" }, r3 = n2.default.getFirstMatch(s2, e3) || n2.default.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/epiphany/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "Epiphany" }, r3 = n2.default.getFirstMatch(s2, e3) || n2.default.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/puffin/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "Puffin" }, r3 = n2.default.getFirstMatch(s2, e3) || n2.default.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/sleipnir/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "Sleipnir" }, r3 = n2.default.getFirstMatch(s2, e3) || n2.default.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/k-meleon/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "K-Meleon" }, r3 = n2.default.getFirstMatch(s2, e3) || n2.default.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/micromessenger/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "WeChat" }, r3 = n2.default.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i, e3) || n2.default.getFirstMatch(s2, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/qqbrowser/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: /qqbrowserlite/i.test(e3) ? "QQ Browser Lite" : "QQ Browser" }, r3 = n2.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i, e3) || n2.default.getFirstMatch(s2, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/msie|trident/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "Internet Explorer" }, r3 = n2.default.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/\sedg\//i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "Microsoft Edge" }, r3 = n2.default.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/edg([ea]|ios)/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "Microsoft Edge" }, r3 = n2.default.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/vivaldi/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "Vivaldi" }, r3 = n2.default.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/seamonkey/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "SeaMonkey" }, r3 = n2.default.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/sailfish/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "Sailfish" }, r3 = n2.default.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/silk/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "Amazon Silk" }, r3 = n2.default.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/phantom/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "PhantomJS" }, r3 = n2.default.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/slimerjs/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "SlimerJS" }, r3 = n2.default.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/blackberry|\bbb\d+/i, /rim\stablet/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "BlackBerry" }, r3 = n2.default.getFirstMatch(s2, e3) || n2.default.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/(web|hpw)[o0]s/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "WebOS Browser" }, r3 = n2.default.getFirstMatch(s2, e3) || n2.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/bada/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "Bada" }, r3 = n2.default.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/tizen/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "Tizen" }, r3 = n2.default.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i, e3) || n2.default.getFirstMatch(s2, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/qupzilla/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "QupZilla" }, r3 = n2.default.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i, e3) || n2.default.getFirstMatch(s2, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/firefox|iceweasel|fxios/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "Firefox" }, r3 = n2.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/electron/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "Electron" }, r3 = n2.default.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/MiuiBrowser/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "Miui" }, r3 = n2.default.getFirstMatch(/(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/chromium/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "Chromium" }, r3 = n2.default.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i, e3) || n2.default.getFirstMatch(s2, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/chrome|crios|crmo/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "Chrome" }, r3 = n2.default.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/GSA/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "Google Search" }, r3 = n2.default.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: /* @__PURE__ */ __name2(function(e3) {
          var t3 = !e3.test(/like android/i), r3 = e3.test(/android/i);
          return t3 && r3;
        }, "test"), describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "Android Browser" }, r3 = n2.default.getFirstMatch(s2, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/playstation 4/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "PlayStation 4" }, r3 = n2.default.getFirstMatch(s2, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/safari|applewebkit/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: "Safari" }, r3 = n2.default.getFirstMatch(s2, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/.*/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = -1 !== e3.search("\\(") ? /^(.*)\/(.*)[ \t]\((.*)/ : /^(.*)\/(.*) /;
          return { name: n2.default.getFirstMatch(t3, e3), version: n2.default.getSecondMatch(t3, e3) };
        }, "describe") }];
        t2.default = a2, e2.exports = t2.default;
      }, 93: function(e2, t2, r2) {
        "use strict";
        t2.__esModule = true, t2.default = void 0;
        var i2, n2 = (i2 = r2(17)) && i2.__esModule ? i2 : { default: i2 }, s2 = r2(18);
        var a2 = [{ test: [/Roku\/DVP/], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = n2.default.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i, e3);
          return { name: s2.OS_MAP.Roku, version: t3 };
        }, "describe") }, { test: [/windows phone/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = n2.default.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i, e3);
          return { name: s2.OS_MAP.WindowsPhone, version: t3 };
        }, "describe") }, { test: [/windows /i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = n2.default.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i, e3), r3 = n2.default.getWindowsVersionName(t3);
          return { name: s2.OS_MAP.Windows, version: t3, versionName: r3 };
        }, "describe") }, { test: [/Macintosh(.*?) FxiOS(.*?)\//], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: s2.OS_MAP.iOS }, r3 = n2.default.getSecondMatch(/(Version\/)(\d[\d.]+)/, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/macintosh/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = n2.default.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i, e3).replace(/[_\s]/g, "."), r3 = n2.default.getMacOSVersionName(t3), i3 = { name: s2.OS_MAP.MacOS, version: t3 };
          return r3 && (i3.versionName = r3), i3;
        }, "describe") }, { test: [/(ipod|iphone|ipad)/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = n2.default.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i, e3).replace(/[_\s]/g, ".");
          return { name: s2.OS_MAP.iOS, version: t3 };
        }, "describe") }, { test: /* @__PURE__ */ __name2(function(e3) {
          var t3 = !e3.test(/like android/i), r3 = e3.test(/android/i);
          return t3 && r3;
        }, "test"), describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = n2.default.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i, e3), r3 = n2.default.getAndroidVersionName(t3), i3 = { name: s2.OS_MAP.Android, version: t3 };
          return r3 && (i3.versionName = r3), i3;
        }, "describe") }, { test: [/(web|hpw)[o0]s/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = n2.default.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i, e3), r3 = { name: s2.OS_MAP.WebOS };
          return t3 && t3.length && (r3.version = t3), r3;
        }, "describe") }, { test: [/blackberry|\bbb\d+/i, /rim\stablet/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = n2.default.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i, e3) || n2.default.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i, e3) || n2.default.getFirstMatch(/\bbb(\d+)/i, e3);
          return { name: s2.OS_MAP.BlackBerry, version: t3 };
        }, "describe") }, { test: [/bada/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = n2.default.getFirstMatch(/bada\/(\d+(\.\d+)*)/i, e3);
          return { name: s2.OS_MAP.Bada, version: t3 };
        }, "describe") }, { test: [/tizen/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = n2.default.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i, e3);
          return { name: s2.OS_MAP.Tizen, version: t3 };
        }, "describe") }, { test: [/linux/i], describe: /* @__PURE__ */ __name2(function() {
          return { name: s2.OS_MAP.Linux };
        }, "describe") }, { test: [/CrOS/], describe: /* @__PURE__ */ __name2(function() {
          return { name: s2.OS_MAP.ChromeOS };
        }, "describe") }, { test: [/PlayStation 4/], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = n2.default.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i, e3);
          return { name: s2.OS_MAP.PlayStation4, version: t3 };
        }, "describe") }];
        t2.default = a2, e2.exports = t2.default;
      }, 94: function(e2, t2, r2) {
        "use strict";
        t2.__esModule = true, t2.default = void 0;
        var i2, n2 = (i2 = r2(17)) && i2.__esModule ? i2 : { default: i2 }, s2 = r2(18);
        var a2 = [{ test: [/googlebot/i], describe: /* @__PURE__ */ __name2(function() {
          return { type: s2.PLATFORMS_MAP.bot, vendor: "Google" };
        }, "describe") }, { test: [/huawei/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = n2.default.getFirstMatch(/(can-l01)/i, e3) && "Nova", r3 = { type: s2.PLATFORMS_MAP.mobile, vendor: "Huawei" };
          return t3 && (r3.model = t3), r3;
        }, "describe") }, { test: [/nexus\s*(?:7|8|9|10).*/i], describe: /* @__PURE__ */ __name2(function() {
          return { type: s2.PLATFORMS_MAP.tablet, vendor: "Nexus" };
        }, "describe") }, { test: [/ipad/i], describe: /* @__PURE__ */ __name2(function() {
          return { type: s2.PLATFORMS_MAP.tablet, vendor: "Apple", model: "iPad" };
        }, "describe") }, { test: [/Macintosh(.*?) FxiOS(.*?)\//], describe: /* @__PURE__ */ __name2(function() {
          return { type: s2.PLATFORMS_MAP.tablet, vendor: "Apple", model: "iPad" };
        }, "describe") }, { test: [/kftt build/i], describe: /* @__PURE__ */ __name2(function() {
          return { type: s2.PLATFORMS_MAP.tablet, vendor: "Amazon", model: "Kindle Fire HD 7" };
        }, "describe") }, { test: [/silk/i], describe: /* @__PURE__ */ __name2(function() {
          return { type: s2.PLATFORMS_MAP.tablet, vendor: "Amazon" };
        }, "describe") }, { test: [/tablet(?! pc)/i], describe: /* @__PURE__ */ __name2(function() {
          return { type: s2.PLATFORMS_MAP.tablet };
        }, "describe") }, { test: /* @__PURE__ */ __name2(function(e3) {
          var t3 = e3.test(/ipod|iphone/i), r3 = e3.test(/like (ipod|iphone)/i);
          return t3 && !r3;
        }, "test"), describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = n2.default.getFirstMatch(/(ipod|iphone)/i, e3);
          return { type: s2.PLATFORMS_MAP.mobile, vendor: "Apple", model: t3 };
        }, "describe") }, { test: [/nexus\s*[0-6].*/i, /galaxy nexus/i], describe: /* @__PURE__ */ __name2(function() {
          return { type: s2.PLATFORMS_MAP.mobile, vendor: "Nexus" };
        }, "describe") }, { test: [/Nokia/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = n2.default.getFirstMatch(/Nokia\s+([0-9]+(\.[0-9]+)?)/i, e3), r3 = { type: s2.PLATFORMS_MAP.mobile, vendor: "Nokia" };
          return t3 && (r3.model = t3), r3;
        }, "describe") }, { test: [/[^-]mobi/i], describe: /* @__PURE__ */ __name2(function() {
          return { type: s2.PLATFORMS_MAP.mobile };
        }, "describe") }, { test: /* @__PURE__ */ __name2(function(e3) {
          return "blackberry" === e3.getBrowserName(true);
        }, "test"), describe: /* @__PURE__ */ __name2(function() {
          return { type: s2.PLATFORMS_MAP.mobile, vendor: "BlackBerry" };
        }, "describe") }, { test: /* @__PURE__ */ __name2(function(e3) {
          return "bada" === e3.getBrowserName(true);
        }, "test"), describe: /* @__PURE__ */ __name2(function() {
          return { type: s2.PLATFORMS_MAP.mobile };
        }, "describe") }, { test: /* @__PURE__ */ __name2(function(e3) {
          return "windows phone" === e3.getBrowserName();
        }, "test"), describe: /* @__PURE__ */ __name2(function() {
          return { type: s2.PLATFORMS_MAP.mobile, vendor: "Microsoft" };
        }, "describe") }, { test: /* @__PURE__ */ __name2(function(e3) {
          var t3 = Number(String(e3.getOSVersion()).split(".")[0]);
          return "android" === e3.getOSName(true) && t3 >= 3;
        }, "test"), describe: /* @__PURE__ */ __name2(function() {
          return { type: s2.PLATFORMS_MAP.tablet };
        }, "describe") }, { test: /* @__PURE__ */ __name2(function(e3) {
          return "android" === e3.getOSName(true);
        }, "test"), describe: /* @__PURE__ */ __name2(function() {
          return { type: s2.PLATFORMS_MAP.mobile };
        }, "describe") }, { test: /* @__PURE__ */ __name2(function(e3) {
          return "macos" === e3.getOSName(true);
        }, "test"), describe: /* @__PURE__ */ __name2(function() {
          return { type: s2.PLATFORMS_MAP.desktop, vendor: "Apple" };
        }, "describe") }, { test: /* @__PURE__ */ __name2(function(e3) {
          return "windows" === e3.getOSName(true);
        }, "test"), describe: /* @__PURE__ */ __name2(function() {
          return { type: s2.PLATFORMS_MAP.desktop };
        }, "describe") }, { test: /* @__PURE__ */ __name2(function(e3) {
          return "linux" === e3.getOSName(true);
        }, "test"), describe: /* @__PURE__ */ __name2(function() {
          return { type: s2.PLATFORMS_MAP.desktop };
        }, "describe") }, { test: /* @__PURE__ */ __name2(function(e3) {
          return "playstation 4" === e3.getOSName(true);
        }, "test"), describe: /* @__PURE__ */ __name2(function() {
          return { type: s2.PLATFORMS_MAP.tv };
        }, "describe") }, { test: /* @__PURE__ */ __name2(function(e3) {
          return "roku" === e3.getOSName(true);
        }, "test"), describe: /* @__PURE__ */ __name2(function() {
          return { type: s2.PLATFORMS_MAP.tv };
        }, "describe") }];
        t2.default = a2, e2.exports = t2.default;
      }, 95: function(e2, t2, r2) {
        "use strict";
        t2.__esModule = true, t2.default = void 0;
        var i2, n2 = (i2 = r2(17)) && i2.__esModule ? i2 : { default: i2 }, s2 = r2(18);
        var a2 = [{ test: /* @__PURE__ */ __name2(function(e3) {
          return "microsoft edge" === e3.getBrowserName(true);
        }, "test"), describe: /* @__PURE__ */ __name2(function(e3) {
          if (/\sedg\//i.test(e3)) return { name: s2.ENGINE_MAP.Blink };
          var t3 = n2.default.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i, e3);
          return { name: s2.ENGINE_MAP.EdgeHTML, version: t3 };
        }, "describe") }, { test: [/trident/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: s2.ENGINE_MAP.Trident }, r3 = n2.default.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: /* @__PURE__ */ __name2(function(e3) {
          return e3.test(/presto/i);
        }, "test"), describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: s2.ENGINE_MAP.Presto }, r3 = n2.default.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: /* @__PURE__ */ __name2(function(e3) {
          var t3 = e3.test(/gecko/i), r3 = e3.test(/like gecko/i);
          return t3 && !r3;
        }, "test"), describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: s2.ENGINE_MAP.Gecko }, r3 = n2.default.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }, { test: [/(apple)?webkit\/537\.36/i], describe: /* @__PURE__ */ __name2(function() {
          return { name: s2.ENGINE_MAP.Blink };
        }, "describe") }, { test: [/(apple)?webkit/i], describe: /* @__PURE__ */ __name2(function(e3) {
          var t3 = { name: s2.ENGINE_MAP.WebKit }, r3 = n2.default.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i, e3);
          return r3 && (t3.version = r3), t3;
        }, "describe") }];
        t2.default = a2, e2.exports = t2.default;
      } });
    });
  }
});
var import_bowser;
var createDefaultUserAgentProvider;
var init_dist_es44 = __esm({
  "../node_modules/@aws-sdk/util-user-agent-browser/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    import_bowser = __toESM(require_es5());
    createDefaultUserAgentProvider = /* @__PURE__ */ __name2(({ serviceId, clientVersion }) => async (config2) => {
      const parsedUA = typeof window !== "undefined" && window?.navigator?.userAgent ? import_bowser.default.parse(window.navigator.userAgent) : void 0;
      const sections = [
        ["aws-sdk-js", clientVersion],
        ["ua", "2.1"],
        [`os/${parsedUA?.os?.name || "other"}`, parsedUA?.os?.version],
        ["lang/js"],
        ["md/browser", `${parsedUA?.browser?.name ?? "unknown"}_${parsedUA?.browser?.version ?? "unknown"}`]
      ];
      if (serviceId) {
        sections.push([`api/${serviceId}`, clientVersion]);
      }
      const appId = await config2?.userAgentAppId?.();
      if (appId) {
        sections.push([`app/${appId}`]);
      }
      return sections;
    }, "createDefaultUserAgentProvider");
  }
});
function negate2(bytes) {
  for (let i2 = 0; i2 < 8; i2++) {
    bytes[i2] ^= 255;
  }
  for (let i2 = 7; i2 > -1; i2--) {
    bytes[i2]++;
    if (bytes[i2] !== 0)
      break;
  }
}
__name(negate2, "negate2");
var Int642;
var init_Int64 = __esm({
  "../node_modules/@smithy/eventstream-codec/dist-es/Int64.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es11();
    Int642 = class _Int64 {
      static {
        __name(this, "_Int64");
      }
      static {
        __name2(this, "Int64");
      }
      constructor(bytes) {
        this.bytes = bytes;
        if (bytes.byteLength !== 8) {
          throw new Error("Int64 buffers must be exactly 8 bytes");
        }
      }
      static fromNumber(number4) {
        if (number4 > 9223372036854776e3 || number4 < -9223372036854776e3) {
          throw new Error(`${number4} is too large (or, if negative, too small) to represent as an Int64`);
        }
        const bytes = new Uint8Array(8);
        for (let i2 = 7, remaining = Math.abs(Math.round(number4)); i2 > -1 && remaining > 0; i2--, remaining /= 256) {
          bytes[i2] = remaining;
        }
        if (number4 < 0) {
          negate2(bytes);
        }
        return new _Int64(bytes);
      }
      valueOf() {
        const bytes = this.bytes.slice(0);
        const negative = bytes[0] & 128;
        if (negative) {
          negate2(bytes);
        }
        return parseInt(toHex(bytes), 16) * (negative ? -1 : 1);
      }
      toString() {
        return String(this.valueOf());
      }
    };
    __name2(negate2, "negate");
  }
});
var HeaderMarshaller;
var HEADER_VALUE_TYPE2;
var BOOLEAN_TAG;
var BYTE_TAG;
var SHORT_TAG;
var INT_TAG;
var LONG_TAG;
var BINARY_TAG;
var STRING_TAG;
var TIMESTAMP_TAG;
var UUID_TAG;
var UUID_PATTERN2;
var init_HeaderMarshaller = __esm({
  "../node_modules/@smithy/eventstream-codec/dist-es/HeaderMarshaller.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es11();
    init_Int64();
    HeaderMarshaller = class {
      static {
        __name(this, "HeaderMarshaller");
      }
      static {
        __name2(this, "HeaderMarshaller");
      }
      constructor(toUtf82, fromUtf85) {
        this.toUtf8 = toUtf82;
        this.fromUtf8 = fromUtf85;
      }
      format(headers) {
        const chunks = [];
        for (const headerName of Object.keys(headers)) {
          const bytes = this.fromUtf8(headerName);
          chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));
        }
        const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));
        let position = 0;
        for (const chunk of chunks) {
          out.set(chunk, position);
          position += chunk.byteLength;
        }
        return out;
      }
      formatHeaderValue(header) {
        switch (header.type) {
          case "boolean":
            return Uint8Array.from([header.value ? 0 : 1]);
          case "byte":
            return Uint8Array.from([2, header.value]);
          case "short":
            const shortView = new DataView(new ArrayBuffer(3));
            shortView.setUint8(0, 3);
            shortView.setInt16(1, header.value, false);
            return new Uint8Array(shortView.buffer);
          case "integer":
            const intView = new DataView(new ArrayBuffer(5));
            intView.setUint8(0, 4);
            intView.setInt32(1, header.value, false);
            return new Uint8Array(intView.buffer);
          case "long":
            const longBytes = new Uint8Array(9);
            longBytes[0] = 5;
            longBytes.set(header.value.bytes, 1);
            return longBytes;
          case "binary":
            const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));
            binView.setUint8(0, 6);
            binView.setUint16(1, header.value.byteLength, false);
            const binBytes = new Uint8Array(binView.buffer);
            binBytes.set(header.value, 3);
            return binBytes;
          case "string":
            const utf8Bytes = this.fromUtf8(header.value);
            const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));
            strView.setUint8(0, 7);
            strView.setUint16(1, utf8Bytes.byteLength, false);
            const strBytes = new Uint8Array(strView.buffer);
            strBytes.set(utf8Bytes, 3);
            return strBytes;
          case "timestamp":
            const tsBytes = new Uint8Array(9);
            tsBytes[0] = 8;
            tsBytes.set(Int642.fromNumber(header.value.valueOf()).bytes, 1);
            return tsBytes;
          case "uuid":
            if (!UUID_PATTERN2.test(header.value)) {
              throw new Error(`Invalid UUID received: ${header.value}`);
            }
            const uuidBytes = new Uint8Array(17);
            uuidBytes[0] = 9;
            uuidBytes.set(fromHex(header.value.replace(/\-/g, "")), 1);
            return uuidBytes;
        }
      }
      parse(headers) {
        const out = {};
        let position = 0;
        while (position < headers.byteLength) {
          const nameLength = headers.getUint8(position++);
          const name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));
          position += nameLength;
          switch (headers.getUint8(position++)) {
            case 0:
              out[name] = {
                type: BOOLEAN_TAG,
                value: true
              };
              break;
            case 1:
              out[name] = {
                type: BOOLEAN_TAG,
                value: false
              };
              break;
            case 2:
              out[name] = {
                type: BYTE_TAG,
                value: headers.getInt8(position++)
              };
              break;
            case 3:
              out[name] = {
                type: SHORT_TAG,
                value: headers.getInt16(position, false)
              };
              position += 2;
              break;
            case 4:
              out[name] = {
                type: INT_TAG,
                value: headers.getInt32(position, false)
              };
              position += 4;
              break;
            case 5:
              out[name] = {
                type: LONG_TAG,
                value: new Int642(new Uint8Array(headers.buffer, headers.byteOffset + position, 8))
              };
              position += 8;
              break;
            case 6:
              const binaryLength = headers.getUint16(position, false);
              position += 2;
              out[name] = {
                type: BINARY_TAG,
                value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength)
              };
              position += binaryLength;
              break;
            case 7:
              const stringLength = headers.getUint16(position, false);
              position += 2;
              out[name] = {
                type: STRING_TAG,
                value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength))
              };
              position += stringLength;
              break;
            case 8:
              out[name] = {
                type: TIMESTAMP_TAG,
                value: new Date(new Int642(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf())
              };
              position += 8;
              break;
            case 9:
              const uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);
              position += 16;
              out[name] = {
                type: UUID_TAG,
                value: `${toHex(uuidBytes.subarray(0, 4))}-${toHex(uuidBytes.subarray(4, 6))}-${toHex(uuidBytes.subarray(6, 8))}-${toHex(uuidBytes.subarray(8, 10))}-${toHex(uuidBytes.subarray(10))}`
              };
              break;
            default:
              throw new Error(`Unrecognized header type tag`);
          }
        }
        return out;
      }
    };
    (function(HEADER_VALUE_TYPE3) {
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["boolTrue"] = 0] = "boolTrue";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["boolFalse"] = 1] = "boolFalse";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["byte"] = 2] = "byte";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["short"] = 3] = "short";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["integer"] = 4] = "integer";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["long"] = 5] = "long";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["byteArray"] = 6] = "byteArray";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["string"] = 7] = "string";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["timestamp"] = 8] = "timestamp";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["uuid"] = 9] = "uuid";
    })(HEADER_VALUE_TYPE2 || (HEADER_VALUE_TYPE2 = {}));
    BOOLEAN_TAG = "boolean";
    BYTE_TAG = "byte";
    SHORT_TAG = "short";
    INT_TAG = "integer";
    LONG_TAG = "long";
    BINARY_TAG = "binary";
    STRING_TAG = "string";
    TIMESTAMP_TAG = "timestamp";
    UUID_TAG = "uuid";
    UUID_PATTERN2 = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
  }
});
function splitMessage({ byteLength, byteOffset, buffer }) {
  if (byteLength < MINIMUM_MESSAGE_LENGTH) {
    throw new Error("Provided message too short to accommodate event stream message overhead");
  }
  const view = new DataView(buffer, byteOffset, byteLength);
  const messageLength = view.getUint32(0, false);
  if (byteLength !== messageLength) {
    throw new Error("Reported message length does not match received message length");
  }
  const headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);
  const expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);
  const expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);
  const checksummer = new Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));
  if (expectedPreludeChecksum !== checksummer.digest()) {
    throw new Error(`The prelude checksum specified in the message (${expectedPreludeChecksum}) does not match the calculated CRC32 checksum (${checksummer.digest()})`);
  }
  checksummer.update(new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH)));
  if (expectedMessageChecksum !== checksummer.digest()) {
    throw new Error(`The message checksum (${checksummer.digest()}) did not match the expected value of ${expectedMessageChecksum}`);
  }
  return {
    headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),
    body: new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength, messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH))
  };
}
__name(splitMessage, "splitMessage");
var PRELUDE_MEMBER_LENGTH;
var PRELUDE_LENGTH;
var CHECKSUM_LENGTH;
var MINIMUM_MESSAGE_LENGTH;
var init_splitMessage = __esm({
  "../node_modules/@smithy/eventstream-codec/dist-es/splitMessage.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_module3();
    PRELUDE_MEMBER_LENGTH = 4;
    PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;
    CHECKSUM_LENGTH = 4;
    MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;
    __name2(splitMessage, "splitMessage");
  }
});
var EventStreamCodec;
var init_EventStreamCodec = __esm({
  "../node_modules/@smithy/eventstream-codec/dist-es/EventStreamCodec.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_module3();
    init_HeaderMarshaller();
    init_splitMessage();
    EventStreamCodec = class {
      static {
        __name(this, "EventStreamCodec");
      }
      static {
        __name2(this, "EventStreamCodec");
      }
      constructor(toUtf82, fromUtf85) {
        this.headerMarshaller = new HeaderMarshaller(toUtf82, fromUtf85);
        this.messageBuffer = [];
        this.isEndOfStream = false;
      }
      feed(message) {
        this.messageBuffer.push(this.decode(message));
      }
      endOfStream() {
        this.isEndOfStream = true;
      }
      getMessage() {
        const message = this.messageBuffer.pop();
        const isEndOfStream = this.isEndOfStream;
        return {
          getMessage() {
            return message;
          },
          isEndOfStream() {
            return isEndOfStream;
          }
        };
      }
      getAvailableMessages() {
        const messages = this.messageBuffer;
        this.messageBuffer = [];
        const isEndOfStream = this.isEndOfStream;
        return {
          getMessages() {
            return messages;
          },
          isEndOfStream() {
            return isEndOfStream;
          }
        };
      }
      encode({ headers: rawHeaders, body }) {
        const headers = this.headerMarshaller.format(rawHeaders);
        const length = headers.byteLength + body.byteLength + 16;
        const out = new Uint8Array(length);
        const view = new DataView(out.buffer, out.byteOffset, out.byteLength);
        const checksum = new Crc32();
        view.setUint32(0, length, false);
        view.setUint32(4, headers.byteLength, false);
        view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);
        out.set(headers, 12);
        out.set(body, headers.byteLength + 12);
        view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);
        return out;
      }
      decode(message) {
        const { headers, body } = splitMessage(message);
        return { headers: this.headerMarshaller.parse(headers), body };
      }
      formatHeaders(rawHeaders) {
        return this.headerMarshaller.format(rawHeaders);
      }
    };
  }
});
var init_Message = __esm({
  "../node_modules/@smithy/eventstream-codec/dist-es/Message.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var MessageDecoderStream;
var init_MessageDecoderStream = __esm({
  "../node_modules/@smithy/eventstream-codec/dist-es/MessageDecoderStream.js"() {
    init_functionsRoutes_0_09879299104094341();
    MessageDecoderStream = class {
      static {
        __name(this, "MessageDecoderStream");
      }
      static {
        __name2(this, "MessageDecoderStream");
      }
      constructor(options) {
        this.options = options;
      }
      [Symbol.asyncIterator]() {
        return this.asyncIterator();
      }
      async *asyncIterator() {
        for await (const bytes of this.options.inputStream) {
          const decoded = this.options.decoder.decode(bytes);
          yield decoded;
        }
      }
    };
  }
});
var MessageEncoderStream;
var init_MessageEncoderStream = __esm({
  "../node_modules/@smithy/eventstream-codec/dist-es/MessageEncoderStream.js"() {
    init_functionsRoutes_0_09879299104094341();
    MessageEncoderStream = class {
      static {
        __name(this, "MessageEncoderStream");
      }
      static {
        __name2(this, "MessageEncoderStream");
      }
      constructor(options) {
        this.options = options;
      }
      [Symbol.asyncIterator]() {
        return this.asyncIterator();
      }
      async *asyncIterator() {
        for await (const msg of this.options.messageStream) {
          const encoded = this.options.encoder.encode(msg);
          yield encoded;
        }
        if (this.options.includeEndFrame) {
          yield new Uint8Array(0);
        }
      }
    };
  }
});
var SmithyMessageDecoderStream;
var init_SmithyMessageDecoderStream = __esm({
  "../node_modules/@smithy/eventstream-codec/dist-es/SmithyMessageDecoderStream.js"() {
    init_functionsRoutes_0_09879299104094341();
    SmithyMessageDecoderStream = class {
      static {
        __name(this, "SmithyMessageDecoderStream");
      }
      static {
        __name2(this, "SmithyMessageDecoderStream");
      }
      constructor(options) {
        this.options = options;
      }
      [Symbol.asyncIterator]() {
        return this.asyncIterator();
      }
      async *asyncIterator() {
        for await (const message of this.options.messageStream) {
          const deserialized = await this.options.deserializer(message);
          if (deserialized === void 0)
            continue;
          yield deserialized;
        }
      }
    };
  }
});
var SmithyMessageEncoderStream;
var init_SmithyMessageEncoderStream = __esm({
  "../node_modules/@smithy/eventstream-codec/dist-es/SmithyMessageEncoderStream.js"() {
    init_functionsRoutes_0_09879299104094341();
    SmithyMessageEncoderStream = class {
      static {
        __name(this, "SmithyMessageEncoderStream");
      }
      static {
        __name2(this, "SmithyMessageEncoderStream");
      }
      constructor(options) {
        this.options = options;
      }
      [Symbol.asyncIterator]() {
        return this.asyncIterator();
      }
      async *asyncIterator() {
        for await (const chunk of this.options.inputStream) {
          const payloadBuf = this.options.serializer(chunk);
          yield payloadBuf;
        }
      }
    };
  }
});
var init_dist_es45 = __esm({
  "../node_modules/@smithy/eventstream-codec/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_EventStreamCodec();
    init_HeaderMarshaller();
    init_Int64();
    init_Message();
    init_MessageDecoderStream();
    init_MessageEncoderStream();
    init_SmithyMessageDecoderStream();
    init_SmithyMessageEncoderStream();
  }
});
function getChunkedStream(source) {
  let currentMessageTotalLength = 0;
  let currentMessagePendingLength = 0;
  let currentMessage = null;
  let messageLengthBuffer = null;
  const allocateMessage = /* @__PURE__ */ __name2((size) => {
    if (typeof size !== "number") {
      throw new Error("Attempted to allocate an event message where size was not a number: " + size);
    }
    currentMessageTotalLength = size;
    currentMessagePendingLength = 4;
    currentMessage = new Uint8Array(size);
    const currentMessageView = new DataView(currentMessage.buffer);
    currentMessageView.setUint32(0, size, false);
  }, "allocateMessage");
  const iterator = /* @__PURE__ */ __name2(async function* () {
    const sourceIterator = source[Symbol.asyncIterator]();
    while (true) {
      const { value, done } = await sourceIterator.next();
      if (done) {
        if (!currentMessageTotalLength) {
          return;
        } else if (currentMessageTotalLength === currentMessagePendingLength) {
          yield currentMessage;
        } else {
          throw new Error("Truncated event message received.");
        }
        return;
      }
      const chunkLength = value.length;
      let currentOffset = 0;
      while (currentOffset < chunkLength) {
        if (!currentMessage) {
          const bytesRemaining = chunkLength - currentOffset;
          if (!messageLengthBuffer) {
            messageLengthBuffer = new Uint8Array(4);
          }
          const numBytesForTotal = Math.min(4 - currentMessagePendingLength, bytesRemaining);
          messageLengthBuffer.set(value.slice(currentOffset, currentOffset + numBytesForTotal), currentMessagePendingLength);
          currentMessagePendingLength += numBytesForTotal;
          currentOffset += numBytesForTotal;
          if (currentMessagePendingLength < 4) {
            break;
          }
          allocateMessage(new DataView(messageLengthBuffer.buffer).getUint32(0, false));
          messageLengthBuffer = null;
        }
        const numBytesToWrite = Math.min(currentMessageTotalLength - currentMessagePendingLength, chunkLength - currentOffset);
        currentMessage.set(value.slice(currentOffset, currentOffset + numBytesToWrite), currentMessagePendingLength);
        currentMessagePendingLength += numBytesToWrite;
        currentOffset += numBytesToWrite;
        if (currentMessageTotalLength && currentMessageTotalLength === currentMessagePendingLength) {
          yield currentMessage;
          currentMessage = null;
          currentMessageTotalLength = 0;
          currentMessagePendingLength = 0;
        }
      }
    }
  }, "iterator");
  return {
    [Symbol.asyncIterator]: iterator
  };
}
__name(getChunkedStream, "getChunkedStream");
var init_getChunkedStream = __esm({
  "../node_modules/@smithy/eventstream-serde-universal/dist-es/getChunkedStream.js"() {
    init_functionsRoutes_0_09879299104094341();
    __name2(getChunkedStream, "getChunkedStream");
  }
});
function getMessageUnmarshaller(deserializer, toUtf82) {
  return async function(message) {
    const { value: messageType } = message.headers[":message-type"];
    if (messageType === "error") {
      const unmodeledError = new Error(message.headers[":error-message"].value || "UnknownError");
      unmodeledError.name = message.headers[":error-code"].value;
      throw unmodeledError;
    } else if (messageType === "exception") {
      const code = message.headers[":exception-type"].value;
      const exception = { [code]: message };
      const deserializedException = await deserializer(exception);
      if (deserializedException.$unknown) {
        const error45 = new Error(toUtf82(message.body));
        error45.name = code;
        throw error45;
      }
      throw deserializedException[code];
    } else if (messageType === "event") {
      const event = {
        [message.headers[":event-type"].value]: message
      };
      const deserialized = await deserializer(event);
      if (deserialized.$unknown)
        return;
      return deserialized;
    } else {
      throw Error(`Unrecognizable event type: ${message.headers[":event-type"].value}`);
    }
  };
}
__name(getMessageUnmarshaller, "getMessageUnmarshaller");
var init_getUnmarshalledStream = __esm({
  "../node_modules/@smithy/eventstream-serde-universal/dist-es/getUnmarshalledStream.js"() {
    init_functionsRoutes_0_09879299104094341();
    __name2(getMessageUnmarshaller, "getMessageUnmarshaller");
  }
});
var EventStreamMarshaller;
var init_EventStreamMarshaller = __esm({
  "../node_modules/@smithy/eventstream-serde-universal/dist-es/EventStreamMarshaller.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es45();
    init_getChunkedStream();
    init_getUnmarshalledStream();
    EventStreamMarshaller = class {
      static {
        __name(this, "EventStreamMarshaller");
      }
      static {
        __name2(this, "EventStreamMarshaller");
      }
      constructor({ utf8Encoder, utf8Decoder }) {
        this.eventStreamCodec = new EventStreamCodec(utf8Encoder, utf8Decoder);
        this.utfEncoder = utf8Encoder;
      }
      deserialize(body, deserializer) {
        const inputStream = getChunkedStream(body);
        return new SmithyMessageDecoderStream({
          messageStream: new MessageDecoderStream({ inputStream, decoder: this.eventStreamCodec }),
          deserializer: getMessageUnmarshaller(deserializer, this.utfEncoder)
        });
      }
      serialize(inputStream, serializer) {
        return new MessageEncoderStream({
          messageStream: new SmithyMessageEncoderStream({ inputStream, serializer }),
          encoder: this.eventStreamCodec,
          includeEndFrame: true
        });
      }
    };
  }
});
var init_provider = __esm({
  "../node_modules/@smithy/eventstream-serde-universal/dist-es/provider.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_dist_es46 = __esm({
  "../node_modules/@smithy/eventstream-serde-universal/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_EventStreamMarshaller();
    init_provider();
  }
});
var readableStreamtoIterable;
var iterableToReadableStream;
var init_utils4 = __esm({
  "../node_modules/@smithy/eventstream-serde-browser/dist-es/utils.js"() {
    init_functionsRoutes_0_09879299104094341();
    readableStreamtoIterable = /* @__PURE__ */ __name2((readableStream) => ({
      [Symbol.asyncIterator]: async function* () {
        const reader = readableStream.getReader();
        try {
          while (true) {
            const { done, value } = await reader.read();
            if (done)
              return;
            yield value;
          }
        } finally {
          reader.releaseLock();
        }
      }
    }), "readableStreamtoIterable");
    iterableToReadableStream = /* @__PURE__ */ __name2((asyncIterable) => {
      const iterator = asyncIterable[Symbol.asyncIterator]();
      return new ReadableStream({
        async pull(controller) {
          const { done, value } = await iterator.next();
          if (done) {
            return controller.close();
          }
          controller.enqueue(value);
        }
      });
    }, "iterableToReadableStream");
  }
});
var EventStreamMarshaller2;
var isReadableStream2;
var init_EventStreamMarshaller2 = __esm({
  "../node_modules/@smithy/eventstream-serde-browser/dist-es/EventStreamMarshaller.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es46();
    init_utils4();
    EventStreamMarshaller2 = class {
      static {
        __name(this, "EventStreamMarshaller2");
      }
      static {
        __name2(this, "EventStreamMarshaller");
      }
      constructor({ utf8Encoder, utf8Decoder }) {
        this.universalMarshaller = new EventStreamMarshaller({
          utf8Decoder,
          utf8Encoder
        });
      }
      deserialize(body, deserializer) {
        const bodyIterable = isReadableStream2(body) ? readableStreamtoIterable(body) : body;
        return this.universalMarshaller.deserialize(bodyIterable, deserializer);
      }
      serialize(input, serializer) {
        const serialziedIterable = this.universalMarshaller.serialize(input, serializer);
        return typeof ReadableStream === "function" ? iterableToReadableStream(serialziedIterable) : serialziedIterable;
      }
    };
    isReadableStream2 = /* @__PURE__ */ __name2((body) => typeof ReadableStream === "function" && body instanceof ReadableStream, "isReadableStream");
  }
});
var eventStreamSerdeProvider;
var init_provider2 = __esm({
  "../node_modules/@smithy/eventstream-serde-browser/dist-es/provider.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_EventStreamMarshaller2();
    eventStreamSerdeProvider = /* @__PURE__ */ __name2((options) => new EventStreamMarshaller2(options), "eventStreamSerdeProvider");
  }
});
var init_dist_es47 = __esm({
  "../node_modules/@smithy/eventstream-serde-browser/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_EventStreamMarshaller2();
    init_provider2();
    init_utils4();
  }
});
async function blobReader(blob, onChunk, chunkSize = 1024 * 1024) {
  const size = blob.size;
  let totalBytesRead = 0;
  while (totalBytesRead < size) {
    const slice = blob.slice(totalBytesRead, Math.min(size, totalBytesRead + chunkSize));
    onChunk(new Uint8Array(await slice.arrayBuffer()));
    totalBytesRead += slice.size;
  }
}
__name(blobReader, "blobReader");
var init_dist_es48 = __esm({
  "../node_modules/@smithy/chunked-blob-reader/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    __name2(blobReader, "blobReader");
  }
});
var blobHasher;
var init_dist_es49 = __esm({
  "../node_modules/@smithy/hash-blob-browser/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es48();
    blobHasher = /* @__PURE__ */ __name2(/* @__PURE__ */ __name(async function blobHasher2(hashCtor, blob) {
      const hash2 = new hashCtor();
      await blobReader(blob, (chunk) => {
        hash2.update(chunk);
      });
      return hash2.digest();
    }, "blobHasher2"), "blobHasher");
  }
});
var init_invalidFunction = __esm({
  "../node_modules/@smithy/invalid-dependency/dist-es/invalidFunction.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var invalidProvider;
var init_invalidProvider = __esm({
  "../node_modules/@smithy/invalid-dependency/dist-es/invalidProvider.js"() {
    init_functionsRoutes_0_09879299104094341();
    invalidProvider = /* @__PURE__ */ __name2((message) => () => Promise.reject(message), "invalidProvider");
  }
});
var init_dist_es50 = __esm({
  "../node_modules/@smithy/invalid-dependency/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_invalidFunction();
    init_invalidProvider();
  }
});
var BLOCK_SIZE2;
var DIGEST_LENGTH2;
var INIT2;
var init_constants11 = __esm({
  "../node_modules/@smithy/md5-js/dist-es/constants.js"() {
    init_functionsRoutes_0_09879299104094341();
    BLOCK_SIZE2 = 64;
    DIGEST_LENGTH2 = 16;
    INIT2 = [1732584193, 4023233417, 2562383102, 271733878];
  }
});
function cmn(q2, a2, b2, x2, s2, t2) {
  a2 = (a2 + q2 & 4294967295) + (x2 + t2 & 4294967295) & 4294967295;
  return (a2 << s2 | a2 >>> 32 - s2) + b2 & 4294967295;
}
__name(cmn, "cmn");
function ff(a2, b2, c2, d2, x2, s2, t2) {
  return cmn(b2 & c2 | ~b2 & d2, a2, b2, x2, s2, t2);
}
__name(ff, "ff");
function gg(a2, b2, c2, d2, x2, s2, t2) {
  return cmn(b2 & d2 | c2 & ~d2, a2, b2, x2, s2, t2);
}
__name(gg, "gg");
function hh(a2, b2, c2, d2, x2, s2, t2) {
  return cmn(b2 ^ c2 ^ d2, a2, b2, x2, s2, t2);
}
__name(hh, "hh");
function ii(a2, b2, c2, d2, x2, s2, t2) {
  return cmn(c2 ^ (b2 | ~d2), a2, b2, x2, s2, t2);
}
__name(ii, "ii");
function isEmptyData3(data) {
  if (typeof data === "string") {
    return data.length === 0;
  }
  return data.byteLength === 0;
}
__name(isEmptyData3, "isEmptyData3");
function convertToBuffer3(data) {
  if (typeof data === "string") {
    return fromUtf8(data);
  }
  if (ArrayBuffer.isView(data)) {
    return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
  }
  return new Uint8Array(data);
}
__name(convertToBuffer3, "convertToBuffer3");
var Md5;
var init_dist_es51 = __esm({
  "../node_modules/@smithy/md5-js/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es6();
    init_constants11();
    Md5 = class {
      static {
        __name(this, "Md5");
      }
      static {
        __name2(this, "Md5");
      }
      constructor() {
        this.reset();
      }
      update(sourceData) {
        if (isEmptyData3(sourceData)) {
          return;
        } else if (this.finished) {
          throw new Error("Attempted to update an already finished hash.");
        }
        const data = convertToBuffer3(sourceData);
        let position = 0;
        let { byteLength } = data;
        this.bytesHashed += byteLength;
        while (byteLength > 0) {
          this.buffer.setUint8(this.bufferLength++, data[position++]);
          byteLength--;
          if (this.bufferLength === BLOCK_SIZE2) {
            this.hashBuffer();
            this.bufferLength = 0;
          }
        }
      }
      async digest() {
        if (!this.finished) {
          const { buffer, bufferLength: undecoratedLength, bytesHashed } = this;
          const bitsHashed = bytesHashed * 8;
          buffer.setUint8(this.bufferLength++, 128);
          if (undecoratedLength % BLOCK_SIZE2 >= BLOCK_SIZE2 - 8) {
            for (let i2 = this.bufferLength; i2 < BLOCK_SIZE2; i2++) {
              buffer.setUint8(i2, 0);
            }
            this.hashBuffer();
            this.bufferLength = 0;
          }
          for (let i2 = this.bufferLength; i2 < BLOCK_SIZE2 - 8; i2++) {
            buffer.setUint8(i2, 0);
          }
          buffer.setUint32(BLOCK_SIZE2 - 8, bitsHashed >>> 0, true);
          buffer.setUint32(BLOCK_SIZE2 - 4, Math.floor(bitsHashed / 4294967296), true);
          this.hashBuffer();
          this.finished = true;
        }
        const out = new DataView(new ArrayBuffer(DIGEST_LENGTH2));
        for (let i2 = 0; i2 < 4; i2++) {
          out.setUint32(i2 * 4, this.state[i2], true);
        }
        return new Uint8Array(out.buffer, out.byteOffset, out.byteLength);
      }
      hashBuffer() {
        const { buffer, state } = this;
        let a2 = state[0], b2 = state[1], c2 = state[2], d2 = state[3];
        a2 = ff(a2, b2, c2, d2, buffer.getUint32(0, true), 7, 3614090360);
        d2 = ff(d2, a2, b2, c2, buffer.getUint32(4, true), 12, 3905402710);
        c2 = ff(c2, d2, a2, b2, buffer.getUint32(8, true), 17, 606105819);
        b2 = ff(b2, c2, d2, a2, buffer.getUint32(12, true), 22, 3250441966);
        a2 = ff(a2, b2, c2, d2, buffer.getUint32(16, true), 7, 4118548399);
        d2 = ff(d2, a2, b2, c2, buffer.getUint32(20, true), 12, 1200080426);
        c2 = ff(c2, d2, a2, b2, buffer.getUint32(24, true), 17, 2821735955);
        b2 = ff(b2, c2, d2, a2, buffer.getUint32(28, true), 22, 4249261313);
        a2 = ff(a2, b2, c2, d2, buffer.getUint32(32, true), 7, 1770035416);
        d2 = ff(d2, a2, b2, c2, buffer.getUint32(36, true), 12, 2336552879);
        c2 = ff(c2, d2, a2, b2, buffer.getUint32(40, true), 17, 4294925233);
        b2 = ff(b2, c2, d2, a2, buffer.getUint32(44, true), 22, 2304563134);
        a2 = ff(a2, b2, c2, d2, buffer.getUint32(48, true), 7, 1804603682);
        d2 = ff(d2, a2, b2, c2, buffer.getUint32(52, true), 12, 4254626195);
        c2 = ff(c2, d2, a2, b2, buffer.getUint32(56, true), 17, 2792965006);
        b2 = ff(b2, c2, d2, a2, buffer.getUint32(60, true), 22, 1236535329);
        a2 = gg(a2, b2, c2, d2, buffer.getUint32(4, true), 5, 4129170786);
        d2 = gg(d2, a2, b2, c2, buffer.getUint32(24, true), 9, 3225465664);
        c2 = gg(c2, d2, a2, b2, buffer.getUint32(44, true), 14, 643717713);
        b2 = gg(b2, c2, d2, a2, buffer.getUint32(0, true), 20, 3921069994);
        a2 = gg(a2, b2, c2, d2, buffer.getUint32(20, true), 5, 3593408605);
        d2 = gg(d2, a2, b2, c2, buffer.getUint32(40, true), 9, 38016083);
        c2 = gg(c2, d2, a2, b2, buffer.getUint32(60, true), 14, 3634488961);
        b2 = gg(b2, c2, d2, a2, buffer.getUint32(16, true), 20, 3889429448);
        a2 = gg(a2, b2, c2, d2, buffer.getUint32(36, true), 5, 568446438);
        d2 = gg(d2, a2, b2, c2, buffer.getUint32(56, true), 9, 3275163606);
        c2 = gg(c2, d2, a2, b2, buffer.getUint32(12, true), 14, 4107603335);
        b2 = gg(b2, c2, d2, a2, buffer.getUint32(32, true), 20, 1163531501);
        a2 = gg(a2, b2, c2, d2, buffer.getUint32(52, true), 5, 2850285829);
        d2 = gg(d2, a2, b2, c2, buffer.getUint32(8, true), 9, 4243563512);
        c2 = gg(c2, d2, a2, b2, buffer.getUint32(28, true), 14, 1735328473);
        b2 = gg(b2, c2, d2, a2, buffer.getUint32(48, true), 20, 2368359562);
        a2 = hh(a2, b2, c2, d2, buffer.getUint32(20, true), 4, 4294588738);
        d2 = hh(d2, a2, b2, c2, buffer.getUint32(32, true), 11, 2272392833);
        c2 = hh(c2, d2, a2, b2, buffer.getUint32(44, true), 16, 1839030562);
        b2 = hh(b2, c2, d2, a2, buffer.getUint32(56, true), 23, 4259657740);
        a2 = hh(a2, b2, c2, d2, buffer.getUint32(4, true), 4, 2763975236);
        d2 = hh(d2, a2, b2, c2, buffer.getUint32(16, true), 11, 1272893353);
        c2 = hh(c2, d2, a2, b2, buffer.getUint32(28, true), 16, 4139469664);
        b2 = hh(b2, c2, d2, a2, buffer.getUint32(40, true), 23, 3200236656);
        a2 = hh(a2, b2, c2, d2, buffer.getUint32(52, true), 4, 681279174);
        d2 = hh(d2, a2, b2, c2, buffer.getUint32(0, true), 11, 3936430074);
        c2 = hh(c2, d2, a2, b2, buffer.getUint32(12, true), 16, 3572445317);
        b2 = hh(b2, c2, d2, a2, buffer.getUint32(24, true), 23, 76029189);
        a2 = hh(a2, b2, c2, d2, buffer.getUint32(36, true), 4, 3654602809);
        d2 = hh(d2, a2, b2, c2, buffer.getUint32(48, true), 11, 3873151461);
        c2 = hh(c2, d2, a2, b2, buffer.getUint32(60, true), 16, 530742520);
        b2 = hh(b2, c2, d2, a2, buffer.getUint32(8, true), 23, 3299628645);
        a2 = ii(a2, b2, c2, d2, buffer.getUint32(0, true), 6, 4096336452);
        d2 = ii(d2, a2, b2, c2, buffer.getUint32(28, true), 10, 1126891415);
        c2 = ii(c2, d2, a2, b2, buffer.getUint32(56, true), 15, 2878612391);
        b2 = ii(b2, c2, d2, a2, buffer.getUint32(20, true), 21, 4237533241);
        a2 = ii(a2, b2, c2, d2, buffer.getUint32(48, true), 6, 1700485571);
        d2 = ii(d2, a2, b2, c2, buffer.getUint32(12, true), 10, 2399980690);
        c2 = ii(c2, d2, a2, b2, buffer.getUint32(40, true), 15, 4293915773);
        b2 = ii(b2, c2, d2, a2, buffer.getUint32(4, true), 21, 2240044497);
        a2 = ii(a2, b2, c2, d2, buffer.getUint32(32, true), 6, 1873313359);
        d2 = ii(d2, a2, b2, c2, buffer.getUint32(60, true), 10, 4264355552);
        c2 = ii(c2, d2, a2, b2, buffer.getUint32(24, true), 15, 2734768916);
        b2 = ii(b2, c2, d2, a2, buffer.getUint32(52, true), 21, 1309151649);
        a2 = ii(a2, b2, c2, d2, buffer.getUint32(16, true), 6, 4149444226);
        d2 = ii(d2, a2, b2, c2, buffer.getUint32(44, true), 10, 3174756917);
        c2 = ii(c2, d2, a2, b2, buffer.getUint32(8, true), 15, 718787259);
        b2 = ii(b2, c2, d2, a2, buffer.getUint32(36, true), 21, 3951481745);
        state[0] = a2 + state[0] & 4294967295;
        state[1] = b2 + state[1] & 4294967295;
        state[2] = c2 + state[2] & 4294967295;
        state[3] = d2 + state[3] & 4294967295;
      }
      reset() {
        this.state = Uint32Array.from(INIT2);
        this.buffer = new DataView(new ArrayBuffer(BLOCK_SIZE2));
        this.bufferLength = 0;
        this.bytesHashed = 0;
        this.finished = false;
      }
    };
    __name2(cmn, "cmn");
    __name2(ff, "ff");
    __name2(gg, "gg");
    __name2(hh, "hh");
    __name2(ii, "ii");
    __name2(isEmptyData3, "isEmptyData");
    __name2(convertToBuffer3, "convertToBuffer");
  }
});
var getRuntimeConfig;
var init_runtimeConfig_shared = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/runtimeConfig.shared.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es21();
    init_dist_es41();
    init_dist_es19();
    init_dist_es31();
    init_dist_es7();
    init_dist_es12();
    init_dist_es6();
    init_httpAuthSchemeProvider();
    init_endpointResolver();
    getRuntimeConfig = /* @__PURE__ */ __name2((config2) => {
      return {
        apiVersion: "2006-03-01",
        base64Decoder: config2?.base64Decoder ?? fromBase64,
        base64Encoder: config2?.base64Encoder ?? toBase64,
        disableHostPrefix: config2?.disableHostPrefix ?? false,
        endpointProvider: config2?.endpointProvider ?? defaultEndpointResolver,
        extensions: config2?.extensions ?? [],
        getAwsChunkedEncodingStream: config2?.getAwsChunkedEncodingStream ?? getAwsChunkedEncodingStream,
        httpAuthSchemeProvider: config2?.httpAuthSchemeProvider ?? defaultS3HttpAuthSchemeProvider,
        httpAuthSchemes: config2?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: /* @__PURE__ */ __name2((ipc) => ipc.getIdentityProvider("aws.auth#sigv4"), "identityProvider"),
            signer: new AwsSdkSigV4Signer()
          },
          {
            schemeId: "aws.auth#sigv4a",
            identityProvider: /* @__PURE__ */ __name2((ipc) => ipc.getIdentityProvider("aws.auth#sigv4a"), "identityProvider"),
            signer: new AwsSdkSigV4ASigner()
          }
        ],
        logger: config2?.logger ?? new NoOpLogger(),
        sdkStreamMixin: config2?.sdkStreamMixin ?? sdkStreamMixin,
        serviceId: config2?.serviceId ?? "S3",
        signerConstructor: config2?.signerConstructor ?? SignatureV4MultiRegion,
        signingEscapePath: config2?.signingEscapePath ?? false,
        urlParser: config2?.urlParser ?? parseUrl,
        useArnRegion: config2?.useArnRegion ?? void 0,
        utf8Decoder: config2?.utf8Decoder ?? fromUtf8,
        utf8Encoder: config2?.utf8Encoder ?? toUtf8
      };
    }, "getRuntimeConfig");
  }
});
var DEFAULTS_MODE_OPTIONS;
var init_constants12 = __esm({
  "../node_modules/@smithy/util-defaults-mode-browser/dist-es/constants.js"() {
    init_functionsRoutes_0_09879299104094341();
    DEFAULTS_MODE_OPTIONS = ["in-region", "cross-region", "mobile", "standard", "legacy"];
  }
});
var import_bowser2;
var resolveDefaultsModeConfig;
var isMobileBrowser;
var init_resolveDefaultsModeConfig = __esm({
  "../node_modules/@smithy/util-defaults-mode-browser/dist-es/resolveDefaultsModeConfig.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es14();
    import_bowser2 = __toESM(require_es5());
    init_constants12();
    resolveDefaultsModeConfig = /* @__PURE__ */ __name2(({ defaultsMode } = {}) => memoize(async () => {
      const mode = typeof defaultsMode === "function" ? await defaultsMode() : defaultsMode;
      switch (mode?.toLowerCase()) {
        case "auto":
          return Promise.resolve(isMobileBrowser() ? "mobile" : "standard");
        case "mobile":
        case "in-region":
        case "cross-region":
        case "standard":
        case "legacy":
          return Promise.resolve(mode?.toLocaleLowerCase());
        case void 0:
          return Promise.resolve("legacy");
        default:
          throw new Error(`Invalid parameter for "defaultsMode", expect ${DEFAULTS_MODE_OPTIONS.join(", ")}, got ${mode}`);
      }
    }), "resolveDefaultsModeConfig");
    isMobileBrowser = /* @__PURE__ */ __name2(() => {
      const parsedUA = typeof window !== "undefined" && window?.navigator?.userAgent ? import_bowser2.default.parse(window.navigator.userAgent) : void 0;
      const platform = parsedUA?.platform?.type;
      return platform === "tablet" || platform === "mobile";
    }, "isMobileBrowser");
  }
});
var init_dist_es52 = __esm({
  "../node_modules/@smithy/util-defaults-mode-browser/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_resolveDefaultsModeConfig();
  }
});
var getRuntimeConfig2;
var init_runtimeConfig_browser = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/runtimeConfig.browser.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_package();
    init_module5();
    init_module7();
    init_dist_es44();
    init_dist_es34();
    init_dist_es47();
    init_dist_es10();
    init_dist_es49();
    init_dist_es50();
    init_dist_es51();
    init_dist_es17();
    init_dist_es39();
    init_runtimeConfig_shared();
    init_dist_es19();
    init_dist_es52();
    getRuntimeConfig2 = /* @__PURE__ */ __name2((config2) => {
      const defaultsMode = resolveDefaultsModeConfig(config2);
      const defaultConfigProvider = /* @__PURE__ */ __name2(() => defaultsMode().then(loadConfigsForDefaultMode), "defaultConfigProvider");
      const clientSharedValues = getRuntimeConfig(config2);
      return {
        ...clientSharedValues,
        ...config2,
        runtime: "browser",
        defaultsMode,
        bodyLengthChecker: config2?.bodyLengthChecker ?? calculateBodyLength,
        credentialDefaultProvider: config2?.credentialDefaultProvider ?? ((_) => () => Promise.reject(new Error("Credential is missing"))),
        defaultUserAgentProvider: config2?.defaultUserAgentProvider ?? createDefaultUserAgentProvider({ serviceId: clientSharedValues.serviceId, clientVersion: package_default.version }),
        eventStreamSerdeProvider: config2?.eventStreamSerdeProvider ?? eventStreamSerdeProvider,
        maxAttempts: config2?.maxAttempts ?? DEFAULT_MAX_ATTEMPTS,
        md5: config2?.md5 ?? Md5,
        region: config2?.region ?? invalidProvider("Region is missing"),
        requestHandler: FetchHttpHandler.create(config2?.requestHandler ?? defaultConfigProvider),
        retryMode: config2?.retryMode ?? (async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE),
        sha1: config2?.sha1 ?? Sha12,
        sha256: config2?.sha256 ?? Sha2563,
        streamCollector: config2?.streamCollector ?? streamCollector,
        streamHasher: config2?.streamHasher ?? blobHasher,
        useDualstackEndpoint: config2?.useDualstackEndpoint ?? (() => Promise.resolve(DEFAULT_USE_DUALSTACK_ENDPOINT)),
        useFipsEndpoint: config2?.useFipsEndpoint ?? (() => Promise.resolve(DEFAULT_USE_FIPS_ENDPOINT))
      };
    }, "getRuntimeConfig");
  }
});
var getAwsRegionExtensionConfiguration;
var resolveAwsRegionExtensionConfiguration;
var init_extensions4 = __esm({
  "../node_modules/@aws-sdk/region-config-resolver/dist-es/extensions/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    getAwsRegionExtensionConfiguration = /* @__PURE__ */ __name2((runtimeConfig) => {
      return {
        setRegion(region) {
          runtimeConfig.region = region;
        },
        region() {
          return runtimeConfig.region;
        }
      };
    }, "getAwsRegionExtensionConfiguration");
    resolveAwsRegionExtensionConfiguration = /* @__PURE__ */ __name2((awsRegionExtensionConfiguration) => {
      return {
        region: awsRegionExtensionConfiguration.region()
      };
    }, "resolveAwsRegionExtensionConfiguration");
  }
});
var init_config4 = __esm({
  "../node_modules/@aws-sdk/region-config-resolver/dist-es/regionConfig/config.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_resolveRegionConfig2 = __esm({
  "../node_modules/@aws-sdk/region-config-resolver/dist-es/regionConfig/resolveRegionConfig.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_regionConfig2 = __esm({
  "../node_modules/@aws-sdk/region-config-resolver/dist-es/regionConfig/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_config4();
    init_resolveRegionConfig2();
  }
});
var init_dist_es53 = __esm({
  "../node_modules/@aws-sdk/region-config-resolver/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_extensions4();
    init_regionConfig2();
  }
});
var getHttpAuthExtensionConfiguration;
var resolveHttpAuthRuntimeConfig;
var init_httpAuthExtensionConfiguration = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/auth/httpAuthExtensionConfiguration.js"() {
    init_functionsRoutes_0_09879299104094341();
    getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name2((runtimeConfig) => {
      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
      let _credentials = runtimeConfig.credentials;
      return {
        setHttpAuthScheme(httpAuthScheme) {
          const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
          if (index === -1) {
            _httpAuthSchemes.push(httpAuthScheme);
          } else {
            _httpAuthSchemes.splice(index, 1, httpAuthScheme);
          }
        },
        httpAuthSchemes() {
          return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
          _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
          return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
          _credentials = credentials;
        },
        credentials() {
          return _credentials;
        }
      };
    }, "getHttpAuthExtensionConfiguration");
    resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name2((config2) => {
      return {
        httpAuthSchemes: config2.httpAuthSchemes(),
        httpAuthSchemeProvider: config2.httpAuthSchemeProvider(),
        credentials: config2.credentials()
      };
    }, "resolveHttpAuthRuntimeConfig");
  }
});
var resolveRuntimeExtensions;
var init_runtimeExtensions = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/runtimeExtensions.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es53();
    init_dist_es2();
    init_dist_es19();
    init_httpAuthExtensionConfiguration();
    resolveRuntimeExtensions = /* @__PURE__ */ __name2((runtimeConfig, extensions) => {
      const extensionConfiguration = Object.assign(getAwsRegionExtensionConfiguration(runtimeConfig), getDefaultExtensionConfiguration(runtimeConfig), getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return Object.assign(runtimeConfig, resolveAwsRegionExtensionConfiguration(extensionConfiguration), resolveDefaultRuntimeConfig(extensionConfiguration), resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
    }, "resolveRuntimeExtensions");
  }
});
var S3Client;
var init_S3Client = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/S3Client.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es3();
    init_dist_es23();
    init_dist_es24();
    init_dist_es25();
    init_dist_es26();
    init_dist_es28();
    init_dist_es33();
    init_dist_es34();
    init_dist_es13();
    init_dist_es35();
    init_dist_es36();
    init_dist_es37();
    init_dist_es40();
    init_dist_es19();
    init_httpAuthSchemeProvider();
    init_CreateSessionCommand();
    init_EndpointParameters();
    init_runtimeConfig_browser();
    init_runtimeExtensions();
    S3Client = class extends Client {
      static {
        __name(this, "S3Client");
      }
      static {
        __name2(this, "S3Client");
      }
      config;
      constructor(...[configuration]) {
        const _config_0 = getRuntimeConfig2(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = resolveUserAgentConfig(_config_1);
        const _config_3 = resolveFlexibleChecksumsConfig(_config_2);
        const _config_4 = resolveRetryConfig(_config_3);
        const _config_5 = resolveRegionConfig(_config_4);
        const _config_6 = resolveHostHeaderConfig(_config_5);
        const _config_7 = resolveEndpointConfig(_config_6);
        const _config_8 = resolveEventStreamSerdeConfig(_config_7);
        const _config_9 = resolveHttpAuthSchemeConfig(_config_8);
        const _config_10 = resolveS3Config(_config_9, { session: [() => this, CreateSessionCommand] });
        const _config_11 = resolveRuntimeExtensions(_config_10, configuration?.extensions || []);
        this.config = _config_11;
        this.middlewareStack.use(getUserAgentPlugin(this.config));
        this.middlewareStack.use(getRetryPlugin(this.config));
        this.middlewareStack.use(getContentLengthPlugin(this.config));
        this.middlewareStack.use(getHostHeaderPlugin(this.config));
        this.middlewareStack.use(getLoggerPlugin(this.config));
        this.middlewareStack.use(getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
          httpAuthSchemeParametersProvider: defaultS3HttpAuthSchemeParametersProvider,
          identityProviderConfigProvider: /* @__PURE__ */ __name2(async (config2) => new DefaultIdentityProviderConfig({
            "aws.auth#sigv4": config2.credentials,
            "aws.auth#sigv4a": config2.credentials
          }), "identityProviderConfigProvider")
        }));
        this.middlewareStack.use(getHttpSigningPlugin(this.config));
        this.middlewareStack.use(getValidateBucketNamePlugin(this.config));
        this.middlewareStack.use(getAddExpectContinuePlugin(this.config));
        this.middlewareStack.use(getRegionRedirectMiddlewarePlugin(this.config));
        this.middlewareStack.use(getS3ExpressPlugin(this.config));
        this.middlewareStack.use(getS3ExpressHttpSigningPlugin(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
  }
});
var AbortMultipartUploadCommand;
var init_AbortMultipartUploadCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/AbortMultipartUploadCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    AbortMultipartUploadCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Key: { type: "contextParams", name: "Key" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "AbortMultipartUpload", {}).n("S3Client", "AbortMultipartUploadCommand").f(void 0, void 0).ser(se_AbortMultipartUploadCommand).de(de_AbortMultipartUploadCommand).build() {
      static {
        __name(this, "AbortMultipartUploadCommand");
      }
      static {
        __name2(this, "AbortMultipartUploadCommand");
      }
    };
  }
});
function ssecMiddleware(options) {
  return (next) => async (args) => {
    const input = { ...args.input };
    const properties = [
      {
        target: "SSECustomerKey",
        hash: "SSECustomerKeyMD5"
      },
      {
        target: "CopySourceSSECustomerKey",
        hash: "CopySourceSSECustomerKeyMD5"
      }
    ];
    for (const prop of properties) {
      const value = input[prop.target];
      if (value) {
        let valueForHash;
        if (typeof value === "string") {
          if (isValidBase64EncodedSSECustomerKey(value, options)) {
            valueForHash = options.base64Decoder(value);
          } else {
            valueForHash = options.utf8Decoder(value);
            input[prop.target] = options.base64Encoder(valueForHash);
          }
        } else {
          valueForHash = ArrayBuffer.isView(value) ? new Uint8Array(value.buffer, value.byteOffset, value.byteLength) : new Uint8Array(value);
          input[prop.target] = options.base64Encoder(valueForHash);
        }
        const hash2 = new options.md5();
        hash2.update(valueForHash);
        input[prop.hash] = options.base64Encoder(await hash2.digest());
      }
    }
    return next({
      ...args,
      input
    });
  };
}
__name(ssecMiddleware, "ssecMiddleware");
function isValidBase64EncodedSSECustomerKey(str, options) {
  const base64Regex = /^(?:[A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/;
  if (!base64Regex.test(str))
    return false;
  try {
    const decodedBytes = options.base64Decoder(str);
    return decodedBytes.length === 32;
  } catch {
    return false;
  }
}
__name(isValidBase64EncodedSSECustomerKey, "isValidBase64EncodedSSECustomerKey");
var ssecMiddlewareOptions;
var getSsecPlugin;
var init_dist_es54 = __esm({
  "../node_modules/@aws-sdk/middleware-ssec/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    __name2(ssecMiddleware, "ssecMiddleware");
    ssecMiddlewareOptions = {
      name: "ssecMiddleware",
      step: "initialize",
      tags: ["SSE"],
      override: true
    };
    getSsecPlugin = /* @__PURE__ */ __name2((config2) => ({
      applyToStack: /* @__PURE__ */ __name2((clientStack) => {
        clientStack.add(ssecMiddleware(config2), ssecMiddlewareOptions);
      }, "applyToStack")
    }), "getSsecPlugin");
    __name2(isValidBase64EncodedSSECustomerKey, "isValidBase64EncodedSSECustomerKey");
  }
});
var CompleteMultipartUploadCommand;
var init_CompleteMultipartUploadCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/CompleteMultipartUploadCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es54();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_models_0();
    init_Aws_restXml();
    CompleteMultipartUploadCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Key: { type: "contextParams", name: "Key" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2),
        getSsecPlugin(config2)
      ];
    }).s("AmazonS3", "CompleteMultipartUpload", {}).n("S3Client", "CompleteMultipartUploadCommand").f(CompleteMultipartUploadRequestFilterSensitiveLog, CompleteMultipartUploadOutputFilterSensitiveLog).ser(se_CompleteMultipartUploadCommand).de(de_CompleteMultipartUploadCommand).build() {
      static {
        __name(this, "CompleteMultipartUploadCommand");
      }
      static {
        __name2(this, "CompleteMultipartUploadCommand");
      }
    };
  }
});
var CopyObjectCommand;
var init_CopyObjectCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/CopyObjectCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es54();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_models_0();
    init_Aws_restXml();
    CopyObjectCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      DisableS3ExpressSessionAuth: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" },
      Key: { type: "contextParams", name: "Key" },
      CopySource: { type: "contextParams", name: "CopySource" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2),
        getSsecPlugin(config2)
      ];
    }).s("AmazonS3", "CopyObject", {}).n("S3Client", "CopyObjectCommand").f(CopyObjectRequestFilterSensitiveLog, CopyObjectOutputFilterSensitiveLog).ser(se_CopyObjectCommand).de(de_CopyObjectCommand).build() {
      static {
        __name(this, "CopyObjectCommand");
      }
      static {
        __name2(this, "CopyObjectCommand");
      }
    };
  }
});
function locationConstraintMiddleware(options) {
  return (next) => async (args) => {
    const { CreateBucketConfiguration } = args.input;
    const region = await options.region();
    if (!CreateBucketConfiguration?.LocationConstraint && !CreateBucketConfiguration?.Location) {
      args = {
        ...args,
        input: {
          ...args.input,
          CreateBucketConfiguration: region === "us-east-1" ? void 0 : { LocationConstraint: region }
        }
      };
    }
    return next(args);
  };
}
__name(locationConstraintMiddleware, "locationConstraintMiddleware");
var locationConstraintMiddlewareOptions;
var getLocationConstraintPlugin;
var init_dist_es55 = __esm({
  "../node_modules/@aws-sdk/middleware-location-constraint/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    __name2(locationConstraintMiddleware, "locationConstraintMiddleware");
    locationConstraintMiddlewareOptions = {
      step: "initialize",
      tags: ["LOCATION_CONSTRAINT", "CREATE_BUCKET_CONFIGURATION"],
      name: "locationConstraintMiddleware",
      override: true
    };
    getLocationConstraintPlugin = /* @__PURE__ */ __name2((config2) => ({
      applyToStack: /* @__PURE__ */ __name2((clientStack) => {
        clientStack.add(locationConstraintMiddleware(config2), locationConstraintMiddlewareOptions);
      }, "applyToStack")
    }), "getLocationConstraintPlugin");
  }
});
var CreateBucketCommand;
var init_CreateBucketCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/CreateBucketCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es55();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    CreateBucketCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      DisableAccessPoints: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2),
        getLocationConstraintPlugin(config2)
      ];
    }).s("AmazonS3", "CreateBucket", {}).n("S3Client", "CreateBucketCommand").f(void 0, void 0).ser(se_CreateBucketCommand).de(de_CreateBucketCommand).build() {
      static {
        __name(this, "CreateBucketCommand");
      }
      static {
        __name2(this, "CreateBucketCommand");
      }
    };
  }
});
var CreateBucketMetadataConfigurationCommand;
var init_CreateBucketMetadataConfigurationCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/CreateBucketMetadataConfigurationCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es23();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    CreateBucketMetadataConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "CreateBucketMetadataConfiguration", {}).n("S3Client", "CreateBucketMetadataConfigurationCommand").f(void 0, void 0).ser(se_CreateBucketMetadataConfigurationCommand).de(de_CreateBucketMetadataConfigurationCommand).build() {
      static {
        __name(this, "CreateBucketMetadataConfigurationCommand");
      }
      static {
        __name2(this, "CreateBucketMetadataConfigurationCommand");
      }
    };
  }
});
var CreateBucketMetadataTableConfigurationCommand;
var init_CreateBucketMetadataTableConfigurationCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/CreateBucketMetadataTableConfigurationCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es23();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    CreateBucketMetadataTableConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "CreateBucketMetadataTableConfiguration", {}).n("S3Client", "CreateBucketMetadataTableConfigurationCommand").f(void 0, void 0).ser(se_CreateBucketMetadataTableConfigurationCommand).de(de_CreateBucketMetadataTableConfigurationCommand).build() {
      static {
        __name(this, "CreateBucketMetadataTableConfigurationCommand");
      }
      static {
        __name2(this, "CreateBucketMetadataTableConfigurationCommand");
      }
    };
  }
});
var CreateMultipartUploadCommand;
var init_CreateMultipartUploadCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/CreateMultipartUploadCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es54();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_models_0();
    init_Aws_restXml();
    CreateMultipartUploadCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Key: { type: "contextParams", name: "Key" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2),
        getSsecPlugin(config2)
      ];
    }).s("AmazonS3", "CreateMultipartUpload", {}).n("S3Client", "CreateMultipartUploadCommand").f(CreateMultipartUploadRequestFilterSensitiveLog, CreateMultipartUploadOutputFilterSensitiveLog).ser(se_CreateMultipartUploadCommand).de(de_CreateMultipartUploadCommand).build() {
      static {
        __name(this, "CreateMultipartUploadCommand");
      }
      static {
        __name2(this, "CreateMultipartUploadCommand");
      }
    };
  }
});
var DeleteBucketAnalyticsConfigurationCommand;
var init_DeleteBucketAnalyticsConfigurationCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketAnalyticsConfigurationCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    DeleteBucketAnalyticsConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketAnalyticsConfiguration", {}).n("S3Client", "DeleteBucketAnalyticsConfigurationCommand").f(void 0, void 0).ser(se_DeleteBucketAnalyticsConfigurationCommand).de(de_DeleteBucketAnalyticsConfigurationCommand).build() {
      static {
        __name(this, "DeleteBucketAnalyticsConfigurationCommand");
      }
      static {
        __name2(this, "DeleteBucketAnalyticsConfigurationCommand");
      }
    };
  }
});
var DeleteBucketCommand;
var init_DeleteBucketCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    DeleteBucketCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucket", {}).n("S3Client", "DeleteBucketCommand").f(void 0, void 0).ser(se_DeleteBucketCommand).de(de_DeleteBucketCommand).build() {
      static {
        __name(this, "DeleteBucketCommand");
      }
      static {
        __name2(this, "DeleteBucketCommand");
      }
    };
  }
});
var DeleteBucketCorsCommand;
var init_DeleteBucketCorsCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketCorsCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    DeleteBucketCorsCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketCors", {}).n("S3Client", "DeleteBucketCorsCommand").f(void 0, void 0).ser(se_DeleteBucketCorsCommand).de(de_DeleteBucketCorsCommand).build() {
      static {
        __name(this, "DeleteBucketCorsCommand");
      }
      static {
        __name2(this, "DeleteBucketCorsCommand");
      }
    };
  }
});
var DeleteBucketEncryptionCommand;
var init_DeleteBucketEncryptionCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketEncryptionCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    DeleteBucketEncryptionCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketEncryption", {}).n("S3Client", "DeleteBucketEncryptionCommand").f(void 0, void 0).ser(se_DeleteBucketEncryptionCommand).de(de_DeleteBucketEncryptionCommand).build() {
      static {
        __name(this, "DeleteBucketEncryptionCommand");
      }
      static {
        __name2(this, "DeleteBucketEncryptionCommand");
      }
    };
  }
});
var DeleteBucketIntelligentTieringConfigurationCommand;
var init_DeleteBucketIntelligentTieringConfigurationCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketIntelligentTieringConfigurationCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    DeleteBucketIntelligentTieringConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketIntelligentTieringConfiguration", {}).n("S3Client", "DeleteBucketIntelligentTieringConfigurationCommand").f(void 0, void 0).ser(se_DeleteBucketIntelligentTieringConfigurationCommand).de(de_DeleteBucketIntelligentTieringConfigurationCommand).build() {
      static {
        __name(this, "DeleteBucketIntelligentTieringConfigurationCommand");
      }
      static {
        __name2(this, "DeleteBucketIntelligentTieringConfigurationCommand");
      }
    };
  }
});
var DeleteBucketInventoryConfigurationCommand;
var init_DeleteBucketInventoryConfigurationCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketInventoryConfigurationCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    DeleteBucketInventoryConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketInventoryConfiguration", {}).n("S3Client", "DeleteBucketInventoryConfigurationCommand").f(void 0, void 0).ser(se_DeleteBucketInventoryConfigurationCommand).de(de_DeleteBucketInventoryConfigurationCommand).build() {
      static {
        __name(this, "DeleteBucketInventoryConfigurationCommand");
      }
      static {
        __name2(this, "DeleteBucketInventoryConfigurationCommand");
      }
    };
  }
});
var DeleteBucketLifecycleCommand;
var init_DeleteBucketLifecycleCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketLifecycleCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    DeleteBucketLifecycleCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketLifecycle", {}).n("S3Client", "DeleteBucketLifecycleCommand").f(void 0, void 0).ser(se_DeleteBucketLifecycleCommand).de(de_DeleteBucketLifecycleCommand).build() {
      static {
        __name(this, "DeleteBucketLifecycleCommand");
      }
      static {
        __name2(this, "DeleteBucketLifecycleCommand");
      }
    };
  }
});
var DeleteBucketMetadataConfigurationCommand;
var init_DeleteBucketMetadataConfigurationCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketMetadataConfigurationCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    DeleteBucketMetadataConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketMetadataConfiguration", {}).n("S3Client", "DeleteBucketMetadataConfigurationCommand").f(void 0, void 0).ser(se_DeleteBucketMetadataConfigurationCommand).de(de_DeleteBucketMetadataConfigurationCommand).build() {
      static {
        __name(this, "DeleteBucketMetadataConfigurationCommand");
      }
      static {
        __name2(this, "DeleteBucketMetadataConfigurationCommand");
      }
    };
  }
});
var DeleteBucketMetadataTableConfigurationCommand;
var init_DeleteBucketMetadataTableConfigurationCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketMetadataTableConfigurationCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    DeleteBucketMetadataTableConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketMetadataTableConfiguration", {}).n("S3Client", "DeleteBucketMetadataTableConfigurationCommand").f(void 0, void 0).ser(se_DeleteBucketMetadataTableConfigurationCommand).de(de_DeleteBucketMetadataTableConfigurationCommand).build() {
      static {
        __name(this, "DeleteBucketMetadataTableConfigurationCommand");
      }
      static {
        __name2(this, "DeleteBucketMetadataTableConfigurationCommand");
      }
    };
  }
});
var DeleteBucketMetricsConfigurationCommand;
var init_DeleteBucketMetricsConfigurationCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketMetricsConfigurationCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    DeleteBucketMetricsConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketMetricsConfiguration", {}).n("S3Client", "DeleteBucketMetricsConfigurationCommand").f(void 0, void 0).ser(se_DeleteBucketMetricsConfigurationCommand).de(de_DeleteBucketMetricsConfigurationCommand).build() {
      static {
        __name(this, "DeleteBucketMetricsConfigurationCommand");
      }
      static {
        __name2(this, "DeleteBucketMetricsConfigurationCommand");
      }
    };
  }
});
var DeleteBucketOwnershipControlsCommand;
var init_DeleteBucketOwnershipControlsCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketOwnershipControlsCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    DeleteBucketOwnershipControlsCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketOwnershipControls", {}).n("S3Client", "DeleteBucketOwnershipControlsCommand").f(void 0, void 0).ser(se_DeleteBucketOwnershipControlsCommand).de(de_DeleteBucketOwnershipControlsCommand).build() {
      static {
        __name(this, "DeleteBucketOwnershipControlsCommand");
      }
      static {
        __name2(this, "DeleteBucketOwnershipControlsCommand");
      }
    };
  }
});
var DeleteBucketPolicyCommand;
var init_DeleteBucketPolicyCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketPolicyCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    DeleteBucketPolicyCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketPolicy", {}).n("S3Client", "DeleteBucketPolicyCommand").f(void 0, void 0).ser(se_DeleteBucketPolicyCommand).de(de_DeleteBucketPolicyCommand).build() {
      static {
        __name(this, "DeleteBucketPolicyCommand");
      }
      static {
        __name2(this, "DeleteBucketPolicyCommand");
      }
    };
  }
});
var DeleteBucketReplicationCommand;
var init_DeleteBucketReplicationCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketReplicationCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    DeleteBucketReplicationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketReplication", {}).n("S3Client", "DeleteBucketReplicationCommand").f(void 0, void 0).ser(se_DeleteBucketReplicationCommand).de(de_DeleteBucketReplicationCommand).build() {
      static {
        __name(this, "DeleteBucketReplicationCommand");
      }
      static {
        __name2(this, "DeleteBucketReplicationCommand");
      }
    };
  }
});
var DeleteBucketTaggingCommand;
var init_DeleteBucketTaggingCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketTaggingCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    DeleteBucketTaggingCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketTagging", {}).n("S3Client", "DeleteBucketTaggingCommand").f(void 0, void 0).ser(se_DeleteBucketTaggingCommand).de(de_DeleteBucketTaggingCommand).build() {
      static {
        __name(this, "DeleteBucketTaggingCommand");
      }
      static {
        __name2(this, "DeleteBucketTaggingCommand");
      }
    };
  }
});
var DeleteBucketWebsiteCommand;
var init_DeleteBucketWebsiteCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketWebsiteCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    DeleteBucketWebsiteCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketWebsite", {}).n("S3Client", "DeleteBucketWebsiteCommand").f(void 0, void 0).ser(se_DeleteBucketWebsiteCommand).de(de_DeleteBucketWebsiteCommand).build() {
      static {
        __name(this, "DeleteBucketWebsiteCommand");
      }
      static {
        __name2(this, "DeleteBucketWebsiteCommand");
      }
    };
  }
});
var DeleteObjectCommand;
var init_DeleteObjectCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    DeleteObjectCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Key: { type: "contextParams", name: "Key" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "DeleteObject", {}).n("S3Client", "DeleteObjectCommand").f(void 0, void 0).ser(se_DeleteObjectCommand).de(de_DeleteObjectCommand).build() {
      static {
        __name(this, "DeleteObjectCommand");
      }
      static {
        __name2(this, "DeleteObjectCommand");
      }
    };
  }
});
var DeleteObjectsCommand;
var init_DeleteObjectsCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectsCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es23();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    DeleteObjectsCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        }),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "DeleteObjects", {}).n("S3Client", "DeleteObjectsCommand").f(void 0, void 0).ser(se_DeleteObjectsCommand).de(de_DeleteObjectsCommand).build() {
      static {
        __name(this, "DeleteObjectsCommand");
      }
      static {
        __name2(this, "DeleteObjectsCommand");
      }
    };
  }
});
var DeleteObjectTaggingCommand;
var init_DeleteObjectTaggingCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectTaggingCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    DeleteObjectTaggingCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "DeleteObjectTagging", {}).n("S3Client", "DeleteObjectTaggingCommand").f(void 0, void 0).ser(se_DeleteObjectTaggingCommand).de(de_DeleteObjectTaggingCommand).build() {
      static {
        __name(this, "DeleteObjectTaggingCommand");
      }
      static {
        __name2(this, "DeleteObjectTaggingCommand");
      }
    };
  }
});
var DeletePublicAccessBlockCommand;
var init_DeletePublicAccessBlockCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/DeletePublicAccessBlockCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    DeletePublicAccessBlockCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeletePublicAccessBlock", {}).n("S3Client", "DeletePublicAccessBlockCommand").f(void 0, void 0).ser(se_DeletePublicAccessBlockCommand).de(de_DeletePublicAccessBlockCommand).build() {
      static {
        __name(this, "DeletePublicAccessBlockCommand");
      }
      static {
        __name2(this, "DeletePublicAccessBlockCommand");
      }
    };
  }
});
var GetBucketAccelerateConfigurationCommand;
var init_GetBucketAccelerateConfigurationCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAccelerateConfigurationCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketAccelerateConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketAccelerateConfiguration", {}).n("S3Client", "GetBucketAccelerateConfigurationCommand").f(void 0, void 0).ser(se_GetBucketAccelerateConfigurationCommand).de(de_GetBucketAccelerateConfigurationCommand).build() {
      static {
        __name(this, "GetBucketAccelerateConfigurationCommand");
      }
      static {
        __name2(this, "GetBucketAccelerateConfigurationCommand");
      }
    };
  }
});
var GetBucketAclCommand;
var init_GetBucketAclCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAclCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketAclCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketAcl", {}).n("S3Client", "GetBucketAclCommand").f(void 0, void 0).ser(se_GetBucketAclCommand).de(de_GetBucketAclCommand).build() {
      static {
        __name(this, "GetBucketAclCommand");
      }
      static {
        __name2(this, "GetBucketAclCommand");
      }
    };
  }
});
var GetBucketAnalyticsConfigurationCommand;
var init_GetBucketAnalyticsConfigurationCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAnalyticsConfigurationCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketAnalyticsConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketAnalyticsConfiguration", {}).n("S3Client", "GetBucketAnalyticsConfigurationCommand").f(void 0, void 0).ser(se_GetBucketAnalyticsConfigurationCommand).de(de_GetBucketAnalyticsConfigurationCommand).build() {
      static {
        __name(this, "GetBucketAnalyticsConfigurationCommand");
      }
      static {
        __name2(this, "GetBucketAnalyticsConfigurationCommand");
      }
    };
  }
});
var GetBucketCorsCommand;
var init_GetBucketCorsCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketCorsCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketCorsCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketCors", {}).n("S3Client", "GetBucketCorsCommand").f(void 0, void 0).ser(se_GetBucketCorsCommand).de(de_GetBucketCorsCommand).build() {
      static {
        __name(this, "GetBucketCorsCommand");
      }
      static {
        __name2(this, "GetBucketCorsCommand");
      }
    };
  }
});
var GetBucketEncryptionCommand;
var init_GetBucketEncryptionCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketEncryptionCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_models_0();
    init_Aws_restXml();
    GetBucketEncryptionCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketEncryption", {}).n("S3Client", "GetBucketEncryptionCommand").f(void 0, GetBucketEncryptionOutputFilterSensitiveLog).ser(se_GetBucketEncryptionCommand).de(de_GetBucketEncryptionCommand).build() {
      static {
        __name(this, "GetBucketEncryptionCommand");
      }
      static {
        __name2(this, "GetBucketEncryptionCommand");
      }
    };
  }
});
var GetBucketIntelligentTieringConfigurationCommand;
var init_GetBucketIntelligentTieringConfigurationCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketIntelligentTieringConfigurationCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketIntelligentTieringConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketIntelligentTieringConfiguration", {}).n("S3Client", "GetBucketIntelligentTieringConfigurationCommand").f(void 0, void 0).ser(se_GetBucketIntelligentTieringConfigurationCommand).de(de_GetBucketIntelligentTieringConfigurationCommand).build() {
      static {
        __name(this, "GetBucketIntelligentTieringConfigurationCommand");
      }
      static {
        __name2(this, "GetBucketIntelligentTieringConfigurationCommand");
      }
    };
  }
});
var GetBucketInventoryConfigurationCommand;
var init_GetBucketInventoryConfigurationCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketInventoryConfigurationCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_models_0();
    init_Aws_restXml();
    GetBucketInventoryConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketInventoryConfiguration", {}).n("S3Client", "GetBucketInventoryConfigurationCommand").f(void 0, GetBucketInventoryConfigurationOutputFilterSensitiveLog).ser(se_GetBucketInventoryConfigurationCommand).de(de_GetBucketInventoryConfigurationCommand).build() {
      static {
        __name(this, "GetBucketInventoryConfigurationCommand");
      }
      static {
        __name2(this, "GetBucketInventoryConfigurationCommand");
      }
    };
  }
});
var GetBucketLifecycleConfigurationCommand;
var init_GetBucketLifecycleConfigurationCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLifecycleConfigurationCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketLifecycleConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketLifecycleConfiguration", {}).n("S3Client", "GetBucketLifecycleConfigurationCommand").f(void 0, void 0).ser(se_GetBucketLifecycleConfigurationCommand).de(de_GetBucketLifecycleConfigurationCommand).build() {
      static {
        __name(this, "GetBucketLifecycleConfigurationCommand");
      }
      static {
        __name2(this, "GetBucketLifecycleConfigurationCommand");
      }
    };
  }
});
var GetBucketLocationCommand;
var init_GetBucketLocationCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLocationCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketLocationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketLocation", {}).n("S3Client", "GetBucketLocationCommand").f(void 0, void 0).ser(se_GetBucketLocationCommand).de(de_GetBucketLocationCommand).build() {
      static {
        __name(this, "GetBucketLocationCommand");
      }
      static {
        __name2(this, "GetBucketLocationCommand");
      }
    };
  }
});
var GetBucketLoggingCommand;
var init_GetBucketLoggingCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLoggingCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketLoggingCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketLogging", {}).n("S3Client", "GetBucketLoggingCommand").f(void 0, void 0).ser(se_GetBucketLoggingCommand).de(de_GetBucketLoggingCommand).build() {
      static {
        __name(this, "GetBucketLoggingCommand");
      }
      static {
        __name2(this, "GetBucketLoggingCommand");
      }
    };
  }
});
var GetBucketMetadataConfigurationCommand;
var init_GetBucketMetadataConfigurationCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketMetadataConfigurationCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketMetadataConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketMetadataConfiguration", {}).n("S3Client", "GetBucketMetadataConfigurationCommand").f(void 0, void 0).ser(se_GetBucketMetadataConfigurationCommand).de(de_GetBucketMetadataConfigurationCommand).build() {
      static {
        __name(this, "GetBucketMetadataConfigurationCommand");
      }
      static {
        __name2(this, "GetBucketMetadataConfigurationCommand");
      }
    };
  }
});
var GetBucketMetadataTableConfigurationCommand;
var init_GetBucketMetadataTableConfigurationCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketMetadataTableConfigurationCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketMetadataTableConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketMetadataTableConfiguration", {}).n("S3Client", "GetBucketMetadataTableConfigurationCommand").f(void 0, void 0).ser(se_GetBucketMetadataTableConfigurationCommand).de(de_GetBucketMetadataTableConfigurationCommand).build() {
      static {
        __name(this, "GetBucketMetadataTableConfigurationCommand");
      }
      static {
        __name2(this, "GetBucketMetadataTableConfigurationCommand");
      }
    };
  }
});
var GetBucketMetricsConfigurationCommand;
var init_GetBucketMetricsConfigurationCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketMetricsConfigurationCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketMetricsConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketMetricsConfiguration", {}).n("S3Client", "GetBucketMetricsConfigurationCommand").f(void 0, void 0).ser(se_GetBucketMetricsConfigurationCommand).de(de_GetBucketMetricsConfigurationCommand).build() {
      static {
        __name(this, "GetBucketMetricsConfigurationCommand");
      }
      static {
        __name2(this, "GetBucketMetricsConfigurationCommand");
      }
    };
  }
});
var GetBucketNotificationConfigurationCommand;
var init_GetBucketNotificationConfigurationCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketNotificationConfigurationCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketNotificationConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketNotificationConfiguration", {}).n("S3Client", "GetBucketNotificationConfigurationCommand").f(void 0, void 0).ser(se_GetBucketNotificationConfigurationCommand).de(de_GetBucketNotificationConfigurationCommand).build() {
      static {
        __name(this, "GetBucketNotificationConfigurationCommand");
      }
      static {
        __name2(this, "GetBucketNotificationConfigurationCommand");
      }
    };
  }
});
var GetBucketOwnershipControlsCommand;
var init_GetBucketOwnershipControlsCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketOwnershipControlsCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketOwnershipControlsCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketOwnershipControls", {}).n("S3Client", "GetBucketOwnershipControlsCommand").f(void 0, void 0).ser(se_GetBucketOwnershipControlsCommand).de(de_GetBucketOwnershipControlsCommand).build() {
      static {
        __name(this, "GetBucketOwnershipControlsCommand");
      }
      static {
        __name2(this, "GetBucketOwnershipControlsCommand");
      }
    };
  }
});
var GetBucketPolicyCommand;
var init_GetBucketPolicyCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketPolicyCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketPolicyCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketPolicy", {}).n("S3Client", "GetBucketPolicyCommand").f(void 0, void 0).ser(se_GetBucketPolicyCommand).de(de_GetBucketPolicyCommand).build() {
      static {
        __name(this, "GetBucketPolicyCommand");
      }
      static {
        __name2(this, "GetBucketPolicyCommand");
      }
    };
  }
});
var GetBucketPolicyStatusCommand;
var init_GetBucketPolicyStatusCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketPolicyStatusCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketPolicyStatusCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketPolicyStatus", {}).n("S3Client", "GetBucketPolicyStatusCommand").f(void 0, void 0).ser(se_GetBucketPolicyStatusCommand).de(de_GetBucketPolicyStatusCommand).build() {
      static {
        __name(this, "GetBucketPolicyStatusCommand");
      }
      static {
        __name2(this, "GetBucketPolicyStatusCommand");
      }
    };
  }
});
var GetBucketReplicationCommand;
var init_GetBucketReplicationCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketReplicationCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketReplicationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketReplication", {}).n("S3Client", "GetBucketReplicationCommand").f(void 0, void 0).ser(se_GetBucketReplicationCommand).de(de_GetBucketReplicationCommand).build() {
      static {
        __name(this, "GetBucketReplicationCommand");
      }
      static {
        __name2(this, "GetBucketReplicationCommand");
      }
    };
  }
});
var GetBucketRequestPaymentCommand;
var init_GetBucketRequestPaymentCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketRequestPaymentCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketRequestPaymentCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketRequestPayment", {}).n("S3Client", "GetBucketRequestPaymentCommand").f(void 0, void 0).ser(se_GetBucketRequestPaymentCommand).de(de_GetBucketRequestPaymentCommand).build() {
      static {
        __name(this, "GetBucketRequestPaymentCommand");
      }
      static {
        __name2(this, "GetBucketRequestPaymentCommand");
      }
    };
  }
});
var GetBucketTaggingCommand;
var init_GetBucketTaggingCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketTaggingCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketTaggingCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketTagging", {}).n("S3Client", "GetBucketTaggingCommand").f(void 0, void 0).ser(se_GetBucketTaggingCommand).de(de_GetBucketTaggingCommand).build() {
      static {
        __name(this, "GetBucketTaggingCommand");
      }
      static {
        __name2(this, "GetBucketTaggingCommand");
      }
    };
  }
});
var GetBucketVersioningCommand;
var init_GetBucketVersioningCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketVersioningCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketVersioningCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketVersioning", {}).n("S3Client", "GetBucketVersioningCommand").f(void 0, void 0).ser(se_GetBucketVersioningCommand).de(de_GetBucketVersioningCommand).build() {
      static {
        __name(this, "GetBucketVersioningCommand");
      }
      static {
        __name2(this, "GetBucketVersioningCommand");
      }
    };
  }
});
var GetBucketWebsiteCommand;
var init_GetBucketWebsiteCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketWebsiteCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketWebsiteCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketWebsite", {}).n("S3Client", "GetBucketWebsiteCommand").f(void 0, void 0).ser(se_GetBucketWebsiteCommand).de(de_GetBucketWebsiteCommand).build() {
      static {
        __name(this, "GetBucketWebsiteCommand");
      }
      static {
        __name2(this, "GetBucketWebsiteCommand");
      }
    };
  }
});
var GetObjectAclCommand;
var init_GetObjectAclCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectAclCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    GetObjectAclCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Key: { type: "contextParams", name: "Key" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetObjectAcl", {}).n("S3Client", "GetObjectAclCommand").f(void 0, void 0).ser(se_GetObjectAclCommand).de(de_GetObjectAclCommand).build() {
      static {
        __name(this, "GetObjectAclCommand");
      }
      static {
        __name2(this, "GetObjectAclCommand");
      }
    };
  }
});
var GetObjectAttributesCommand;
var init_GetObjectAttributesCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectAttributesCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es54();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_models_0();
    init_Aws_restXml();
    GetObjectAttributesCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2),
        getSsecPlugin(config2)
      ];
    }).s("AmazonS3", "GetObjectAttributes", {}).n("S3Client", "GetObjectAttributesCommand").f(GetObjectAttributesRequestFilterSensitiveLog, void 0).ser(se_GetObjectAttributesCommand).de(de_GetObjectAttributesCommand).build() {
      static {
        __name(this, "GetObjectAttributesCommand");
      }
      static {
        __name2(this, "GetObjectAttributesCommand");
      }
    };
  }
});
var GetObjectCommand;
var init_GetObjectCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es23();
    init_dist_es28();
    init_dist_es54();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_models_0();
    init_Aws_restXml();
    GetObjectCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Key: { type: "contextParams", name: "Key" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestChecksumRequired: false,
          requestValidationModeMember: "ChecksumMode",
          responseAlgorithms: ["CRC64NVME", "CRC32", "CRC32C", "SHA256", "SHA1"]
        }),
        getSsecPlugin(config2),
        getS3ExpiresMiddlewarePlugin(config2)
      ];
    }).s("AmazonS3", "GetObject", {}).n("S3Client", "GetObjectCommand").f(GetObjectRequestFilterSensitiveLog, GetObjectOutputFilterSensitiveLog).ser(se_GetObjectCommand).de(de_GetObjectCommand).build() {
      static {
        __name(this, "GetObjectCommand");
      }
      static {
        __name2(this, "GetObjectCommand");
      }
    };
  }
});
var GetObjectLegalHoldCommand;
var init_GetObjectLegalHoldCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectLegalHoldCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    GetObjectLegalHoldCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetObjectLegalHold", {}).n("S3Client", "GetObjectLegalHoldCommand").f(void 0, void 0).ser(se_GetObjectLegalHoldCommand).de(de_GetObjectLegalHoldCommand).build() {
      static {
        __name(this, "GetObjectLegalHoldCommand");
      }
      static {
        __name2(this, "GetObjectLegalHoldCommand");
      }
    };
  }
});
var GetObjectLockConfigurationCommand;
var init_GetObjectLockConfigurationCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectLockConfigurationCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    GetObjectLockConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetObjectLockConfiguration", {}).n("S3Client", "GetObjectLockConfigurationCommand").f(void 0, void 0).ser(se_GetObjectLockConfigurationCommand).de(de_GetObjectLockConfigurationCommand).build() {
      static {
        __name(this, "GetObjectLockConfigurationCommand");
      }
      static {
        __name2(this, "GetObjectLockConfigurationCommand");
      }
    };
  }
});
var GetObjectRetentionCommand;
var init_GetObjectRetentionCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectRetentionCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    GetObjectRetentionCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetObjectRetention", {}).n("S3Client", "GetObjectRetentionCommand").f(void 0, void 0).ser(se_GetObjectRetentionCommand).de(de_GetObjectRetentionCommand).build() {
      static {
        __name(this, "GetObjectRetentionCommand");
      }
      static {
        __name2(this, "GetObjectRetentionCommand");
      }
    };
  }
});
var GetObjectTaggingCommand;
var init_GetObjectTaggingCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectTaggingCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    GetObjectTaggingCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetObjectTagging", {}).n("S3Client", "GetObjectTaggingCommand").f(void 0, void 0).ser(se_GetObjectTaggingCommand).de(de_GetObjectTaggingCommand).build() {
      static {
        __name(this, "GetObjectTaggingCommand");
      }
      static {
        __name2(this, "GetObjectTaggingCommand");
      }
    };
  }
});
var GetObjectTorrentCommand;
var init_GetObjectTorrentCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectTorrentCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_models_0();
    init_Aws_restXml();
    GetObjectTorrentCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "GetObjectTorrent", {}).n("S3Client", "GetObjectTorrentCommand").f(void 0, GetObjectTorrentOutputFilterSensitiveLog).ser(se_GetObjectTorrentCommand).de(de_GetObjectTorrentCommand).build() {
      static {
        __name(this, "GetObjectTorrentCommand");
      }
      static {
        __name2(this, "GetObjectTorrentCommand");
      }
    };
  }
});
var GetPublicAccessBlockCommand;
var init_GetPublicAccessBlockCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/GetPublicAccessBlockCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    GetPublicAccessBlockCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetPublicAccessBlock", {}).n("S3Client", "GetPublicAccessBlockCommand").f(void 0, void 0).ser(se_GetPublicAccessBlockCommand).de(de_GetPublicAccessBlockCommand).build() {
      static {
        __name(this, "GetPublicAccessBlockCommand");
      }
      static {
        __name2(this, "GetPublicAccessBlockCommand");
      }
    };
  }
});
var HeadBucketCommand;
var init_HeadBucketCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/HeadBucketCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    HeadBucketCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "HeadBucket", {}).n("S3Client", "HeadBucketCommand").f(void 0, void 0).ser(se_HeadBucketCommand).de(de_HeadBucketCommand).build() {
      static {
        __name(this, "HeadBucketCommand");
      }
      static {
        __name2(this, "HeadBucketCommand");
      }
    };
  }
});
var HeadObjectCommand;
var init_HeadObjectCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/HeadObjectCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es54();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_models_0();
    init_Aws_restXml();
    HeadObjectCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Key: { type: "contextParams", name: "Key" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2),
        getSsecPlugin(config2),
        getS3ExpiresMiddlewarePlugin(config2)
      ];
    }).s("AmazonS3", "HeadObject", {}).n("S3Client", "HeadObjectCommand").f(HeadObjectRequestFilterSensitiveLog, HeadObjectOutputFilterSensitiveLog).ser(se_HeadObjectCommand).de(de_HeadObjectCommand).build() {
      static {
        __name(this, "HeadObjectCommand");
      }
      static {
        __name2(this, "HeadObjectCommand");
      }
    };
  }
});
var ListBucketAnalyticsConfigurationsCommand;
var init_ListBucketAnalyticsConfigurationsCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketAnalyticsConfigurationsCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    ListBucketAnalyticsConfigurationsCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "ListBucketAnalyticsConfigurations", {}).n("S3Client", "ListBucketAnalyticsConfigurationsCommand").f(void 0, void 0).ser(se_ListBucketAnalyticsConfigurationsCommand).de(de_ListBucketAnalyticsConfigurationsCommand).build() {
      static {
        __name(this, "ListBucketAnalyticsConfigurationsCommand");
      }
      static {
        __name2(this, "ListBucketAnalyticsConfigurationsCommand");
      }
    };
  }
});
var ListBucketIntelligentTieringConfigurationsCommand;
var init_ListBucketIntelligentTieringConfigurationsCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketIntelligentTieringConfigurationsCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    ListBucketIntelligentTieringConfigurationsCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "ListBucketIntelligentTieringConfigurations", {}).n("S3Client", "ListBucketIntelligentTieringConfigurationsCommand").f(void 0, void 0).ser(se_ListBucketIntelligentTieringConfigurationsCommand).de(de_ListBucketIntelligentTieringConfigurationsCommand).build() {
      static {
        __name(this, "ListBucketIntelligentTieringConfigurationsCommand");
      }
      static {
        __name2(this, "ListBucketIntelligentTieringConfigurationsCommand");
      }
    };
  }
});
var ListBucketInventoryConfigurationsCommand;
var init_ListBucketInventoryConfigurationsCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketInventoryConfigurationsCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_models_0();
    init_Aws_restXml();
    ListBucketInventoryConfigurationsCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "ListBucketInventoryConfigurations", {}).n("S3Client", "ListBucketInventoryConfigurationsCommand").f(void 0, ListBucketInventoryConfigurationsOutputFilterSensitiveLog).ser(se_ListBucketInventoryConfigurationsCommand).de(de_ListBucketInventoryConfigurationsCommand).build() {
      static {
        __name(this, "ListBucketInventoryConfigurationsCommand");
      }
      static {
        __name2(this, "ListBucketInventoryConfigurationsCommand");
      }
    };
  }
});
var ListBucketMetricsConfigurationsCommand;
var init_ListBucketMetricsConfigurationsCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketMetricsConfigurationsCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    ListBucketMetricsConfigurationsCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "ListBucketMetricsConfigurations", {}).n("S3Client", "ListBucketMetricsConfigurationsCommand").f(void 0, void 0).ser(se_ListBucketMetricsConfigurationsCommand).de(de_ListBucketMetricsConfigurationsCommand).build() {
      static {
        __name(this, "ListBucketMetricsConfigurationsCommand");
      }
      static {
        __name2(this, "ListBucketMetricsConfigurationsCommand");
      }
    };
  }
});
var ListBucketsCommand;
var init_ListBucketsCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketsCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    ListBucketsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "ListBuckets", {}).n("S3Client", "ListBucketsCommand").f(void 0, void 0).ser(se_ListBucketsCommand).de(de_ListBucketsCommand).build() {
      static {
        __name(this, "ListBucketsCommand");
      }
      static {
        __name2(this, "ListBucketsCommand");
      }
    };
  }
});
var ListDirectoryBucketsCommand;
var init_ListDirectoryBucketsCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/ListDirectoryBucketsCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    ListDirectoryBucketsCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "ListDirectoryBuckets", {}).n("S3Client", "ListDirectoryBucketsCommand").f(void 0, void 0).ser(se_ListDirectoryBucketsCommand).de(de_ListDirectoryBucketsCommand).build() {
      static {
        __name(this, "ListDirectoryBucketsCommand");
      }
      static {
        __name2(this, "ListDirectoryBucketsCommand");
      }
    };
  }
});
var ListMultipartUploadsCommand;
var init_ListMultipartUploadsCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/ListMultipartUploadsCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    ListMultipartUploadsCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Prefix: { type: "contextParams", name: "Prefix" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "ListMultipartUploads", {}).n("S3Client", "ListMultipartUploadsCommand").f(void 0, void 0).ser(se_ListMultipartUploadsCommand).de(de_ListMultipartUploadsCommand).build() {
      static {
        __name(this, "ListMultipartUploadsCommand");
      }
      static {
        __name2(this, "ListMultipartUploadsCommand");
      }
    };
  }
});
var ListObjectsCommand;
var init_ListObjectsCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectsCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    ListObjectsCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Prefix: { type: "contextParams", name: "Prefix" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "ListObjects", {}).n("S3Client", "ListObjectsCommand").f(void 0, void 0).ser(se_ListObjectsCommand).de(de_ListObjectsCommand).build() {
      static {
        __name(this, "ListObjectsCommand");
      }
      static {
        __name2(this, "ListObjectsCommand");
      }
    };
  }
});
var ListObjectsV2Command;
var init_ListObjectsV2Command = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectsV2Command.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    ListObjectsV2Command = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Prefix: { type: "contextParams", name: "Prefix" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "ListObjectsV2", {}).n("S3Client", "ListObjectsV2Command").f(void 0, void 0).ser(se_ListObjectsV2Command).de(de_ListObjectsV2Command).build() {
      static {
        __name(this, "ListObjectsV2Command");
      }
      static {
        __name2(this, "ListObjectsV2Command");
      }
    };
  }
});
var ListObjectVersionsCommand;
var init_ListObjectVersionsCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectVersionsCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    ListObjectVersionsCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Prefix: { type: "contextParams", name: "Prefix" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "ListObjectVersions", {}).n("S3Client", "ListObjectVersionsCommand").f(void 0, void 0).ser(se_ListObjectVersionsCommand).de(de_ListObjectVersionsCommand).build() {
      static {
        __name(this, "ListObjectVersionsCommand");
      }
      static {
        __name2(this, "ListObjectVersionsCommand");
      }
    };
  }
});
var ListPartsCommand;
var init_ListPartsCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/ListPartsCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es54();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_models_1();
    init_Aws_restXml();
    ListPartsCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Key: { type: "contextParams", name: "Key" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2),
        getSsecPlugin(config2)
      ];
    }).s("AmazonS3", "ListParts", {}).n("S3Client", "ListPartsCommand").f(ListPartsRequestFilterSensitiveLog, void 0).ser(se_ListPartsCommand).de(de_ListPartsCommand).build() {
      static {
        __name(this, "ListPartsCommand");
      }
      static {
        __name2(this, "ListPartsCommand");
      }
    };
  }
});
var PutBucketAccelerateConfigurationCommand;
var init_PutBucketAccelerateConfigurationCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAccelerateConfigurationCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es23();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    PutBucketAccelerateConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: false
        })
      ];
    }).s("AmazonS3", "PutBucketAccelerateConfiguration", {}).n("S3Client", "PutBucketAccelerateConfigurationCommand").f(void 0, void 0).ser(se_PutBucketAccelerateConfigurationCommand).de(de_PutBucketAccelerateConfigurationCommand).build() {
      static {
        __name(this, "PutBucketAccelerateConfigurationCommand");
      }
      static {
        __name2(this, "PutBucketAccelerateConfigurationCommand");
      }
    };
  }
});
var PutBucketAclCommand;
var init_PutBucketAclCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAclCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es23();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    PutBucketAclCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "PutBucketAcl", {}).n("S3Client", "PutBucketAclCommand").f(void 0, void 0).ser(se_PutBucketAclCommand).de(de_PutBucketAclCommand).build() {
      static {
        __name(this, "PutBucketAclCommand");
      }
      static {
        __name2(this, "PutBucketAclCommand");
      }
    };
  }
});
var PutBucketAnalyticsConfigurationCommand;
var init_PutBucketAnalyticsConfigurationCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAnalyticsConfigurationCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    PutBucketAnalyticsConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "PutBucketAnalyticsConfiguration", {}).n("S3Client", "PutBucketAnalyticsConfigurationCommand").f(void 0, void 0).ser(se_PutBucketAnalyticsConfigurationCommand).de(de_PutBucketAnalyticsConfigurationCommand).build() {
      static {
        __name(this, "PutBucketAnalyticsConfigurationCommand");
      }
      static {
        __name2(this, "PutBucketAnalyticsConfigurationCommand");
      }
    };
  }
});
var PutBucketCorsCommand;
var init_PutBucketCorsCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketCorsCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es23();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    PutBucketCorsCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "PutBucketCors", {}).n("S3Client", "PutBucketCorsCommand").f(void 0, void 0).ser(se_PutBucketCorsCommand).de(de_PutBucketCorsCommand).build() {
      static {
        __name(this, "PutBucketCorsCommand");
      }
      static {
        __name2(this, "PutBucketCorsCommand");
      }
    };
  }
});
var PutBucketEncryptionCommand;
var init_PutBucketEncryptionCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketEncryptionCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es23();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_models_1();
    init_Aws_restXml();
    PutBucketEncryptionCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "PutBucketEncryption", {}).n("S3Client", "PutBucketEncryptionCommand").f(PutBucketEncryptionRequestFilterSensitiveLog, void 0).ser(se_PutBucketEncryptionCommand).de(de_PutBucketEncryptionCommand).build() {
      static {
        __name(this, "PutBucketEncryptionCommand");
      }
      static {
        __name2(this, "PutBucketEncryptionCommand");
      }
    };
  }
});
var PutBucketIntelligentTieringConfigurationCommand;
var init_PutBucketIntelligentTieringConfigurationCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketIntelligentTieringConfigurationCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    PutBucketIntelligentTieringConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "PutBucketIntelligentTieringConfiguration", {}).n("S3Client", "PutBucketIntelligentTieringConfigurationCommand").f(void 0, void 0).ser(se_PutBucketIntelligentTieringConfigurationCommand).de(de_PutBucketIntelligentTieringConfigurationCommand).build() {
      static {
        __name(this, "PutBucketIntelligentTieringConfigurationCommand");
      }
      static {
        __name2(this, "PutBucketIntelligentTieringConfigurationCommand");
      }
    };
  }
});
var PutBucketInventoryConfigurationCommand;
var init_PutBucketInventoryConfigurationCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketInventoryConfigurationCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_models_1();
    init_Aws_restXml();
    PutBucketInventoryConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "PutBucketInventoryConfiguration", {}).n("S3Client", "PutBucketInventoryConfigurationCommand").f(PutBucketInventoryConfigurationRequestFilterSensitiveLog, void 0).ser(se_PutBucketInventoryConfigurationCommand).de(de_PutBucketInventoryConfigurationCommand).build() {
      static {
        __name(this, "PutBucketInventoryConfigurationCommand");
      }
      static {
        __name2(this, "PutBucketInventoryConfigurationCommand");
      }
    };
  }
});
var PutBucketLifecycleConfigurationCommand;
var init_PutBucketLifecycleConfigurationCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketLifecycleConfigurationCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es23();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    PutBucketLifecycleConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        }),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "PutBucketLifecycleConfiguration", {}).n("S3Client", "PutBucketLifecycleConfigurationCommand").f(void 0, void 0).ser(se_PutBucketLifecycleConfigurationCommand).de(de_PutBucketLifecycleConfigurationCommand).build() {
      static {
        __name(this, "PutBucketLifecycleConfigurationCommand");
      }
      static {
        __name2(this, "PutBucketLifecycleConfigurationCommand");
      }
    };
  }
});
var PutBucketLoggingCommand;
var init_PutBucketLoggingCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketLoggingCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es23();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    PutBucketLoggingCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "PutBucketLogging", {}).n("S3Client", "PutBucketLoggingCommand").f(void 0, void 0).ser(se_PutBucketLoggingCommand).de(de_PutBucketLoggingCommand).build() {
      static {
        __name(this, "PutBucketLoggingCommand");
      }
      static {
        __name2(this, "PutBucketLoggingCommand");
      }
    };
  }
});
var PutBucketMetricsConfigurationCommand;
var init_PutBucketMetricsConfigurationCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketMetricsConfigurationCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    PutBucketMetricsConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "PutBucketMetricsConfiguration", {}).n("S3Client", "PutBucketMetricsConfigurationCommand").f(void 0, void 0).ser(se_PutBucketMetricsConfigurationCommand).de(de_PutBucketMetricsConfigurationCommand).build() {
      static {
        __name(this, "PutBucketMetricsConfigurationCommand");
      }
      static {
        __name2(this, "PutBucketMetricsConfigurationCommand");
      }
    };
  }
});
var PutBucketNotificationConfigurationCommand;
var init_PutBucketNotificationConfigurationCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketNotificationConfigurationCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    PutBucketNotificationConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "PutBucketNotificationConfiguration", {}).n("S3Client", "PutBucketNotificationConfigurationCommand").f(void 0, void 0).ser(se_PutBucketNotificationConfigurationCommand).de(de_PutBucketNotificationConfigurationCommand).build() {
      static {
        __name(this, "PutBucketNotificationConfigurationCommand");
      }
      static {
        __name2(this, "PutBucketNotificationConfigurationCommand");
      }
    };
  }
});
var PutBucketOwnershipControlsCommand;
var init_PutBucketOwnershipControlsCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketOwnershipControlsCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es23();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    PutBucketOwnershipControlsCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "PutBucketOwnershipControls", {}).n("S3Client", "PutBucketOwnershipControlsCommand").f(void 0, void 0).ser(se_PutBucketOwnershipControlsCommand).de(de_PutBucketOwnershipControlsCommand).build() {
      static {
        __name(this, "PutBucketOwnershipControlsCommand");
      }
      static {
        __name2(this, "PutBucketOwnershipControlsCommand");
      }
    };
  }
});
var PutBucketPolicyCommand;
var init_PutBucketPolicyCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketPolicyCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es23();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    PutBucketPolicyCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "PutBucketPolicy", {}).n("S3Client", "PutBucketPolicyCommand").f(void 0, void 0).ser(se_PutBucketPolicyCommand).de(de_PutBucketPolicyCommand).build() {
      static {
        __name(this, "PutBucketPolicyCommand");
      }
      static {
        __name2(this, "PutBucketPolicyCommand");
      }
    };
  }
});
var PutBucketReplicationCommand;
var init_PutBucketReplicationCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketReplicationCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es23();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    PutBucketReplicationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "PutBucketReplication", {}).n("S3Client", "PutBucketReplicationCommand").f(void 0, void 0).ser(se_PutBucketReplicationCommand).de(de_PutBucketReplicationCommand).build() {
      static {
        __name(this, "PutBucketReplicationCommand");
      }
      static {
        __name2(this, "PutBucketReplicationCommand");
      }
    };
  }
});
var PutBucketRequestPaymentCommand;
var init_PutBucketRequestPaymentCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketRequestPaymentCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es23();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    PutBucketRequestPaymentCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "PutBucketRequestPayment", {}).n("S3Client", "PutBucketRequestPaymentCommand").f(void 0, void 0).ser(se_PutBucketRequestPaymentCommand).de(de_PutBucketRequestPaymentCommand).build() {
      static {
        __name(this, "PutBucketRequestPaymentCommand");
      }
      static {
        __name2(this, "PutBucketRequestPaymentCommand");
      }
    };
  }
});
var PutBucketTaggingCommand;
var init_PutBucketTaggingCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketTaggingCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es23();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    PutBucketTaggingCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "PutBucketTagging", {}).n("S3Client", "PutBucketTaggingCommand").f(void 0, void 0).ser(se_PutBucketTaggingCommand).de(de_PutBucketTaggingCommand).build() {
      static {
        __name(this, "PutBucketTaggingCommand");
      }
      static {
        __name2(this, "PutBucketTaggingCommand");
      }
    };
  }
});
var PutBucketVersioningCommand;
var init_PutBucketVersioningCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketVersioningCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es23();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    PutBucketVersioningCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "PutBucketVersioning", {}).n("S3Client", "PutBucketVersioningCommand").f(void 0, void 0).ser(se_PutBucketVersioningCommand).de(de_PutBucketVersioningCommand).build() {
      static {
        __name(this, "PutBucketVersioningCommand");
      }
      static {
        __name2(this, "PutBucketVersioningCommand");
      }
    };
  }
});
var PutBucketWebsiteCommand;
var init_PutBucketWebsiteCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketWebsiteCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es23();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    PutBucketWebsiteCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "PutBucketWebsite", {}).n("S3Client", "PutBucketWebsiteCommand").f(void 0, void 0).ser(se_PutBucketWebsiteCommand).de(de_PutBucketWebsiteCommand).build() {
      static {
        __name(this, "PutBucketWebsiteCommand");
      }
      static {
        __name2(this, "PutBucketWebsiteCommand");
      }
    };
  }
});
var PutObjectAclCommand;
var init_PutObjectAclCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectAclCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es23();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    PutObjectAclCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Key: { type: "contextParams", name: "Key" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        }),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "PutObjectAcl", {}).n("S3Client", "PutObjectAclCommand").f(void 0, void 0).ser(se_PutObjectAclCommand).de(de_PutObjectAclCommand).build() {
      static {
        __name(this, "PutObjectAclCommand");
      }
      static {
        __name2(this, "PutObjectAclCommand");
      }
    };
  }
});
var PutObjectCommand;
var init_PutObjectCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es23();
    init_dist_es28();
    init_dist_es54();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_models_1();
    init_Aws_restXml();
    PutObjectCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Key: { type: "contextParams", name: "Key" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: false
        }),
        getCheckContentLengthHeaderPlugin(config2),
        getThrow200ExceptionsPlugin(config2),
        getSsecPlugin(config2)
      ];
    }).s("AmazonS3", "PutObject", {}).n("S3Client", "PutObjectCommand").f(PutObjectRequestFilterSensitiveLog, PutObjectOutputFilterSensitiveLog).ser(se_PutObjectCommand).de(de_PutObjectCommand).build() {
      static {
        __name(this, "PutObjectCommand");
      }
      static {
        __name2(this, "PutObjectCommand");
      }
    };
  }
});
var PutObjectLegalHoldCommand;
var init_PutObjectLegalHoldCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectLegalHoldCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es23();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    PutObjectLegalHoldCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        }),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "PutObjectLegalHold", {}).n("S3Client", "PutObjectLegalHoldCommand").f(void 0, void 0).ser(se_PutObjectLegalHoldCommand).de(de_PutObjectLegalHoldCommand).build() {
      static {
        __name(this, "PutObjectLegalHoldCommand");
      }
      static {
        __name2(this, "PutObjectLegalHoldCommand");
      }
    };
  }
});
var PutObjectLockConfigurationCommand;
var init_PutObjectLockConfigurationCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectLockConfigurationCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es23();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    PutObjectLockConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        }),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "PutObjectLockConfiguration", {}).n("S3Client", "PutObjectLockConfigurationCommand").f(void 0, void 0).ser(se_PutObjectLockConfigurationCommand).de(de_PutObjectLockConfigurationCommand).build() {
      static {
        __name(this, "PutObjectLockConfigurationCommand");
      }
      static {
        __name2(this, "PutObjectLockConfigurationCommand");
      }
    };
  }
});
var PutObjectRetentionCommand;
var init_PutObjectRetentionCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectRetentionCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es23();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    PutObjectRetentionCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        }),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "PutObjectRetention", {}).n("S3Client", "PutObjectRetentionCommand").f(void 0, void 0).ser(se_PutObjectRetentionCommand).de(de_PutObjectRetentionCommand).build() {
      static {
        __name(this, "PutObjectRetentionCommand");
      }
      static {
        __name2(this, "PutObjectRetentionCommand");
      }
    };
  }
});
var PutObjectTaggingCommand;
var init_PutObjectTaggingCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectTaggingCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es23();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    PutObjectTaggingCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        }),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "PutObjectTagging", {}).n("S3Client", "PutObjectTaggingCommand").f(void 0, void 0).ser(se_PutObjectTaggingCommand).de(de_PutObjectTaggingCommand).build() {
      static {
        __name(this, "PutObjectTaggingCommand");
      }
      static {
        __name2(this, "PutObjectTaggingCommand");
      }
    };
  }
});
var PutPublicAccessBlockCommand;
var init_PutPublicAccessBlockCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/PutPublicAccessBlockCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es23();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    PutPublicAccessBlockCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "PutPublicAccessBlock", {}).n("S3Client", "PutPublicAccessBlockCommand").f(void 0, void 0).ser(se_PutPublicAccessBlockCommand).de(de_PutPublicAccessBlockCommand).build() {
      static {
        __name(this, "PutPublicAccessBlockCommand");
      }
      static {
        __name2(this, "PutPublicAccessBlockCommand");
      }
    };
  }
});
var RenameObjectCommand;
var init_RenameObjectCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/RenameObjectCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    RenameObjectCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Key: { type: "contextParams", name: "Key" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "RenameObject", {}).n("S3Client", "RenameObjectCommand").f(void 0, void 0).ser(se_RenameObjectCommand).de(de_RenameObjectCommand).build() {
      static {
        __name(this, "RenameObjectCommand");
      }
      static {
        __name2(this, "RenameObjectCommand");
      }
    };
  }
});
var RestoreObjectCommand;
var init_RestoreObjectCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/RestoreObjectCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es23();
    init_dist_es28();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_models_1();
    init_Aws_restXml();
    RestoreObjectCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: false
        }),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "RestoreObject", {}).n("S3Client", "RestoreObjectCommand").f(RestoreObjectRequestFilterSensitiveLog, void 0).ser(se_RestoreObjectCommand).de(de_RestoreObjectCommand).build() {
      static {
        __name(this, "RestoreObjectCommand");
      }
      static {
        __name2(this, "RestoreObjectCommand");
      }
    };
  }
});
var SelectObjectContentCommand;
var init_SelectObjectContentCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/SelectObjectContentCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es54();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_models_1();
    init_Aws_restXml();
    SelectObjectContentCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2),
        getSsecPlugin(config2)
      ];
    }).s("AmazonS3", "SelectObjectContent", {
      eventStream: {
        output: true
      }
    }).n("S3Client", "SelectObjectContentCommand").f(SelectObjectContentRequestFilterSensitiveLog, SelectObjectContentOutputFilterSensitiveLog).ser(se_SelectObjectContentCommand).de(de_SelectObjectContentCommand).build() {
      static {
        __name(this, "SelectObjectContentCommand");
      }
      static {
        __name2(this, "SelectObjectContentCommand");
      }
    };
  }
});
var UpdateBucketMetadataInventoryTableConfigurationCommand;
var init_UpdateBucketMetadataInventoryTableConfigurationCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/UpdateBucketMetadataInventoryTableConfigurationCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es23();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    UpdateBucketMetadataInventoryTableConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "UpdateBucketMetadataInventoryTableConfiguration", {}).n("S3Client", "UpdateBucketMetadataInventoryTableConfigurationCommand").f(void 0, void 0).ser(se_UpdateBucketMetadataInventoryTableConfigurationCommand).de(de_UpdateBucketMetadataInventoryTableConfigurationCommand).build() {
      static {
        __name(this, "UpdateBucketMetadataInventoryTableConfigurationCommand");
      }
      static {
        __name2(this, "UpdateBucketMetadataInventoryTableConfigurationCommand");
      }
    };
  }
});
var UpdateBucketMetadataJournalTableConfigurationCommand;
var init_UpdateBucketMetadataJournalTableConfigurationCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/UpdateBucketMetadataJournalTableConfigurationCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es23();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_Aws_restXml();
    UpdateBucketMetadataJournalTableConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "UpdateBucketMetadataJournalTableConfiguration", {}).n("S3Client", "UpdateBucketMetadataJournalTableConfigurationCommand").f(void 0, void 0).ser(se_UpdateBucketMetadataJournalTableConfigurationCommand).de(de_UpdateBucketMetadataJournalTableConfigurationCommand).build() {
      static {
        __name(this, "UpdateBucketMetadataJournalTableConfigurationCommand");
      }
      static {
        __name2(this, "UpdateBucketMetadataJournalTableConfigurationCommand");
      }
    };
  }
});
var UploadPartCommand;
var init_UploadPartCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/UploadPartCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es23();
    init_dist_es28();
    init_dist_es54();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_models_1();
    init_Aws_restXml();
    UploadPartCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Key: { type: "contextParams", name: "Key" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: false
        }),
        getThrow200ExceptionsPlugin(config2),
        getSsecPlugin(config2)
      ];
    }).s("AmazonS3", "UploadPart", {}).n("S3Client", "UploadPartCommand").f(UploadPartRequestFilterSensitiveLog, UploadPartOutputFilterSensitiveLog).ser(se_UploadPartCommand).de(de_UploadPartCommand).build() {
      static {
        __name(this, "UploadPartCommand");
      }
      static {
        __name2(this, "UploadPartCommand");
      }
    };
  }
});
var UploadPartCopyCommand;
var init_UploadPartCopyCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/UploadPartCopyCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es28();
    init_dist_es54();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_models_1();
    init_Aws_restXml();
    UploadPartCopyCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      DisableS3ExpressSessionAuth: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2),
        getSsecPlugin(config2)
      ];
    }).s("AmazonS3", "UploadPartCopy", {}).n("S3Client", "UploadPartCopyCommand").f(UploadPartCopyRequestFilterSensitiveLog, UploadPartCopyOutputFilterSensitiveLog).ser(se_UploadPartCopyCommand).de(de_UploadPartCopyCommand).build() {
      static {
        __name(this, "UploadPartCopyCommand");
      }
      static {
        __name2(this, "UploadPartCopyCommand");
      }
    };
  }
});
var WriteGetObjectResponseCommand;
var init_WriteGetObjectResponseCommand = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/WriteGetObjectResponseCommand.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es37();
    init_dist_es5();
    init_dist_es19();
    init_EndpointParameters();
    init_models_1();
    init_Aws_restXml();
    WriteGetObjectResponseCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseObjectLambdaEndpoint: { type: "staticContextParams", value: true }
    }).m(function(Command2, cs2, config2, o2) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "WriteGetObjectResponse", {}).n("S3Client", "WriteGetObjectResponseCommand").f(WriteGetObjectResponseRequestFilterSensitiveLog, void 0).ser(se_WriteGetObjectResponseCommand).de(de_WriteGetObjectResponseCommand).build() {
      static {
        __name(this, "WriteGetObjectResponseCommand");
      }
      static {
        __name2(this, "WriteGetObjectResponseCommand");
      }
    };
  }
});
var commands;
var S3;
var init_S3 = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/S3.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es19();
    init_AbortMultipartUploadCommand();
    init_CompleteMultipartUploadCommand();
    init_CopyObjectCommand();
    init_CreateBucketCommand();
    init_CreateBucketMetadataConfigurationCommand();
    init_CreateBucketMetadataTableConfigurationCommand();
    init_CreateMultipartUploadCommand();
    init_CreateSessionCommand();
    init_DeleteBucketAnalyticsConfigurationCommand();
    init_DeleteBucketCommand();
    init_DeleteBucketCorsCommand();
    init_DeleteBucketEncryptionCommand();
    init_DeleteBucketIntelligentTieringConfigurationCommand();
    init_DeleteBucketInventoryConfigurationCommand();
    init_DeleteBucketLifecycleCommand();
    init_DeleteBucketMetadataConfigurationCommand();
    init_DeleteBucketMetadataTableConfigurationCommand();
    init_DeleteBucketMetricsConfigurationCommand();
    init_DeleteBucketOwnershipControlsCommand();
    init_DeleteBucketPolicyCommand();
    init_DeleteBucketReplicationCommand();
    init_DeleteBucketTaggingCommand();
    init_DeleteBucketWebsiteCommand();
    init_DeleteObjectCommand();
    init_DeleteObjectsCommand();
    init_DeleteObjectTaggingCommand();
    init_DeletePublicAccessBlockCommand();
    init_GetBucketAccelerateConfigurationCommand();
    init_GetBucketAclCommand();
    init_GetBucketAnalyticsConfigurationCommand();
    init_GetBucketCorsCommand();
    init_GetBucketEncryptionCommand();
    init_GetBucketIntelligentTieringConfigurationCommand();
    init_GetBucketInventoryConfigurationCommand();
    init_GetBucketLifecycleConfigurationCommand();
    init_GetBucketLocationCommand();
    init_GetBucketLoggingCommand();
    init_GetBucketMetadataConfigurationCommand();
    init_GetBucketMetadataTableConfigurationCommand();
    init_GetBucketMetricsConfigurationCommand();
    init_GetBucketNotificationConfigurationCommand();
    init_GetBucketOwnershipControlsCommand();
    init_GetBucketPolicyCommand();
    init_GetBucketPolicyStatusCommand();
    init_GetBucketReplicationCommand();
    init_GetBucketRequestPaymentCommand();
    init_GetBucketTaggingCommand();
    init_GetBucketVersioningCommand();
    init_GetBucketWebsiteCommand();
    init_GetObjectAclCommand();
    init_GetObjectAttributesCommand();
    init_GetObjectCommand();
    init_GetObjectLegalHoldCommand();
    init_GetObjectLockConfigurationCommand();
    init_GetObjectRetentionCommand();
    init_GetObjectTaggingCommand();
    init_GetObjectTorrentCommand();
    init_GetPublicAccessBlockCommand();
    init_HeadBucketCommand();
    init_HeadObjectCommand();
    init_ListBucketAnalyticsConfigurationsCommand();
    init_ListBucketIntelligentTieringConfigurationsCommand();
    init_ListBucketInventoryConfigurationsCommand();
    init_ListBucketMetricsConfigurationsCommand();
    init_ListBucketsCommand();
    init_ListDirectoryBucketsCommand();
    init_ListMultipartUploadsCommand();
    init_ListObjectsCommand();
    init_ListObjectsV2Command();
    init_ListObjectVersionsCommand();
    init_ListPartsCommand();
    init_PutBucketAccelerateConfigurationCommand();
    init_PutBucketAclCommand();
    init_PutBucketAnalyticsConfigurationCommand();
    init_PutBucketCorsCommand();
    init_PutBucketEncryptionCommand();
    init_PutBucketIntelligentTieringConfigurationCommand();
    init_PutBucketInventoryConfigurationCommand();
    init_PutBucketLifecycleConfigurationCommand();
    init_PutBucketLoggingCommand();
    init_PutBucketMetricsConfigurationCommand();
    init_PutBucketNotificationConfigurationCommand();
    init_PutBucketOwnershipControlsCommand();
    init_PutBucketPolicyCommand();
    init_PutBucketReplicationCommand();
    init_PutBucketRequestPaymentCommand();
    init_PutBucketTaggingCommand();
    init_PutBucketVersioningCommand();
    init_PutBucketWebsiteCommand();
    init_PutObjectAclCommand();
    init_PutObjectCommand();
    init_PutObjectLegalHoldCommand();
    init_PutObjectLockConfigurationCommand();
    init_PutObjectRetentionCommand();
    init_PutObjectTaggingCommand();
    init_PutPublicAccessBlockCommand();
    init_RenameObjectCommand();
    init_RestoreObjectCommand();
    init_SelectObjectContentCommand();
    init_UpdateBucketMetadataInventoryTableConfigurationCommand();
    init_UpdateBucketMetadataJournalTableConfigurationCommand();
    init_UploadPartCommand();
    init_UploadPartCopyCommand();
    init_WriteGetObjectResponseCommand();
    init_S3Client();
    commands = {
      AbortMultipartUploadCommand,
      CompleteMultipartUploadCommand,
      CopyObjectCommand,
      CreateBucketCommand,
      CreateBucketMetadataConfigurationCommand,
      CreateBucketMetadataTableConfigurationCommand,
      CreateMultipartUploadCommand,
      CreateSessionCommand,
      DeleteBucketCommand,
      DeleteBucketAnalyticsConfigurationCommand,
      DeleteBucketCorsCommand,
      DeleteBucketEncryptionCommand,
      DeleteBucketIntelligentTieringConfigurationCommand,
      DeleteBucketInventoryConfigurationCommand,
      DeleteBucketLifecycleCommand,
      DeleteBucketMetadataConfigurationCommand,
      DeleteBucketMetadataTableConfigurationCommand,
      DeleteBucketMetricsConfigurationCommand,
      DeleteBucketOwnershipControlsCommand,
      DeleteBucketPolicyCommand,
      DeleteBucketReplicationCommand,
      DeleteBucketTaggingCommand,
      DeleteBucketWebsiteCommand,
      DeleteObjectCommand,
      DeleteObjectsCommand,
      DeleteObjectTaggingCommand,
      DeletePublicAccessBlockCommand,
      GetBucketAccelerateConfigurationCommand,
      GetBucketAclCommand,
      GetBucketAnalyticsConfigurationCommand,
      GetBucketCorsCommand,
      GetBucketEncryptionCommand,
      GetBucketIntelligentTieringConfigurationCommand,
      GetBucketInventoryConfigurationCommand,
      GetBucketLifecycleConfigurationCommand,
      GetBucketLocationCommand,
      GetBucketLoggingCommand,
      GetBucketMetadataConfigurationCommand,
      GetBucketMetadataTableConfigurationCommand,
      GetBucketMetricsConfigurationCommand,
      GetBucketNotificationConfigurationCommand,
      GetBucketOwnershipControlsCommand,
      GetBucketPolicyCommand,
      GetBucketPolicyStatusCommand,
      GetBucketReplicationCommand,
      GetBucketRequestPaymentCommand,
      GetBucketTaggingCommand,
      GetBucketVersioningCommand,
      GetBucketWebsiteCommand,
      GetObjectCommand,
      GetObjectAclCommand,
      GetObjectAttributesCommand,
      GetObjectLegalHoldCommand,
      GetObjectLockConfigurationCommand,
      GetObjectRetentionCommand,
      GetObjectTaggingCommand,
      GetObjectTorrentCommand,
      GetPublicAccessBlockCommand,
      HeadBucketCommand,
      HeadObjectCommand,
      ListBucketAnalyticsConfigurationsCommand,
      ListBucketIntelligentTieringConfigurationsCommand,
      ListBucketInventoryConfigurationsCommand,
      ListBucketMetricsConfigurationsCommand,
      ListBucketsCommand,
      ListDirectoryBucketsCommand,
      ListMultipartUploadsCommand,
      ListObjectsCommand,
      ListObjectsV2Command,
      ListObjectVersionsCommand,
      ListPartsCommand,
      PutBucketAccelerateConfigurationCommand,
      PutBucketAclCommand,
      PutBucketAnalyticsConfigurationCommand,
      PutBucketCorsCommand,
      PutBucketEncryptionCommand,
      PutBucketIntelligentTieringConfigurationCommand,
      PutBucketInventoryConfigurationCommand,
      PutBucketLifecycleConfigurationCommand,
      PutBucketLoggingCommand,
      PutBucketMetricsConfigurationCommand,
      PutBucketNotificationConfigurationCommand,
      PutBucketOwnershipControlsCommand,
      PutBucketPolicyCommand,
      PutBucketReplicationCommand,
      PutBucketRequestPaymentCommand,
      PutBucketTaggingCommand,
      PutBucketVersioningCommand,
      PutBucketWebsiteCommand,
      PutObjectCommand,
      PutObjectAclCommand,
      PutObjectLegalHoldCommand,
      PutObjectLockConfigurationCommand,
      PutObjectRetentionCommand,
      PutObjectTaggingCommand,
      PutPublicAccessBlockCommand,
      RenameObjectCommand,
      RestoreObjectCommand,
      SelectObjectContentCommand,
      UpdateBucketMetadataInventoryTableConfigurationCommand,
      UpdateBucketMetadataJournalTableConfigurationCommand,
      UploadPartCommand,
      UploadPartCopyCommand,
      WriteGetObjectResponseCommand
    };
    S3 = class extends S3Client {
      static {
        __name(this, "S3");
      }
      static {
        __name2(this, "S3");
      }
    };
    createAggregatedClient(commands, S3);
  }
});
var init_commands = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/commands/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_AbortMultipartUploadCommand();
    init_CompleteMultipartUploadCommand();
    init_CopyObjectCommand();
    init_CreateBucketCommand();
    init_CreateBucketMetadataConfigurationCommand();
    init_CreateBucketMetadataTableConfigurationCommand();
    init_CreateMultipartUploadCommand();
    init_CreateSessionCommand();
    init_DeleteBucketAnalyticsConfigurationCommand();
    init_DeleteBucketCommand();
    init_DeleteBucketCorsCommand();
    init_DeleteBucketEncryptionCommand();
    init_DeleteBucketIntelligentTieringConfigurationCommand();
    init_DeleteBucketInventoryConfigurationCommand();
    init_DeleteBucketLifecycleCommand();
    init_DeleteBucketMetadataConfigurationCommand();
    init_DeleteBucketMetadataTableConfigurationCommand();
    init_DeleteBucketMetricsConfigurationCommand();
    init_DeleteBucketOwnershipControlsCommand();
    init_DeleteBucketPolicyCommand();
    init_DeleteBucketReplicationCommand();
    init_DeleteBucketTaggingCommand();
    init_DeleteBucketWebsiteCommand();
    init_DeleteObjectCommand();
    init_DeleteObjectTaggingCommand();
    init_DeleteObjectsCommand();
    init_DeletePublicAccessBlockCommand();
    init_GetBucketAccelerateConfigurationCommand();
    init_GetBucketAclCommand();
    init_GetBucketAnalyticsConfigurationCommand();
    init_GetBucketCorsCommand();
    init_GetBucketEncryptionCommand();
    init_GetBucketIntelligentTieringConfigurationCommand();
    init_GetBucketInventoryConfigurationCommand();
    init_GetBucketLifecycleConfigurationCommand();
    init_GetBucketLocationCommand();
    init_GetBucketLoggingCommand();
    init_GetBucketMetadataConfigurationCommand();
    init_GetBucketMetadataTableConfigurationCommand();
    init_GetBucketMetricsConfigurationCommand();
    init_GetBucketNotificationConfigurationCommand();
    init_GetBucketOwnershipControlsCommand();
    init_GetBucketPolicyCommand();
    init_GetBucketPolicyStatusCommand();
    init_GetBucketReplicationCommand();
    init_GetBucketRequestPaymentCommand();
    init_GetBucketTaggingCommand();
    init_GetBucketVersioningCommand();
    init_GetBucketWebsiteCommand();
    init_GetObjectAclCommand();
    init_GetObjectAttributesCommand();
    init_GetObjectCommand();
    init_GetObjectLegalHoldCommand();
    init_GetObjectLockConfigurationCommand();
    init_GetObjectRetentionCommand();
    init_GetObjectTaggingCommand();
    init_GetObjectTorrentCommand();
    init_GetPublicAccessBlockCommand();
    init_HeadBucketCommand();
    init_HeadObjectCommand();
    init_ListBucketAnalyticsConfigurationsCommand();
    init_ListBucketIntelligentTieringConfigurationsCommand();
    init_ListBucketInventoryConfigurationsCommand();
    init_ListBucketMetricsConfigurationsCommand();
    init_ListBucketsCommand();
    init_ListDirectoryBucketsCommand();
    init_ListMultipartUploadsCommand();
    init_ListObjectVersionsCommand();
    init_ListObjectsCommand();
    init_ListObjectsV2Command();
    init_ListPartsCommand();
    init_PutBucketAccelerateConfigurationCommand();
    init_PutBucketAclCommand();
    init_PutBucketAnalyticsConfigurationCommand();
    init_PutBucketCorsCommand();
    init_PutBucketEncryptionCommand();
    init_PutBucketIntelligentTieringConfigurationCommand();
    init_PutBucketInventoryConfigurationCommand();
    init_PutBucketLifecycleConfigurationCommand();
    init_PutBucketLoggingCommand();
    init_PutBucketMetricsConfigurationCommand();
    init_PutBucketNotificationConfigurationCommand();
    init_PutBucketOwnershipControlsCommand();
    init_PutBucketPolicyCommand();
    init_PutBucketReplicationCommand();
    init_PutBucketRequestPaymentCommand();
    init_PutBucketTaggingCommand();
    init_PutBucketVersioningCommand();
    init_PutBucketWebsiteCommand();
    init_PutObjectAclCommand();
    init_PutObjectCommand();
    init_PutObjectLegalHoldCommand();
    init_PutObjectLockConfigurationCommand();
    init_PutObjectRetentionCommand();
    init_PutObjectTaggingCommand();
    init_PutPublicAccessBlockCommand();
    init_RenameObjectCommand();
    init_RestoreObjectCommand();
    init_SelectObjectContentCommand();
    init_UpdateBucketMetadataInventoryTableConfigurationCommand();
    init_UpdateBucketMetadataJournalTableConfigurationCommand();
    init_UploadPartCommand();
    init_UploadPartCopyCommand();
    init_WriteGetObjectResponseCommand();
  }
});
var init_Interfaces = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/pagination/Interfaces.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var paginateListBuckets;
var init_ListBucketsPaginator = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/pagination/ListBucketsPaginator.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es13();
    init_ListBucketsCommand();
    init_S3Client();
    paginateListBuckets = createPaginator(S3Client, ListBucketsCommand, "ContinuationToken", "ContinuationToken", "MaxBuckets");
  }
});
var paginateListDirectoryBuckets;
var init_ListDirectoryBucketsPaginator = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/pagination/ListDirectoryBucketsPaginator.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es13();
    init_ListDirectoryBucketsCommand();
    init_S3Client();
    paginateListDirectoryBuckets = createPaginator(S3Client, ListDirectoryBucketsCommand, "ContinuationToken", "ContinuationToken", "MaxDirectoryBuckets");
  }
});
var paginateListObjectsV2;
var init_ListObjectsV2Paginator = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/pagination/ListObjectsV2Paginator.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es13();
    init_ListObjectsV2Command();
    init_S3Client();
    paginateListObjectsV2 = createPaginator(S3Client, ListObjectsV2Command, "ContinuationToken", "NextContinuationToken", "MaxKeys");
  }
});
var paginateListParts;
var init_ListPartsPaginator = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/pagination/ListPartsPaginator.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es13();
    init_ListPartsCommand();
    init_S3Client();
    paginateListParts = createPaginator(S3Client, ListPartsCommand, "PartNumberMarker", "NextPartNumberMarker", "MaxParts");
  }
});
var init_pagination2 = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/pagination/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_Interfaces();
    init_ListBucketsPaginator();
    init_ListDirectoryBucketsPaginator();
    init_ListObjectsV2Paginator();
    init_ListPartsPaginator();
  }
});
var init_waitForBucketExists = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForBucketExists.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_waitForBucketNotExists = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForBucketNotExists.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_waitForObjectExists = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForObjectExists.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_waitForObjectNotExists = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForObjectNotExists.js"() {
    init_functionsRoutes_0_09879299104094341();
  }
});
var init_waiters = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/waiters/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_waitForBucketExists();
    init_waitForBucketNotExists();
    init_waitForObjectExists();
    init_waitForObjectNotExists();
  }
});
var init_models = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/models/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_models_0();
    init_models_1();
  }
});
var init_dist_es56 = __esm({
  "../node_modules/@aws-sdk/client-s3/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_S3Client();
    init_S3();
    init_commands();
    init_pagination2();
    init_waiters();
    init_models();
  }
});
function formatUrl(request) {
  const { port, query } = request;
  let { protocol, path, hostname: hostname3 } = request;
  if (protocol && protocol.slice(-1) !== ":") {
    protocol += ":";
  }
  if (port) {
    hostname3 += `:${port}`;
  }
  if (path && path.charAt(0) !== "/") {
    path = `/${path}`;
  }
  let queryString = query ? buildQueryString(query) : "";
  if (queryString && queryString[0] !== "?") {
    queryString = `?${queryString}`;
  }
  let auth = "";
  if (request.username != null || request.password != null) {
    const username = request.username ?? "";
    const password = request.password ?? "";
    auth = `${username}:${password}@`;
  }
  let fragment = "";
  if (request.fragment) {
    fragment = `#${request.fragment}`;
  }
  return `${protocol}//${auth}${hostname3}${path}${queryString}${fragment}`;
}
__name(formatUrl, "formatUrl");
var init_dist_es57 = __esm({
  "../node_modules/@aws-sdk/util-format-url/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es9();
    __name2(formatUrl, "formatUrl");
  }
});
var UNSIGNED_PAYLOAD2;
var SHA256_HEADER2;
var init_constants13 = __esm({
  "../node_modules/@aws-sdk/s3-request-presigner/dist-es/constants.js"() {
    init_functionsRoutes_0_09879299104094341();
    UNSIGNED_PAYLOAD2 = "UNSIGNED-PAYLOAD";
    SHA256_HEADER2 = "X-Amz-Content-Sha256";
  }
});
var S3RequestPresigner;
var init_presigner = __esm({
  "../node_modules/@aws-sdk/s3-request-presigner/dist-es/presigner.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es41();
    init_constants13();
    S3RequestPresigner = class {
      static {
        __name(this, "S3RequestPresigner");
      }
      static {
        __name2(this, "S3RequestPresigner");
      }
      signer;
      constructor(options) {
        const resolvedOptions = {
          service: options.signingName || options.service || "s3",
          uriEscapePath: options.uriEscapePath || false,
          applyChecksum: options.applyChecksum || false,
          ...options
        };
        this.signer = new SignatureV4MultiRegion(resolvedOptions);
      }
      presign(requestToSign, { unsignableHeaders = /* @__PURE__ */ new Set(), hoistableHeaders = /* @__PURE__ */ new Set(), unhoistableHeaders = /* @__PURE__ */ new Set(), ...options } = {}) {
        this.prepareRequest(requestToSign, {
          unsignableHeaders,
          unhoistableHeaders,
          hoistableHeaders
        });
        return this.signer.presign(requestToSign, {
          expiresIn: 900,
          unsignableHeaders,
          unhoistableHeaders,
          ...options
        });
      }
      presignWithCredentials(requestToSign, credentials, { unsignableHeaders = /* @__PURE__ */ new Set(), hoistableHeaders = /* @__PURE__ */ new Set(), unhoistableHeaders = /* @__PURE__ */ new Set(), ...options } = {}) {
        this.prepareRequest(requestToSign, {
          unsignableHeaders,
          unhoistableHeaders,
          hoistableHeaders
        });
        return this.signer.presignWithCredentials(requestToSign, credentials, {
          expiresIn: 900,
          unsignableHeaders,
          unhoistableHeaders,
          ...options
        });
      }
      prepareRequest(requestToSign, { unsignableHeaders = /* @__PURE__ */ new Set(), unhoistableHeaders = /* @__PURE__ */ new Set(), hoistableHeaders = /* @__PURE__ */ new Set() } = {}) {
        unsignableHeaders.add("content-type");
        Object.keys(requestToSign.headers).map((header) => header.toLowerCase()).filter((header) => header.startsWith("x-amz-server-side-encryption")).forEach((header) => {
          if (!hoistableHeaders.has(header)) {
            unhoistableHeaders.add(header);
          }
        });
        requestToSign.headers[SHA256_HEADER2] = UNSIGNED_PAYLOAD2;
        const currentHostHeader = requestToSign.headers.host;
        const port = requestToSign.port;
        const expectedHostHeader = `${requestToSign.hostname}${requestToSign.port != null ? ":" + port : ""}`;
        if (!currentHostHeader || currentHostHeader === requestToSign.hostname && requestToSign.port != null) {
          requestToSign.headers.host = expectedHostHeader;
        }
      }
    };
  }
});
var getSignedUrl;
var init_getSignedUrl = __esm({
  "../node_modules/@aws-sdk/s3-request-presigner/dist-es/getSignedUrl.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es57();
    init_dist_es37();
    init_dist_es2();
    init_presigner();
    getSignedUrl = /* @__PURE__ */ __name2(async (client, command, options = {}) => {
      let s3Presigner;
      let region;
      if (typeof client.config.endpointProvider === "function") {
        const endpointV2 = await getEndpointFromInstructions(command.input, command.constructor, client.config);
        const authScheme = endpointV2.properties?.authSchemes?.[0];
        if (authScheme?.name === "sigv4a") {
          region = authScheme?.signingRegionSet?.join(",");
        } else {
          region = authScheme?.signingRegion;
        }
        s3Presigner = new S3RequestPresigner({
          ...client.config,
          signingName: authScheme?.signingName,
          region: /* @__PURE__ */ __name2(async () => region, "region")
        });
      } else {
        s3Presigner = new S3RequestPresigner(client.config);
      }
      const presignInterceptMiddleware = /* @__PURE__ */ __name2((next, context) => async (args) => {
        const { request } = args;
        if (!HttpRequest.isInstance(request)) {
          throw new Error("Request to be presigned is not an valid HTTP request.");
        }
        delete request.headers["amz-sdk-invocation-id"];
        delete request.headers["amz-sdk-request"];
        delete request.headers["x-amz-user-agent"];
        let presigned2;
        const presignerOptions = {
          ...options,
          signingRegion: options.signingRegion ?? context["signing_region"] ?? region,
          signingService: options.signingService ?? context["signing_service"]
        };
        if (context.s3ExpressIdentity) {
          presigned2 = await s3Presigner.presignWithCredentials(request, context.s3ExpressIdentity, presignerOptions);
        } else {
          presigned2 = await s3Presigner.presign(request, presignerOptions);
        }
        return {
          response: {},
          output: {
            $metadata: { httpStatusCode: 200 },
            presigned: presigned2
          }
        };
      }, "presignInterceptMiddleware");
      const middlewareName = "presignInterceptMiddleware";
      const clientStack = client.middlewareStack.clone();
      clientStack.addRelativeTo(presignInterceptMiddleware, {
        name: middlewareName,
        relation: "before",
        toMiddleware: "awsAuthMiddleware",
        override: true
      });
      const handler = command.resolveMiddleware(clientStack, client.config, {});
      const { output } = await handler({ input: command.input });
      const { presigned } = output;
      return formatUrl(presigned);
    }, "getSignedUrl");
  }
});
var init_dist_es58 = __esm({
  "../node_modules/@aws-sdk/s3-request-presigner/dist-es/index.js"() {
    init_functionsRoutes_0_09879299104094341();
    init_getSignedUrl();
    init_presigner();
  }
});
async function rateLimit(env, request, opts = {}) {
  const windowMins = opts.windowMins ?? 60;
  const ip = request.headers.get("CF-Connecting-IP") || request.headers.get("X-Forwarded-For") || "unknown";
  const ua = (request.headers.get("User-Agent") || "").slice(0, 64);
  const cookie = (request.headers.get("Cookie") || "").match(/rlid=([^;]+)/)?.[1] || "";
  const bucket = `ip:${ip}|ua:${ua}|c:${cookie.slice(0, 32)}`;
  const row = await env.DB.prepare(
    `SELECT value FROM settings WHERE key='upload_rate_per_hour' LIMIT 1`
  ).first();
  const limit = Math.max(1, Number(row?.value ?? 20));
  const recent = await env.DB.prepare(
    `SELECT COUNT(*) AS n FROM rate_log WHERE bucket=? AND created_at >= DATETIME('now', ?)`
  ).bind(bucket, `-${windowMins} minutes`).first();
  if ((recent?.n ?? 0) >= limit) {
    return { ok: false, status: 429, remaining: 0, bucket };
  }
  await env.DB.prepare(
    `INSERT INTO rate_log(id, bucket, created_at) VALUES(?, ?, CURRENT_TIMESTAMP)`
  ).bind(crypto.randomUUID(), bucket).run();
  return { ok: true, status: 200, remaining: Math.max(0, limit - 1 - (recent?.n ?? 0)), bucket };
}
__name(rateLimit, "rateLimit");
var init_rate = __esm({
  "api/_rate.ts"() {
    init_functionsRoutes_0_09879299104094341();
    __name2(rateLimit, "rateLimit");
  }
});
function json5(data, init = {}) {
  return new Response(JSON.stringify(data), {
    ...init,
    headers: {
      "content-type": "application/json; charset=UTF-8",
      ...init.headers || {}
    }
  });
}
__name(json5, "json5");
function sanitizeName(name) {
  return name.replace(/[^a-zA-Z0-9._-]/g, "_").slice(0, 120);
}
__name(sanitizeName, "sanitizeName");
function coerceContentType(ct2) {
  const v2 = (ct2 || "").trim().toLowerCase();
  if (v2.startsWith("image/")) return v2;
  if (v2 === "") return DEFAULT_CT;
  return v2;
}
__name(coerceContentType, "coerceContentType");
var MAX_FILES;
var DEFAULT_CT;
var onRequestPost8;
var init_direct_upload = __esm({
  "api/gallery/direct-upload.ts"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist_es56();
    init_dist_es58();
    init_rate();
    __name2(json5, "json");
    MAX_FILES = 10;
    DEFAULT_CT = "application/octet-stream";
    __name2(sanitizeName, "sanitizeName");
    __name2(coerceContentType, "coerceContentType");
    onRequestPost8 = /* @__PURE__ */ __name2(async ({ env, request }) => {
      try {
        const ct2 = request.headers.get("content-type") || "";
        if (!ct2.includes("application/json")) {
          return json5({ ok: false, message: "Expected application/json" }, { status: 400 });
        }
        const rl = await rateLimit(env, request, { windowMins: 60 });
        if (!rl.ok) {
          return json5({ ok: false, message: "Rate limit exceeded. Please try again later." }, { status: rl.status });
        }
        const body = await request.json().catch(() => null);
        if (!body || typeof body !== "object") {
          return json5({ ok: false, message: "Invalid JSON body" }, { status: 400 });
        }
        const accountId = env.R2_ACCOUNT_ID;
        const bucket = env.R2_BUCKET;
        const accessKeyId = env.R2_ACCESS_KEY_ID;
        const secretAccessKey = env.R2_SECRET_ACCESS_KEY;
        if (!accountId || !bucket || !accessKeyId || !secretAccessKey) {
          return json5(
            { ok: false, message: "Missing env: R2_ACCOUNT_ID, R2_BUCKET, R2_ACCESS_KEY_ID, R2_SECRET_ACCESS_KEY" },
            { status: 500 }
          );
        }
        const s3 = new S3Client({
          region: "auto",
          endpoint: `https://${accountId}.r2.cloudflarestorage.com`,
          credentials: { accessKeyId, secretAccessKey },
          forcePathStyle: true
        });
        let requestedItems = null;
        if (Array.isArray(body.items) && body.items.length > 0) {
          requestedItems = body.items.slice(0, MAX_FILES);
        } else {
          const files = Math.max(1, Math.min(MAX_FILES, Number(body.files ?? 1)));
          requestedItems = Array.from({ length: files }, () => ({}));
        }
        const EXPIRES_SECONDS = 120;
        const items = [];
        for (const it of requestedItems) {
          const rawName = it.filename ? sanitizeName(it.filename) : "upload";
          const key = `gallery/tmp/${crypto.randomUUID()}-${rawName}`;
          const contentType = coerceContentType(it.contentType);
          const cmd = new PutObjectCommand({
            Bucket: bucket,
            Key: key,
            ContentType: contentType
          });
          const uploadURL = await getSignedUrl(s3, cmd, { expiresIn: EXPIRES_SECONDS });
          items.push({ key, uploadURL, contentType });
        }
        return json5({ ok: true, items });
      } catch (err) {
        console.error("direct-upload error", err);
        return json5({ ok: false, message: String(err?.message || err) }, { status: 500 });
      }
    }, "onRequestPost");
  }
});
function buildNames(raw) {
  const dot = raw.lastIndexOf(".");
  const base = dot > 0 ? raw.slice(0, dot) : raw;
  const ext = dot > 0 ? raw.slice(dot) : ".jpg";
  const safeAscii = (base.replace(/[^\w.\-]+/g, "-").replace(/-+/g, "-").replace(/^-|-$/g, "") || "photo") + ext;
  const utf8Star = "UTF-8''" + encodeURIComponent(base + ext).replace(/%20/g, "+");
  return { safeAscii, utf8Star, ext };
}
__name(buildNames, "buildNames");
var onRequestGet10;
var init_file = __esm({
  "api/gallery/file.ts"() {
    init_functionsRoutes_0_09879299104094341();
    __name2(buildNames, "buildNames");
    onRequestGet10 = /* @__PURE__ */ __name2(async ({ request, env }) => {
      const url2 = new URL(request.url);
      const key = url2.searchParams.get("key") || "";
      if (!key) return new Response("Missing key", { status: 400 });
      const disposition = (url2.searchParams.get("disposition") || "inline").toLowerCase();
      const name = url2.searchParams.get("name");
      const obj = await env.R2.get(key);
      if (!obj || !obj.body) return new Response("Not found", { status: 404 });
      const meta = obj.httpMetadata || {};
      let ct2 = meta.contentType;
      if (!ct2) {
        if (/\.png$/i.test(key)) ct2 = "image/png";
        else if (/\.webp$/i.test(key)) ct2 = "image/webp";
        else if (/\.gif$/i.test(key)) ct2 = "image/gif";
        else ct2 = "image/jpeg";
      }
      const display = name || decodeURIComponent(key.split("/").pop() || "photo.jpg");
      const { safeAscii, utf8Star } = buildNames(display);
      const headers = new Headers();
      headers.set("Content-Type", ct2);
      headers.set("Cache-Control", meta.cacheControl || "public, max-age=31536000, immutable");
      headers.set(
        "Content-Disposition",
        `${disposition}; filename="${safeAscii}"; filename*=${utf8Star}`
      );
      return new Response(obj.body, { headers });
    }, "onRequestGet");
  }
});
async function searchFTS(env, q2) {
  const stmt = env.DB.prepare(
    `SELECT f.party_id AS id, p.display_name AS label
     FROM party_fts f
     JOIN parties p ON p.id = f.party_id
     WHERE f MATCH ?
     LIMIT 10`
  ).bind(q2.replace(/\s+/g, " "));
  const { results } = await stmt.all();
  return results ?? [];
}
__name(searchFTS, "searchFTS");
async function searchLike(env, q2) {
  const like = `%${q2.replace(/\s+/g, "%")}%`;
  const { results } = await env.DB.prepare(
    `SELECT p.id AS id, p.display_name AS label
     FROM parties p
     WHERE p.display_name LIKE ?
     ORDER BY p.display_name
     LIMIT 10`
  ).bind(like).all();
  return results ?? [];
}
__name(searchLike, "searchLike");
async function handleGet(env, request) {
  const url2 = new URL(request.url);
  const q2 = (url2.searchParams.get("q") || "").trim();
  if (!q2) return json2({ results: [] });
  try {
    const results = await searchFTS(env, q2);
    return json2({ results });
  } catch (e2) {
    try {
      const results = await searchLike(env, q2);
      return json2({ results, fallback: "like" });
    } catch (e22) {
      return json2({ error: "search failed", detail: String(e22) }, 500);
    }
  }
}
__name(handleGet, "handleGet");
var onRequest4;
var init_search = __esm({
  "api/party/search.ts"() {
    init_functionsRoutes_0_09879299104094341();
    init_utils();
    __name2(searchFTS, "searchFTS");
    __name2(searchLike, "searchLike");
    __name2(handleGet, "handleGet");
    onRequest4 = /* @__PURE__ */ __name2(async ({ env, request }) => {
      if (request.method === "GET" || request.method === "HEAD" || request.method === "POST") {
        return handleGet(env, request);
      }
      return json2({ error: "Method not allowed" }, 405);
    }, "onRequest");
  }
});
var onRequestGet11;
var init_id5 = __esm({
  "api/party/[id]/index.ts"() {
    init_functionsRoutes_0_09879299104094341();
    init_utils();
    onRequestGet11 = /* @__PURE__ */ __name2(async ({ env, params }) => {
      const id = String(params.id);
      const party = await env.DB.prepare(
        `SELECT id, display_name, contact_email, contact_phone, reminder_opt_in, rsvp_deadline FROM parties WHERE id = ?`
      ).bind(id).first();
      if (!party) return json2({ error: "Not found" }, 404);
      const members = await env.DB.prepare(
        `
SELECT m.id, m.full_name, m.is_plus_one, m.plus_one_for, m.sort_order,
       m.invite_ceremony, m.invite_reception,
       a.attending_ceremony, a.attending_reception, a.dietary, a.notes
FROM members m
LEFT JOIN member_attendance_current a ON a.member_id = m.id
WHERE m.party_id = ?
ORDER BY m.sort_order ASC, m.full_name ASC
 `
      ).bind(id).all();
      return json2({ party, members: members.results ?? [] });
    }, "onRequestGet");
  }
});
var onRequestGet12;
var init_gallery = __esm({
  "api/gallery/index.ts"() {
    init_functionsRoutes_0_09879299104094341();
    onRequestGet12 = /* @__PURE__ */ __name2(async ({ env, request }) => {
      const url2 = new URL(request.url);
      const limit = Math.min(parseInt(url2.searchParams.get("limit") || "40", 10), 80);
      const cursor = url2.searchParams.get("cursor");
      const album = url2.searchParams.get("album");
      const albumFilter = album && album !== "all" ? " AND album_id = ? " : "";
      const baseSql = `
  SELECT
    id,
    caption,
    display_name,
    width,
    height,
    -- return ISO-8601 UTC like "2025-09-23T04:46:00Z"
    strftime('%Y-%m-%dT%H:%M:%SZ', created_at) AS created_at
  FROM photos
  WHERE status='approved' AND is_public=1
  ${albumFilter}
`;
      let rows;
      if (cursor) {
        const [cTime, cId] = cursor.split("|");
        rows = await env.DB.prepare(
          `${baseSql}
     AND (datetime(created_at) < datetime(?) OR (datetime(created_at) = datetime(?) AND id < ?))
     ORDER BY created_at DESC, id DESC
     LIMIT ?`
        ).bind(...album && album !== "all" ? [album] : [], cTime, cTime, cId, limit).all();
      } else {
        rows = await env.DB.prepare(
          `${baseSql}
     ORDER BY created_at DESC, id DESC
     LIMIT ?`
        ).bind(...album && album !== "all" ? [album] : [], limit).all();
      }
      const items = rows.results ?? [];
      const last = items[items.length - 1];
      const nextCursor = last ? `${last.created_at}|${last.id}` : null;
      return new Response(JSON.stringify({ items, nextCursor }), {
        headers: {
          "content-type": "application/json",
          "Cache-Control": "public, max-age=30, stale-while-revalidate=300"
        }
      });
    }, "onRequestGet");
  }
});
var onRequestGet13;
var init_health = __esm({
  "api/health.ts"() {
    init_functionsRoutes_0_09879299104094341();
    onRequestGet13 = /* @__PURE__ */ __name2(async ({ env }) => {
      if (!env.DB) {
        return new Response(JSON.stringify({
          ok: false,
          where: "binding",
          message: "No D1 binding named 'DB' attached to this Pages environment."
        }), { status: 500, headers: { "content-type": "application/json; charset=utf-8" } });
      }
      try {
        const ping = await env.DB.prepare("SELECT 1 AS ok").first();
        const table = await env.DB.prepare(
          "SELECT name FROM sqlite_master WHERE type='table' AND name IN ('parties','party_fts')"
        ).first();
        return new Response(JSON.stringify({
          ok: true,
          dbBound: true,
          dbQuery: ping?.ok === 1,
          hasCoreTable: !!table?.name,
          whichTableFound: table?.name ?? null
        }), { headers: { "content-type": "application/json; charset=utf-8" } });
      } catch (e2) {
        return new Response(JSON.stringify({
          ok: false,
          where: "query",
          message: e2.message ?? String(e2)
        }), { status: 500, headers: { "content-type": "application/json; charset=utf-8" } });
      }
    }, "onRequestGet");
  }
});
function buildPaginationQuery(options) {
  const searchParams = new URLSearchParams();
  if (options.limit !== void 0) {
    searchParams.set("limit", options.limit.toString());
  }
  if ("after" in options && options.after !== void 0) {
    searchParams.set("after", options.after);
  }
  if ("before" in options && options.before !== void 0) {
    searchParams.set("before", options.before);
  }
  return searchParams.toString();
}
__name(buildPaginationQuery, "buildPaginationQuery");
function parseAttachments(attachments) {
  return attachments == null ? void 0 : attachments.map((attachment) => ({
    content: attachment.content,
    filename: attachment.filename,
    path: attachment.path,
    content_type: attachment.contentType,
    content_id: attachment.contentId
  }));
}
__name(parseAttachments, "parseAttachments");
function parseEmailToApiOptions(email3) {
  return {
    attachments: parseAttachments(email3.attachments),
    bcc: email3.bcc,
    cc: email3.cc,
    from: email3.from,
    headers: email3.headers,
    html: email3.html,
    reply_to: email3.replyTo,
    scheduled_at: email3.scheduledAt,
    subject: email3.subject,
    tags: email3.tags,
    text: email3.text,
    to: email3.to
  };
}
__name(parseEmailToApiOptions, "parseEmailToApiOptions");
function render(node) {
  return new Promise((resolve, reject) => {
    import("@react-email/render").then(({ render: render2 }) => {
      resolve(render2(node));
    }).catch(() => {
      reject(
        Error(
          "Failed to render React component. Make sure to install `@react-email/render`"
        )
      );
    });
  });
}
__name(render, "render");
function parseDomainToApiOptions(domain2) {
  return {
    name: domain2.name,
    region: domain2.region,
    custom_return_path: domain2.customReturnPath
  };
}
__name(parseDomainToApiOptions, "parseDomainToApiOptions");
var __defProp22;
var __defProps;
var __getOwnPropDescs;
var __getOwnPropSymbols;
var __hasOwnProp2;
var __propIsEnum;
var __defNormalProp;
var __spreadValues;
var __spreadProps;
var __objRest;
var __async;
var version2;
var ApiKeys;
var Audiences;
var Batch;
var Broadcasts;
var Contacts;
var Domains;
var Emails;
var defaultBaseUrl;
var defaultUserAgent;
var baseUrl;
var userAgent;
var Resend;
var init_dist = __esm({
  "../node_modules/resend/dist/index.mjs"() {
    init_functionsRoutes_0_09879299104094341();
    __defProp22 = Object.defineProperty;
    __defProps = Object.defineProperties;
    __getOwnPropDescs = Object.getOwnPropertyDescriptors;
    __getOwnPropSymbols = Object.getOwnPropertySymbols;
    __hasOwnProp2 = Object.prototype.hasOwnProperty;
    __propIsEnum = Object.prototype.propertyIsEnumerable;
    __defNormalProp = /* @__PURE__ */ __name2((obj, key, value) => key in obj ? __defProp22(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value, "__defNormalProp");
    __spreadValues = /* @__PURE__ */ __name2((a2, b2) => {
      for (var prop in b2 || (b2 = {}))
        if (__hasOwnProp2.call(b2, prop))
          __defNormalProp(a2, prop, b2[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b2)) {
          if (__propIsEnum.call(b2, prop))
            __defNormalProp(a2, prop, b2[prop]);
        }
      return a2;
    }, "__spreadValues");
    __spreadProps = /* @__PURE__ */ __name2((a2, b2) => __defProps(a2, __getOwnPropDescs(b2)), "__spreadProps");
    __objRest = /* @__PURE__ */ __name2((source, exclude) => {
      var target = {};
      for (var prop in source)
        if (__hasOwnProp2.call(source, prop) && exclude.indexOf(prop) < 0)
          target[prop] = source[prop];
      if (source != null && __getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(source)) {
          if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
            target[prop] = source[prop];
        }
      return target;
    }, "__objRest");
    __async = /* @__PURE__ */ __name2((__this, __arguments, generator) => {
      return new Promise((resolve, reject) => {
        var fulfilled = /* @__PURE__ */ __name2((value) => {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }, "fulfilled");
        var rejected = /* @__PURE__ */ __name2((value) => {
          try {
            step(generator.throw(value));
          } catch (e2) {
            reject(e2);
          }
        }, "rejected");
        var step = /* @__PURE__ */ __name2((x2) => x2.done ? resolve(x2.value) : Promise.resolve(x2.value).then(fulfilled, rejected), "step");
        step((generator = generator.apply(__this, __arguments)).next());
      });
    }, "__async");
    version2 = "6.1.0";
    __name2(buildPaginationQuery, "buildPaginationQuery");
    ApiKeys = class {
      static {
        __name(this, "ApiKeys");
      }
      static {
        __name2(this, "ApiKeys");
      }
      constructor(resend) {
        this.resend = resend;
      }
      create(_0) {
        return __async(this, arguments, function* (payload, options = {}) {
          const data = yield this.resend.post(
            "/api-keys",
            payload,
            options
          );
          return data;
        });
      }
      list() {
        return __async(this, arguments, function* (options = {}) {
          const queryString = buildPaginationQuery(options);
          const url2 = queryString ? `/api-keys?${queryString}` : "/api-keys";
          const data = yield this.resend.get(url2);
          return data;
        });
      }
      remove(id) {
        return __async(this, null, function* () {
          const data = yield this.resend.delete(
            `/api-keys/${id}`
          );
          return data;
        });
      }
    };
    Audiences = class {
      static {
        __name(this, "Audiences");
      }
      static {
        __name2(this, "Audiences");
      }
      constructor(resend) {
        this.resend = resend;
      }
      create(_0) {
        return __async(this, arguments, function* (payload, options = {}) {
          const data = yield this.resend.post(
            "/audiences",
            payload,
            options
          );
          return data;
        });
      }
      list() {
        return __async(this, arguments, function* (options = {}) {
          const queryString = buildPaginationQuery(options);
          const url2 = queryString ? `/audiences?${queryString}` : "/audiences";
          const data = yield this.resend.get(url2);
          return data;
        });
      }
      get(id) {
        return __async(this, null, function* () {
          const data = yield this.resend.get(
            `/audiences/${id}`
          );
          return data;
        });
      }
      remove(id) {
        return __async(this, null, function* () {
          const data = yield this.resend.delete(
            `/audiences/${id}`
          );
          return data;
        });
      }
    };
    __name2(parseAttachments, "parseAttachments");
    __name2(parseEmailToApiOptions, "parseEmailToApiOptions");
    __name2(render, "render");
    Batch = class {
      static {
        __name(this, "Batch");
      }
      static {
        __name2(this, "Batch");
      }
      constructor(resend) {
        this.resend = resend;
      }
      send(payload, options) {
        return __async(this, null, function* () {
          return this.create(payload, options);
        });
      }
      create(payload, options) {
        return __async(this, null, function* () {
          var _a2;
          const emails = [];
          for (const email3 of payload) {
            if (email3.react) {
              email3.html = yield render(email3.react);
              email3.react = void 0;
            }
            emails.push(parseEmailToApiOptions(email3));
          }
          const data = yield this.resend.post(
            "/emails/batch",
            emails,
            __spreadProps(__spreadValues({}, options), {
              headers: __spreadValues({
                "x-batch-validation": (_a2 = options == null ? void 0 : options.batchValidation) != null ? _a2 : "strict"
              }, options == null ? void 0 : options.headers)
            })
          );
          return data;
        });
      }
    };
    Broadcasts = class {
      static {
        __name(this, "Broadcasts");
      }
      static {
        __name2(this, "Broadcasts");
      }
      constructor(resend) {
        this.resend = resend;
      }
      create(_0) {
        return __async(this, arguments, function* (payload, options = {}) {
          if (payload.react) {
            payload.html = yield render(payload.react);
          }
          const data = yield this.resend.post(
            "/broadcasts",
            {
              name: payload.name,
              audience_id: payload.audienceId,
              preview_text: payload.previewText,
              from: payload.from,
              html: payload.html,
              reply_to: payload.replyTo,
              subject: payload.subject,
              text: payload.text
            },
            options
          );
          return data;
        });
      }
      send(id, payload) {
        return __async(this, null, function* () {
          const data = yield this.resend.post(
            `/broadcasts/${id}/send`,
            { scheduled_at: payload == null ? void 0 : payload.scheduledAt }
          );
          return data;
        });
      }
      list() {
        return __async(this, arguments, function* (options = {}) {
          const queryString = buildPaginationQuery(options);
          const url2 = queryString ? `/broadcasts?${queryString}` : "/broadcasts";
          const data = yield this.resend.get(url2);
          return data;
        });
      }
      get(id) {
        return __async(this, null, function* () {
          const data = yield this.resend.get(
            `/broadcasts/${id}`
          );
          return data;
        });
      }
      remove(id) {
        return __async(this, null, function* () {
          const data = yield this.resend.delete(
            `/broadcasts/${id}`
          );
          return data;
        });
      }
      update(id, payload) {
        return __async(this, null, function* () {
          if (payload.react) {
            payload.html = yield render(payload.react);
          }
          const data = yield this.resend.patch(
            `/broadcasts/${id}`,
            {
              name: payload.name,
              audience_id: payload.audienceId,
              from: payload.from,
              html: payload.html,
              text: payload.text,
              subject: payload.subject,
              reply_to: payload.replyTo,
              preview_text: payload.previewText
            }
          );
          return data;
        });
      }
    };
    Contacts = class {
      static {
        __name(this, "Contacts");
      }
      static {
        __name2(this, "Contacts");
      }
      constructor(resend) {
        this.resend = resend;
      }
      create(_0) {
        return __async(this, arguments, function* (payload, options = {}) {
          const data = yield this.resend.post(
            `/audiences/${payload.audienceId}/contacts`,
            {
              unsubscribed: payload.unsubscribed,
              email: payload.email,
              first_name: payload.firstName,
              last_name: payload.lastName
            },
            options
          );
          return data;
        });
      }
      list(options) {
        return __async(this, null, function* () {
          const _a2 = options, { audienceId } = _a2, paginationOptions = __objRest(_a2, ["audienceId"]);
          const queryString = buildPaginationQuery(paginationOptions);
          const url2 = queryString ? `/audiences/${audienceId}/contacts?${queryString}` : `/audiences/${audienceId}/contacts`;
          const data = yield this.resend.get(url2);
          return data;
        });
      }
      get(options) {
        return __async(this, null, function* () {
          if (!options.id && !options.email) {
            return {
              data: null,
              error: {
                message: "Missing `id` or `email` field.",
                name: "missing_required_field"
              }
            };
          }
          const data = yield this.resend.get(
            `/audiences/${options.audienceId}/contacts/${(options == null ? void 0 : options.email) ? options == null ? void 0 : options.email : options == null ? void 0 : options.id}`
          );
          return data;
        });
      }
      update(options) {
        return __async(this, null, function* () {
          if (!options.id && !options.email) {
            return {
              data: null,
              error: {
                message: "Missing `id` or `email` field.",
                name: "missing_required_field"
              }
            };
          }
          const data = yield this.resend.patch(
            `/audiences/${options.audienceId}/contacts/${(options == null ? void 0 : options.email) ? options == null ? void 0 : options.email : options == null ? void 0 : options.id}`,
            {
              unsubscribed: options.unsubscribed,
              first_name: options.firstName,
              last_name: options.lastName
            }
          );
          return data;
        });
      }
      remove(payload) {
        return __async(this, null, function* () {
          if (!payload.id && !payload.email) {
            return {
              data: null,
              error: {
                message: "Missing `id` or `email` field.",
                name: "missing_required_field"
              }
            };
          }
          const data = yield this.resend.delete(
            `/audiences/${payload.audienceId}/contacts/${(payload == null ? void 0 : payload.email) ? payload == null ? void 0 : payload.email : payload == null ? void 0 : payload.id}`
          );
          return data;
        });
      }
    };
    __name2(parseDomainToApiOptions, "parseDomainToApiOptions");
    Domains = class {
      static {
        __name(this, "Domains");
      }
      static {
        __name2(this, "Domains");
      }
      constructor(resend) {
        this.resend = resend;
      }
      create(_0) {
        return __async(this, arguments, function* (payload, options = {}) {
          const data = yield this.resend.post(
            "/domains",
            parseDomainToApiOptions(payload),
            options
          );
          return data;
        });
      }
      list() {
        return __async(this, arguments, function* (options = {}) {
          const queryString = buildPaginationQuery(options);
          const url2 = queryString ? `/domains?${queryString}` : "/domains";
          const data = yield this.resend.get(url2);
          return data;
        });
      }
      get(id) {
        return __async(this, null, function* () {
          const data = yield this.resend.get(
            `/domains/${id}`
          );
          return data;
        });
      }
      update(payload) {
        return __async(this, null, function* () {
          const data = yield this.resend.patch(
            `/domains/${payload.id}`,
            {
              click_tracking: payload.clickTracking,
              open_tracking: payload.openTracking,
              tls: payload.tls
            }
          );
          return data;
        });
      }
      remove(id) {
        return __async(this, null, function* () {
          const data = yield this.resend.delete(
            `/domains/${id}`
          );
          return data;
        });
      }
      verify(id) {
        return __async(this, null, function* () {
          const data = yield this.resend.post(
            `/domains/${id}/verify`
          );
          return data;
        });
      }
    };
    Emails = class {
      static {
        __name(this, "Emails");
      }
      static {
        __name2(this, "Emails");
      }
      constructor(resend) {
        this.resend = resend;
      }
      send(_0) {
        return __async(this, arguments, function* (payload, options = {}) {
          return this.create(payload, options);
        });
      }
      create(_0) {
        return __async(this, arguments, function* (payload, options = {}) {
          if (payload.react) {
            payload.html = yield render(payload.react);
          }
          const data = yield this.resend.post(
            "/emails",
            parseEmailToApiOptions(payload),
            options
          );
          return data;
        });
      }
      get(id) {
        return __async(this, null, function* () {
          const data = yield this.resend.get(
            `/emails/${id}`
          );
          return data;
        });
      }
      list() {
        return __async(this, arguments, function* (options = {}) {
          const queryString = buildPaginationQuery(options);
          const url2 = queryString ? `/emails?${queryString}` : "/emails";
          const data = yield this.resend.get(url2);
          return data;
        });
      }
      update(payload) {
        return __async(this, null, function* () {
          const data = yield this.resend.patch(
            `/emails/${payload.id}`,
            {
              scheduled_at: payload.scheduledAt
            }
          );
          return data;
        });
      }
      cancel(id) {
        return __async(this, null, function* () {
          const data = yield this.resend.post(
            `/emails/${id}/cancel`
          );
          return data;
        });
      }
    };
    defaultBaseUrl = "https://api.resend.com";
    defaultUserAgent = `resend-node:${version2}`;
    baseUrl = typeof process !== "undefined" && process.env ? process.env.RESEND_BASE_URL || defaultBaseUrl : defaultBaseUrl;
    userAgent = typeof process !== "undefined" && process.env ? process.env.RESEND_USER_AGENT || defaultUserAgent : defaultUserAgent;
    Resend = class {
      static {
        __name(this, "Resend");
      }
      static {
        __name2(this, "Resend");
      }
      constructor(key) {
        this.key = key;
        this.apiKeys = new ApiKeys(this);
        this.audiences = new Audiences(this);
        this.batch = new Batch(this);
        this.broadcasts = new Broadcasts(this);
        this.contacts = new Contacts(this);
        this.domains = new Domains(this);
        this.emails = new Emails(this);
        if (!key) {
          if (typeof process !== "undefined" && process.env) {
            this.key = process.env.RESEND_API_KEY;
          }
          if (!this.key) {
            throw new Error(
              'Missing API key. Pass it to the constructor `new Resend("re_123")`'
            );
          }
        }
        this.headers = new Headers({
          Authorization: `Bearer ${this.key}`,
          "User-Agent": userAgent,
          "Content-Type": "application/json"
        });
      }
      fetchRequest(_0) {
        return __async(this, arguments, function* (path, options = {}) {
          try {
            const response = yield fetch(`${baseUrl}${path}`, options);
            if (!response.ok) {
              try {
                const rawError = yield response.text();
                return { data: null, error: JSON.parse(rawError) };
              } catch (err) {
                if (err instanceof SyntaxError) {
                  return {
                    data: null,
                    error: {
                      name: "application_error",
                      message: "Internal server error. We are unable to process your request right now, please try again later."
                    }
                  };
                }
                const error45 = {
                  message: response.statusText,
                  name: "application_error"
                };
                if (err instanceof Error) {
                  return { data: null, error: __spreadProps(__spreadValues({}, error45), { message: err.message }) };
                }
                return { data: null, error: error45 };
              }
            }
            const data = yield response.json();
            return { data, error: null };
          } catch (e2) {
            return {
              data: null,
              error: {
                name: "application_error",
                message: "Unable to fetch data. The request could not be resolved."
              }
            };
          }
        });
      }
      post(_0, _1) {
        return __async(this, arguments, function* (path, entity, options = {}) {
          const headers = new Headers(this.headers);
          if (options.headers) {
            for (const [key, value] of new Headers(options.headers).entries()) {
              headers.set(key, value);
            }
          }
          if (options.idempotencyKey) {
            headers.set("Idempotency-Key", options.idempotencyKey);
          }
          const requestOptions = __spreadProps(__spreadValues({
            method: "POST",
            body: JSON.stringify(entity)
          }, options), {
            headers
          });
          return this.fetchRequest(path, requestOptions);
        });
      }
      get(_0) {
        return __async(this, arguments, function* (path, options = {}) {
          const headers = new Headers(this.headers);
          if (options.headers) {
            for (const [key, value] of new Headers(options.headers).entries()) {
              headers.set(key, value);
            }
          }
          const requestOptions = __spreadProps(__spreadValues({
            method: "GET"
          }, options), {
            headers
          });
          return this.fetchRequest(path, requestOptions);
        });
      }
      put(_0, _1) {
        return __async(this, arguments, function* (path, entity, options = {}) {
          const headers = new Headers(this.headers);
          if (options.headers) {
            for (const [key, value] of new Headers(options.headers).entries()) {
              headers.set(key, value);
            }
          }
          const requestOptions = __spreadProps(__spreadValues({
            method: "PUT",
            body: JSON.stringify(entity)
          }, options), {
            headers
          });
          return this.fetchRequest(path, requestOptions);
        });
      }
      patch(_0, _1) {
        return __async(this, arguments, function* (path, entity, options = {}) {
          const headers = new Headers(this.headers);
          if (options.headers) {
            for (const [key, value] of new Headers(options.headers).entries()) {
              headers.set(key, value);
            }
          }
          const requestOptions = __spreadProps(__spreadValues({
            method: "PATCH",
            body: JSON.stringify(entity)
          }, options), {
            headers
          });
          return this.fetchRequest(path, requestOptions);
        });
      }
      delete(path, query) {
        return __async(this, null, function* () {
          const requestOptions = {
            method: "DELETE",
            body: JSON.stringify(query)
          };
          return this.fetchRequest(path, requestOptions);
        });
      }
    };
  }
});
function defaultTemplate(guest_name) {
  return `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Update</title>
  <style>
    body{margin:0;padding:0;background:#FAF7EC;font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;color:#2b2b2b}
    .wrap{max-width:640px;margin:0 auto;background:#ffffff}
    .pad{padding:24px}
    .btn{display:inline-block;text-decoration:none;background:#1f2937;color:#ffffff;border-radius:8px;padding:12px 18px;font-weight:600}
    .muted{color:#6b7280;font-size:12px}
    .hdr{padding:20px 24px;background:#2b2b2b;color:#fff}
    h1,h2{margin:0 0 12px}
  </style>
</head>
<body>
  <div class="wrap">
    <div class="hdr">
      <h1 style="font-size:20px;">Avery & Zach \u2014 Update</h1>
    </div>
    <div class="pad">
      <p>Hi ${guest_name},</p>
      <p>We wanted to share a quick update related to our wedding on <strong>July 17, 2026</strong>.</p>
      <p>If you were expecting a specific message (like an RSVP reminder, logistics, or photo upload request), don't worry, this email ensures you see the essentials even if something went off-script.</p>
      <p>
        <a class="btn" href="https://thehoffmans.wedding/info">Open Wedding Portal</a>
      </p>
      <p class="muted">Having trouble? Copy and paste this link: https://thehoffmans.wedding/info</p>
    </div>
    <div class="pad" style="border-top:1px solid #eee">
      <p class="muted">Sent by Avery & Zach \u2022 zachhoffman@ymail.com</p>
    </div>
  </div>
</body>
</html>`;
}
__name(defaultTemplate, "defaultTemplate");
function rsvpDeadlineReminderTemplate(guest_name, rsvp_deadline, rsvp_deadline_short) {
  return `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>RSVP Deadline Reminder</title>
  <style>
    body{margin:0;padding:0;background:#FAF7EC;font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;color:#2b2b2b}
    .wrap{max-width:640px;margin:0 auto;background:#ffffff}
    .pad{padding:24px}
    .badge{display:inline-block;background:#F59E0B;color:#1f2937;border-radius:999px;padding:6px 10px;font-size:12px;font-weight:700;letter-spacing:.02em}
    .btn{display:inline-block;text-decoration:none;background:#1f2937;color:#ffffff;border-radius:8px;padding:12px 18px;font-weight:600}
    .muted{color:#6b7280;font-size:12px}
    .hdr{padding:20px 24px;background:#2b2b2b;color:#fff}
    h1,h2{margin:0 0 12px}
  </style>
</head>
<body>
  <div class="wrap">
    <div class="hdr">
      <h1 style="font-size:20px;">RSVP updates close ${rsvp_deadline_short}</h1>
    </div>
    <div class="pad">
      <p>Hi ${guest_name},</p>
      <p>Thanks again for your RSVP! If your plans or details have changed, you can update your RSVP until:</p>
      <p><span class="badge">${rsvp_deadline} (EST)</span></p>
      <ul>
        <li>Update attendance for you or your party</li>
        <li>Add or edit dietary needs</li>
        <li>Confirm contact info in case we need to reach you</li>
      </ul>
      <p>
        <a class="btn" href="https://thehoffmans.wedding/rsvp">Review / Update RSVP</a>
      </p>
      <p class="muted">If the button doesn't work, use this link: https://thehoffmans.wedding/rsvp</p>
    </div>
    <div class="pad" style="border-top:1px solid #eee">
      <p class="muted">Sent by Avery & Zach \u2022 zachhoffman@ymail.com</p>
    </div>
  </div>
</body>
</html>`;
}
__name(rsvpDeadlineReminderTemplate, "rsvpDeadlineReminderTemplate");
function finalLogisticsTemplate(guest_name) {
  return `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Final Logistics</title>
  <style>
    body{margin:0;padding:0;background:#FAF7EC;font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;color:#2b2b2b}
    .wrap{max-width:640px;margin:0 auto;background:#ffffff}
    .pad{padding:24px}
    .hdr{padding:20px 24px;background:#2b2b2b;color:#fff}
    .card{border:1px solid #eee;border-radius:12px;padding:16px;margin:12px 0}
    .btn{display:inline-block;text-decoration:none;background:#1f2937;color:#ffffff;border-radius:8px;padding:12px 18px;font-weight:600}
    .muted{color:#6b7280;font-size:12px}
    h1,h2{margin:0 0 12px}
    a{color:#1f2937}
  </style>
</head>
<body>
  <div class="wrap">
    <div class="hdr">
      <h1 style="font-size:20px;">See you soon!</h1>
    </div>
    <div class="pad">
      <p>Hi ${guest_name},</p>
      <div class="card">
        <h2 style="font-size:16px;">Times & Locations</h2>
        <p><strong>Ceremony:</strong> 5:00 PM @ Aspen & Alston</p>
        <p><strong>Reception:</strong> 7:00 PM @ Aspen & Alston</p>
        <p><a href="https://maps.app.goo.gl/aYGF4di6sTT54B8KA">Open map & directions</a></p>
      </div>
      <div class="card">
        <h2 style="font-size:16px;">Parking</h2>
        <p>Parking available on site.</p>
      </div>
      <div class="card">
        <h2 style="font-size:16px;">Dress & Weather</h2>
        <a href="https://thehoffmans.wedding/info">Full Dress Code</a>
        <p>Check the latest: <a href="https://weather.com/weather/today/l/e0e13bc9b16a240e4d81d88c11943e00ba36903c42c85457496b8e9934fa54cc">Weather in the area</a></p>
      </div>
      <p>
        <a class="btn" href="https://thehoffmans.wedding/info">View Full Itinerary</a>
      </p>
      <p class="muted">Questions? Call or text Zach at 610-507-7219.</p>
    </div>
    <div class="pad" style="border-top:1px solid #eee">
      <p class="muted">Sent by Avery & Zach \u2022 zachhoffman@ymail.com</p>
    </div>
  </div>
</body>
</html>`;
}
__name(finalLogisticsTemplate, "finalLogisticsTemplate");
function photoUploadTemplate(guest_name) {
  return `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Share Your Photos</title>
  <style>
    body{margin:0;padding:0;background:#FAF7EC;font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;color:#2b2b2b}
    .wrap{max-width:640px;margin:0 auto;background:#ffffff}
    .pad{padding:24px}
    .hdr{padding:20px 24px;background:#2b2b2b;color:#fff}
    .btn{display:inline-block;text-decoration:none;background:#1f2937;color:#ffffff;border-radius:8px;padding:12px 18px;font-weight:600}
    .muted{color:#6b7280;font-size:12px}
    .tip{background:#FEF3C7;border:1px solid #FDE68A;border-radius:10px;padding:12px;margin-top:10px;font-size:14px}
    h1{margin:0 0 12px}
  </style>
</head>
<body>
  <div class="wrap">
    <div class="hdr">
      <h1 style="font-size:20px;">Share your photos with us</h1>
    </div>
    <div class="pad">
      <p>Hi ${guest_name},</p>
      <p>We'd love to see the day through your lens! If you snapped any photos or videos, please add them to our guest gallery.</p>
      <p>
        <a class="btn" href="https://thehoffmans.wedding/gallery">Upload to the Gallery</a>
      </p>
      <p class="muted">If the button doesn't work, use this link: https://thehoffmans.wedding/gallery</p>
    </div>
    <div class="pad" style="border-top:1px solid #eee">
      <p class="muted">Sent by Avery & Zach \u2022 zachhoffman@ymail.com</p>
    </div>
  </div>
</body>
</html>`;
}
__name(photoUploadTemplate, "photoUploadTemplate");
function thankYouTemplate(guest_name) {
  return `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Thank You</title>
  <style>
    body{margin:0;padding:0;background:#FAF7EC;font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;color:#2b2b2b}
    .wrap{max-width:640px;margin:0 auto;background:#ffffff}
    .pad{padding:24px}
    .hdr{padding:20px 24px;background:#2b2b2b;color:#fff}
    .btn{display:inline-block;text-decoration:none;background:#1f2937;color:#ffffff;border-radius:8px;padding:12px 18px;font-weight:600}
    .muted{color:#6b7280;font-size:12px}
    .cards{display:block}
    .card{border:1px solid #eee;border-radius:12px;padding:16px;margin:12px 0}
    h1,h2{margin:0 0 12px}
  </style>
</head>
<body>
  <div class="wrap">
    <div class="hdr">
      <h1 style="font-size:20px;">Thank you</h1>
    </div>
    <div class="pad">
      <p>Hi ${guest_name},</p>
      <p>We're so grateful you could be part of our day. Thank you for the love, laughs, and memories!</p>
      <div class="cards">
        <div class="card">
          <h2 style="font-size:16px;">Photo Gallery</h2>
          <p>Highlights and guest uploads are collected here.</p>
          <p><a class="btn" href="https://thehoffmans.wedding/gallery">View Photos</a></p>
        </div>
      </div>
      <p class="muted">If the button doesn't work, use this link: https://thehoffmans.wedding/gallery</p>
    </div>
    <div class="pad" style="border-top:1px solid #eee">
      <p class="muted">With love, Avery & Zach \u2022 zachhoffman@ymail.com</p>
    </div>
  </div>
</body>
</html>`;
}
__name(thankYouTemplate, "thankYouTemplate");
var EMAIL_SUBJECTS;
var init_reminder_html = __esm({
  "api/reminder_html.ts"() {
    init_functionsRoutes_0_09879299104094341();
    EMAIL_SUBJECTS = {
      0: "Quick update from Avery & Zach",
      1: "RSVP deadline is coming up!",
      2: "Final details for the wedding (parking, timing, map)",
      3: "Got wedding photos? We'd love to see them \u{1F4F8}",
      4: "Thank you for celebrating with us \u2764\uFE0F"
    };
    __name2(defaultTemplate, "defaultTemplate");
    __name2(rsvpDeadlineReminderTemplate, "rsvpDeadlineReminderTemplate");
    __name2(finalLogisticsTemplate, "finalLogisticsTemplate");
    __name2(photoUploadTemplate, "photoUploadTemplate");
    __name2(thankYouTemplate, "thankYouTemplate");
  }
});
function sleep(ms) {
  return new Promise((r2) => setTimeout(r2, ms));
}
__name(sleep, "sleep");
async function withResendRateLimit(fn) {
  let attempt = 0;
  while (true) {
    try {
      await sleep(SPACING_MS);
      return await fn();
    } catch (err) {
      const status = err?.status ?? err?.response?.status;
      if (status !== 429 || attempt >= MAX_RETRIES) throw err;
      const hdrs = err?.response?.headers;
      const resetSec = Number(hdrs?.get?.("ratelimit-reset")) || 0;
      const waitMs = resetSec > 0 ? Math.max(250, resetSec * 1e3) : Math.min(8e3, 2 ** attempt * 400 + Math.floor(Math.random() * 200));
      attempt++;
      await sleep(waitMs);
    }
  }
}
__name(withResendRateLimit, "withResendRateLimit");
function formatNYDateShort(utcIso) {
  const d2 = new Date(utcIso);
  return new Intl.DateTimeFormat("en-US", {
    timeZone: "America/New_York",
    month: "2-digit",
    day: "2-digit",
    year: "numeric"
  }).format(d2);
}
__name(formatNYDateShort, "formatNYDateShort");
function formatNYDateTimeLong(utcIso) {
  const d2 = new Date(utcIso);
  const datePart = new Intl.DateTimeFormat("en-US", {
    timeZone: "America/New_York",
    month: "long",
    day: "numeric",
    year: "numeric"
  }).format(d2);
  const timePart = new Intl.DateTimeFormat("en-US", {
    timeZone: "America/New_York",
    hour: "numeric",
    minute: "2-digit",
    hour12: true
  }).format(d2);
  return `${datePart} at ${timePart}`;
}
__name(formatNYDateTimeLong, "formatNYDateTimeLong");
async function ensureReminderLog(env) {
  await env.DB.prepare(
    `
    CREATE TABLE IF NOT EXISTS reminder_log (
      id             TEXT PRIMARY KEY,
      reminder_title TEXT NOT NULL,
      email          TEXT NOT NULL,
      ymd            TEXT NOT NULL,   -- day bucket, e.g. '2025-09-24'
      kind           TEXT NOT NULL CHECK (kind IN ('ABSOLUTE','DAYS_OUT')),
      created_at     DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
      UNIQUE(reminder_title, email, ymd)
    );
  `
  ).run();
  await env.DB.prepare(
    `CREATE INDEX IF NOT EXISTS idx_rlog_title_email ON reminder_log(reminder_title, email);`
  ).run();
  await env.DB.prepare(`CREATE INDEX IF NOT EXISTS idx_rlog_ymd ON reminder_log(ymd);`).run();
}
__name(ensureReminderLog, "ensureReminderLog");
async function getEmailList(env) {
  const stmt = await env.DB.prepare(`
    SELECT display_name, contact_email, rsvp_deadline
    FROM parties
    WHERE reminder_opt_in = 1
      AND contact_email IS NOT NULL
      AND contact_email != ''
  `);
  const res = await stmt.all();
  return res.results || [];
}
__name(getEmailList, "getEmailList");
async function getScheduledReminderList(env) {
  const stmt = await env.DB.prepare(`
    SELECT reminder_title, send_date, days_out, html_content_index
    FROM reminder_sends
    ORDER BY (send_date IS NULL), send_date ASC
  `);
  const res = await stmt.all();
  return res.results || [];
}
__name(getScheduledReminderList, "getScheduledReminderList");
function renderHtml(index, ctx) {
  switch (index) {
    case 1:
      return rsvpDeadlineReminderTemplate(
        ctx.display_name,
        formatNYDateShort(ctx.rsvp_deadline),
        formatNYDateTimeLong(ctx.rsvp_deadline)
      );
    case 2:
      return finalLogisticsTemplate(ctx.display_name);
    case 3:
      return photoUploadTemplate(ctx.display_name);
    case 4:
      return thankYouTemplate(ctx.display_name);
    case 0:
    default:
      return defaultTemplate(ctx.display_name);
  }
}
__name(renderHtml, "renderHtml");
function toDate2(d2) {
  if (!d2) return null;
  if (d2.includes("T")) return new Date(d2);
  return /* @__PURE__ */ new Date(d2.replace(" ", "T") + "Z");
}
__name(toDate2, "toDate2");
function daysUntil(deadline, now) {
  const d0 = Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate());
  const d1 = Date.UTC(deadline.getUTCFullYear(), deadline.getUTCMonth(), deadline.getUTCDate());
  return Math.round((d1 - d0) / 864e5);
}
__name(daysUntil, "daysUntil");
function ymdNY(date5) {
  const fmt = new Intl.DateTimeFormat("en-CA", {
    timeZone: "America/New_York",
    year: "numeric",
    month: "2-digit",
    day: "2-digit"
  });
  return fmt.format(date5);
}
__name(ymdNY, "ymdNY");
async function claimAndSendOne(resend, env, kind, reminderTitle, htmlIndex, contact, ymd) {
  const myId = crypto.randomUUID();
  await env.DB.prepare(
    `INSERT OR IGNORE INTO reminder_log (id, reminder_title, email, ymd, kind)
     VALUES (?, ?, ?, ?, ?)`
  ).bind(myId, reminderTitle, contact.contact_email.toLowerCase(), ymd, kind).run();
  const row = await env.DB.prepare(
    `SELECT id FROM reminder_log WHERE reminder_title=? AND email=? AND ymd=? LIMIT 1`
  ).bind(reminderTitle, contact.contact_email.toLowerCase(), ymd).first();
  if (!row) return "failed";
  if (row.id !== myId) return "skipped-duplicate";
  try {
    const html = renderHtml(htmlIndex, {
      display_name: contact.display_name ?? "",
      rsvp_deadline: contact.rsvp_deadline ?? ""
    });
    await withResendRateLimit(
      () => resend.emails.send({
        from: env.EMAIL_FROM,
        to: contact.contact_email,
        subject: EMAIL_SUBJECTS[htmlIndex] || "Avery & Zach",
        html
      })
    );
    return "sent";
  } catch (e2) {
    await env.DB.prepare(`DELETE FROM reminder_log WHERE id=?`).bind(myId).run();
    console.log("Email send failed:", contact.contact_email, e2);
    return "failed";
  }
}
__name(claimAndSendOne, "claimAndSendOne");
async function sendToAllWithLog(resend, env, kind, reminderTitle, htmlIndex, contacts, ymd) {
  let successes = 0, failures = 0, skipped = 0;
  for (const c2 of contacts) {
    const result = await claimAndSendOne(resend, env, kind, reminderTitle, htmlIndex, c2, ymd);
    if (result === "sent") successes++;
    else if (result === "failed") failures++;
    else skipped++;
  }
  return { successes, failures, skipped };
}
__name(sendToAllWithLog, "sendToAllWithLog");
var MAX_RPS;
var SPACING_MS;
var MAX_RETRIES;
var onRequest5;
var init_reminders2 = __esm({
  "api/reminders.ts"() {
    init_functionsRoutes_0_09879299104094341();
    init_dist();
    init_reminder_html();
    MAX_RPS = 2;
    SPACING_MS = Math.ceil(1e3 / MAX_RPS);
    MAX_RETRIES = 5;
    __name2(sleep, "sleep");
    __name2(withResendRateLimit, "withResendRateLimit");
    __name2(formatNYDateShort, "formatNYDateShort");
    __name2(formatNYDateTimeLong, "formatNYDateTimeLong");
    __name2(ensureReminderLog, "ensureReminderLog");
    __name2(getEmailList, "getEmailList");
    __name2(getScheduledReminderList, "getScheduledReminderList");
    __name2(renderHtml, "renderHtml");
    __name2(toDate2, "toDate");
    __name2(daysUntil, "daysUntil");
    __name2(ymdNY, "ymdNY");
    __name2(claimAndSendOne, "claimAndSendOne");
    __name2(sendToAllWithLog, "sendToAllWithLog");
    onRequest5 = /* @__PURE__ */ __name2(async ({ env }) => {
      await ensureReminderLog(env);
      const now = /* @__PURE__ */ new Date();
      const contacts = await getEmailList(env);
      const reminders = await getScheduledReminderList(env);
      const apiKey = env.RESEND_API_KEY ?? env.EMAIL_API_KEY;
      if (!apiKey) {
        return new Response(
          JSON.stringify({ ok: false, error: "Missing RESEND_API_KEY/EMAIL_API_KEY" }),
          { status: 500 }
        );
      }
      const resend = new Resend(apiKey);
      let processed = 0;
      for (const r2 of reminders) {
        const hasDaysOut = r2.days_out !== null && r2.days_out !== void 0;
        const hasSendDate = r2.send_date !== null && r2.send_date !== void 0;
        if (hasDaysOut && hasSendDate || !hasDaysOut && !hasSendDate) continue;
        if (hasSendDate) {
          const when = toDate2(r2.send_date);
          if (!when) continue;
          if (now >= when) {
            const subject = r2.reminder_title;
            const dayKey = ymdNY(when);
            await sendToAllWithLog(
              resend,
              env,
              "ABSOLUTE",
              r2.reminder_title,
              r2.html_content_index,
              contacts,
              dayKey
            );
            processed++;
          }
          continue;
        }
        if (hasDaysOut) {
          const dueToday = [];
          for (const c2 of contacts) {
            if (!c2.rsvp_deadline) continue;
            const deadline = toDate2(c2.rsvp_deadline);
            if (!deadline) continue;
            const delta = daysUntil(deadline, now);
            if (r2.days_out != null && delta <= r2.days_out) dueToday.push(c2);
          }
          if (dueToday.length) {
            const subject = r2.reminder_title;
            const dayKey = ymdNY(now);
            await sendToAllWithLog(
              resend,
              env,
              "DAYS_OUT",
              r2.reminder_title,
              r2.html_content_index,
              dueToday,
              dayKey
            );
            processed++;
          }
          continue;
        }
      }
      return new Response(JSON.stringify({ ok: true, processed }), {
        headers: { "content-type": "application/json" }
      });
    }, "onRequest");
  }
});
var routes;
var init_functionsRoutes_0_09879299104094341 = __esm({
  "../.wrangler/tmp/pages-rTzZFR/functionsRoutes-0.09879299104094341.mjs"() {
    init_approve();
    init_reject();
    init_latest_rsvps();
    init_id2();
    init_id2();
    init_title();
    init_title();
    init_id3();
    init_id4();
    init_submit();
    init_member();
    init_missing();
    init_overview();
    init_parties();
    init_photos();
    init_reminder_log();
    init_reminders();
    init_reminders();
    init_settings();
    init_settings();
    init_submissions();
    init_confirm();
    init_direct_upload();
    init_file();
    init_member();
    init_search();
    init_id5();
    init_gallery();
    init_health();
    init_reminders2();
    routes = [
      {
        routePath: "/api/admin/photos/:id/approve",
        mountPath: "/api/admin/photos/:id",
        method: "POST",
        middlewares: [],
        modules: [onRequestPost]
      },
      {
        routePath: "/api/admin/photos/:id/reject",
        mountPath: "/api/admin/photos/:id",
        method: "POST",
        middlewares: [],
        modules: [onRequestPost2]
      },
      {
        routePath: "/api/admin/export/latest-rsvps",
        mountPath: "/api/admin/export",
        method: "GET",
        middlewares: [],
        modules: [onRequestGet]
      },
      {
        routePath: "/api/admin/photos/:id",
        mountPath: "/api/admin/photos",
        method: "DELETE",
        middlewares: [],
        modules: [onRequestDelete]
      },
      {
        routePath: "/api/admin/photos/:id",
        mountPath: "/api/admin/photos",
        method: "OPTIONS",
        middlewares: [],
        modules: [onRequestOptions]
      },
      {
        routePath: "/api/admin/reminders/:title",
        mountPath: "/api/admin/reminders",
        method: "DELETE",
        middlewares: [],
        modules: [onRequestDelete2]
      },
      {
        routePath: "/api/admin/reminders/:title",
        mountPath: "/api/admin/reminders",
        method: "PATCH",
        middlewares: [],
        modules: [onRequestPatch]
      },
      {
        routePath: "/api/admin/member/:id",
        mountPath: "/api/admin/member",
        method: "",
        middlewares: [],
        modules: [onRequest]
      },
      {
        routePath: "/api/admin/party/:id",
        mountPath: "/api/admin/party",
        method: "",
        middlewares: [],
        modules: [onRequest2]
      },
      {
        routePath: "/api/party/:id/submit",
        mountPath: "/api/party/:id",
        method: "POST",
        middlewares: [],
        modules: [onRequestPost3]
      },
      {
        routePath: "/api/admin/member",
        mountPath: "/api/admin/member",
        method: "POST",
        middlewares: [],
        modules: [onRequestPost4]
      },
      {
        routePath: "/api/admin/missing",
        mountPath: "/api/admin",
        method: "GET",
        middlewares: [],
        modules: [onRequestGet2]
      },
      {
        routePath: "/api/admin/overview",
        mountPath: "/api/admin",
        method: "GET",
        middlewares: [],
        modules: [onRequestGet3]
      },
      {
        routePath: "/api/admin/parties",
        mountPath: "/api/admin",
        method: "GET",
        middlewares: [],
        modules: [onRequestGet4]
      },
      {
        routePath: "/api/admin/photos",
        mountPath: "/api/admin",
        method: "GET",
        middlewares: [],
        modules: [onRequestGet5]
      },
      {
        routePath: "/api/admin/reminder-log",
        mountPath: "/api/admin",
        method: "GET",
        middlewares: [],
        modules: [onRequestGet6]
      },
      {
        routePath: "/api/admin/reminders",
        mountPath: "/api/admin",
        method: "GET",
        middlewares: [],
        modules: [onRequestGet7]
      },
      {
        routePath: "/api/admin/reminders",
        mountPath: "/api/admin",
        method: "POST",
        middlewares: [],
        modules: [onRequestPost5]
      },
      {
        routePath: "/api/admin/settings",
        mountPath: "/api/admin",
        method: "GET",
        middlewares: [],
        modules: [onRequestGet8]
      },
      {
        routePath: "/api/admin/settings",
        mountPath: "/api/admin",
        method: "POST",
        middlewares: [],
        modules: [onRequestPost6]
      },
      {
        routePath: "/api/admin/submissions",
        mountPath: "/api/admin",
        method: "GET",
        middlewares: [],
        modules: [onRequestGet9]
      },
      {
        routePath: "/api/gallery/confirm",
        mountPath: "/api/gallery",
        method: "POST",
        middlewares: [],
        modules: [onRequestPost7]
      },
      {
        routePath: "/api/gallery/direct-upload",
        mountPath: "/api/gallery",
        method: "POST",
        middlewares: [],
        modules: [onRequestPost8]
      },
      {
        routePath: "/api/gallery/file",
        mountPath: "/api/gallery",
        method: "GET",
        middlewares: [],
        modules: [onRequestGet10]
      },
      {
        routePath: "/api/admin/member",
        mountPath: "/api/admin/member",
        method: "",
        middlewares: [],
        modules: [onRequest3]
      },
      {
        routePath: "/api/party/search",
        mountPath: "/api/party",
        method: "",
        middlewares: [],
        modules: [onRequest4]
      },
      {
        routePath: "/api/party/:id",
        mountPath: "/api/party/:id",
        method: "GET",
        middlewares: [],
        modules: [onRequestGet11]
      },
      {
        routePath: "/api/gallery",
        mountPath: "/api/gallery",
        method: "GET",
        middlewares: [],
        modules: [onRequestGet12]
      },
      {
        routePath: "/api/health",
        mountPath: "/api",
        method: "GET",
        middlewares: [],
        modules: [onRequestGet13]
      },
      {
        routePath: "/api/reminders",
        mountPath: "/api",
        method: "",
        middlewares: [],
        modules: [onRequest5]
      }
    ];
  }
});
init_functionsRoutes_0_09879299104094341();
init_functionsRoutes_0_09879299104094341();
init_functionsRoutes_0_09879299104094341();
init_functionsRoutes_0_09879299104094341();
function lexer(str) {
  var tokens = [];
  var i2 = 0;
  while (i2 < str.length) {
    var char = str[i2];
    if (char === "*" || char === "+" || char === "?") {
      tokens.push({ type: "MODIFIER", index: i2, value: str[i2++] });
      continue;
    }
    if (char === "\\") {
      tokens.push({ type: "ESCAPED_CHAR", index: i2++, value: str[i2++] });
      continue;
    }
    if (char === "{") {
      tokens.push({ type: "OPEN", index: i2, value: str[i2++] });
      continue;
    }
    if (char === "}") {
      tokens.push({ type: "CLOSE", index: i2, value: str[i2++] });
      continue;
    }
    if (char === ":") {
      var name = "";
      var j2 = i2 + 1;
      while (j2 < str.length) {
        var code = str.charCodeAt(j2);
        if (
          // `0-9`
          code >= 48 && code <= 57 || // `A-Z`
          code >= 65 && code <= 90 || // `a-z`
          code >= 97 && code <= 122 || // `_`
          code === 95
        ) {
          name += str[j2++];
          continue;
        }
        break;
      }
      if (!name)
        throw new TypeError("Missing parameter name at ".concat(i2));
      tokens.push({ type: "NAME", index: i2, value: name });
      i2 = j2;
      continue;
    }
    if (char === "(") {
      var count = 1;
      var pattern = "";
      var j2 = i2 + 1;
      if (str[j2] === "?") {
        throw new TypeError('Pattern cannot start with "?" at '.concat(j2));
      }
      while (j2 < str.length) {
        if (str[j2] === "\\") {
          pattern += str[j2++] + str[j2++];
          continue;
        }
        if (str[j2] === ")") {
          count--;
          if (count === 0) {
            j2++;
            break;
          }
        } else if (str[j2] === "(") {
          count++;
          if (str[j2 + 1] !== "?") {
            throw new TypeError("Capturing groups are not allowed at ".concat(j2));
          }
        }
        pattern += str[j2++];
      }
      if (count)
        throw new TypeError("Unbalanced pattern at ".concat(i2));
      if (!pattern)
        throw new TypeError("Missing pattern at ".concat(i2));
      tokens.push({ type: "PATTERN", index: i2, value: pattern });
      i2 = j2;
      continue;
    }
    tokens.push({ type: "CHAR", index: i2, value: str[i2++] });
  }
  tokens.push({ type: "END", index: i2, value: "" });
  return tokens;
}
__name(lexer, "lexer");
__name2(lexer, "lexer");
function parse3(str, options) {
  if (options === void 0) {
    options = {};
  }
  var tokens = lexer(str);
  var _a2 = options.prefixes, prefixes = _a2 === void 0 ? "./" : _a2, _b = options.delimiter, delimiter = _b === void 0 ? "/#?" : _b;
  var result = [];
  var key = 0;
  var i2 = 0;
  var path = "";
  var tryConsume = /* @__PURE__ */ __name2(function(type) {
    if (i2 < tokens.length && tokens[i2].type === type)
      return tokens[i2++].value;
  }, "tryConsume");
  var mustConsume = /* @__PURE__ */ __name2(function(type) {
    var value2 = tryConsume(type);
    if (value2 !== void 0)
      return value2;
    var _a3 = tokens[i2], nextType = _a3.type, index = _a3.index;
    throw new TypeError("Unexpected ".concat(nextType, " at ").concat(index, ", expected ").concat(type));
  }, "mustConsume");
  var consumeText = /* @__PURE__ */ __name2(function() {
    var result2 = "";
    var value2;
    while (value2 = tryConsume("CHAR") || tryConsume("ESCAPED_CHAR")) {
      result2 += value2;
    }
    return result2;
  }, "consumeText");
  var isSafe = /* @__PURE__ */ __name2(function(value2) {
    for (var _i2 = 0, delimiter_1 = delimiter; _i2 < delimiter_1.length; _i2++) {
      var char2 = delimiter_1[_i2];
      if (value2.indexOf(char2) > -1)
        return true;
    }
    return false;
  }, "isSafe");
  var safePattern = /* @__PURE__ */ __name2(function(prefix2) {
    var prev = result[result.length - 1];
    var prevText = prefix2 || (prev && typeof prev === "string" ? prev : "");
    if (prev && !prevText) {
      throw new TypeError('Must have text between two parameters, missing text after "'.concat(prev.name, '"'));
    }
    if (!prevText || isSafe(prevText))
      return "[^".concat(escapeString(delimiter), "]+?");
    return "(?:(?!".concat(escapeString(prevText), ")[^").concat(escapeString(delimiter), "])+?");
  }, "safePattern");
  while (i2 < tokens.length) {
    var char = tryConsume("CHAR");
    var name = tryConsume("NAME");
    var pattern = tryConsume("PATTERN");
    if (name || pattern) {
      var prefix = char || "";
      if (prefixes.indexOf(prefix) === -1) {
        path += prefix;
        prefix = "";
      }
      if (path) {
        result.push(path);
        path = "";
      }
      result.push({
        name: name || key++,
        prefix,
        suffix: "",
        pattern: pattern || safePattern(prefix),
        modifier: tryConsume("MODIFIER") || ""
      });
      continue;
    }
    var value = char || tryConsume("ESCAPED_CHAR");
    if (value) {
      path += value;
      continue;
    }
    if (path) {
      result.push(path);
      path = "";
    }
    var open = tryConsume("OPEN");
    if (open) {
      var prefix = consumeText();
      var name_1 = tryConsume("NAME") || "";
      var pattern_1 = tryConsume("PATTERN") || "";
      var suffix = consumeText();
      mustConsume("CLOSE");
      result.push({
        name: name_1 || (pattern_1 ? key++ : ""),
        pattern: name_1 && !pattern_1 ? safePattern(prefix) : pattern_1,
        prefix,
        suffix,
        modifier: tryConsume("MODIFIER") || ""
      });
      continue;
    }
    mustConsume("END");
  }
  return result;
}
__name(parse3, "parse3");
__name2(parse3, "parse");
function match(str, options) {
  var keys = [];
  var re = pathToRegexp(str, keys, options);
  return regexpToFunction(re, keys, options);
}
__name(match, "match");
__name2(match, "match");
function regexpToFunction(re, keys, options) {
  if (options === void 0) {
    options = {};
  }
  var _a2 = options.decode, decode3 = _a2 === void 0 ? function(x2) {
    return x2;
  } : _a2;
  return function(pathname) {
    var m2 = re.exec(pathname);
    if (!m2)
      return false;
    var path = m2[0], index = m2.index;
    var params = /* @__PURE__ */ Object.create(null);
    var _loop_1 = /* @__PURE__ */ __name2(function(i3) {
      if (m2[i3] === void 0)
        return "continue";
      var key = keys[i3 - 1];
      if (key.modifier === "*" || key.modifier === "+") {
        params[key.name] = m2[i3].split(key.prefix + key.suffix).map(function(value) {
          return decode3(value, key);
        });
      } else {
        params[key.name] = decode3(m2[i3], key);
      }
    }, "_loop_1");
    for (var i2 = 1; i2 < m2.length; i2++) {
      _loop_1(i2);
    }
    return { path, index, params };
  };
}
__name(regexpToFunction, "regexpToFunction");
__name2(regexpToFunction, "regexpToFunction");
function escapeString(str) {
  return str.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
}
__name(escapeString, "escapeString");
__name2(escapeString, "escapeString");
function flags(options) {
  return options && options.sensitive ? "" : "i";
}
__name(flags, "flags");
__name2(flags, "flags");
function regexpToRegexp(path, keys) {
  if (!keys)
    return path;
  var groupsRegex = /\((?:\?<(.*?)>)?(?!\?)/g;
  var index = 0;
  var execResult = groupsRegex.exec(path.source);
  while (execResult) {
    keys.push({
      // Use parenthesized substring match if available, index otherwise
      name: execResult[1] || index++,
      prefix: "",
      suffix: "",
      modifier: "",
      pattern: ""
    });
    execResult = groupsRegex.exec(path.source);
  }
  return path;
}
__name(regexpToRegexp, "regexpToRegexp");
__name2(regexpToRegexp, "regexpToRegexp");
function arrayToRegexp(paths, keys, options) {
  var parts = paths.map(function(path) {
    return pathToRegexp(path, keys, options).source;
  });
  return new RegExp("(?:".concat(parts.join("|"), ")"), flags(options));
}
__name(arrayToRegexp, "arrayToRegexp");
__name2(arrayToRegexp, "arrayToRegexp");
function stringToRegexp(path, keys, options) {
  return tokensToRegexp(parse3(path, options), keys, options);
}
__name(stringToRegexp, "stringToRegexp");
__name2(stringToRegexp, "stringToRegexp");
function tokensToRegexp(tokens, keys, options) {
  if (options === void 0) {
    options = {};
  }
  var _a2 = options.strict, strict = _a2 === void 0 ? false : _a2, _b = options.start, start = _b === void 0 ? true : _b, _c2 = options.end, end = _c2 === void 0 ? true : _c2, _d2 = options.encode, encode3 = _d2 === void 0 ? function(x2) {
    return x2;
  } : _d2, _e2 = options.delimiter, delimiter = _e2 === void 0 ? "/#?" : _e2, _f = options.endsWith, endsWith = _f === void 0 ? "" : _f;
  var endsWithRe = "[".concat(escapeString(endsWith), "]|$");
  var delimiterRe = "[".concat(escapeString(delimiter), "]");
  var route = start ? "^" : "";
  for (var _i2 = 0, tokens_1 = tokens; _i2 < tokens_1.length; _i2++) {
    var token = tokens_1[_i2];
    if (typeof token === "string") {
      route += escapeString(encode3(token));
    } else {
      var prefix = escapeString(encode3(token.prefix));
      var suffix = escapeString(encode3(token.suffix));
      if (token.pattern) {
        if (keys)
          keys.push(token);
        if (prefix || suffix) {
          if (token.modifier === "+" || token.modifier === "*") {
            var mod = token.modifier === "*" ? "?" : "";
            route += "(?:".concat(prefix, "((?:").concat(token.pattern, ")(?:").concat(suffix).concat(prefix, "(?:").concat(token.pattern, "))*)").concat(suffix, ")").concat(mod);
          } else {
            route += "(?:".concat(prefix, "(").concat(token.pattern, ")").concat(suffix, ")").concat(token.modifier);
          }
        } else {
          if (token.modifier === "+" || token.modifier === "*") {
            throw new TypeError('Can not repeat "'.concat(token.name, '" without a prefix and suffix'));
          }
          route += "(".concat(token.pattern, ")").concat(token.modifier);
        }
      } else {
        route += "(?:".concat(prefix).concat(suffix, ")").concat(token.modifier);
      }
    }
  }
  if (end) {
    if (!strict)
      route += "".concat(delimiterRe, "?");
    route += !options.endsWith ? "$" : "(?=".concat(endsWithRe, ")");
  } else {
    var endToken = tokens[tokens.length - 1];
    var isEndDelimited = typeof endToken === "string" ? delimiterRe.indexOf(endToken[endToken.length - 1]) > -1 : endToken === void 0;
    if (!strict) {
      route += "(?:".concat(delimiterRe, "(?=").concat(endsWithRe, "))?");
    }
    if (!isEndDelimited) {
      route += "(?=".concat(delimiterRe, "|").concat(endsWithRe, ")");
    }
  }
  return new RegExp(route, flags(options));
}
__name(tokensToRegexp, "tokensToRegexp");
__name2(tokensToRegexp, "tokensToRegexp");
function pathToRegexp(path, keys, options) {
  if (path instanceof RegExp)
    return regexpToRegexp(path, keys);
  if (Array.isArray(path))
    return arrayToRegexp(path, keys, options);
  return stringToRegexp(path, keys, options);
}
__name(pathToRegexp, "pathToRegexp");
__name2(pathToRegexp, "pathToRegexp");
var escapeRegex2 = /[.+?^${}()|[\]\\]/g;
function* executeRequest(request) {
  const requestPath = new URL(request.url).pathname;
  for (const route of [...routes].reverse()) {
    if (route.method && route.method !== request.method) {
      continue;
    }
    const routeMatcher = match(route.routePath.replace(escapeRegex2, "\\$&"), {
      end: false
    });
    const mountMatcher = match(route.mountPath.replace(escapeRegex2, "\\$&"), {
      end: false
    });
    const matchResult = routeMatcher(requestPath);
    const mountMatchResult = mountMatcher(requestPath);
    if (matchResult && mountMatchResult) {
      for (const handler of route.middlewares.flat()) {
        yield {
          handler,
          params: matchResult.params,
          path: mountMatchResult.path
        };
      }
    }
  }
  for (const route of routes) {
    if (route.method && route.method !== request.method) {
      continue;
    }
    const routeMatcher = match(route.routePath.replace(escapeRegex2, "\\$&"), {
      end: true
    });
    const mountMatcher = match(route.mountPath.replace(escapeRegex2, "\\$&"), {
      end: false
    });
    const matchResult = routeMatcher(requestPath);
    const mountMatchResult = mountMatcher(requestPath);
    if (matchResult && mountMatchResult && route.modules.length) {
      for (const handler of route.modules.flat()) {
        yield {
          handler,
          params: matchResult.params,
          path: matchResult.path
        };
      }
      break;
    }
  }
}
__name(executeRequest, "executeRequest");
__name2(executeRequest, "executeRequest");
var pages_template_worker_default = {
  async fetch(originalRequest, env, workerContext) {
    let request = originalRequest;
    const handlerIterator = executeRequest(request);
    let data = {};
    let isFailOpen = false;
    const next = /* @__PURE__ */ __name2(async (input, init) => {
      if (input !== void 0) {
        let url2 = input;
        if (typeof input === "string") {
          url2 = new URL(input, request.url).toString();
        }
        request = new Request(url2, init);
      }
      const result = handlerIterator.next();
      if (result.done === false) {
        const { handler, params, path } = result.value;
        const context = {
          request: new Request(request.clone()),
          functionPath: path,
          next,
          params,
          get data() {
            return data;
          },
          set data(value) {
            if (typeof value !== "object" || value === null) {
              throw new Error("context.data must be an object");
            }
            data = value;
          },
          env,
          waitUntil: workerContext.waitUntil.bind(workerContext),
          passThroughOnException: /* @__PURE__ */ __name2(() => {
            isFailOpen = true;
          }, "passThroughOnException")
        };
        const response = await handler(context);
        if (!(response instanceof Response)) {
          throw new Error("Your Pages function should return a Response");
        }
        return cloneResponse(response);
      } else if ("ASSETS") {
        const response = await env["ASSETS"].fetch(request);
        return cloneResponse(response);
      } else {
        const response = await fetch(request);
        return cloneResponse(response);
      }
    }, "next");
    try {
      return await next();
    } catch (error45) {
      if (isFailOpen) {
        const response = await env["ASSETS"].fetch(request);
        return cloneResponse(response);
      }
      throw error45;
    }
  }
};
var cloneResponse = /* @__PURE__ */ __name2((response) => (
  // https://fetch.spec.whatwg.org/#null-body-status
  new Response(
    [101, 204, 205, 304].includes(response.status) ? null : response.body,
    response
  )
), "cloneResponse");
init_functionsRoutes_0_09879299104094341();
var drainBody = /* @__PURE__ */ __name2(async (request, env, _ctx, middlewareCtx) => {
  try {
    return await middlewareCtx.next(request, env);
  } finally {
    try {
      if (request.body !== null && !request.bodyUsed) {
        const reader = request.body.getReader();
        while (!(await reader.read()).done) {
        }
      }
    } catch (e2) {
      console.error("Failed to drain the unused request body.", e2);
    }
  }
}, "drainBody");
var middleware_ensure_req_body_drained_default = drainBody;
init_functionsRoutes_0_09879299104094341();
function reduceError(e2) {
  return {
    name: e2?.name,
    message: e2?.message ?? String(e2),
    stack: e2?.stack,
    cause: e2?.cause === void 0 ? void 0 : reduceError(e2.cause)
  };
}
__name(reduceError, "reduceError");
__name2(reduceError, "reduceError");
var jsonError = /* @__PURE__ */ __name2(async (request, env, _ctx, middlewareCtx) => {
  try {
    return await middlewareCtx.next(request, env);
  } catch (e2) {
    const error45 = reduceError(e2);
    return Response.json(error45, {
      status: 500,
      headers: { "MF-Experimental-Error-Stack": "true" }
    });
  }
}, "jsonError");
var middleware_miniflare3_json_error_default = jsonError;
var __INTERNAL_WRANGLER_MIDDLEWARE__ = [
  middleware_ensure_req_body_drained_default,
  middleware_miniflare3_json_error_default
];
var middleware_insertion_facade_default = pages_template_worker_default;
init_functionsRoutes_0_09879299104094341();
var __facade_middleware__ = [];
function __facade_register__(...args) {
  __facade_middleware__.push(...args.flat());
}
__name(__facade_register__, "__facade_register__");
__name2(__facade_register__, "__facade_register__");
function __facade_invokeChain__(request, env, ctx, dispatch, middlewareChain) {
  const [head, ...tail] = middlewareChain;
  const middlewareCtx = {
    dispatch,
    next(newRequest, newEnv) {
      return __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);
    }
  };
  return head(request, env, ctx, middlewareCtx);
}
__name(__facade_invokeChain__, "__facade_invokeChain__");
__name2(__facade_invokeChain__, "__facade_invokeChain__");
function __facade_invoke__(request, env, ctx, dispatch, finalMiddleware) {
  return __facade_invokeChain__(request, env, ctx, dispatch, [
    ...__facade_middleware__,
    finalMiddleware
  ]);
}
__name(__facade_invoke__, "__facade_invoke__");
__name2(__facade_invoke__, "__facade_invoke__");
var __Facade_ScheduledController__ = class ___Facade_ScheduledController__ {
  static {
    __name(this, "___Facade_ScheduledController__");
  }
  constructor(scheduledTime, cron, noRetry) {
    this.scheduledTime = scheduledTime;
    this.cron = cron;
    this.#noRetry = noRetry;
  }
  static {
    __name2(this, "__Facade_ScheduledController__");
  }
  #noRetry;
  noRetry() {
    if (!(this instanceof ___Facade_ScheduledController__)) {
      throw new TypeError("Illegal invocation");
    }
    this.#noRetry();
  }
};
function wrapExportedHandler(worker) {
  if (__INTERNAL_WRANGLER_MIDDLEWARE__ === void 0 || __INTERNAL_WRANGLER_MIDDLEWARE__.length === 0) {
    return worker;
  }
  for (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {
    __facade_register__(middleware);
  }
  const fetchDispatcher = /* @__PURE__ */ __name2(function(request, env, ctx) {
    if (worker.fetch === void 0) {
      throw new Error("Handler does not export a fetch() function.");
    }
    return worker.fetch(request, env, ctx);
  }, "fetchDispatcher");
  return {
    ...worker,
    fetch(request, env, ctx) {
      const dispatcher = /* @__PURE__ */ __name2(function(type, init) {
        if (type === "scheduled" && worker.scheduled !== void 0) {
          const controller = new __Facade_ScheduledController__(
            Date.now(),
            init.cron ?? "",
            () => {
            }
          );
          return worker.scheduled(controller, env, ctx);
        }
      }, "dispatcher");
      return __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);
    }
  };
}
__name(wrapExportedHandler, "wrapExportedHandler");
__name2(wrapExportedHandler, "wrapExportedHandler");
function wrapWorkerEntrypoint(klass) {
  if (__INTERNAL_WRANGLER_MIDDLEWARE__ === void 0 || __INTERNAL_WRANGLER_MIDDLEWARE__.length === 0) {
    return klass;
  }
  for (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {
    __facade_register__(middleware);
  }
  return class extends klass {
    #fetchDispatcher = /* @__PURE__ */ __name2((request, env, ctx) => {
      this.env = env;
      this.ctx = ctx;
      if (super.fetch === void 0) {
        throw new Error("Entrypoint class does not define a fetch() function.");
      }
      return super.fetch(request);
    }, "#fetchDispatcher");
    #dispatcher = /* @__PURE__ */ __name2((type, init) => {
      if (type === "scheduled" && super.scheduled !== void 0) {
        const controller = new __Facade_ScheduledController__(
          Date.now(),
          init.cron ?? "",
          () => {
          }
        );
        return super.scheduled(controller);
      }
    }, "#dispatcher");
    fetch(request) {
      return __facade_invoke__(
        request,
        this.env,
        this.ctx,
        this.#dispatcher,
        this.#fetchDispatcher
      );
    }
  };
}
__name(wrapWorkerEntrypoint, "wrapWorkerEntrypoint");
__name2(wrapWorkerEntrypoint, "wrapWorkerEntrypoint");
var WRAPPED_ENTRY;
if (typeof middleware_insertion_facade_default === "object") {
  WRAPPED_ENTRY = wrapExportedHandler(middleware_insertion_facade_default);
} else if (typeof middleware_insertion_facade_default === "function") {
  WRAPPED_ENTRY = wrapWorkerEntrypoint(middleware_insertion_facade_default);
}
var middleware_loader_entry_default = WRAPPED_ENTRY;

// ../../AppData/Local/npm-cache/_npx/32026684e21afda6/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts
var drainBody2 = /* @__PURE__ */ __name(async (request, env, _ctx, middlewareCtx) => {
  try {
    return await middlewareCtx.next(request, env);
  } finally {
    try {
      if (request.body !== null && !request.bodyUsed) {
        const reader = request.body.getReader();
        while (!(await reader.read()).done) {
        }
      }
    } catch (e2) {
      console.error("Failed to drain the unused request body.", e2);
    }
  }
}, "drainBody");
var middleware_ensure_req_body_drained_default2 = drainBody2;

// ../../AppData/Local/npm-cache/_npx/32026684e21afda6/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts
function reduceError2(e2) {
  return {
    name: e2?.name,
    message: e2?.message ?? String(e2),
    stack: e2?.stack,
    cause: e2?.cause === void 0 ? void 0 : reduceError2(e2.cause)
  };
}
__name(reduceError2, "reduceError");
var jsonError2 = /* @__PURE__ */ __name(async (request, env, _ctx, middlewareCtx) => {
  try {
    return await middlewareCtx.next(request, env);
  } catch (e2) {
    const error45 = reduceError2(e2);
    return Response.json(error45, {
      status: 500,
      headers: { "MF-Experimental-Error-Stack": "true" }
    });
  }
}, "jsonError");
var middleware_miniflare3_json_error_default2 = jsonError2;

// .wrangler/tmp/bundle-8Y4jcA/middleware-insertion-facade.js
var __INTERNAL_WRANGLER_MIDDLEWARE__2 = [
  middleware_ensure_req_body_drained_default2,
  middleware_miniflare3_json_error_default2
];
var middleware_insertion_facade_default2 = middleware_loader_entry_default;

// ../../AppData/Local/npm-cache/_npx/32026684e21afda6/node_modules/wrangler/templates/middleware/common.ts
var __facade_middleware__2 = [];
function __facade_register__2(...args) {
  __facade_middleware__2.push(...args.flat());
}
__name(__facade_register__2, "__facade_register__");
function __facade_invokeChain__2(request, env, ctx, dispatch, middlewareChain) {
  const [head, ...tail] = middlewareChain;
  const middlewareCtx = {
    dispatch,
    next(newRequest, newEnv) {
      return __facade_invokeChain__2(newRequest, newEnv, ctx, dispatch, tail);
    }
  };
  return head(request, env, ctx, middlewareCtx);
}
__name(__facade_invokeChain__2, "__facade_invokeChain__");
function __facade_invoke__2(request, env, ctx, dispatch, finalMiddleware) {
  return __facade_invokeChain__2(request, env, ctx, dispatch, [
    ...__facade_middleware__2,
    finalMiddleware
  ]);
}
__name(__facade_invoke__2, "__facade_invoke__");

// .wrangler/tmp/bundle-8Y4jcA/middleware-loader.entry.ts
var __Facade_ScheduledController__2 = class ___Facade_ScheduledController__2 {
  constructor(scheduledTime, cron, noRetry) {
    this.scheduledTime = scheduledTime;
    this.cron = cron;
    this.#noRetry = noRetry;
  }
  static {
    __name(this, "__Facade_ScheduledController__");
  }
  #noRetry;
  noRetry() {
    if (!(this instanceof ___Facade_ScheduledController__2)) {
      throw new TypeError("Illegal invocation");
    }
    this.#noRetry();
  }
};
function wrapExportedHandler2(worker) {
  if (__INTERNAL_WRANGLER_MIDDLEWARE__2 === void 0 || __INTERNAL_WRANGLER_MIDDLEWARE__2.length === 0) {
    return worker;
  }
  for (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__2) {
    __facade_register__2(middleware);
  }
  const fetchDispatcher = /* @__PURE__ */ __name(function(request, env, ctx) {
    if (worker.fetch === void 0) {
      throw new Error("Handler does not export a fetch() function.");
    }
    return worker.fetch(request, env, ctx);
  }, "fetchDispatcher");
  return {
    ...worker,
    fetch(request, env, ctx) {
      const dispatcher = /* @__PURE__ */ __name(function(type, init) {
        if (type === "scheduled" && worker.scheduled !== void 0) {
          const controller = new __Facade_ScheduledController__2(
            Date.now(),
            init.cron ?? "",
            () => {
            }
          );
          return worker.scheduled(controller, env, ctx);
        }
      }, "dispatcher");
      return __facade_invoke__2(request, env, ctx, dispatcher, fetchDispatcher);
    }
  };
}
__name(wrapExportedHandler2, "wrapExportedHandler");
function wrapWorkerEntrypoint2(klass) {
  if (__INTERNAL_WRANGLER_MIDDLEWARE__2 === void 0 || __INTERNAL_WRANGLER_MIDDLEWARE__2.length === 0) {
    return klass;
  }
  for (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__2) {
    __facade_register__2(middleware);
  }
  return class extends klass {
    #fetchDispatcher = /* @__PURE__ */ __name((request, env, ctx) => {
      this.env = env;
      this.ctx = ctx;
      if (super.fetch === void 0) {
        throw new Error("Entrypoint class does not define a fetch() function.");
      }
      return super.fetch(request);
    }, "#fetchDispatcher");
    #dispatcher = /* @__PURE__ */ __name((type, init) => {
      if (type === "scheduled" && super.scheduled !== void 0) {
        const controller = new __Facade_ScheduledController__2(
          Date.now(),
          init.cron ?? "",
          () => {
          }
        );
        return super.scheduled(controller);
      }
    }, "#dispatcher");
    fetch(request) {
      return __facade_invoke__2(
        request,
        this.env,
        this.ctx,
        this.#dispatcher,
        this.#fetchDispatcher
      );
    }
  };
}
__name(wrapWorkerEntrypoint2, "wrapWorkerEntrypoint");
var WRAPPED_ENTRY2;
if (typeof middleware_insertion_facade_default2 === "object") {
  WRAPPED_ENTRY2 = wrapExportedHandler2(middleware_insertion_facade_default2);
} else if (typeof middleware_insertion_facade_default2 === "function") {
  WRAPPED_ENTRY2 = wrapWorkerEntrypoint2(middleware_insertion_facade_default2);
}
var middleware_loader_entry_default2 = WRAPPED_ENTRY2;
export {
  __INTERNAL_WRANGLER_MIDDLEWARE__2 as __INTERNAL_WRANGLER_MIDDLEWARE__,
  middleware_loader_entry_default2 as default
};
//# sourceMappingURL=functionsWorker-0.879664595364072.js.map
